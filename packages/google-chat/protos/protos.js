// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax/build/src/protobuf").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_apps_chat_protos || ($protobuf.roots._google_apps_chat_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.DoubleValue = (function() {
    
                /**
                 * Properties of a DoubleValue.
                 * @memberof google.protobuf
                 * @interface IDoubleValue
                 * @property {number|null} [value] DoubleValue value
                 */
    
                /**
                 * Constructs a new DoubleValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a DoubleValue.
                 * @implements IDoubleValue
                 * @constructor
                 * @param {google.protobuf.IDoubleValue=} [properties] Properties to set
                 */
                function DoubleValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DoubleValue value.
                 * @member {number} value
                 * @memberof google.protobuf.DoubleValue
                 * @instance
                 */
                DoubleValue.prototype.value = 0;
    
                /**
                 * Creates a new DoubleValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {google.protobuf.IDoubleValue=} [properties] Properties to set
                 * @returns {google.protobuf.DoubleValue} DoubleValue instance
                 */
                DoubleValue.create = function create(properties) {
                    return new DoubleValue(properties);
                };
    
                /**
                 * Encodes the specified DoubleValue message. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {google.protobuf.IDoubleValue} message DoubleValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DoubleValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified DoubleValue message, length delimited. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {google.protobuf.IDoubleValue} message DoubleValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DoubleValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DoubleValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DoubleValue} DoubleValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DoubleValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DoubleValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.value = reader.double();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DoubleValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DoubleValue} DoubleValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DoubleValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DoubleValue message.
                 * @function verify
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DoubleValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value !== "number")
                            return "value: number expected";
                    return null;
                };
    
                /**
                 * Creates a DoubleValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DoubleValue} DoubleValue
                 */
                DoubleValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DoubleValue)
                        return object;
                    var message = new $root.google.protobuf.DoubleValue();
                    if (object.value != null)
                        message.value = Number(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DoubleValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {google.protobuf.DoubleValue} message DoubleValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DoubleValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this DoubleValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DoubleValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DoubleValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DoubleValue
                 * @function getTypeUrl
                 * @memberof google.protobuf.DoubleValue
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DoubleValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DoubleValue";
                };
    
                return DoubleValue;
            })();
    
            protobuf.FloatValue = (function() {
    
                /**
                 * Properties of a FloatValue.
                 * @memberof google.protobuf
                 * @interface IFloatValue
                 * @property {number|null} [value] FloatValue value
                 */
    
                /**
                 * Constructs a new FloatValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a FloatValue.
                 * @implements IFloatValue
                 * @constructor
                 * @param {google.protobuf.IFloatValue=} [properties] Properties to set
                 */
                function FloatValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FloatValue value.
                 * @member {number} value
                 * @memberof google.protobuf.FloatValue
                 * @instance
                 */
                FloatValue.prototype.value = 0;
    
                /**
                 * Creates a new FloatValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {google.protobuf.IFloatValue=} [properties] Properties to set
                 * @returns {google.protobuf.FloatValue} FloatValue instance
                 */
                FloatValue.create = function create(properties) {
                    return new FloatValue(properties);
                };
    
                /**
                 * Encodes the specified FloatValue message. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {google.protobuf.IFloatValue} message FloatValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FloatValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified FloatValue message, length delimited. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {google.protobuf.IFloatValue} message FloatValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FloatValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FloatValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FloatValue} FloatValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FloatValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FloatValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.value = reader.float();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FloatValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FloatValue} FloatValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FloatValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FloatValue message.
                 * @function verify
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FloatValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value !== "number")
                            return "value: number expected";
                    return null;
                };
    
                /**
                 * Creates a FloatValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FloatValue} FloatValue
                 */
                FloatValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FloatValue)
                        return object;
                    var message = new $root.google.protobuf.FloatValue();
                    if (object.value != null)
                        message.value = Number(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FloatValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {google.protobuf.FloatValue} message FloatValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FloatValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this FloatValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FloatValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FloatValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FloatValue
                 * @function getTypeUrl
                 * @memberof google.protobuf.FloatValue
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FloatValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FloatValue";
                };
    
                return FloatValue;
            })();
    
            protobuf.Int64Value = (function() {
    
                /**
                 * Properties of an Int64Value.
                 * @memberof google.protobuf
                 * @interface IInt64Value
                 * @property {number|Long|null} [value] Int64Value value
                 */
    
                /**
                 * Constructs a new Int64Value.
                 * @memberof google.protobuf
                 * @classdesc Represents an Int64Value.
                 * @implements IInt64Value
                 * @constructor
                 * @param {google.protobuf.IInt64Value=} [properties] Properties to set
                 */
                function Int64Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Int64Value value.
                 * @member {number|Long} value
                 * @memberof google.protobuf.Int64Value
                 * @instance
                 */
                Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Creates a new Int64Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {google.protobuf.IInt64Value=} [properties] Properties to set
                 * @returns {google.protobuf.Int64Value} Int64Value instance
                 */
                Int64Value.create = function create(properties) {
                    return new Int64Value(properties);
                };
    
                /**
                 * Encodes the specified Int64Value message. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {google.protobuf.IInt64Value} message Int64Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int64Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Int64Value message, length delimited. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {google.protobuf.IInt64Value} message Int64Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int64Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Int64Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Int64Value} Int64Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int64Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Int64Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.value = reader.int64();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Int64Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Int64Value} Int64Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int64Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Int64Value message.
                 * @function verify
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Int64Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                            return "value: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates an Int64Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Int64Value} Int64Value
                 */
                Int64Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Int64Value)
                        return object;
                    var message = new $root.google.protobuf.Int64Value();
                    if (object.value != null)
                        if ($util.Long)
                            (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                        else if (typeof object.value === "string")
                            message.value = parseInt(object.value, 10);
                        else if (typeof object.value === "number")
                            message.value = object.value;
                        else if (typeof object.value === "object")
                            message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from an Int64Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {google.protobuf.Int64Value} message Int64Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Int64Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.value = options.longs === String ? "0" : 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value === "number")
                            object.value = options.longs === String ? String(message.value) : message.value;
                        else
                            object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
                    return object;
                };
    
                /**
                 * Converts this Int64Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Int64Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Int64Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Int64Value
                 * @function getTypeUrl
                 * @memberof google.protobuf.Int64Value
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Int64Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Int64Value";
                };
    
                return Int64Value;
            })();
    
            protobuf.UInt64Value = (function() {
    
                /**
                 * Properties of a UInt64Value.
                 * @memberof google.protobuf
                 * @interface IUInt64Value
                 * @property {number|Long|null} [value] UInt64Value value
                 */
    
                /**
                 * Constructs a new UInt64Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a UInt64Value.
                 * @implements IUInt64Value
                 * @constructor
                 * @param {google.protobuf.IUInt64Value=} [properties] Properties to set
                 */
                function UInt64Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UInt64Value value.
                 * @member {number|Long} value
                 * @memberof google.protobuf.UInt64Value
                 * @instance
                 */
                UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Creates a new UInt64Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {google.protobuf.IUInt64Value=} [properties] Properties to set
                 * @returns {google.protobuf.UInt64Value} UInt64Value instance
                 */
                UInt64Value.create = function create(properties) {
                    return new UInt64Value(properties);
                };
    
                /**
                 * Encodes the specified UInt64Value message. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {google.protobuf.IUInt64Value} message UInt64Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UInt64Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UInt64Value message, length delimited. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {google.protobuf.IUInt64Value} message UInt64Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UInt64Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a UInt64Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UInt64Value} UInt64Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UInt64Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UInt64Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.value = reader.uint64();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a UInt64Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UInt64Value} UInt64Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UInt64Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a UInt64Value message.
                 * @function verify
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UInt64Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                            return "value: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a UInt64Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UInt64Value} UInt64Value
                 */
                UInt64Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UInt64Value)
                        return object;
                    var message = new $root.google.protobuf.UInt64Value();
                    if (object.value != null)
                        if ($util.Long)
                            (message.value = $util.Long.fromValue(object.value)).unsigned = true;
                        else if (typeof object.value === "string")
                            message.value = parseInt(object.value, 10);
                        else if (typeof object.value === "number")
                            message.value = object.value;
                        else if (typeof object.value === "object")
                            message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a UInt64Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {google.protobuf.UInt64Value} message UInt64Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UInt64Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.value = options.longs === String ? "0" : 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value === "number")
                            object.value = options.longs === String ? String(message.value) : message.value;
                        else
                            object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber(true) : message.value;
                    return object;
                };
    
                /**
                 * Converts this UInt64Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UInt64Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UInt64Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UInt64Value
                 * @function getTypeUrl
                 * @memberof google.protobuf.UInt64Value
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UInt64Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UInt64Value";
                };
    
                return UInt64Value;
            })();
    
            protobuf.Int32Value = (function() {
    
                /**
                 * Properties of an Int32Value.
                 * @memberof google.protobuf
                 * @interface IInt32Value
                 * @property {number|null} [value] Int32Value value
                 */
    
                /**
                 * Constructs a new Int32Value.
                 * @memberof google.protobuf
                 * @classdesc Represents an Int32Value.
                 * @implements IInt32Value
                 * @constructor
                 * @param {google.protobuf.IInt32Value=} [properties] Properties to set
                 */
                function Int32Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Int32Value value.
                 * @member {number} value
                 * @memberof google.protobuf.Int32Value
                 * @instance
                 */
                Int32Value.prototype.value = 0;
    
                /**
                 * Creates a new Int32Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {google.protobuf.IInt32Value=} [properties] Properties to set
                 * @returns {google.protobuf.Int32Value} Int32Value instance
                 */
                Int32Value.create = function create(properties) {
                    return new Int32Value(properties);
                };
    
                /**
                 * Encodes the specified Int32Value message. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {google.protobuf.IInt32Value} message Int32Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int32Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Int32Value message, length delimited. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {google.protobuf.IInt32Value} message Int32Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Int32Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Int32Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Int32Value} Int32Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int32Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Int32Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.value = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Int32Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Int32Value} Int32Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Int32Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Int32Value message.
                 * @function verify
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Int32Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isInteger(message.value))
                            return "value: integer expected";
                    return null;
                };
    
                /**
                 * Creates an Int32Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Int32Value} Int32Value
                 */
                Int32Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Int32Value)
                        return object;
                    var message = new $root.google.protobuf.Int32Value();
                    if (object.value != null)
                        message.value = object.value | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Int32Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {google.protobuf.Int32Value} message Int32Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Int32Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this Int32Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Int32Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Int32Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Int32Value
                 * @function getTypeUrl
                 * @memberof google.protobuf.Int32Value
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Int32Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Int32Value";
                };
    
                return Int32Value;
            })();
    
            protobuf.UInt32Value = (function() {
    
                /**
                 * Properties of a UInt32Value.
                 * @memberof google.protobuf
                 * @interface IUInt32Value
                 * @property {number|null} [value] UInt32Value value
                 */
    
                /**
                 * Constructs a new UInt32Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a UInt32Value.
                 * @implements IUInt32Value
                 * @constructor
                 * @param {google.protobuf.IUInt32Value=} [properties] Properties to set
                 */
                function UInt32Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UInt32Value value.
                 * @member {number} value
                 * @memberof google.protobuf.UInt32Value
                 * @instance
                 */
                UInt32Value.prototype.value = 0;
    
                /**
                 * Creates a new UInt32Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {google.protobuf.IUInt32Value=} [properties] Properties to set
                 * @returns {google.protobuf.UInt32Value} UInt32Value instance
                 */
                UInt32Value.create = function create(properties) {
                    return new UInt32Value(properties);
                };
    
                /**
                 * Encodes the specified UInt32Value message. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {google.protobuf.IUInt32Value} message UInt32Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UInt32Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UInt32Value message, length delimited. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {google.protobuf.IUInt32Value} message UInt32Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UInt32Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a UInt32Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UInt32Value} UInt32Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UInt32Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UInt32Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.value = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a UInt32Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UInt32Value} UInt32Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UInt32Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a UInt32Value message.
                 * @function verify
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UInt32Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isInteger(message.value))
                            return "value: integer expected";
                    return null;
                };
    
                /**
                 * Creates a UInt32Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UInt32Value} UInt32Value
                 */
                UInt32Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UInt32Value)
                        return object;
                    var message = new $root.google.protobuf.UInt32Value();
                    if (object.value != null)
                        message.value = object.value >>> 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a UInt32Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {google.protobuf.UInt32Value} message UInt32Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UInt32Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = 0;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this UInt32Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UInt32Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UInt32Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UInt32Value
                 * @function getTypeUrl
                 * @memberof google.protobuf.UInt32Value
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UInt32Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UInt32Value";
                };
    
                return UInt32Value;
            })();
    
            protobuf.BoolValue = (function() {
    
                /**
                 * Properties of a BoolValue.
                 * @memberof google.protobuf
                 * @interface IBoolValue
                 * @property {boolean|null} [value] BoolValue value
                 */
    
                /**
                 * Constructs a new BoolValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a BoolValue.
                 * @implements IBoolValue
                 * @constructor
                 * @param {google.protobuf.IBoolValue=} [properties] Properties to set
                 */
                function BoolValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BoolValue value.
                 * @member {boolean} value
                 * @memberof google.protobuf.BoolValue
                 * @instance
                 */
                BoolValue.prototype.value = false;
    
                /**
                 * Creates a new BoolValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {google.protobuf.IBoolValue=} [properties] Properties to set
                 * @returns {google.protobuf.BoolValue} BoolValue instance
                 */
                BoolValue.create = function create(properties) {
                    return new BoolValue(properties);
                };
    
                /**
                 * Encodes the specified BoolValue message. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {google.protobuf.IBoolValue} message BoolValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BoolValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified BoolValue message, length delimited. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {google.protobuf.IBoolValue} message BoolValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BoolValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BoolValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.BoolValue} BoolValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BoolValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.BoolValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.value = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BoolValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.BoolValue} BoolValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BoolValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BoolValue message.
                 * @function verify
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BoolValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (typeof message.value !== "boolean")
                            return "value: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a BoolValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.BoolValue} BoolValue
                 */
                BoolValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.BoolValue)
                        return object;
                    var message = new $root.google.protobuf.BoolValue();
                    if (object.value != null)
                        message.value = Boolean(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a BoolValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {google.protobuf.BoolValue} message BoolValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BoolValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = false;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this BoolValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.BoolValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BoolValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BoolValue
                 * @function getTypeUrl
                 * @memberof google.protobuf.BoolValue
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BoolValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.BoolValue";
                };
    
                return BoolValue;
            })();
    
            protobuf.StringValue = (function() {
    
                /**
                 * Properties of a StringValue.
                 * @memberof google.protobuf
                 * @interface IStringValue
                 * @property {string|null} [value] StringValue value
                 */
    
                /**
                 * Constructs a new StringValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a StringValue.
                 * @implements IStringValue
                 * @constructor
                 * @param {google.protobuf.IStringValue=} [properties] Properties to set
                 */
                function StringValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * StringValue value.
                 * @member {string} value
                 * @memberof google.protobuf.StringValue
                 * @instance
                 */
                StringValue.prototype.value = "";
    
                /**
                 * Creates a new StringValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {google.protobuf.IStringValue=} [properties] Properties to set
                 * @returns {google.protobuf.StringValue} StringValue instance
                 */
                StringValue.create = function create(properties) {
                    return new StringValue(properties);
                };
    
                /**
                 * Encodes the specified StringValue message. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {google.protobuf.IStringValue} message StringValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StringValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified StringValue message, length delimited. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {google.protobuf.IStringValue} message StringValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StringValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a StringValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.StringValue} StringValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StringValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.StringValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.value = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a StringValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.StringValue} StringValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StringValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a StringValue message.
                 * @function verify
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StringValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isString(message.value))
                            return "value: string expected";
                    return null;
                };
    
                /**
                 * Creates a StringValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.StringValue} StringValue
                 */
                StringValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.StringValue)
                        return object;
                    var message = new $root.google.protobuf.StringValue();
                    if (object.value != null)
                        message.value = String(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a StringValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {google.protobuf.StringValue} message StringValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StringValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.value = "";
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this StringValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.StringValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StringValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for StringValue
                 * @function getTypeUrl
                 * @memberof google.protobuf.StringValue
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                StringValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.StringValue";
                };
    
                return StringValue;
            })();
    
            protobuf.BytesValue = (function() {
    
                /**
                 * Properties of a BytesValue.
                 * @memberof google.protobuf
                 * @interface IBytesValue
                 * @property {Uint8Array|null} [value] BytesValue value
                 */
    
                /**
                 * Constructs a new BytesValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a BytesValue.
                 * @implements IBytesValue
                 * @constructor
                 * @param {google.protobuf.IBytesValue=} [properties] Properties to set
                 */
                function BytesValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BytesValue value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.BytesValue
                 * @instance
                 */
                BytesValue.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new BytesValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {google.protobuf.IBytesValue=} [properties] Properties to set
                 * @returns {google.protobuf.BytesValue} BytesValue instance
                 */
                BytesValue.create = function create(properties) {
                    return new BytesValue(properties);
                };
    
                /**
                 * Encodes the specified BytesValue message. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {google.protobuf.IBytesValue} message BytesValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BytesValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified BytesValue message, length delimited. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {google.protobuf.IBytesValue} message BytesValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BytesValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BytesValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.BytesValue} BytesValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BytesValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.BytesValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.value = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BytesValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.BytesValue} BytesValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BytesValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BytesValue message.
                 * @function verify
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BytesValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a BytesValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.BytesValue} BytesValue
                 */
                BytesValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.BytesValue)
                        return object;
                    var message = new $root.google.protobuf.BytesValue();
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length >= 0)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from a BytesValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {google.protobuf.BytesValue} message BytesValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BytesValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this BytesValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.BytesValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BytesValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for BytesValue
                 * @function getTypeUrl
                 * @memberof google.protobuf.BytesValue
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                BytesValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.BytesValue";
                };
    
                return BytesValue;
            })();
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.file && message.file.length))
                                    message.file = [];
                                message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
                };
    
                return FileDescriptorSet;
            })();
    
            /**
             * Edition enum.
             * @name google.protobuf.Edition
             * @enum {number}
             * @property {number} EDITION_UNKNOWN=0 EDITION_UNKNOWN value
             * @property {number} EDITION_PROTO2=998 EDITION_PROTO2 value
             * @property {number} EDITION_PROTO3=999 EDITION_PROTO3 value
             * @property {number} EDITION_2023=1000 EDITION_2023 value
             * @property {number} EDITION_2024=1001 EDITION_2024 value
             * @property {number} EDITION_1_TEST_ONLY=1 EDITION_1_TEST_ONLY value
             * @property {number} EDITION_2_TEST_ONLY=2 EDITION_2_TEST_ONLY value
             * @property {number} EDITION_99997_TEST_ONLY=99997 EDITION_99997_TEST_ONLY value
             * @property {number} EDITION_99998_TEST_ONLY=99998 EDITION_99998_TEST_ONLY value
             * @property {number} EDITION_99999_TEST_ONLY=99999 EDITION_99999_TEST_ONLY value
             * @property {number} EDITION_MAX=2147483647 EDITION_MAX value
             */
            protobuf.Edition = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "EDITION_UNKNOWN"] = 0;
                values[valuesById[998] = "EDITION_PROTO2"] = 998;
                values[valuesById[999] = "EDITION_PROTO3"] = 999;
                values[valuesById[1000] = "EDITION_2023"] = 1000;
                values[valuesById[1001] = "EDITION_2024"] = 1001;
                values[valuesById[1] = "EDITION_1_TEST_ONLY"] = 1;
                values[valuesById[2] = "EDITION_2_TEST_ONLY"] = 2;
                values[valuesById[99997] = "EDITION_99997_TEST_ONLY"] = 99997;
                values[valuesById[99998] = "EDITION_99998_TEST_ONLY"] = 99998;
                values[valuesById[99999] = "EDITION_99999_TEST_ONLY"] = 99999;
                values[valuesById[2147483647] = "EDITION_MAX"] = 2147483647;
                return values;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 * @property {google.protobuf.Edition|null} [edition] FileDescriptorProto edition
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * FileDescriptorProto edition.
                 * @member {google.protobuf.Edition} edition
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.edition = 0;
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 14, wireType 0 =*/112).int32(message.edition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.dependency && message.dependency.length))
                                    message.dependency = [];
                                message.dependency.push(reader.string());
                                break;
                            }
                        case 10: {
                                if (!(message.publicDependency && message.publicDependency.length))
                                    message.publicDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.publicDependency.push(reader.int32());
                                } else
                                    message.publicDependency.push(reader.int32());
                                break;
                            }
                        case 11: {
                                if (!(message.weakDependency && message.weakDependency.length))
                                    message.weakDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.weakDependency.push(reader.int32());
                                } else
                                    message.weakDependency.push(reader.int32());
                                break;
                            }
                        case 4: {
                                if (!(message.messageType && message.messageType.length))
                                    message.messageType = [];
                                message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.syntax = reader.string();
                                break;
                            }
                        case 14: {
                                message.edition = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        switch (message.edition) {
                        default:
                            return "edition: enum value expected";
                        case 0:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    switch (object.edition) {
                    default:
                        if (typeof object.edition === "number") {
                            message.edition = object.edition;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.edition = 0;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.edition = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.edition = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.edition = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.edition = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.edition = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.edition = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.edition = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.edition = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.edition = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.edition = 2147483647;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                        object.edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = options.enums === String ? $root.google.protobuf.Edition[message.edition] === undefined ? message.edition : $root.google.protobuf.Edition[message.edition] : message.edition;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.field && message.field.length))
                                    message.field = [];
                                message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.nestedType && message.nestedType.length))
                                    message.nestedType = [];
                                message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.extensionRange && message.extensionRange.length))
                                    message.extensionRange = [];
                                message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                if (!(message.oneofDecl && message.oneofDecl.length))
                                    message.oneofDecl = [];
                                message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 10: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto";
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ExtensionRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 * @property {Array.<google.protobuf.ExtensionRangeOptions.IDeclaration>|null} [declaration] ExtensionRangeOptions declaration
                 * @property {google.protobuf.IFeatureSet|null} [features] ExtensionRangeOptions features
                 * @property {google.protobuf.ExtensionRangeOptions.VerificationState|null} [verification] ExtensionRangeOptions verification
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    this.declaration = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ExtensionRangeOptions declaration.
                 * @member {Array.<google.protobuf.ExtensionRangeOptions.IDeclaration>} declaration
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.declaration = $util.emptyArray;
    
                /**
                 * ExtensionRangeOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.features = null;
    
                /**
                 * ExtensionRangeOptions verification.
                 * @member {google.protobuf.ExtensionRangeOptions.VerificationState} verification
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.verification = 1;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.declaration != null && message.declaration.length)
                        for (var i = 0; i < message.declaration.length; ++i)
                            $root.google.protobuf.ExtensionRangeOptions.Declaration.encode(message.declaration[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.verification != null && Object.hasOwnProperty.call(message, "verification"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.verification);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                if (!(message.declaration && message.declaration.length))
                                    message.declaration = [];
                                message.declaration.push($root.google.protobuf.ExtensionRangeOptions.Declaration.decode(reader, reader.uint32()));
                                break;
                            }
                        case 50: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.verification = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message.declaration != null && message.hasOwnProperty("declaration")) {
                        if (!Array.isArray(message.declaration))
                            return "declaration: array expected";
                        for (var i = 0; i < message.declaration.length; ++i) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.Declaration.verify(message.declaration[i]);
                            if (error)
                                return "declaration." + error;
                        }
                    }
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.verification != null && message.hasOwnProperty("verification"))
                        switch (message.verification) {
                        default:
                            return "verification: enum value expected";
                        case 0:
                        case 1:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object.declaration) {
                        if (!Array.isArray(object.declaration))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.declaration: array expected");
                        message.declaration = [];
                        for (var i = 0; i < object.declaration.length; ++i) {
                            if (typeof object.declaration[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.declaration: object expected");
                            message.declaration[i] = $root.google.protobuf.ExtensionRangeOptions.Declaration.fromObject(object.declaration[i]);
                        }
                    }
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    switch (object.verification) {
                    case "DECLARATION":
                    case 0:
                        message.verification = 0;
                        break;
                    default:
                        if (typeof object.verification === "number") {
                            message.verification = object.verification;
                            break;
                        }
                        break;
                    case "UNVERIFIED":
                    case 1:
                        message.verification = 1;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.declaration = [];
                        object.uninterpretedOption = [];
                    }
                    if (options.defaults) {
                        object.verification = options.enums === String ? "UNVERIFIED" : 1;
                        object.features = null;
                    }
                    if (message.declaration && message.declaration.length) {
                        object.declaration = [];
                        for (var j = 0; j < message.declaration.length; ++j)
                            object.declaration[j] = $root.google.protobuf.ExtensionRangeOptions.Declaration.toObject(message.declaration[j], options);
                    }
                    if (message.verification != null && message.hasOwnProperty("verification"))
                        object.verification = options.enums === String ? $root.google.protobuf.ExtensionRangeOptions.VerificationState[message.verification] === undefined ? message.verification : $root.google.protobuf.ExtensionRangeOptions.VerificationState[message.verification] : message.verification;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ExtensionRangeOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
                };
    
                ExtensionRangeOptions.Declaration = (function() {
    
                    /**
                     * Properties of a Declaration.
                     * @memberof google.protobuf.ExtensionRangeOptions
                     * @interface IDeclaration
                     * @property {number|null} [number] Declaration number
                     * @property {string|null} [fullName] Declaration fullName
                     * @property {string|null} [type] Declaration type
                     * @property {boolean|null} [reserved] Declaration reserved
                     * @property {boolean|null} [repeated] Declaration repeated
                     */
    
                    /**
                     * Constructs a new Declaration.
                     * @memberof google.protobuf.ExtensionRangeOptions
                     * @classdesc Represents a Declaration.
                     * @implements IDeclaration
                     * @constructor
                     * @param {google.protobuf.ExtensionRangeOptions.IDeclaration=} [properties] Properties to set
                     */
                    function Declaration(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Declaration number.
                     * @member {number} number
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     */
                    Declaration.prototype.number = 0;
    
                    /**
                     * Declaration fullName.
                     * @member {string} fullName
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     */
                    Declaration.prototype.fullName = "";
    
                    /**
                     * Declaration type.
                     * @member {string} type
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     */
                    Declaration.prototype.type = "";
    
                    /**
                     * Declaration reserved.
                     * @member {boolean} reserved
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     */
                    Declaration.prototype.reserved = false;
    
                    /**
                     * Declaration repeated.
                     * @member {boolean} repeated
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     */
                    Declaration.prototype.repeated = false;
    
                    /**
                     * Creates a new Declaration instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {google.protobuf.ExtensionRangeOptions.IDeclaration=} [properties] Properties to set
                     * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration instance
                     */
                    Declaration.create = function create(properties) {
                        return new Declaration(properties);
                    };
    
                    /**
                     * Encodes the specified Declaration message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.Declaration.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {google.protobuf.ExtensionRangeOptions.IDeclaration} message Declaration message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Declaration.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.number);
                        if (message.fullName != null && Object.hasOwnProperty.call(message, "fullName"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.fullName);
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
                        if (message.reserved != null && Object.hasOwnProperty.call(message, "reserved"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.reserved);
                        if (message.repeated != null && Object.hasOwnProperty.call(message, "repeated"))
                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.repeated);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Declaration message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.Declaration.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {google.protobuf.ExtensionRangeOptions.IDeclaration} message Declaration message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Declaration.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Declaration message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Declaration.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions.Declaration();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.number = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.fullName = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.type = reader.string();
                                    break;
                                }
                            case 5: {
                                    message.reserved = reader.bool();
                                    break;
                                }
                            case 6: {
                                    message.repeated = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Declaration message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Declaration.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Declaration message.
                     * @function verify
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Declaration.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.number != null && message.hasOwnProperty("number"))
                            if (!$util.isInteger(message.number))
                                return "number: integer expected";
                        if (message.fullName != null && message.hasOwnProperty("fullName"))
                            if (!$util.isString(message.fullName))
                                return "fullName: string expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            if (!$util.isString(message.type))
                                return "type: string expected";
                        if (message.reserved != null && message.hasOwnProperty("reserved"))
                            if (typeof message.reserved !== "boolean")
                                return "reserved: boolean expected";
                        if (message.repeated != null && message.hasOwnProperty("repeated"))
                            if (typeof message.repeated !== "boolean")
                                return "repeated: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a Declaration message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration
                     */
                    Declaration.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.ExtensionRangeOptions.Declaration)
                            return object;
                        var message = new $root.google.protobuf.ExtensionRangeOptions.Declaration();
                        if (object.number != null)
                            message.number = object.number | 0;
                        if (object.fullName != null)
                            message.fullName = String(object.fullName);
                        if (object.type != null)
                            message.type = String(object.type);
                        if (object.reserved != null)
                            message.reserved = Boolean(object.reserved);
                        if (object.repeated != null)
                            message.repeated = Boolean(object.repeated);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Declaration message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {google.protobuf.ExtensionRangeOptions.Declaration} message Declaration
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Declaration.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.number = 0;
                            object.fullName = "";
                            object.type = "";
                            object.reserved = false;
                            object.repeated = false;
                        }
                        if (message.number != null && message.hasOwnProperty("number"))
                            object.number = message.number;
                        if (message.fullName != null && message.hasOwnProperty("fullName"))
                            object.fullName = message.fullName;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = message.type;
                        if (message.reserved != null && message.hasOwnProperty("reserved"))
                            object.reserved = message.reserved;
                        if (message.repeated != null && message.hasOwnProperty("repeated"))
                            object.repeated = message.repeated;
                        return object;
                    };
    
                    /**
                     * Converts this Declaration to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Declaration.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Declaration
                     * @function getTypeUrl
                     * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Declaration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions.Declaration";
                    };
    
                    return Declaration;
                })();
    
                /**
                 * VerificationState enum.
                 * @name google.protobuf.ExtensionRangeOptions.VerificationState
                 * @enum {number}
                 * @property {number} DECLARATION=0 DECLARATION value
                 * @property {number} UNVERIFIED=1 UNVERIFIED value
                 */
                ExtensionRangeOptions.VerificationState = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DECLARATION"] = 0;
                    values[valuesById[1] = "UNVERIFIED"] = 1;
                    return values;
                })();
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.number = reader.int32();
                                break;
                            }
                        case 4: {
                                message.label = reader.int32();
                                break;
                            }
                        case 5: {
                                message.type = reader.int32();
                                break;
                            }
                        case 6: {
                                message.typeName = reader.string();
                                break;
                            }
                        case 2: {
                                message.extendee = reader.string();
                                break;
                            }
                        case 7: {
                                message.defaultValue = reader.string();
                                break;
                            }
                        case 9: {
                                message.oneofIndex = reader.int32();
                                break;
                            }
                        case 10: {
                                message.jsonName = reader.string();
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.proto3Optional = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 3:
                        case 2:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    default:
                        if (typeof object.label === "number") {
                            message.label = object.label;
                            break;
                        }
                        break;
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.value && message.value.length))
                                    message.value = [];
                                message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EnumReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.method && message.method.length))
                                    message.method = [];
                                message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.inputType = reader.string();
                                break;
                            }
                        case 3: {
                                message.outputType = reader.string();
                                break;
                            }
                        case 4: {
                                message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.clientStreaming = reader.bool();
                                break;
                            }
                        case 6: {
                                message.serverStreaming = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {google.protobuf.IFeatureSet|null} [features] FileOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {Array.<google.api.IResourceDescriptor>|null} [".google.api.resourceDefinition"] FileOptions .google.api.resourceDefinition
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.resourceDefinition"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.features = null;
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .google.api.resourceDefinition.
                 * @member {Array.<google.api.IResourceDescriptor>} .google.api.resourceDefinition
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                            $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.javaPackage = reader.string();
                                break;
                            }
                        case 8: {
                                message.javaOuterClassname = reader.string();
                                break;
                            }
                        case 10: {
                                message.javaMultipleFiles = reader.bool();
                                break;
                            }
                        case 20: {
                                message.javaGenerateEqualsAndHash = reader.bool();
                                break;
                            }
                        case 27: {
                                message.javaStringCheckUtf8 = reader.bool();
                                break;
                            }
                        case 9: {
                                message.optimizeFor = reader.int32();
                                break;
                            }
                        case 11: {
                                message.goPackage = reader.string();
                                break;
                            }
                        case 16: {
                                message.ccGenericServices = reader.bool();
                                break;
                            }
                        case 17: {
                                message.javaGenericServices = reader.bool();
                                break;
                            }
                        case 18: {
                                message.pyGenericServices = reader.bool();
                                break;
                            }
                        case 23: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 31: {
                                message.ccEnableArenas = reader.bool();
                                break;
                            }
                        case 36: {
                                message.objcClassPrefix = reader.string();
                                break;
                            }
                        case 37: {
                                message.csharpNamespace = reader.string();
                                break;
                            }
                        case 39: {
                                message.swiftPrefix = reader.string();
                                break;
                            }
                        case 40: {
                                message.phpClassPrefix = reader.string();
                                break;
                            }
                        case 41: {
                                message.phpNamespace = reader.string();
                                break;
                            }
                        case 44: {
                                message.phpMetadataNamespace = reader.string();
                                break;
                            }
                        case 45: {
                                message.rubyPackage = reader.string();
                                break;
                            }
                        case 50: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1053: {
                                if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                                    message[".google.api.resourceDefinition"] = [];
                                message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                        if (!Array.isArray(message[".google.api.resourceDefinition"]))
                            return ".google.api.resourceDefinition: array expected";
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                            var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                            if (error)
                                return ".google.api.resourceDefinition." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    default:
                        if (typeof object.optimizeFor === "number") {
                            message.optimizeFor = object.optimizeFor;
                            break;
                        }
                        break;
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.FileOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceDefinition"]) {
                        if (!Array.isArray(object[".google.api.resourceDefinition"]))
                            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                        message[".google.api.resourceDefinition"] = [];
                        for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                            if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                            message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.resourceDefinition"] = [];
                    }
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                        object.features = null;
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                        object[".google.api.resourceDefinition"] = [];
                        for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                            object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileOptions";
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] MessageOptions deprecatedLegacyJsonFieldConflicts
                 * @property {google.protobuf.IFeatureSet|null} [features] MessageOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {google.api.IResourceDescriptor|null} [".google.api.resource"] MessageOptions .google.api.resource
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * MessageOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.features = null;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .google.api.resource.
                 * @member {google.api.IResourceDescriptor|null|undefined} .google.api.resource
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".google.api.resource"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                        $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageSetWireFormat = reader.bool();
                                break;
                            }
                        case 2: {
                                message.noStandardDescriptorAccessor = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 7: {
                                message.mapEntry = reader.bool();
                                break;
                            }
                        case 11: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 12: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1053: {
                                message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                        var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                        if (error)
                            return ".google.api.resource." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resource"] != null) {
                        if (typeof object[".google.api.resource"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                        message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                        object.features = null;
                        object[".google.api.resource"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MessageOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MessageOptions";
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {boolean|null} [debugRedact] FieldOptions debugRedact
                 * @property {google.protobuf.FieldOptions.OptionRetention|null} [retention] FieldOptions retention
                 * @property {Array.<google.protobuf.FieldOptions.OptionTargetType>|null} [targets] FieldOptions targets
                 * @property {Array.<google.protobuf.FieldOptions.IEditionDefault>|null} [editionDefaults] FieldOptions editionDefaults
                 * @property {google.protobuf.IFeatureSet|null} [features] FieldOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {google.api.IResourceReference|null} [".google.api.resourceReference"] FieldOptions .google.api.resourceReference
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.targets = [];
                    this.editionDefaults = [];
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions debugRedact.
                 * @member {boolean} debugRedact
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.debugRedact = false;
    
                /**
                 * FieldOptions retention.
                 * @member {google.protobuf.FieldOptions.OptionRetention} retention
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.retention = 0;
    
                /**
                 * FieldOptions targets.
                 * @member {Array.<google.protobuf.FieldOptions.OptionTargetType>} targets
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.targets = $util.emptyArray;
    
                /**
                 * FieldOptions editionDefaults.
                 * @member {Array.<google.protobuf.FieldOptions.IEditionDefault>} editionDefaults
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.editionDefaults = $util.emptyArray;
    
                /**
                 * FieldOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.features = null;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.resourceReference.
                 * @member {google.api.IResourceReference|null|undefined} .google.api.resourceReference
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.resourceReference"] = null;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.debugRedact != null && Object.hasOwnProperty.call(message, "debugRedact"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.debugRedact);
                    if (message.retention != null && Object.hasOwnProperty.call(message, "retention"))
                        writer.uint32(/* id 17, wireType 0 =*/136).int32(message.retention);
                    if (message.targets != null && message.targets.length)
                        for (var i = 0; i < message.targets.length; ++i)
                            writer.uint32(/* id 19, wireType 0 =*/152).int32(message.targets[i]);
                    if (message.editionDefaults != null && message.editionDefaults.length)
                        for (var i = 0; i < message.editionDefaults.length; ++i)
                            $root.google.protobuf.FieldOptions.EditionDefault.encode(message.editionDefaults[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                        $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(/* id 1055, wireType 2 =*/8442).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ctype = reader.int32();
                                break;
                            }
                        case 2: {
                                message.packed = reader.bool();
                                break;
                            }
                        case 6: {
                                message.jstype = reader.int32();
                                break;
                            }
                        case 5: {
                                message.lazy = reader.bool();
                                break;
                            }
                        case 15: {
                                message.unverifiedLazy = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 10: {
                                message.weak = reader.bool();
                                break;
                            }
                        case 16: {
                                message.debugRedact = reader.bool();
                                break;
                            }
                        case 17: {
                                message.retention = reader.int32();
                                break;
                            }
                        case 19: {
                                if (!(message.targets && message.targets.length))
                                    message.targets = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.targets.push(reader.int32());
                                } else
                                    message.targets.push(reader.int32());
                                break;
                            }
                        case 20: {
                                if (!(message.editionDefaults && message.editionDefaults.length))
                                    message.editionDefaults = [];
                                message.editionDefaults.push($root.google.protobuf.FieldOptions.EditionDefault.decode(reader, reader.uint32()));
                                break;
                            }
                        case 21: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1055: {
                                message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                                break;
                            }
                        case 1052: {
                                if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                    message[".google.api.fieldBehavior"] = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message[".google.api.fieldBehavior"].push(reader.int32());
                                } else
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        if (typeof message.debugRedact !== "boolean")
                            return "debugRedact: boolean expected";
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        switch (message.retention) {
                        default:
                            return "retention: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.targets != null && message.hasOwnProperty("targets")) {
                        if (!Array.isArray(message.targets))
                            return "targets: array expected";
                        for (var i = 0; i < message.targets.length; ++i)
                            switch (message.targets[i]) {
                            default:
                                return "targets: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                    }
                    if (message.editionDefaults != null && message.hasOwnProperty("editionDefaults")) {
                        if (!Array.isArray(message.editionDefaults))
                            return "editionDefaults: array expected";
                        for (var i = 0; i < message.editionDefaults.length; ++i) {
                            var error = $root.google.protobuf.FieldOptions.EditionDefault.verify(message.editionDefaults[i]);
                            if (error)
                                return "editionDefaults." + error;
                        }
                    }
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                        var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                        if (error)
                            return ".google.api.resourceReference." + error;
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    default:
                        if (typeof object.ctype === "number") {
                            message.ctype = object.ctype;
                            break;
                        }
                        break;
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    default:
                        if (typeof object.jstype === "number") {
                            message.jstype = object.jstype;
                            break;
                        }
                        break;
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.debugRedact != null)
                        message.debugRedact = Boolean(object.debugRedact);
                    switch (object.retention) {
                    default:
                        if (typeof object.retention === "number") {
                            message.retention = object.retention;
                            break;
                        }
                        break;
                    case "RETENTION_UNKNOWN":
                    case 0:
                        message.retention = 0;
                        break;
                    case "RETENTION_RUNTIME":
                    case 1:
                        message.retention = 1;
                        break;
                    case "RETENTION_SOURCE":
                    case 2:
                        message.retention = 2;
                        break;
                    }
                    if (object.targets) {
                        if (!Array.isArray(object.targets))
                            throw TypeError(".google.protobuf.FieldOptions.targets: array expected");
                        message.targets = [];
                        for (var i = 0; i < object.targets.length; ++i)
                            switch (object.targets[i]) {
                            default:
                                if (typeof object.targets[i] === "number") {
                                    message.targets[i] = object.targets[i];
                                    break;
                                }
                            case "TARGET_TYPE_UNKNOWN":
                            case 0:
                                message.targets[i] = 0;
                                break;
                            case "TARGET_TYPE_FILE":
                            case 1:
                                message.targets[i] = 1;
                                break;
                            case "TARGET_TYPE_EXTENSION_RANGE":
                            case 2:
                                message.targets[i] = 2;
                                break;
                            case "TARGET_TYPE_MESSAGE":
                            case 3:
                                message.targets[i] = 3;
                                break;
                            case "TARGET_TYPE_FIELD":
                            case 4:
                                message.targets[i] = 4;
                                break;
                            case "TARGET_TYPE_ONEOF":
                            case 5:
                                message.targets[i] = 5;
                                break;
                            case "TARGET_TYPE_ENUM":
                            case 6:
                                message.targets[i] = 6;
                                break;
                            case "TARGET_TYPE_ENUM_ENTRY":
                            case 7:
                                message.targets[i] = 7;
                                break;
                            case "TARGET_TYPE_SERVICE":
                            case 8:
                                message.targets[i] = 8;
                                break;
                            case "TARGET_TYPE_METHOD":
                            case 9:
                                message.targets[i] = 9;
                                break;
                            }
                    }
                    if (object.editionDefaults) {
                        if (!Array.isArray(object.editionDefaults))
                            throw TypeError(".google.protobuf.FieldOptions.editionDefaults: array expected");
                        message.editionDefaults = [];
                        for (var i = 0; i < object.editionDefaults.length; ++i) {
                            if (typeof object.editionDefaults[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.editionDefaults: object expected");
                            message.editionDefaults[i] = $root.google.protobuf.FieldOptions.EditionDefault.fromObject(object.editionDefaults[i]);
                        }
                    }
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceReference"] != null) {
                        if (typeof object[".google.api.resourceReference"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                        message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                                if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                                    message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                                    break;
                                }
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            case "NON_EMPTY_DEFAULT":
                            case 7:
                                message[".google.api.fieldBehavior"][i] = 7;
                                break;
                            case "IDENTIFIER":
                            case 8:
                                message[".google.api.fieldBehavior"][i] = 8;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.targets = [];
                        object.editionDefaults = [];
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                        object.debugRedact = false;
                        object.retention = options.enums === String ? "RETENTION_UNKNOWN" : 0;
                        object.features = null;
                        object[".google.api.resourceReference"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        object.debugRedact = message.debugRedact;
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        object.retention = options.enums === String ? $root.google.protobuf.FieldOptions.OptionRetention[message.retention] === undefined ? message.retention : $root.google.protobuf.FieldOptions.OptionRetention[message.retention] : message.retention;
                    if (message.targets && message.targets.length) {
                        object.targets = [];
                        for (var j = 0; j < message.targets.length; ++j)
                            object.targets[j] = options.enums === String ? $root.google.protobuf.FieldOptions.OptionTargetType[message.targets[j]] === undefined ? message.targets[j] : $root.google.protobuf.FieldOptions.OptionTargetType[message.targets[j]] : message.targets[j];
                    }
                    if (message.editionDefaults && message.editionDefaults.length) {
                        object.editionDefaults = [];
                        for (var j = 0; j < message.editionDefaults.length; ++j)
                            object.editionDefaults[j] = $root.google.protobuf.FieldOptions.EditionDefault.toObject(message.editionDefaults[j], options);
                    }
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === undefined ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions";
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                /**
                 * OptionRetention enum.
                 * @name google.protobuf.FieldOptions.OptionRetention
                 * @enum {number}
                 * @property {number} RETENTION_UNKNOWN=0 RETENTION_UNKNOWN value
                 * @property {number} RETENTION_RUNTIME=1 RETENTION_RUNTIME value
                 * @property {number} RETENTION_SOURCE=2 RETENTION_SOURCE value
                 */
                FieldOptions.OptionRetention = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "RETENTION_UNKNOWN"] = 0;
                    values[valuesById[1] = "RETENTION_RUNTIME"] = 1;
                    values[valuesById[2] = "RETENTION_SOURCE"] = 2;
                    return values;
                })();
    
                /**
                 * OptionTargetType enum.
                 * @name google.protobuf.FieldOptions.OptionTargetType
                 * @enum {number}
                 * @property {number} TARGET_TYPE_UNKNOWN=0 TARGET_TYPE_UNKNOWN value
                 * @property {number} TARGET_TYPE_FILE=1 TARGET_TYPE_FILE value
                 * @property {number} TARGET_TYPE_EXTENSION_RANGE=2 TARGET_TYPE_EXTENSION_RANGE value
                 * @property {number} TARGET_TYPE_MESSAGE=3 TARGET_TYPE_MESSAGE value
                 * @property {number} TARGET_TYPE_FIELD=4 TARGET_TYPE_FIELD value
                 * @property {number} TARGET_TYPE_ONEOF=5 TARGET_TYPE_ONEOF value
                 * @property {number} TARGET_TYPE_ENUM=6 TARGET_TYPE_ENUM value
                 * @property {number} TARGET_TYPE_ENUM_ENTRY=7 TARGET_TYPE_ENUM_ENTRY value
                 * @property {number} TARGET_TYPE_SERVICE=8 TARGET_TYPE_SERVICE value
                 * @property {number} TARGET_TYPE_METHOD=9 TARGET_TYPE_METHOD value
                 */
                FieldOptions.OptionTargetType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "TARGET_TYPE_UNKNOWN"] = 0;
                    values[valuesById[1] = "TARGET_TYPE_FILE"] = 1;
                    values[valuesById[2] = "TARGET_TYPE_EXTENSION_RANGE"] = 2;
                    values[valuesById[3] = "TARGET_TYPE_MESSAGE"] = 3;
                    values[valuesById[4] = "TARGET_TYPE_FIELD"] = 4;
                    values[valuesById[5] = "TARGET_TYPE_ONEOF"] = 5;
                    values[valuesById[6] = "TARGET_TYPE_ENUM"] = 6;
                    values[valuesById[7] = "TARGET_TYPE_ENUM_ENTRY"] = 7;
                    values[valuesById[8] = "TARGET_TYPE_SERVICE"] = 8;
                    values[valuesById[9] = "TARGET_TYPE_METHOD"] = 9;
                    return values;
                })();
    
                FieldOptions.EditionDefault = (function() {
    
                    /**
                     * Properties of an EditionDefault.
                     * @memberof google.protobuf.FieldOptions
                     * @interface IEditionDefault
                     * @property {google.protobuf.Edition|null} [edition] EditionDefault edition
                     * @property {string|null} [value] EditionDefault value
                     */
    
                    /**
                     * Constructs a new EditionDefault.
                     * @memberof google.protobuf.FieldOptions
                     * @classdesc Represents an EditionDefault.
                     * @implements IEditionDefault
                     * @constructor
                     * @param {google.protobuf.FieldOptions.IEditionDefault=} [properties] Properties to set
                     */
                    function EditionDefault(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EditionDefault edition.
                     * @member {google.protobuf.Edition} edition
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @instance
                     */
                    EditionDefault.prototype.edition = 0;
    
                    /**
                     * EditionDefault value.
                     * @member {string} value
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @instance
                     */
                    EditionDefault.prototype.value = "";
    
                    /**
                     * Creates a new EditionDefault instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {google.protobuf.FieldOptions.IEditionDefault=} [properties] Properties to set
                     * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault instance
                     */
                    EditionDefault.create = function create(properties) {
                        return new EditionDefault(properties);
                    };
    
                    /**
                     * Encodes the specified EditionDefault message. Does not implicitly {@link google.protobuf.FieldOptions.EditionDefault.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {google.protobuf.FieldOptions.IEditionDefault} message EditionDefault message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EditionDefault.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                        if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.edition);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EditionDefault message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.EditionDefault.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {google.protobuf.FieldOptions.IEditionDefault} message EditionDefault message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EditionDefault.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EditionDefault message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EditionDefault.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions.EditionDefault();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 3: {
                                    message.edition = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.value = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EditionDefault message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EditionDefault.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EditionDefault message.
                     * @function verify
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EditionDefault.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.edition != null && message.hasOwnProperty("edition"))
                            switch (message.edition) {
                            default:
                                return "edition: enum value expected";
                            case 0:
                            case 998:
                            case 999:
                            case 1000:
                            case 1001:
                            case 1:
                            case 2:
                            case 99997:
                            case 99998:
                            case 99999:
                            case 2147483647:
                                break;
                            }
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!$util.isString(message.value))
                                return "value: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an EditionDefault message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault
                     */
                    EditionDefault.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.FieldOptions.EditionDefault)
                            return object;
                        var message = new $root.google.protobuf.FieldOptions.EditionDefault();
                        switch (object.edition) {
                        default:
                            if (typeof object.edition === "number") {
                                message.edition = object.edition;
                                break;
                            }
                            break;
                        case "EDITION_UNKNOWN":
                        case 0:
                            message.edition = 0;
                            break;
                        case "EDITION_PROTO2":
                        case 998:
                            message.edition = 998;
                            break;
                        case "EDITION_PROTO3":
                        case 999:
                            message.edition = 999;
                            break;
                        case "EDITION_2023":
                        case 1000:
                            message.edition = 1000;
                            break;
                        case "EDITION_2024":
                        case 1001:
                            message.edition = 1001;
                            break;
                        case "EDITION_1_TEST_ONLY":
                        case 1:
                            message.edition = 1;
                            break;
                        case "EDITION_2_TEST_ONLY":
                        case 2:
                            message.edition = 2;
                            break;
                        case "EDITION_99997_TEST_ONLY":
                        case 99997:
                            message.edition = 99997;
                            break;
                        case "EDITION_99998_TEST_ONLY":
                        case 99998:
                            message.edition = 99998;
                            break;
                        case "EDITION_99999_TEST_ONLY":
                        case 99999:
                            message.edition = 99999;
                            break;
                        case "EDITION_MAX":
                        case 2147483647:
                            message.edition = 2147483647;
                            break;
                        }
                        if (object.value != null)
                            message.value = String(object.value);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EditionDefault message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {google.protobuf.FieldOptions.EditionDefault} message EditionDefault
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EditionDefault.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.value = "";
                            object.edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                        }
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = message.value;
                        if (message.edition != null && message.hasOwnProperty("edition"))
                            object.edition = options.enums === String ? $root.google.protobuf.Edition[message.edition] === undefined ? message.edition : $root.google.protobuf.Edition[message.edition] : message.edition;
                        return object;
                    };
    
                    /**
                     * Converts this EditionDefault to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EditionDefault.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EditionDefault
                     * @function getTypeUrl
                     * @memberof google.protobuf.FieldOptions.EditionDefault
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EditionDefault.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.FieldOptions.EditionDefault";
                    };
    
                    return EditionDefault;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {google.protobuf.IFeatureSet|null} [features] OneofOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.features = null;
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.features = null;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofOptions";
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] EnumOptions deprecatedLegacyJsonFieldConflicts
                 * @property {google.protobuf.IFeatureSet|null} [features] EnumOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * EnumOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.features = null;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.allowAlias = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 6: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 7: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                        object.features = null;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumOptions";
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {google.protobuf.IFeatureSet|null} [features] EnumValueOptions features
                 * @property {boolean|null} [debugRedact] EnumValueOptions debugRedact
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.features = null;
    
                /**
                 * EnumValueOptions debugRedact.
                 * @member {boolean} debugRedact
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.debugRedact = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.debugRedact != null && Object.hasOwnProperty.call(message, "debugRedact"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.debugRedact);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 2: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.debugRedact = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        if (typeof message.debugRedact !== "boolean")
                            return "debugRedact: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.debugRedact != null)
                        message.debugRedact = Boolean(object.debugRedact);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object.features = null;
                        object.debugRedact = false;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        object.debugRedact = message.debugRedact;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {google.protobuf.IFeatureSet|null} [features] ServiceOptions features
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.features = null;
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 34: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1049: {
                                message[".google.api.defaultHost"] = reader.string();
                                break;
                            }
                        case 1050: {
                                message[".google.api.oauthScopes"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object.features = null;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceOptions";
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {google.protobuf.IFeatureSet|null} [features] MethodOptions features
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} features
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.features = null;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                        $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 34: {
                                message.idempotencyLevel = reader.int32();
                                break;
                            }
                        case 35: {
                                message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 72295728: {
                                message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                                break;
                            }
                        case 1051: {
                                if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                    message[".google.api.methodSignature"] = [];
                                message[".google.api.methodSignature"].push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.features != null && message.hasOwnProperty("features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.features);
                        if (error)
                            return "features." + error;
                    }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    default:
                        if (typeof object.idempotencyLevel === "number") {
                            message.idempotencyLevel = object.idempotencyLevel;
                            break;
                        }
                        break;
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.features != null) {
                        if (typeof object.features !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.features: object expected");
                        message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object.features = null;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.features != null && message.hasOwnProperty("features"))
                        object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodOptions";
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.name && message.name.length))
                                    message.name = [];
                                message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.identifierValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.positiveIntValue = reader.uint64();
                                break;
                            }
                        case 5: {
                                message.negativeIntValue = reader.int64();
                                break;
                            }
                        case 6: {
                                message.doubleValue = reader.double();
                                break;
                            }
                        case 7: {
                                message.stringValue = reader.bytes();
                                break;
                            }
                        case 8: {
                                message.aggregateValue = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length >= 0)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UninterpretedOption
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.namePart = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.isExtension = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NamePart
                     * @function getTypeUrl
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.FeatureSet = (function() {
    
                /**
                 * Properties of a FeatureSet.
                 * @memberof google.protobuf
                 * @interface IFeatureSet
                 * @property {google.protobuf.FeatureSet.FieldPresence|null} [fieldPresence] FeatureSet fieldPresence
                 * @property {google.protobuf.FeatureSet.EnumType|null} [enumType] FeatureSet enumType
                 * @property {google.protobuf.FeatureSet.RepeatedFieldEncoding|null} [repeatedFieldEncoding] FeatureSet repeatedFieldEncoding
                 * @property {google.protobuf.FeatureSet.Utf8Validation|null} [utf8Validation] FeatureSet utf8Validation
                 * @property {google.protobuf.FeatureSet.MessageEncoding|null} [messageEncoding] FeatureSet messageEncoding
                 * @property {google.protobuf.FeatureSet.JsonFormat|null} [jsonFormat] FeatureSet jsonFormat
                 */
    
                /**
                 * Constructs a new FeatureSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FeatureSet.
                 * @implements IFeatureSet
                 * @constructor
                 * @param {google.protobuf.IFeatureSet=} [properties] Properties to set
                 */
                function FeatureSet(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FeatureSet fieldPresence.
                 * @member {google.protobuf.FeatureSet.FieldPresence} fieldPresence
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.fieldPresence = 0;
    
                /**
                 * FeatureSet enumType.
                 * @member {google.protobuf.FeatureSet.EnumType} enumType
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.enumType = 0;
    
                /**
                 * FeatureSet repeatedFieldEncoding.
                 * @member {google.protobuf.FeatureSet.RepeatedFieldEncoding} repeatedFieldEncoding
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.repeatedFieldEncoding = 0;
    
                /**
                 * FeatureSet utf8Validation.
                 * @member {google.protobuf.FeatureSet.Utf8Validation} utf8Validation
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.utf8Validation = 0;
    
                /**
                 * FeatureSet messageEncoding.
                 * @member {google.protobuf.FeatureSet.MessageEncoding} messageEncoding
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.messageEncoding = 0;
    
                /**
                 * FeatureSet jsonFormat.
                 * @member {google.protobuf.FeatureSet.JsonFormat} jsonFormat
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 */
                FeatureSet.prototype.jsonFormat = 0;
    
                /**
                 * Creates a new FeatureSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {google.protobuf.IFeatureSet=} [properties] Properties to set
                 * @returns {google.protobuf.FeatureSet} FeatureSet instance
                 */
                FeatureSet.create = function create(properties) {
                    return new FeatureSet(properties);
                };
    
                /**
                 * Encodes the specified FeatureSet message. Does not implicitly {@link google.protobuf.FeatureSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {google.protobuf.IFeatureSet} message FeatureSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fieldPresence != null && Object.hasOwnProperty.call(message, "fieldPresence"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.fieldPresence);
                    if (message.enumType != null && Object.hasOwnProperty.call(message, "enumType"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.enumType);
                    if (message.repeatedFieldEncoding != null && Object.hasOwnProperty.call(message, "repeatedFieldEncoding"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.repeatedFieldEncoding);
                    if (message.utf8Validation != null && Object.hasOwnProperty.call(message, "utf8Validation"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.utf8Validation);
                    if (message.messageEncoding != null && Object.hasOwnProperty.call(message, "messageEncoding"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.messageEncoding);
                    if (message.jsonFormat != null && Object.hasOwnProperty.call(message, "jsonFormat"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jsonFormat);
                    return writer;
                };
    
                /**
                 * Encodes the specified FeatureSet message, length delimited. Does not implicitly {@link google.protobuf.FeatureSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {google.protobuf.IFeatureSet} message FeatureSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FeatureSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FeatureSet} FeatureSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FeatureSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.fieldPresence = reader.int32();
                                break;
                            }
                        case 2: {
                                message.enumType = reader.int32();
                                break;
                            }
                        case 3: {
                                message.repeatedFieldEncoding = reader.int32();
                                break;
                            }
                        case 4: {
                                message.utf8Validation = reader.int32();
                                break;
                            }
                        case 5: {
                                message.messageEncoding = reader.int32();
                                break;
                            }
                        case 6: {
                                message.jsonFormat = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FeatureSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FeatureSet} FeatureSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FeatureSet message.
                 * @function verify
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeatureSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fieldPresence != null && message.hasOwnProperty("fieldPresence"))
                        switch (message.fieldPresence) {
                        default:
                            return "fieldPresence: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.enumType != null && message.hasOwnProperty("enumType"))
                        switch (message.enumType) {
                        default:
                            return "enumType: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.repeatedFieldEncoding != null && message.hasOwnProperty("repeatedFieldEncoding"))
                        switch (message.repeatedFieldEncoding) {
                        default:
                            return "repeatedFieldEncoding: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.utf8Validation != null && message.hasOwnProperty("utf8Validation"))
                        switch (message.utf8Validation) {
                        default:
                            return "utf8Validation: enum value expected";
                        case 0:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.messageEncoding != null && message.hasOwnProperty("messageEncoding"))
                        switch (message.messageEncoding) {
                        default:
                            return "messageEncoding: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.jsonFormat != null && message.hasOwnProperty("jsonFormat"))
                        switch (message.jsonFormat) {
                        default:
                            return "jsonFormat: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a FeatureSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FeatureSet} FeatureSet
                 */
                FeatureSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FeatureSet)
                        return object;
                    var message = new $root.google.protobuf.FeatureSet();
                    switch (object.fieldPresence) {
                    default:
                        if (typeof object.fieldPresence === "number") {
                            message.fieldPresence = object.fieldPresence;
                            break;
                        }
                        break;
                    case "FIELD_PRESENCE_UNKNOWN":
                    case 0:
                        message.fieldPresence = 0;
                        break;
                    case "EXPLICIT":
                    case 1:
                        message.fieldPresence = 1;
                        break;
                    case "IMPLICIT":
                    case 2:
                        message.fieldPresence = 2;
                        break;
                    case "LEGACY_REQUIRED":
                    case 3:
                        message.fieldPresence = 3;
                        break;
                    }
                    switch (object.enumType) {
                    default:
                        if (typeof object.enumType === "number") {
                            message.enumType = object.enumType;
                            break;
                        }
                        break;
                    case "ENUM_TYPE_UNKNOWN":
                    case 0:
                        message.enumType = 0;
                        break;
                    case "OPEN":
                    case 1:
                        message.enumType = 1;
                        break;
                    case "CLOSED":
                    case 2:
                        message.enumType = 2;
                        break;
                    }
                    switch (object.repeatedFieldEncoding) {
                    default:
                        if (typeof object.repeatedFieldEncoding === "number") {
                            message.repeatedFieldEncoding = object.repeatedFieldEncoding;
                            break;
                        }
                        break;
                    case "REPEATED_FIELD_ENCODING_UNKNOWN":
                    case 0:
                        message.repeatedFieldEncoding = 0;
                        break;
                    case "PACKED":
                    case 1:
                        message.repeatedFieldEncoding = 1;
                        break;
                    case "EXPANDED":
                    case 2:
                        message.repeatedFieldEncoding = 2;
                        break;
                    }
                    switch (object.utf8Validation) {
                    default:
                        if (typeof object.utf8Validation === "number") {
                            message.utf8Validation = object.utf8Validation;
                            break;
                        }
                        break;
                    case "UTF8_VALIDATION_UNKNOWN":
                    case 0:
                        message.utf8Validation = 0;
                        break;
                    case "VERIFY":
                    case 2:
                        message.utf8Validation = 2;
                        break;
                    case "NONE":
                    case 3:
                        message.utf8Validation = 3;
                        break;
                    }
                    switch (object.messageEncoding) {
                    default:
                        if (typeof object.messageEncoding === "number") {
                            message.messageEncoding = object.messageEncoding;
                            break;
                        }
                        break;
                    case "MESSAGE_ENCODING_UNKNOWN":
                    case 0:
                        message.messageEncoding = 0;
                        break;
                    case "LENGTH_PREFIXED":
                    case 1:
                        message.messageEncoding = 1;
                        break;
                    case "DELIMITED":
                    case 2:
                        message.messageEncoding = 2;
                        break;
                    }
                    switch (object.jsonFormat) {
                    default:
                        if (typeof object.jsonFormat === "number") {
                            message.jsonFormat = object.jsonFormat;
                            break;
                        }
                        break;
                    case "JSON_FORMAT_UNKNOWN":
                    case 0:
                        message.jsonFormat = 0;
                        break;
                    case "ALLOW":
                    case 1:
                        message.jsonFormat = 1;
                        break;
                    case "LEGACY_BEST_EFFORT":
                    case 2:
                        message.jsonFormat = 2;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FeatureSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {google.protobuf.FeatureSet} message FeatureSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeatureSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.fieldPresence = options.enums === String ? "FIELD_PRESENCE_UNKNOWN" : 0;
                        object.enumType = options.enums === String ? "ENUM_TYPE_UNKNOWN" : 0;
                        object.repeatedFieldEncoding = options.enums === String ? "REPEATED_FIELD_ENCODING_UNKNOWN" : 0;
                        object.utf8Validation = options.enums === String ? "UTF8_VALIDATION_UNKNOWN" : 0;
                        object.messageEncoding = options.enums === String ? "MESSAGE_ENCODING_UNKNOWN" : 0;
                        object.jsonFormat = options.enums === String ? "JSON_FORMAT_UNKNOWN" : 0;
                    }
                    if (message.fieldPresence != null && message.hasOwnProperty("fieldPresence"))
                        object.fieldPresence = options.enums === String ? $root.google.protobuf.FeatureSet.FieldPresence[message.fieldPresence] === undefined ? message.fieldPresence : $root.google.protobuf.FeatureSet.FieldPresence[message.fieldPresence] : message.fieldPresence;
                    if (message.enumType != null && message.hasOwnProperty("enumType"))
                        object.enumType = options.enums === String ? $root.google.protobuf.FeatureSet.EnumType[message.enumType] === undefined ? message.enumType : $root.google.protobuf.FeatureSet.EnumType[message.enumType] : message.enumType;
                    if (message.repeatedFieldEncoding != null && message.hasOwnProperty("repeatedFieldEncoding"))
                        object.repeatedFieldEncoding = options.enums === String ? $root.google.protobuf.FeatureSet.RepeatedFieldEncoding[message.repeatedFieldEncoding] === undefined ? message.repeatedFieldEncoding : $root.google.protobuf.FeatureSet.RepeatedFieldEncoding[message.repeatedFieldEncoding] : message.repeatedFieldEncoding;
                    if (message.utf8Validation != null && message.hasOwnProperty("utf8Validation"))
                        object.utf8Validation = options.enums === String ? $root.google.protobuf.FeatureSet.Utf8Validation[message.utf8Validation] === undefined ? message.utf8Validation : $root.google.protobuf.FeatureSet.Utf8Validation[message.utf8Validation] : message.utf8Validation;
                    if (message.messageEncoding != null && message.hasOwnProperty("messageEncoding"))
                        object.messageEncoding = options.enums === String ? $root.google.protobuf.FeatureSet.MessageEncoding[message.messageEncoding] === undefined ? message.messageEncoding : $root.google.protobuf.FeatureSet.MessageEncoding[message.messageEncoding] : message.messageEncoding;
                    if (message.jsonFormat != null && message.hasOwnProperty("jsonFormat"))
                        object.jsonFormat = options.enums === String ? $root.google.protobuf.FeatureSet.JsonFormat[message.jsonFormat] === undefined ? message.jsonFormat : $root.google.protobuf.FeatureSet.JsonFormat[message.jsonFormat] : message.jsonFormat;
                    return object;
                };
    
                /**
                 * Converts this FeatureSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FeatureSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeatureSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FeatureSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FeatureSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FeatureSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FeatureSet";
                };
    
                /**
                 * FieldPresence enum.
                 * @name google.protobuf.FeatureSet.FieldPresence
                 * @enum {number}
                 * @property {number} FIELD_PRESENCE_UNKNOWN=0 FIELD_PRESENCE_UNKNOWN value
                 * @property {number} EXPLICIT=1 EXPLICIT value
                 * @property {number} IMPLICIT=2 IMPLICIT value
                 * @property {number} LEGACY_REQUIRED=3 LEGACY_REQUIRED value
                 */
                FeatureSet.FieldPresence = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "FIELD_PRESENCE_UNKNOWN"] = 0;
                    values[valuesById[1] = "EXPLICIT"] = 1;
                    values[valuesById[2] = "IMPLICIT"] = 2;
                    values[valuesById[3] = "LEGACY_REQUIRED"] = 3;
                    return values;
                })();
    
                /**
                 * EnumType enum.
                 * @name google.protobuf.FeatureSet.EnumType
                 * @enum {number}
                 * @property {number} ENUM_TYPE_UNKNOWN=0 ENUM_TYPE_UNKNOWN value
                 * @property {number} OPEN=1 OPEN value
                 * @property {number} CLOSED=2 CLOSED value
                 */
                FeatureSet.EnumType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ENUM_TYPE_UNKNOWN"] = 0;
                    values[valuesById[1] = "OPEN"] = 1;
                    values[valuesById[2] = "CLOSED"] = 2;
                    return values;
                })();
    
                /**
                 * RepeatedFieldEncoding enum.
                 * @name google.protobuf.FeatureSet.RepeatedFieldEncoding
                 * @enum {number}
                 * @property {number} REPEATED_FIELD_ENCODING_UNKNOWN=0 REPEATED_FIELD_ENCODING_UNKNOWN value
                 * @property {number} PACKED=1 PACKED value
                 * @property {number} EXPANDED=2 EXPANDED value
                 */
                FeatureSet.RepeatedFieldEncoding = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "REPEATED_FIELD_ENCODING_UNKNOWN"] = 0;
                    values[valuesById[1] = "PACKED"] = 1;
                    values[valuesById[2] = "EXPANDED"] = 2;
                    return values;
                })();
    
                /**
                 * Utf8Validation enum.
                 * @name google.protobuf.FeatureSet.Utf8Validation
                 * @enum {number}
                 * @property {number} UTF8_VALIDATION_UNKNOWN=0 UTF8_VALIDATION_UNKNOWN value
                 * @property {number} VERIFY=2 VERIFY value
                 * @property {number} NONE=3 NONE value
                 */
                FeatureSet.Utf8Validation = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UTF8_VALIDATION_UNKNOWN"] = 0;
                    values[valuesById[2] = "VERIFY"] = 2;
                    values[valuesById[3] = "NONE"] = 3;
                    return values;
                })();
    
                /**
                 * MessageEncoding enum.
                 * @name google.protobuf.FeatureSet.MessageEncoding
                 * @enum {number}
                 * @property {number} MESSAGE_ENCODING_UNKNOWN=0 MESSAGE_ENCODING_UNKNOWN value
                 * @property {number} LENGTH_PREFIXED=1 LENGTH_PREFIXED value
                 * @property {number} DELIMITED=2 DELIMITED value
                 */
                FeatureSet.MessageEncoding = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "MESSAGE_ENCODING_UNKNOWN"] = 0;
                    values[valuesById[1] = "LENGTH_PREFIXED"] = 1;
                    values[valuesById[2] = "DELIMITED"] = 2;
                    return values;
                })();
    
                /**
                 * JsonFormat enum.
                 * @name google.protobuf.FeatureSet.JsonFormat
                 * @enum {number}
                 * @property {number} JSON_FORMAT_UNKNOWN=0 JSON_FORMAT_UNKNOWN value
                 * @property {number} ALLOW=1 ALLOW value
                 * @property {number} LEGACY_BEST_EFFORT=2 LEGACY_BEST_EFFORT value
                 */
                FeatureSet.JsonFormat = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JSON_FORMAT_UNKNOWN"] = 0;
                    values[valuesById[1] = "ALLOW"] = 1;
                    values[valuesById[2] = "LEGACY_BEST_EFFORT"] = 2;
                    return values;
                })();
    
                return FeatureSet;
            })();
    
            protobuf.FeatureSetDefaults = (function() {
    
                /**
                 * Properties of a FeatureSetDefaults.
                 * @memberof google.protobuf
                 * @interface IFeatureSetDefaults
                 * @property {Array.<google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault>|null} [defaults] FeatureSetDefaults defaults
                 * @property {google.protobuf.Edition|null} [minimumEdition] FeatureSetDefaults minimumEdition
                 * @property {google.protobuf.Edition|null} [maximumEdition] FeatureSetDefaults maximumEdition
                 */
    
                /**
                 * Constructs a new FeatureSetDefaults.
                 * @memberof google.protobuf
                 * @classdesc Represents a FeatureSetDefaults.
                 * @implements IFeatureSetDefaults
                 * @constructor
                 * @param {google.protobuf.IFeatureSetDefaults=} [properties] Properties to set
                 */
                function FeatureSetDefaults(properties) {
                    this.defaults = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FeatureSetDefaults defaults.
                 * @member {Array.<google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault>} defaults
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @instance
                 */
                FeatureSetDefaults.prototype.defaults = $util.emptyArray;
    
                /**
                 * FeatureSetDefaults minimumEdition.
                 * @member {google.protobuf.Edition} minimumEdition
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @instance
                 */
                FeatureSetDefaults.prototype.minimumEdition = 0;
    
                /**
                 * FeatureSetDefaults maximumEdition.
                 * @member {google.protobuf.Edition} maximumEdition
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @instance
                 */
                FeatureSetDefaults.prototype.maximumEdition = 0;
    
                /**
                 * Creates a new FeatureSetDefaults instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {google.protobuf.IFeatureSetDefaults=} [properties] Properties to set
                 * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults instance
                 */
                FeatureSetDefaults.create = function create(properties) {
                    return new FeatureSetDefaults(properties);
                };
    
                /**
                 * Encodes the specified FeatureSetDefaults message. Does not implicitly {@link google.protobuf.FeatureSetDefaults.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {google.protobuf.IFeatureSetDefaults} message FeatureSetDefaults message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSetDefaults.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.defaults != null && message.defaults.length)
                        for (var i = 0; i < message.defaults.length; ++i)
                            $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.encode(message.defaults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.minimumEdition != null && Object.hasOwnProperty.call(message, "minimumEdition"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.minimumEdition);
                    if (message.maximumEdition != null && Object.hasOwnProperty.call(message, "maximumEdition"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.maximumEdition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FeatureSetDefaults message, length delimited. Does not implicitly {@link google.protobuf.FeatureSetDefaults.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {google.protobuf.IFeatureSetDefaults} message FeatureSetDefaults message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSetDefaults.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FeatureSetDefaults message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSetDefaults.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FeatureSetDefaults();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.defaults && message.defaults.length))
                                    message.defaults = [];
                                message.defaults.push($root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                message.minimumEdition = reader.int32();
                                break;
                            }
                        case 5: {
                                message.maximumEdition = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FeatureSetDefaults message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSetDefaults.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FeatureSetDefaults message.
                 * @function verify
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeatureSetDefaults.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.defaults != null && message.hasOwnProperty("defaults")) {
                        if (!Array.isArray(message.defaults))
                            return "defaults: array expected";
                        for (var i = 0; i < message.defaults.length; ++i) {
                            var error = $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.verify(message.defaults[i]);
                            if (error)
                                return "defaults." + error;
                        }
                    }
                    if (message.minimumEdition != null && message.hasOwnProperty("minimumEdition"))
                        switch (message.minimumEdition) {
                        default:
                            return "minimumEdition: enum value expected";
                        case 0:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    if (message.maximumEdition != null && message.hasOwnProperty("maximumEdition"))
                        switch (message.maximumEdition) {
                        default:
                            return "maximumEdition: enum value expected";
                        case 0:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a FeatureSetDefaults message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults
                 */
                FeatureSetDefaults.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FeatureSetDefaults)
                        return object;
                    var message = new $root.google.protobuf.FeatureSetDefaults();
                    if (object.defaults) {
                        if (!Array.isArray(object.defaults))
                            throw TypeError(".google.protobuf.FeatureSetDefaults.defaults: array expected");
                        message.defaults = [];
                        for (var i = 0; i < object.defaults.length; ++i) {
                            if (typeof object.defaults[i] !== "object")
                                throw TypeError(".google.protobuf.FeatureSetDefaults.defaults: object expected");
                            message.defaults[i] = $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.fromObject(object.defaults[i]);
                        }
                    }
                    switch (object.minimumEdition) {
                    default:
                        if (typeof object.minimumEdition === "number") {
                            message.minimumEdition = object.minimumEdition;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.minimumEdition = 0;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.minimumEdition = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.minimumEdition = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.minimumEdition = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.minimumEdition = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.minimumEdition = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.minimumEdition = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.minimumEdition = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.minimumEdition = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.minimumEdition = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.minimumEdition = 2147483647;
                        break;
                    }
                    switch (object.maximumEdition) {
                    default:
                        if (typeof object.maximumEdition === "number") {
                            message.maximumEdition = object.maximumEdition;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.maximumEdition = 0;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.maximumEdition = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.maximumEdition = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.maximumEdition = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.maximumEdition = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.maximumEdition = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.maximumEdition = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.maximumEdition = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.maximumEdition = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.maximumEdition = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.maximumEdition = 2147483647;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FeatureSetDefaults message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {google.protobuf.FeatureSetDefaults} message FeatureSetDefaults
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeatureSetDefaults.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.defaults = [];
                    if (options.defaults) {
                        object.minimumEdition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                        object.maximumEdition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                    }
                    if (message.defaults && message.defaults.length) {
                        object.defaults = [];
                        for (var j = 0; j < message.defaults.length; ++j)
                            object.defaults[j] = $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.toObject(message.defaults[j], options);
                    }
                    if (message.minimumEdition != null && message.hasOwnProperty("minimumEdition"))
                        object.minimumEdition = options.enums === String ? $root.google.protobuf.Edition[message.minimumEdition] === undefined ? message.minimumEdition : $root.google.protobuf.Edition[message.minimumEdition] : message.minimumEdition;
                    if (message.maximumEdition != null && message.hasOwnProperty("maximumEdition"))
                        object.maximumEdition = options.enums === String ? $root.google.protobuf.Edition[message.maximumEdition] === undefined ? message.maximumEdition : $root.google.protobuf.Edition[message.maximumEdition] : message.maximumEdition;
                    return object;
                };
    
                /**
                 * Converts this FeatureSetDefaults to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeatureSetDefaults.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FeatureSetDefaults
                 * @function getTypeUrl
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FeatureSetDefaults.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FeatureSetDefaults";
                };
    
                FeatureSetDefaults.FeatureSetEditionDefault = (function() {
    
                    /**
                     * Properties of a FeatureSetEditionDefault.
                     * @memberof google.protobuf.FeatureSetDefaults
                     * @interface IFeatureSetEditionDefault
                     * @property {google.protobuf.Edition|null} [edition] FeatureSetEditionDefault edition
                     * @property {google.protobuf.IFeatureSet|null} [features] FeatureSetEditionDefault features
                     */
    
                    /**
                     * Constructs a new FeatureSetEditionDefault.
                     * @memberof google.protobuf.FeatureSetDefaults
                     * @classdesc Represents a FeatureSetEditionDefault.
                     * @implements IFeatureSetEditionDefault
                     * @constructor
                     * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault=} [properties] Properties to set
                     */
                    function FeatureSetEditionDefault(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FeatureSetEditionDefault edition.
                     * @member {google.protobuf.Edition} edition
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @instance
                     */
                    FeatureSetEditionDefault.prototype.edition = 0;
    
                    /**
                     * FeatureSetEditionDefault features.
                     * @member {google.protobuf.IFeatureSet|null|undefined} features
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @instance
                     */
                    FeatureSetEditionDefault.prototype.features = null;
    
                    /**
                     * Creates a new FeatureSetEditionDefault instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault=} [properties] Properties to set
                     * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault instance
                     */
                    FeatureSetEditionDefault.create = function create(properties) {
                        return new FeatureSetEditionDefault(properties);
                    };
    
                    /**
                     * Encodes the specified FeatureSetEditionDefault message. Does not implicitly {@link google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault} message FeatureSetEditionDefault message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FeatureSetEditionDefault.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                            $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.edition);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FeatureSetEditionDefault message, length delimited. Does not implicitly {@link google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault} message FeatureSetEditionDefault message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FeatureSetEditionDefault.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FeatureSetEditionDefault message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FeatureSetEditionDefault.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 3: {
                                    message.edition = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FeatureSetEditionDefault message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FeatureSetEditionDefault.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FeatureSetEditionDefault message.
                     * @function verify
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FeatureSetEditionDefault.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.edition != null && message.hasOwnProperty("edition"))
                            switch (message.edition) {
                            default:
                                return "edition: enum value expected";
                            case 0:
                            case 998:
                            case 999:
                            case 1000:
                            case 1001:
                            case 1:
                            case 2:
                            case 99997:
                            case 99998:
                            case 99999:
                            case 2147483647:
                                break;
                            }
                        if (message.features != null && message.hasOwnProperty("features")) {
                            var error = $root.google.protobuf.FeatureSet.verify(message.features);
                            if (error)
                                return "features." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a FeatureSetEditionDefault message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault
                     */
                    FeatureSetEditionDefault.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault)
                            return object;
                        var message = new $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault();
                        switch (object.edition) {
                        default:
                            if (typeof object.edition === "number") {
                                message.edition = object.edition;
                                break;
                            }
                            break;
                        case "EDITION_UNKNOWN":
                        case 0:
                            message.edition = 0;
                            break;
                        case "EDITION_PROTO2":
                        case 998:
                            message.edition = 998;
                            break;
                        case "EDITION_PROTO3":
                        case 999:
                            message.edition = 999;
                            break;
                        case "EDITION_2023":
                        case 1000:
                            message.edition = 1000;
                            break;
                        case "EDITION_2024":
                        case 1001:
                            message.edition = 1001;
                            break;
                        case "EDITION_1_TEST_ONLY":
                        case 1:
                            message.edition = 1;
                            break;
                        case "EDITION_2_TEST_ONLY":
                        case 2:
                            message.edition = 2;
                            break;
                        case "EDITION_99997_TEST_ONLY":
                        case 99997:
                            message.edition = 99997;
                            break;
                        case "EDITION_99998_TEST_ONLY":
                        case 99998:
                            message.edition = 99998;
                            break;
                        case "EDITION_99999_TEST_ONLY":
                        case 99999:
                            message.edition = 99999;
                            break;
                        case "EDITION_MAX":
                        case 2147483647:
                            message.edition = 2147483647;
                            break;
                        }
                        if (object.features != null) {
                            if (typeof object.features !== "object")
                                throw TypeError(".google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.features: object expected");
                            message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FeatureSetEditionDefault message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} message FeatureSetEditionDefault
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FeatureSetEditionDefault.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.features = null;
                            object.edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                        }
                        if (message.features != null && message.hasOwnProperty("features"))
                            object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                        if (message.edition != null && message.hasOwnProperty("edition"))
                            object.edition = options.enums === String ? $root.google.protobuf.Edition[message.edition] === undefined ? message.edition : $root.google.protobuf.Edition[message.edition] : message.edition;
                        return object;
                    };
    
                    /**
                     * Converts this FeatureSetEditionDefault to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FeatureSetEditionDefault.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for FeatureSetEditionDefault
                     * @function getTypeUrl
                     * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    FeatureSetEditionDefault.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault";
                    };
    
                    return FeatureSetEditionDefault;
                })();
    
                return FeatureSetDefaults;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    if (!(message.span && message.span.length))
                                        message.span = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.span.push(reader.int32());
                                    } else
                                        message.span.push(reader.int32());
                                    break;
                                }
                            case 3: {
                                    message.leadingComments = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.trailingComments = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                        message.leadingDetachedComments = [];
                                    message.leadingDetachedComments.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.annotation && message.annotation.length))
                                    message.annotation = [];
                                message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GeneratedCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Annotation semantic.
                     * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.semantic = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    message.sourceFile = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.begin = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 5: {
                                    message.semantic = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            switch (message.semantic) {
                            default:
                                return "semantic: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        switch (object.semantic) {
                        default:
                            if (typeof object.semantic === "number") {
                                message.semantic = object.semantic;
                                break;
                            }
                            break;
                        case "NONE":
                        case 0:
                            message.semantic = 0;
                            break;
                        case "SET":
                        case 1:
                            message.semantic = 1;
                            break;
                        case "ALIAS":
                        case 2:
                            message.semantic = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                            object.semantic = options.enums === String ? "NONE" : 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                    };
    
                    /**
                     * Semantic enum.
                     * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} SET=1 SET value
                     * @property {number} ALIAS=2 ALIAS value
                     */
                    Annotation.Semantic = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "SET"] = 1;
                        values[valuesById[2] = "ALIAS"] = 2;
                        return values;
                    })();
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Duration
                 * @function getTypeUrl
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Duration";
                };
    
                return Duration;
            })();
    
            protobuf.FieldMask = (function() {
    
                /**
                 * Properties of a FieldMask.
                 * @memberof google.protobuf
                 * @interface IFieldMask
                 * @property {Array.<string>|null} [paths] FieldMask paths
                 */
    
                /**
                 * Constructs a new FieldMask.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldMask.
                 * @implements IFieldMask
                 * @constructor
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 */
                function FieldMask(properties) {
                    this.paths = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldMask paths.
                 * @member {Array.<string>} paths
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 */
                FieldMask.prototype.paths = $util.emptyArray;
    
                /**
                 * Creates a new FieldMask instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 * @returns {google.protobuf.FieldMask} FieldMask instance
                 */
                FieldMask.create = function create(properties) {
                    return new FieldMask(properties);
                };
    
                /**
                 * Encodes the specified FieldMask message. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.paths != null && message.paths.length)
                        for (var i = 0; i < message.paths.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldMask message, length delimited. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldMask();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.paths && message.paths.length))
                                    message.paths = [];
                                message.paths.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldMask message.
                 * @function verify
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldMask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.paths != null && message.hasOwnProperty("paths")) {
                        if (!Array.isArray(message.paths))
                            return "paths: array expected";
                        for (var i = 0; i < message.paths.length; ++i)
                            if (!$util.isString(message.paths[i]))
                                return "paths: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldMask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldMask} FieldMask
                 */
                FieldMask.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldMask)
                        return object;
                    var message = new $root.google.protobuf.FieldMask();
                    if (object.paths) {
                        if (!Array.isArray(object.paths))
                            throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                        message.paths = [];
                        for (var i = 0; i < object.paths.length; ++i)
                            message.paths[i] = String(object.paths[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldMask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldMask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.paths = [];
                    if (message.paths && message.paths.length) {
                        object.paths = [];
                        for (var j = 0; j < message.paths.length; ++j)
                            object.paths[j] = message.paths[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldMask to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldMask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldMask
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldMask.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldMask";
                };
    
                return FieldMask;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Timestamp
                 * @function getTypeUrl
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Timestamp";
                };
    
                return Timestamp;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Empty
                 * @function getTypeUrl
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Empty";
                };
    
                return Empty;
            })();
    
            return protobuf;
        })();
    
        google.apps = (function() {
    
            /**
             * Namespace apps.
             * @memberof google
             * @namespace
             */
            var apps = {};
    
            apps.card = (function() {
    
                /**
                 * Namespace card.
                 * @memberof google.apps
                 * @namespace
                 */
                var card = {};
    
                card.v1 = (function() {
    
                    /**
                     * Namespace v1.
                     * @memberof google.apps.card
                     * @namespace
                     */
                    var v1 = {};
    
                    v1.Card = (function() {
    
                        /**
                         * Properties of a Card.
                         * @memberof google.apps.card.v1
                         * @interface ICard
                         * @property {google.apps.card.v1.Card.ICardHeader|null} [header] Card header
                         * @property {Array.<google.apps.card.v1.Card.ISection>|null} [sections] Card sections
                         * @property {google.apps.card.v1.Card.DividerStyle|null} [sectionDividerStyle] Card sectionDividerStyle
                         * @property {Array.<google.apps.card.v1.Card.ICardAction>|null} [cardActions] Card cardActions
                         * @property {string|null} [name] Card name
                         * @property {google.apps.card.v1.Card.ICardFixedFooter|null} [fixedFooter] Card fixedFooter
                         * @property {google.apps.card.v1.Card.DisplayStyle|null} [displayStyle] Card displayStyle
                         * @property {google.apps.card.v1.Card.ICardHeader|null} [peekCardHeader] Card peekCardHeader
                         */
    
                        /**
                         * Constructs a new Card.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a Card.
                         * @implements ICard
                         * @constructor
                         * @param {google.apps.card.v1.ICard=} [properties] Properties to set
                         */
                        function Card(properties) {
                            this.sections = [];
                            this.cardActions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Card header.
                         * @member {google.apps.card.v1.Card.ICardHeader|null|undefined} header
                         * @memberof google.apps.card.v1.Card
                         * @instance
                         */
                        Card.prototype.header = null;
    
                        /**
                         * Card sections.
                         * @member {Array.<google.apps.card.v1.Card.ISection>} sections
                         * @memberof google.apps.card.v1.Card
                         * @instance
                         */
                        Card.prototype.sections = $util.emptyArray;
    
                        /**
                         * Card sectionDividerStyle.
                         * @member {google.apps.card.v1.Card.DividerStyle} sectionDividerStyle
                         * @memberof google.apps.card.v1.Card
                         * @instance
                         */
                        Card.prototype.sectionDividerStyle = 0;
    
                        /**
                         * Card cardActions.
                         * @member {Array.<google.apps.card.v1.Card.ICardAction>} cardActions
                         * @memberof google.apps.card.v1.Card
                         * @instance
                         */
                        Card.prototype.cardActions = $util.emptyArray;
    
                        /**
                         * Card name.
                         * @member {string} name
                         * @memberof google.apps.card.v1.Card
                         * @instance
                         */
                        Card.prototype.name = "";
    
                        /**
                         * Card fixedFooter.
                         * @member {google.apps.card.v1.Card.ICardFixedFooter|null|undefined} fixedFooter
                         * @memberof google.apps.card.v1.Card
                         * @instance
                         */
                        Card.prototype.fixedFooter = null;
    
                        /**
                         * Card displayStyle.
                         * @member {google.apps.card.v1.Card.DisplayStyle} displayStyle
                         * @memberof google.apps.card.v1.Card
                         * @instance
                         */
                        Card.prototype.displayStyle = 0;
    
                        /**
                         * Card peekCardHeader.
                         * @member {google.apps.card.v1.Card.ICardHeader|null|undefined} peekCardHeader
                         * @memberof google.apps.card.v1.Card
                         * @instance
                         */
                        Card.prototype.peekCardHeader = null;
    
                        /**
                         * Creates a new Card instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.Card
                         * @static
                         * @param {google.apps.card.v1.ICard=} [properties] Properties to set
                         * @returns {google.apps.card.v1.Card} Card instance
                         */
                        Card.create = function create(properties) {
                            return new Card(properties);
                        };
    
                        /**
                         * Encodes the specified Card message. Does not implicitly {@link google.apps.card.v1.Card.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.Card
                         * @static
                         * @param {google.apps.card.v1.ICard} message Card message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Card.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                                $root.google.apps.card.v1.Card.CardHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.sections != null && message.sections.length)
                                for (var i = 0; i < message.sections.length; ++i)
                                    $root.google.apps.card.v1.Card.Section.encode(message.sections[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.cardActions != null && message.cardActions.length)
                                for (var i = 0; i < message.cardActions.length; ++i)
                                    $root.google.apps.card.v1.Card.CardAction.encode(message.cardActions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                            if (message.fixedFooter != null && Object.hasOwnProperty.call(message, "fixedFooter"))
                                $root.google.apps.card.v1.Card.CardFixedFooter.encode(message.fixedFooter, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.displayStyle != null && Object.hasOwnProperty.call(message, "displayStyle"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.displayStyle);
                            if (message.peekCardHeader != null && Object.hasOwnProperty.call(message, "peekCardHeader"))
                                $root.google.apps.card.v1.Card.CardHeader.encode(message.peekCardHeader, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.sectionDividerStyle != null && Object.hasOwnProperty.call(message, "sectionDividerStyle"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.sectionDividerStyle);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Card message, length delimited. Does not implicitly {@link google.apps.card.v1.Card.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.Card
                         * @static
                         * @param {google.apps.card.v1.ICard} message Card message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Card.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Card message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.Card
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.Card} Card
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Card.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Card();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.header = $root.google.apps.card.v1.Card.CardHeader.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.sections && message.sections.length))
                                            message.sections = [];
                                        message.sections.push($root.google.apps.card.v1.Card.Section.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 9: {
                                        message.sectionDividerStyle = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.cardActions && message.cardActions.length))
                                            message.cardActions = [];
                                        message.cardActions.push($root.google.apps.card.v1.Card.CardAction.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.fixedFooter = $root.google.apps.card.v1.Card.CardFixedFooter.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.displayStyle = reader.int32();
                                        break;
                                    }
                                case 7: {
                                        message.peekCardHeader = $root.google.apps.card.v1.Card.CardHeader.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Card message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.Card
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.Card} Card
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Card.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Card message.
                         * @function verify
                         * @memberof google.apps.card.v1.Card
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Card.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.header != null && message.hasOwnProperty("header")) {
                                var error = $root.google.apps.card.v1.Card.CardHeader.verify(message.header);
                                if (error)
                                    return "header." + error;
                            }
                            if (message.sections != null && message.hasOwnProperty("sections")) {
                                if (!Array.isArray(message.sections))
                                    return "sections: array expected";
                                for (var i = 0; i < message.sections.length; ++i) {
                                    var error = $root.google.apps.card.v1.Card.Section.verify(message.sections[i]);
                                    if (error)
                                        return "sections." + error;
                                }
                            }
                            if (message.sectionDividerStyle != null && message.hasOwnProperty("sectionDividerStyle"))
                                switch (message.sectionDividerStyle) {
                                default:
                                    return "sectionDividerStyle: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.cardActions != null && message.hasOwnProperty("cardActions")) {
                                if (!Array.isArray(message.cardActions))
                                    return "cardActions: array expected";
                                for (var i = 0; i < message.cardActions.length; ++i) {
                                    var error = $root.google.apps.card.v1.Card.CardAction.verify(message.cardActions[i]);
                                    if (error)
                                        return "cardActions." + error;
                                }
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.fixedFooter != null && message.hasOwnProperty("fixedFooter")) {
                                var error = $root.google.apps.card.v1.Card.CardFixedFooter.verify(message.fixedFooter);
                                if (error)
                                    return "fixedFooter." + error;
                            }
                            if (message.displayStyle != null && message.hasOwnProperty("displayStyle"))
                                switch (message.displayStyle) {
                                default:
                                    return "displayStyle: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.peekCardHeader != null && message.hasOwnProperty("peekCardHeader")) {
                                var error = $root.google.apps.card.v1.Card.CardHeader.verify(message.peekCardHeader);
                                if (error)
                                    return "peekCardHeader." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Card message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.Card
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.Card} Card
                         */
                        Card.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.Card)
                                return object;
                            var message = new $root.google.apps.card.v1.Card();
                            if (object.header != null) {
                                if (typeof object.header !== "object")
                                    throw TypeError(".google.apps.card.v1.Card.header: object expected");
                                message.header = $root.google.apps.card.v1.Card.CardHeader.fromObject(object.header);
                            }
                            if (object.sections) {
                                if (!Array.isArray(object.sections))
                                    throw TypeError(".google.apps.card.v1.Card.sections: array expected");
                                message.sections = [];
                                for (var i = 0; i < object.sections.length; ++i) {
                                    if (typeof object.sections[i] !== "object")
                                        throw TypeError(".google.apps.card.v1.Card.sections: object expected");
                                    message.sections[i] = $root.google.apps.card.v1.Card.Section.fromObject(object.sections[i]);
                                }
                            }
                            switch (object.sectionDividerStyle) {
                            default:
                                if (typeof object.sectionDividerStyle === "number") {
                                    message.sectionDividerStyle = object.sectionDividerStyle;
                                    break;
                                }
                                break;
                            case "DIVIDER_STYLE_UNSPECIFIED":
                            case 0:
                                message.sectionDividerStyle = 0;
                                break;
                            case "SOLID_DIVIDER":
                            case 1:
                                message.sectionDividerStyle = 1;
                                break;
                            case "NO_DIVIDER":
                            case 2:
                                message.sectionDividerStyle = 2;
                                break;
                            }
                            if (object.cardActions) {
                                if (!Array.isArray(object.cardActions))
                                    throw TypeError(".google.apps.card.v1.Card.cardActions: array expected");
                                message.cardActions = [];
                                for (var i = 0; i < object.cardActions.length; ++i) {
                                    if (typeof object.cardActions[i] !== "object")
                                        throw TypeError(".google.apps.card.v1.Card.cardActions: object expected");
                                    message.cardActions[i] = $root.google.apps.card.v1.Card.CardAction.fromObject(object.cardActions[i]);
                                }
                            }
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.fixedFooter != null) {
                                if (typeof object.fixedFooter !== "object")
                                    throw TypeError(".google.apps.card.v1.Card.fixedFooter: object expected");
                                message.fixedFooter = $root.google.apps.card.v1.Card.CardFixedFooter.fromObject(object.fixedFooter);
                            }
                            switch (object.displayStyle) {
                            default:
                                if (typeof object.displayStyle === "number") {
                                    message.displayStyle = object.displayStyle;
                                    break;
                                }
                                break;
                            case "DISPLAY_STYLE_UNSPECIFIED":
                            case 0:
                                message.displayStyle = 0;
                                break;
                            case "PEEK":
                            case 1:
                                message.displayStyle = 1;
                                break;
                            case "REPLACE":
                            case 2:
                                message.displayStyle = 2;
                                break;
                            }
                            if (object.peekCardHeader != null) {
                                if (typeof object.peekCardHeader !== "object")
                                    throw TypeError(".google.apps.card.v1.Card.peekCardHeader: object expected");
                                message.peekCardHeader = $root.google.apps.card.v1.Card.CardHeader.fromObject(object.peekCardHeader);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Card message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.Card
                         * @static
                         * @param {google.apps.card.v1.Card} message Card
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Card.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.sections = [];
                                object.cardActions = [];
                            }
                            if (options.defaults) {
                                object.header = null;
                                object.name = "";
                                object.fixedFooter = null;
                                object.displayStyle = options.enums === String ? "DISPLAY_STYLE_UNSPECIFIED" : 0;
                                object.peekCardHeader = null;
                                object.sectionDividerStyle = options.enums === String ? "DIVIDER_STYLE_UNSPECIFIED" : 0;
                            }
                            if (message.header != null && message.hasOwnProperty("header"))
                                object.header = $root.google.apps.card.v1.Card.CardHeader.toObject(message.header, options);
                            if (message.sections && message.sections.length) {
                                object.sections = [];
                                for (var j = 0; j < message.sections.length; ++j)
                                    object.sections[j] = $root.google.apps.card.v1.Card.Section.toObject(message.sections[j], options);
                            }
                            if (message.cardActions && message.cardActions.length) {
                                object.cardActions = [];
                                for (var j = 0; j < message.cardActions.length; ++j)
                                    object.cardActions[j] = $root.google.apps.card.v1.Card.CardAction.toObject(message.cardActions[j], options);
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.fixedFooter != null && message.hasOwnProperty("fixedFooter"))
                                object.fixedFooter = $root.google.apps.card.v1.Card.CardFixedFooter.toObject(message.fixedFooter, options);
                            if (message.displayStyle != null && message.hasOwnProperty("displayStyle"))
                                object.displayStyle = options.enums === String ? $root.google.apps.card.v1.Card.DisplayStyle[message.displayStyle] === undefined ? message.displayStyle : $root.google.apps.card.v1.Card.DisplayStyle[message.displayStyle] : message.displayStyle;
                            if (message.peekCardHeader != null && message.hasOwnProperty("peekCardHeader"))
                                object.peekCardHeader = $root.google.apps.card.v1.Card.CardHeader.toObject(message.peekCardHeader, options);
                            if (message.sectionDividerStyle != null && message.hasOwnProperty("sectionDividerStyle"))
                                object.sectionDividerStyle = options.enums === String ? $root.google.apps.card.v1.Card.DividerStyle[message.sectionDividerStyle] === undefined ? message.sectionDividerStyle : $root.google.apps.card.v1.Card.DividerStyle[message.sectionDividerStyle] : message.sectionDividerStyle;
                            return object;
                        };
    
                        /**
                         * Converts this Card to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.Card
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Card.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Card
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.Card
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Card.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.Card";
                        };
    
                        Card.CardHeader = (function() {
    
                            /**
                             * Properties of a CardHeader.
                             * @memberof google.apps.card.v1.Card
                             * @interface ICardHeader
                             * @property {string|null} [title] CardHeader title
                             * @property {string|null} [subtitle] CardHeader subtitle
                             * @property {google.apps.card.v1.Widget.ImageType|null} [imageType] CardHeader imageType
                             * @property {string|null} [imageUrl] CardHeader imageUrl
                             * @property {string|null} [imageAltText] CardHeader imageAltText
                             */
    
                            /**
                             * Constructs a new CardHeader.
                             * @memberof google.apps.card.v1.Card
                             * @classdesc Represents a CardHeader.
                             * @implements ICardHeader
                             * @constructor
                             * @param {google.apps.card.v1.Card.ICardHeader=} [properties] Properties to set
                             */
                            function CardHeader(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CardHeader title.
                             * @member {string} title
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @instance
                             */
                            CardHeader.prototype.title = "";
    
                            /**
                             * CardHeader subtitle.
                             * @member {string} subtitle
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @instance
                             */
                            CardHeader.prototype.subtitle = "";
    
                            /**
                             * CardHeader imageType.
                             * @member {google.apps.card.v1.Widget.ImageType} imageType
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @instance
                             */
                            CardHeader.prototype.imageType = 0;
    
                            /**
                             * CardHeader imageUrl.
                             * @member {string} imageUrl
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @instance
                             */
                            CardHeader.prototype.imageUrl = "";
    
                            /**
                             * CardHeader imageAltText.
                             * @member {string} imageAltText
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @instance
                             */
                            CardHeader.prototype.imageAltText = "";
    
                            /**
                             * Creates a new CardHeader instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @static
                             * @param {google.apps.card.v1.Card.ICardHeader=} [properties] Properties to set
                             * @returns {google.apps.card.v1.Card.CardHeader} CardHeader instance
                             */
                            CardHeader.create = function create(properties) {
                                return new CardHeader(properties);
                            };
    
                            /**
                             * Encodes the specified CardHeader message. Does not implicitly {@link google.apps.card.v1.Card.CardHeader.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @static
                             * @param {google.apps.card.v1.Card.ICardHeader} message CardHeader message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardHeader.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                                if (message.subtitle != null && Object.hasOwnProperty.call(message, "subtitle"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.subtitle);
                                if (message.imageType != null && Object.hasOwnProperty.call(message, "imageType"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.imageType);
                                if (message.imageUrl != null && Object.hasOwnProperty.call(message, "imageUrl"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.imageUrl);
                                if (message.imageAltText != null && Object.hasOwnProperty.call(message, "imageAltText"))
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.imageAltText);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CardHeader message, length delimited. Does not implicitly {@link google.apps.card.v1.Card.CardHeader.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @static
                             * @param {google.apps.card.v1.Card.ICardHeader} message CardHeader message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardHeader.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CardHeader message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.Card.CardHeader} CardHeader
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardHeader.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Card.CardHeader();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.title = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.subtitle = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.imageType = reader.int32();
                                            break;
                                        }
                                    case 4: {
                                            message.imageUrl = reader.string();
                                            break;
                                        }
                                    case 5: {
                                            message.imageAltText = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CardHeader message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.Card.CardHeader} CardHeader
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardHeader.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CardHeader message.
                             * @function verify
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CardHeader.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.title != null && message.hasOwnProperty("title"))
                                    if (!$util.isString(message.title))
                                        return "title: string expected";
                                if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                                    if (!$util.isString(message.subtitle))
                                        return "subtitle: string expected";
                                if (message.imageType != null && message.hasOwnProperty("imageType"))
                                    switch (message.imageType) {
                                    default:
                                        return "imageType: enum value expected";
                                    case 0:
                                    case 1:
                                        break;
                                    }
                                if (message.imageUrl != null && message.hasOwnProperty("imageUrl"))
                                    if (!$util.isString(message.imageUrl))
                                        return "imageUrl: string expected";
                                if (message.imageAltText != null && message.hasOwnProperty("imageAltText"))
                                    if (!$util.isString(message.imageAltText))
                                        return "imageAltText: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a CardHeader message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.Card.CardHeader} CardHeader
                             */
                            CardHeader.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.Card.CardHeader)
                                    return object;
                                var message = new $root.google.apps.card.v1.Card.CardHeader();
                                if (object.title != null)
                                    message.title = String(object.title);
                                if (object.subtitle != null)
                                    message.subtitle = String(object.subtitle);
                                switch (object.imageType) {
                                default:
                                    if (typeof object.imageType === "number") {
                                        message.imageType = object.imageType;
                                        break;
                                    }
                                    break;
                                case "SQUARE":
                                case 0:
                                    message.imageType = 0;
                                    break;
                                case "CIRCLE":
                                case 1:
                                    message.imageType = 1;
                                    break;
                                }
                                if (object.imageUrl != null)
                                    message.imageUrl = String(object.imageUrl);
                                if (object.imageAltText != null)
                                    message.imageAltText = String(object.imageAltText);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CardHeader message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @static
                             * @param {google.apps.card.v1.Card.CardHeader} message CardHeader
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CardHeader.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.title = "";
                                    object.subtitle = "";
                                    object.imageType = options.enums === String ? "SQUARE" : 0;
                                    object.imageUrl = "";
                                    object.imageAltText = "";
                                }
                                if (message.title != null && message.hasOwnProperty("title"))
                                    object.title = message.title;
                                if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                                    object.subtitle = message.subtitle;
                                if (message.imageType != null && message.hasOwnProperty("imageType"))
                                    object.imageType = options.enums === String ? $root.google.apps.card.v1.Widget.ImageType[message.imageType] === undefined ? message.imageType : $root.google.apps.card.v1.Widget.ImageType[message.imageType] : message.imageType;
                                if (message.imageUrl != null && message.hasOwnProperty("imageUrl"))
                                    object.imageUrl = message.imageUrl;
                                if (message.imageAltText != null && message.hasOwnProperty("imageAltText"))
                                    object.imageAltText = message.imageAltText;
                                return object;
                            };
    
                            /**
                             * Converts this CardHeader to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CardHeader.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for CardHeader
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.Card.CardHeader
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            CardHeader.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.Card.CardHeader";
                            };
    
                            return CardHeader;
                        })();
    
                        Card.Section = (function() {
    
                            /**
                             * Properties of a Section.
                             * @memberof google.apps.card.v1.Card
                             * @interface ISection
                             * @property {string|null} [header] Section header
                             * @property {Array.<google.apps.card.v1.IWidget>|null} [widgets] Section widgets
                             * @property {boolean|null} [collapsible] Section collapsible
                             * @property {number|null} [uncollapsibleWidgetsCount] Section uncollapsibleWidgetsCount
                             */
    
                            /**
                             * Constructs a new Section.
                             * @memberof google.apps.card.v1.Card
                             * @classdesc Represents a Section.
                             * @implements ISection
                             * @constructor
                             * @param {google.apps.card.v1.Card.ISection=} [properties] Properties to set
                             */
                            function Section(properties) {
                                this.widgets = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Section header.
                             * @member {string} header
                             * @memberof google.apps.card.v1.Card.Section
                             * @instance
                             */
                            Section.prototype.header = "";
    
                            /**
                             * Section widgets.
                             * @member {Array.<google.apps.card.v1.IWidget>} widgets
                             * @memberof google.apps.card.v1.Card.Section
                             * @instance
                             */
                            Section.prototype.widgets = $util.emptyArray;
    
                            /**
                             * Section collapsible.
                             * @member {boolean} collapsible
                             * @memberof google.apps.card.v1.Card.Section
                             * @instance
                             */
                            Section.prototype.collapsible = false;
    
                            /**
                             * Section uncollapsibleWidgetsCount.
                             * @member {number} uncollapsibleWidgetsCount
                             * @memberof google.apps.card.v1.Card.Section
                             * @instance
                             */
                            Section.prototype.uncollapsibleWidgetsCount = 0;
    
                            /**
                             * Creates a new Section instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.Card.Section
                             * @static
                             * @param {google.apps.card.v1.Card.ISection=} [properties] Properties to set
                             * @returns {google.apps.card.v1.Card.Section} Section instance
                             */
                            Section.create = function create(properties) {
                                return new Section(properties);
                            };
    
                            /**
                             * Encodes the specified Section message. Does not implicitly {@link google.apps.card.v1.Card.Section.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.Card.Section
                             * @static
                             * @param {google.apps.card.v1.Card.ISection} message Section message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Section.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.header);
                                if (message.widgets != null && message.widgets.length)
                                    for (var i = 0; i < message.widgets.length; ++i)
                                        $root.google.apps.card.v1.Widget.encode(message.widgets[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.collapsible != null && Object.hasOwnProperty.call(message, "collapsible"))
                                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.collapsible);
                                if (message.uncollapsibleWidgetsCount != null && Object.hasOwnProperty.call(message, "uncollapsibleWidgetsCount"))
                                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.uncollapsibleWidgetsCount);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Section message, length delimited. Does not implicitly {@link google.apps.card.v1.Card.Section.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.Card.Section
                             * @static
                             * @param {google.apps.card.v1.Card.ISection} message Section message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Section.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Section message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.Card.Section
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.Card.Section} Section
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Section.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Card.Section();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.header = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.widgets && message.widgets.length))
                                                message.widgets = [];
                                            message.widgets.push($root.google.apps.card.v1.Widget.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 5: {
                                            message.collapsible = reader.bool();
                                            break;
                                        }
                                    case 6: {
                                            message.uncollapsibleWidgetsCount = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Section message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.Card.Section
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.Card.Section} Section
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Section.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Section message.
                             * @function verify
                             * @memberof google.apps.card.v1.Card.Section
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Section.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.header != null && message.hasOwnProperty("header"))
                                    if (!$util.isString(message.header))
                                        return "header: string expected";
                                if (message.widgets != null && message.hasOwnProperty("widgets")) {
                                    if (!Array.isArray(message.widgets))
                                        return "widgets: array expected";
                                    for (var i = 0; i < message.widgets.length; ++i) {
                                        var error = $root.google.apps.card.v1.Widget.verify(message.widgets[i]);
                                        if (error)
                                            return "widgets." + error;
                                    }
                                }
                                if (message.collapsible != null && message.hasOwnProperty("collapsible"))
                                    if (typeof message.collapsible !== "boolean")
                                        return "collapsible: boolean expected";
                                if (message.uncollapsibleWidgetsCount != null && message.hasOwnProperty("uncollapsibleWidgetsCount"))
                                    if (!$util.isInteger(message.uncollapsibleWidgetsCount))
                                        return "uncollapsibleWidgetsCount: integer expected";
                                return null;
                            };
    
                            /**
                             * Creates a Section message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.Card.Section
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.Card.Section} Section
                             */
                            Section.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.Card.Section)
                                    return object;
                                var message = new $root.google.apps.card.v1.Card.Section();
                                if (object.header != null)
                                    message.header = String(object.header);
                                if (object.widgets) {
                                    if (!Array.isArray(object.widgets))
                                        throw TypeError(".google.apps.card.v1.Card.Section.widgets: array expected");
                                    message.widgets = [];
                                    for (var i = 0; i < object.widgets.length; ++i) {
                                        if (typeof object.widgets[i] !== "object")
                                            throw TypeError(".google.apps.card.v1.Card.Section.widgets: object expected");
                                        message.widgets[i] = $root.google.apps.card.v1.Widget.fromObject(object.widgets[i]);
                                    }
                                }
                                if (object.collapsible != null)
                                    message.collapsible = Boolean(object.collapsible);
                                if (object.uncollapsibleWidgetsCount != null)
                                    message.uncollapsibleWidgetsCount = object.uncollapsibleWidgetsCount | 0;
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Section message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.Card.Section
                             * @static
                             * @param {google.apps.card.v1.Card.Section} message Section
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Section.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.widgets = [];
                                if (options.defaults) {
                                    object.header = "";
                                    object.collapsible = false;
                                    object.uncollapsibleWidgetsCount = 0;
                                }
                                if (message.header != null && message.hasOwnProperty("header"))
                                    object.header = message.header;
                                if (message.widgets && message.widgets.length) {
                                    object.widgets = [];
                                    for (var j = 0; j < message.widgets.length; ++j)
                                        object.widgets[j] = $root.google.apps.card.v1.Widget.toObject(message.widgets[j], options);
                                }
                                if (message.collapsible != null && message.hasOwnProperty("collapsible"))
                                    object.collapsible = message.collapsible;
                                if (message.uncollapsibleWidgetsCount != null && message.hasOwnProperty("uncollapsibleWidgetsCount"))
                                    object.uncollapsibleWidgetsCount = message.uncollapsibleWidgetsCount;
                                return object;
                            };
    
                            /**
                             * Converts this Section to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.Card.Section
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Section.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Section
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.Card.Section
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Section.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.Card.Section";
                            };
    
                            return Section;
                        })();
    
                        /**
                         * DividerStyle enum.
                         * @name google.apps.card.v1.Card.DividerStyle
                         * @enum {number}
                         * @property {number} DIVIDER_STYLE_UNSPECIFIED=0 DIVIDER_STYLE_UNSPECIFIED value
                         * @property {number} SOLID_DIVIDER=1 SOLID_DIVIDER value
                         * @property {number} NO_DIVIDER=2 NO_DIVIDER value
                         */
                        Card.DividerStyle = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "DIVIDER_STYLE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "SOLID_DIVIDER"] = 1;
                            values[valuesById[2] = "NO_DIVIDER"] = 2;
                            return values;
                        })();
    
                        Card.CardAction = (function() {
    
                            /**
                             * Properties of a CardAction.
                             * @memberof google.apps.card.v1.Card
                             * @interface ICardAction
                             * @property {string|null} [actionLabel] CardAction actionLabel
                             * @property {google.apps.card.v1.IOnClick|null} [onClick] CardAction onClick
                             */
    
                            /**
                             * Constructs a new CardAction.
                             * @memberof google.apps.card.v1.Card
                             * @classdesc Represents a CardAction.
                             * @implements ICardAction
                             * @constructor
                             * @param {google.apps.card.v1.Card.ICardAction=} [properties] Properties to set
                             */
                            function CardAction(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CardAction actionLabel.
                             * @member {string} actionLabel
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @instance
                             */
                            CardAction.prototype.actionLabel = "";
    
                            /**
                             * CardAction onClick.
                             * @member {google.apps.card.v1.IOnClick|null|undefined} onClick
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @instance
                             */
                            CardAction.prototype.onClick = null;
    
                            /**
                             * Creates a new CardAction instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @static
                             * @param {google.apps.card.v1.Card.ICardAction=} [properties] Properties to set
                             * @returns {google.apps.card.v1.Card.CardAction} CardAction instance
                             */
                            CardAction.create = function create(properties) {
                                return new CardAction(properties);
                            };
    
                            /**
                             * Encodes the specified CardAction message. Does not implicitly {@link google.apps.card.v1.Card.CardAction.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @static
                             * @param {google.apps.card.v1.Card.ICardAction} message CardAction message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardAction.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.actionLabel != null && Object.hasOwnProperty.call(message, "actionLabel"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.actionLabel);
                                if (message.onClick != null && Object.hasOwnProperty.call(message, "onClick"))
                                    $root.google.apps.card.v1.OnClick.encode(message.onClick, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CardAction message, length delimited. Does not implicitly {@link google.apps.card.v1.Card.CardAction.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @static
                             * @param {google.apps.card.v1.Card.ICardAction} message CardAction message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardAction.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CardAction message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.Card.CardAction} CardAction
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardAction.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Card.CardAction();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.actionLabel = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.onClick = $root.google.apps.card.v1.OnClick.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CardAction message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.Card.CardAction} CardAction
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardAction.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CardAction message.
                             * @function verify
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CardAction.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.actionLabel != null && message.hasOwnProperty("actionLabel"))
                                    if (!$util.isString(message.actionLabel))
                                        return "actionLabel: string expected";
                                if (message.onClick != null && message.hasOwnProperty("onClick")) {
                                    var error = $root.google.apps.card.v1.OnClick.verify(message.onClick);
                                    if (error)
                                        return "onClick." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CardAction message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.Card.CardAction} CardAction
                             */
                            CardAction.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.Card.CardAction)
                                    return object;
                                var message = new $root.google.apps.card.v1.Card.CardAction();
                                if (object.actionLabel != null)
                                    message.actionLabel = String(object.actionLabel);
                                if (object.onClick != null) {
                                    if (typeof object.onClick !== "object")
                                        throw TypeError(".google.apps.card.v1.Card.CardAction.onClick: object expected");
                                    message.onClick = $root.google.apps.card.v1.OnClick.fromObject(object.onClick);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CardAction message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @static
                             * @param {google.apps.card.v1.Card.CardAction} message CardAction
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CardAction.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.actionLabel = "";
                                    object.onClick = null;
                                }
                                if (message.actionLabel != null && message.hasOwnProperty("actionLabel"))
                                    object.actionLabel = message.actionLabel;
                                if (message.onClick != null && message.hasOwnProperty("onClick"))
                                    object.onClick = $root.google.apps.card.v1.OnClick.toObject(message.onClick, options);
                                return object;
                            };
    
                            /**
                             * Converts this CardAction to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CardAction.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for CardAction
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.Card.CardAction
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            CardAction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.Card.CardAction";
                            };
    
                            return CardAction;
                        })();
    
                        Card.CardFixedFooter = (function() {
    
                            /**
                             * Properties of a CardFixedFooter.
                             * @memberof google.apps.card.v1.Card
                             * @interface ICardFixedFooter
                             * @property {google.apps.card.v1.IButton|null} [primaryButton] CardFixedFooter primaryButton
                             * @property {google.apps.card.v1.IButton|null} [secondaryButton] CardFixedFooter secondaryButton
                             */
    
                            /**
                             * Constructs a new CardFixedFooter.
                             * @memberof google.apps.card.v1.Card
                             * @classdesc Represents a CardFixedFooter.
                             * @implements ICardFixedFooter
                             * @constructor
                             * @param {google.apps.card.v1.Card.ICardFixedFooter=} [properties] Properties to set
                             */
                            function CardFixedFooter(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CardFixedFooter primaryButton.
                             * @member {google.apps.card.v1.IButton|null|undefined} primaryButton
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @instance
                             */
                            CardFixedFooter.prototype.primaryButton = null;
    
                            /**
                             * CardFixedFooter secondaryButton.
                             * @member {google.apps.card.v1.IButton|null|undefined} secondaryButton
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @instance
                             */
                            CardFixedFooter.prototype.secondaryButton = null;
    
                            /**
                             * Creates a new CardFixedFooter instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @static
                             * @param {google.apps.card.v1.Card.ICardFixedFooter=} [properties] Properties to set
                             * @returns {google.apps.card.v1.Card.CardFixedFooter} CardFixedFooter instance
                             */
                            CardFixedFooter.create = function create(properties) {
                                return new CardFixedFooter(properties);
                            };
    
                            /**
                             * Encodes the specified CardFixedFooter message. Does not implicitly {@link google.apps.card.v1.Card.CardFixedFooter.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @static
                             * @param {google.apps.card.v1.Card.ICardFixedFooter} message CardFixedFooter message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardFixedFooter.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.primaryButton != null && Object.hasOwnProperty.call(message, "primaryButton"))
                                    $root.google.apps.card.v1.Button.encode(message.primaryButton, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.secondaryButton != null && Object.hasOwnProperty.call(message, "secondaryButton"))
                                    $root.google.apps.card.v1.Button.encode(message.secondaryButton, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CardFixedFooter message, length delimited. Does not implicitly {@link google.apps.card.v1.Card.CardFixedFooter.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @static
                             * @param {google.apps.card.v1.Card.ICardFixedFooter} message CardFixedFooter message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardFixedFooter.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CardFixedFooter message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.Card.CardFixedFooter} CardFixedFooter
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardFixedFooter.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Card.CardFixedFooter();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.primaryButton = $root.google.apps.card.v1.Button.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 2: {
                                            message.secondaryButton = $root.google.apps.card.v1.Button.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CardFixedFooter message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.Card.CardFixedFooter} CardFixedFooter
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardFixedFooter.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CardFixedFooter message.
                             * @function verify
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CardFixedFooter.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.primaryButton != null && message.hasOwnProperty("primaryButton")) {
                                    var error = $root.google.apps.card.v1.Button.verify(message.primaryButton);
                                    if (error)
                                        return "primaryButton." + error;
                                }
                                if (message.secondaryButton != null && message.hasOwnProperty("secondaryButton")) {
                                    var error = $root.google.apps.card.v1.Button.verify(message.secondaryButton);
                                    if (error)
                                        return "secondaryButton." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CardFixedFooter message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.Card.CardFixedFooter} CardFixedFooter
                             */
                            CardFixedFooter.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.Card.CardFixedFooter)
                                    return object;
                                var message = new $root.google.apps.card.v1.Card.CardFixedFooter();
                                if (object.primaryButton != null) {
                                    if (typeof object.primaryButton !== "object")
                                        throw TypeError(".google.apps.card.v1.Card.CardFixedFooter.primaryButton: object expected");
                                    message.primaryButton = $root.google.apps.card.v1.Button.fromObject(object.primaryButton);
                                }
                                if (object.secondaryButton != null) {
                                    if (typeof object.secondaryButton !== "object")
                                        throw TypeError(".google.apps.card.v1.Card.CardFixedFooter.secondaryButton: object expected");
                                    message.secondaryButton = $root.google.apps.card.v1.Button.fromObject(object.secondaryButton);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CardFixedFooter message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @static
                             * @param {google.apps.card.v1.Card.CardFixedFooter} message CardFixedFooter
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CardFixedFooter.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.primaryButton = null;
                                    object.secondaryButton = null;
                                }
                                if (message.primaryButton != null && message.hasOwnProperty("primaryButton"))
                                    object.primaryButton = $root.google.apps.card.v1.Button.toObject(message.primaryButton, options);
                                if (message.secondaryButton != null && message.hasOwnProperty("secondaryButton"))
                                    object.secondaryButton = $root.google.apps.card.v1.Button.toObject(message.secondaryButton, options);
                                return object;
                            };
    
                            /**
                             * Converts this CardFixedFooter to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CardFixedFooter.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for CardFixedFooter
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.Card.CardFixedFooter
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            CardFixedFooter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.Card.CardFixedFooter";
                            };
    
                            return CardFixedFooter;
                        })();
    
                        /**
                         * DisplayStyle enum.
                         * @name google.apps.card.v1.Card.DisplayStyle
                         * @enum {number}
                         * @property {number} DISPLAY_STYLE_UNSPECIFIED=0 DISPLAY_STYLE_UNSPECIFIED value
                         * @property {number} PEEK=1 PEEK value
                         * @property {number} REPLACE=2 REPLACE value
                         */
                        Card.DisplayStyle = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "DISPLAY_STYLE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PEEK"] = 1;
                            values[valuesById[2] = "REPLACE"] = 2;
                            return values;
                        })();
    
                        return Card;
                    })();
    
                    v1.Widget = (function() {
    
                        /**
                         * Properties of a Widget.
                         * @memberof google.apps.card.v1
                         * @interface IWidget
                         * @property {google.apps.card.v1.ITextParagraph|null} [textParagraph] Widget textParagraph
                         * @property {google.apps.card.v1.IImage|null} [image] Widget image
                         * @property {google.apps.card.v1.IDecoratedText|null} [decoratedText] Widget decoratedText
                         * @property {google.apps.card.v1.IButtonList|null} [buttonList] Widget buttonList
                         * @property {google.apps.card.v1.ITextInput|null} [textInput] Widget textInput
                         * @property {google.apps.card.v1.ISelectionInput|null} [selectionInput] Widget selectionInput
                         * @property {google.apps.card.v1.IDateTimePicker|null} [dateTimePicker] Widget dateTimePicker
                         * @property {google.apps.card.v1.IDivider|null} [divider] Widget divider
                         * @property {google.apps.card.v1.IGrid|null} [grid] Widget grid
                         * @property {google.apps.card.v1.IColumns|null} [columns] Widget columns
                         * @property {google.apps.card.v1.Widget.HorizontalAlignment|null} [horizontalAlignment] Widget horizontalAlignment
                         */
    
                        /**
                         * Constructs a new Widget.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a Widget.
                         * @implements IWidget
                         * @constructor
                         * @param {google.apps.card.v1.IWidget=} [properties] Properties to set
                         */
                        function Widget(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Widget textParagraph.
                         * @member {google.apps.card.v1.ITextParagraph|null|undefined} textParagraph
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.textParagraph = null;
    
                        /**
                         * Widget image.
                         * @member {google.apps.card.v1.IImage|null|undefined} image
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.image = null;
    
                        /**
                         * Widget decoratedText.
                         * @member {google.apps.card.v1.IDecoratedText|null|undefined} decoratedText
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.decoratedText = null;
    
                        /**
                         * Widget buttonList.
                         * @member {google.apps.card.v1.IButtonList|null|undefined} buttonList
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.buttonList = null;
    
                        /**
                         * Widget textInput.
                         * @member {google.apps.card.v1.ITextInput|null|undefined} textInput
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.textInput = null;
    
                        /**
                         * Widget selectionInput.
                         * @member {google.apps.card.v1.ISelectionInput|null|undefined} selectionInput
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.selectionInput = null;
    
                        /**
                         * Widget dateTimePicker.
                         * @member {google.apps.card.v1.IDateTimePicker|null|undefined} dateTimePicker
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.dateTimePicker = null;
    
                        /**
                         * Widget divider.
                         * @member {google.apps.card.v1.IDivider|null|undefined} divider
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.divider = null;
    
                        /**
                         * Widget grid.
                         * @member {google.apps.card.v1.IGrid|null|undefined} grid
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.grid = null;
    
                        /**
                         * Widget columns.
                         * @member {google.apps.card.v1.IColumns|null|undefined} columns
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.columns = null;
    
                        /**
                         * Widget horizontalAlignment.
                         * @member {google.apps.card.v1.Widget.HorizontalAlignment} horizontalAlignment
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Widget.prototype.horizontalAlignment = 0;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Widget data.
                         * @member {"textParagraph"|"image"|"decoratedText"|"buttonList"|"textInput"|"selectionInput"|"dateTimePicker"|"divider"|"grid"|"columns"|undefined} data
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         */
                        Object.defineProperty(Widget.prototype, "data", {
                            get: $util.oneOfGetter($oneOfFields = ["textParagraph", "image", "decoratedText", "buttonList", "textInput", "selectionInput", "dateTimePicker", "divider", "grid", "columns"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Widget instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.Widget
                         * @static
                         * @param {google.apps.card.v1.IWidget=} [properties] Properties to set
                         * @returns {google.apps.card.v1.Widget} Widget instance
                         */
                        Widget.create = function create(properties) {
                            return new Widget(properties);
                        };
    
                        /**
                         * Encodes the specified Widget message. Does not implicitly {@link google.apps.card.v1.Widget.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.Widget
                         * @static
                         * @param {google.apps.card.v1.IWidget} message Widget message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Widget.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.textParagraph != null && Object.hasOwnProperty.call(message, "textParagraph"))
                                $root.google.apps.card.v1.TextParagraph.encode(message.textParagraph, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                                $root.google.apps.card.v1.Image.encode(message.image, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.decoratedText != null && Object.hasOwnProperty.call(message, "decoratedText"))
                                $root.google.apps.card.v1.DecoratedText.encode(message.decoratedText, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.buttonList != null && Object.hasOwnProperty.call(message, "buttonList"))
                                $root.google.apps.card.v1.ButtonList.encode(message.buttonList, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.textInput != null && Object.hasOwnProperty.call(message, "textInput"))
                                $root.google.apps.card.v1.TextInput.encode(message.textInput, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.selectionInput != null && Object.hasOwnProperty.call(message, "selectionInput"))
                                $root.google.apps.card.v1.SelectionInput.encode(message.selectionInput, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.dateTimePicker != null && Object.hasOwnProperty.call(message, "dateTimePicker"))
                                $root.google.apps.card.v1.DateTimePicker.encode(message.dateTimePicker, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.horizontalAlignment != null && Object.hasOwnProperty.call(message, "horizontalAlignment"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.horizontalAlignment);
                            if (message.divider != null && Object.hasOwnProperty.call(message, "divider"))
                                $root.google.apps.card.v1.Divider.encode(message.divider, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.grid != null && Object.hasOwnProperty.call(message, "grid"))
                                $root.google.apps.card.v1.Grid.encode(message.grid, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            if (message.columns != null && Object.hasOwnProperty.call(message, "columns"))
                                $root.google.apps.card.v1.Columns.encode(message.columns, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Widget message, length delimited. Does not implicitly {@link google.apps.card.v1.Widget.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.Widget
                         * @static
                         * @param {google.apps.card.v1.IWidget} message Widget message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Widget.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Widget message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.Widget
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.Widget} Widget
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Widget.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Widget();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.textParagraph = $root.google.apps.card.v1.TextParagraph.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.image = $root.google.apps.card.v1.Image.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.decoratedText = $root.google.apps.card.v1.DecoratedText.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.buttonList = $root.google.apps.card.v1.ButtonList.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.textInput = $root.google.apps.card.v1.TextInput.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.selectionInput = $root.google.apps.card.v1.SelectionInput.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 7: {
                                        message.dateTimePicker = $root.google.apps.card.v1.DateTimePicker.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.divider = $root.google.apps.card.v1.Divider.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        message.grid = $root.google.apps.card.v1.Grid.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.columns = $root.google.apps.card.v1.Columns.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.horizontalAlignment = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Widget message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.Widget
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.Widget} Widget
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Widget.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Widget message.
                         * @function verify
                         * @memberof google.apps.card.v1.Widget
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Widget.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.textParagraph != null && message.hasOwnProperty("textParagraph")) {
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.TextParagraph.verify(message.textParagraph);
                                    if (error)
                                        return "textParagraph." + error;
                                }
                            }
                            if (message.image != null && message.hasOwnProperty("image")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.Image.verify(message.image);
                                    if (error)
                                        return "image." + error;
                                }
                            }
                            if (message.decoratedText != null && message.hasOwnProperty("decoratedText")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.DecoratedText.verify(message.decoratedText);
                                    if (error)
                                        return "decoratedText." + error;
                                }
                            }
                            if (message.buttonList != null && message.hasOwnProperty("buttonList")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.ButtonList.verify(message.buttonList);
                                    if (error)
                                        return "buttonList." + error;
                                }
                            }
                            if (message.textInput != null && message.hasOwnProperty("textInput")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.TextInput.verify(message.textInput);
                                    if (error)
                                        return "textInput." + error;
                                }
                            }
                            if (message.selectionInput != null && message.hasOwnProperty("selectionInput")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.SelectionInput.verify(message.selectionInput);
                                    if (error)
                                        return "selectionInput." + error;
                                }
                            }
                            if (message.dateTimePicker != null && message.hasOwnProperty("dateTimePicker")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.DateTimePicker.verify(message.dateTimePicker);
                                    if (error)
                                        return "dateTimePicker." + error;
                                }
                            }
                            if (message.divider != null && message.hasOwnProperty("divider")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.Divider.verify(message.divider);
                                    if (error)
                                        return "divider." + error;
                                }
                            }
                            if (message.grid != null && message.hasOwnProperty("grid")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.Grid.verify(message.grid);
                                    if (error)
                                        return "grid." + error;
                                }
                            }
                            if (message.columns != null && message.hasOwnProperty("columns")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.Columns.verify(message.columns);
                                    if (error)
                                        return "columns." + error;
                                }
                            }
                            if (message.horizontalAlignment != null && message.hasOwnProperty("horizontalAlignment"))
                                switch (message.horizontalAlignment) {
                                default:
                                    return "horizontalAlignment: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a Widget message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.Widget
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.Widget} Widget
                         */
                        Widget.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.Widget)
                                return object;
                            var message = new $root.google.apps.card.v1.Widget();
                            if (object.textParagraph != null) {
                                if (typeof object.textParagraph !== "object")
                                    throw TypeError(".google.apps.card.v1.Widget.textParagraph: object expected");
                                message.textParagraph = $root.google.apps.card.v1.TextParagraph.fromObject(object.textParagraph);
                            }
                            if (object.image != null) {
                                if (typeof object.image !== "object")
                                    throw TypeError(".google.apps.card.v1.Widget.image: object expected");
                                message.image = $root.google.apps.card.v1.Image.fromObject(object.image);
                            }
                            if (object.decoratedText != null) {
                                if (typeof object.decoratedText !== "object")
                                    throw TypeError(".google.apps.card.v1.Widget.decoratedText: object expected");
                                message.decoratedText = $root.google.apps.card.v1.DecoratedText.fromObject(object.decoratedText);
                            }
                            if (object.buttonList != null) {
                                if (typeof object.buttonList !== "object")
                                    throw TypeError(".google.apps.card.v1.Widget.buttonList: object expected");
                                message.buttonList = $root.google.apps.card.v1.ButtonList.fromObject(object.buttonList);
                            }
                            if (object.textInput != null) {
                                if (typeof object.textInput !== "object")
                                    throw TypeError(".google.apps.card.v1.Widget.textInput: object expected");
                                message.textInput = $root.google.apps.card.v1.TextInput.fromObject(object.textInput);
                            }
                            if (object.selectionInput != null) {
                                if (typeof object.selectionInput !== "object")
                                    throw TypeError(".google.apps.card.v1.Widget.selectionInput: object expected");
                                message.selectionInput = $root.google.apps.card.v1.SelectionInput.fromObject(object.selectionInput);
                            }
                            if (object.dateTimePicker != null) {
                                if (typeof object.dateTimePicker !== "object")
                                    throw TypeError(".google.apps.card.v1.Widget.dateTimePicker: object expected");
                                message.dateTimePicker = $root.google.apps.card.v1.DateTimePicker.fromObject(object.dateTimePicker);
                            }
                            if (object.divider != null) {
                                if (typeof object.divider !== "object")
                                    throw TypeError(".google.apps.card.v1.Widget.divider: object expected");
                                message.divider = $root.google.apps.card.v1.Divider.fromObject(object.divider);
                            }
                            if (object.grid != null) {
                                if (typeof object.grid !== "object")
                                    throw TypeError(".google.apps.card.v1.Widget.grid: object expected");
                                message.grid = $root.google.apps.card.v1.Grid.fromObject(object.grid);
                            }
                            if (object.columns != null) {
                                if (typeof object.columns !== "object")
                                    throw TypeError(".google.apps.card.v1.Widget.columns: object expected");
                                message.columns = $root.google.apps.card.v1.Columns.fromObject(object.columns);
                            }
                            switch (object.horizontalAlignment) {
                            default:
                                if (typeof object.horizontalAlignment === "number") {
                                    message.horizontalAlignment = object.horizontalAlignment;
                                    break;
                                }
                                break;
                            case "HORIZONTAL_ALIGNMENT_UNSPECIFIED":
                            case 0:
                                message.horizontalAlignment = 0;
                                break;
                            case "START":
                            case 1:
                                message.horizontalAlignment = 1;
                                break;
                            case "CENTER":
                            case 2:
                                message.horizontalAlignment = 2;
                                break;
                            case "END":
                            case 3:
                                message.horizontalAlignment = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Widget message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.Widget
                         * @static
                         * @param {google.apps.card.v1.Widget} message Widget
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Widget.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.horizontalAlignment = options.enums === String ? "HORIZONTAL_ALIGNMENT_UNSPECIFIED" : 0;
                            if (message.textParagraph != null && message.hasOwnProperty("textParagraph")) {
                                object.textParagraph = $root.google.apps.card.v1.TextParagraph.toObject(message.textParagraph, options);
                                if (options.oneofs)
                                    object.data = "textParagraph";
                            }
                            if (message.image != null && message.hasOwnProperty("image")) {
                                object.image = $root.google.apps.card.v1.Image.toObject(message.image, options);
                                if (options.oneofs)
                                    object.data = "image";
                            }
                            if (message.decoratedText != null && message.hasOwnProperty("decoratedText")) {
                                object.decoratedText = $root.google.apps.card.v1.DecoratedText.toObject(message.decoratedText, options);
                                if (options.oneofs)
                                    object.data = "decoratedText";
                            }
                            if (message.buttonList != null && message.hasOwnProperty("buttonList")) {
                                object.buttonList = $root.google.apps.card.v1.ButtonList.toObject(message.buttonList, options);
                                if (options.oneofs)
                                    object.data = "buttonList";
                            }
                            if (message.textInput != null && message.hasOwnProperty("textInput")) {
                                object.textInput = $root.google.apps.card.v1.TextInput.toObject(message.textInput, options);
                                if (options.oneofs)
                                    object.data = "textInput";
                            }
                            if (message.selectionInput != null && message.hasOwnProperty("selectionInput")) {
                                object.selectionInput = $root.google.apps.card.v1.SelectionInput.toObject(message.selectionInput, options);
                                if (options.oneofs)
                                    object.data = "selectionInput";
                            }
                            if (message.dateTimePicker != null && message.hasOwnProperty("dateTimePicker")) {
                                object.dateTimePicker = $root.google.apps.card.v1.DateTimePicker.toObject(message.dateTimePicker, options);
                                if (options.oneofs)
                                    object.data = "dateTimePicker";
                            }
                            if (message.horizontalAlignment != null && message.hasOwnProperty("horizontalAlignment"))
                                object.horizontalAlignment = options.enums === String ? $root.google.apps.card.v1.Widget.HorizontalAlignment[message.horizontalAlignment] === undefined ? message.horizontalAlignment : $root.google.apps.card.v1.Widget.HorizontalAlignment[message.horizontalAlignment] : message.horizontalAlignment;
                            if (message.divider != null && message.hasOwnProperty("divider")) {
                                object.divider = $root.google.apps.card.v1.Divider.toObject(message.divider, options);
                                if (options.oneofs)
                                    object.data = "divider";
                            }
                            if (message.grid != null && message.hasOwnProperty("grid")) {
                                object.grid = $root.google.apps.card.v1.Grid.toObject(message.grid, options);
                                if (options.oneofs)
                                    object.data = "grid";
                            }
                            if (message.columns != null && message.hasOwnProperty("columns")) {
                                object.columns = $root.google.apps.card.v1.Columns.toObject(message.columns, options);
                                if (options.oneofs)
                                    object.data = "columns";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Widget to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.Widget
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Widget.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Widget
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.Widget
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Widget.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.Widget";
                        };
    
                        /**
                         * ImageType enum.
                         * @name google.apps.card.v1.Widget.ImageType
                         * @enum {number}
                         * @property {number} SQUARE=0 SQUARE value
                         * @property {number} CIRCLE=1 CIRCLE value
                         */
                        Widget.ImageType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "SQUARE"] = 0;
                            values[valuesById[1] = "CIRCLE"] = 1;
                            return values;
                        })();
    
                        /**
                         * HorizontalAlignment enum.
                         * @name google.apps.card.v1.Widget.HorizontalAlignment
                         * @enum {number}
                         * @property {number} HORIZONTAL_ALIGNMENT_UNSPECIFIED=0 HORIZONTAL_ALIGNMENT_UNSPECIFIED value
                         * @property {number} START=1 START value
                         * @property {number} CENTER=2 CENTER value
                         * @property {number} END=3 END value
                         */
                        Widget.HorizontalAlignment = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "HORIZONTAL_ALIGNMENT_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "START"] = 1;
                            values[valuesById[2] = "CENTER"] = 2;
                            values[valuesById[3] = "END"] = 3;
                            return values;
                        })();
    
                        return Widget;
                    })();
    
                    v1.TextParagraph = (function() {
    
                        /**
                         * Properties of a TextParagraph.
                         * @memberof google.apps.card.v1
                         * @interface ITextParagraph
                         * @property {string|null} [text] TextParagraph text
                         */
    
                        /**
                         * Constructs a new TextParagraph.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a TextParagraph.
                         * @implements ITextParagraph
                         * @constructor
                         * @param {google.apps.card.v1.ITextParagraph=} [properties] Properties to set
                         */
                        function TextParagraph(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextParagraph text.
                         * @member {string} text
                         * @memberof google.apps.card.v1.TextParagraph
                         * @instance
                         */
                        TextParagraph.prototype.text = "";
    
                        /**
                         * Creates a new TextParagraph instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.TextParagraph
                         * @static
                         * @param {google.apps.card.v1.ITextParagraph=} [properties] Properties to set
                         * @returns {google.apps.card.v1.TextParagraph} TextParagraph instance
                         */
                        TextParagraph.create = function create(properties) {
                            return new TextParagraph(properties);
                        };
    
                        /**
                         * Encodes the specified TextParagraph message. Does not implicitly {@link google.apps.card.v1.TextParagraph.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.TextParagraph
                         * @static
                         * @param {google.apps.card.v1.ITextParagraph} message TextParagraph message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextParagraph.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextParagraph message, length delimited. Does not implicitly {@link google.apps.card.v1.TextParagraph.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.TextParagraph
                         * @static
                         * @param {google.apps.card.v1.ITextParagraph} message TextParagraph message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextParagraph.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextParagraph message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.TextParagraph
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.TextParagraph} TextParagraph
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextParagraph.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.TextParagraph();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextParagraph message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.TextParagraph
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.TextParagraph} TextParagraph
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextParagraph.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextParagraph message.
                         * @function verify
                         * @memberof google.apps.card.v1.TextParagraph
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextParagraph.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a TextParagraph message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.TextParagraph
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.TextParagraph} TextParagraph
                         */
                        TextParagraph.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.TextParagraph)
                                return object;
                            var message = new $root.google.apps.card.v1.TextParagraph();
                            if (object.text != null)
                                message.text = String(object.text);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextParagraph message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.TextParagraph
                         * @static
                         * @param {google.apps.card.v1.TextParagraph} message TextParagraph
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextParagraph.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.text = "";
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            return object;
                        };
    
                        /**
                         * Converts this TextParagraph to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.TextParagraph
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextParagraph.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextParagraph
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.TextParagraph
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextParagraph.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.TextParagraph";
                        };
    
                        return TextParagraph;
                    })();
    
                    v1.Image = (function() {
    
                        /**
                         * Properties of an Image.
                         * @memberof google.apps.card.v1
                         * @interface IImage
                         * @property {string|null} [imageUrl] Image imageUrl
                         * @property {google.apps.card.v1.IOnClick|null} [onClick] Image onClick
                         * @property {string|null} [altText] Image altText
                         */
    
                        /**
                         * Constructs a new Image.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents an Image.
                         * @implements IImage
                         * @constructor
                         * @param {google.apps.card.v1.IImage=} [properties] Properties to set
                         */
                        function Image(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Image imageUrl.
                         * @member {string} imageUrl
                         * @memberof google.apps.card.v1.Image
                         * @instance
                         */
                        Image.prototype.imageUrl = "";
    
                        /**
                         * Image onClick.
                         * @member {google.apps.card.v1.IOnClick|null|undefined} onClick
                         * @memberof google.apps.card.v1.Image
                         * @instance
                         */
                        Image.prototype.onClick = null;
    
                        /**
                         * Image altText.
                         * @member {string} altText
                         * @memberof google.apps.card.v1.Image
                         * @instance
                         */
                        Image.prototype.altText = "";
    
                        /**
                         * Creates a new Image instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.Image
                         * @static
                         * @param {google.apps.card.v1.IImage=} [properties] Properties to set
                         * @returns {google.apps.card.v1.Image} Image instance
                         */
                        Image.create = function create(properties) {
                            return new Image(properties);
                        };
    
                        /**
                         * Encodes the specified Image message. Does not implicitly {@link google.apps.card.v1.Image.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.Image
                         * @static
                         * @param {google.apps.card.v1.IImage} message Image message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Image.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.imageUrl != null && Object.hasOwnProperty.call(message, "imageUrl"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.imageUrl);
                            if (message.onClick != null && Object.hasOwnProperty.call(message, "onClick"))
                                $root.google.apps.card.v1.OnClick.encode(message.onClick, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.altText != null && Object.hasOwnProperty.call(message, "altText"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.altText);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Image message, length delimited. Does not implicitly {@link google.apps.card.v1.Image.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.Image
                         * @static
                         * @param {google.apps.card.v1.IImage} message Image message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Image.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Image message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.Image
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.Image} Image
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Image.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Image();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.imageUrl = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.onClick = $root.google.apps.card.v1.OnClick.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.altText = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Image message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.Image
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.Image} Image
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Image.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Image message.
                         * @function verify
                         * @memberof google.apps.card.v1.Image
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Image.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.imageUrl != null && message.hasOwnProperty("imageUrl"))
                                if (!$util.isString(message.imageUrl))
                                    return "imageUrl: string expected";
                            if (message.onClick != null && message.hasOwnProperty("onClick")) {
                                var error = $root.google.apps.card.v1.OnClick.verify(message.onClick);
                                if (error)
                                    return "onClick." + error;
                            }
                            if (message.altText != null && message.hasOwnProperty("altText"))
                                if (!$util.isString(message.altText))
                                    return "altText: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an Image message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.Image
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.Image} Image
                         */
                        Image.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.Image)
                                return object;
                            var message = new $root.google.apps.card.v1.Image();
                            if (object.imageUrl != null)
                                message.imageUrl = String(object.imageUrl);
                            if (object.onClick != null) {
                                if (typeof object.onClick !== "object")
                                    throw TypeError(".google.apps.card.v1.Image.onClick: object expected");
                                message.onClick = $root.google.apps.card.v1.OnClick.fromObject(object.onClick);
                            }
                            if (object.altText != null)
                                message.altText = String(object.altText);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Image message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.Image
                         * @static
                         * @param {google.apps.card.v1.Image} message Image
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Image.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.imageUrl = "";
                                object.onClick = null;
                                object.altText = "";
                            }
                            if (message.imageUrl != null && message.hasOwnProperty("imageUrl"))
                                object.imageUrl = message.imageUrl;
                            if (message.onClick != null && message.hasOwnProperty("onClick"))
                                object.onClick = $root.google.apps.card.v1.OnClick.toObject(message.onClick, options);
                            if (message.altText != null && message.hasOwnProperty("altText"))
                                object.altText = message.altText;
                            return object;
                        };
    
                        /**
                         * Converts this Image to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.Image
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Image.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Image
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.Image
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Image.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.Image";
                        };
    
                        return Image;
                    })();
    
                    v1.Divider = (function() {
    
                        /**
                         * Properties of a Divider.
                         * @memberof google.apps.card.v1
                         * @interface IDivider
                         */
    
                        /**
                         * Constructs a new Divider.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a Divider.
                         * @implements IDivider
                         * @constructor
                         * @param {google.apps.card.v1.IDivider=} [properties] Properties to set
                         */
                        function Divider(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new Divider instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.Divider
                         * @static
                         * @param {google.apps.card.v1.IDivider=} [properties] Properties to set
                         * @returns {google.apps.card.v1.Divider} Divider instance
                         */
                        Divider.create = function create(properties) {
                            return new Divider(properties);
                        };
    
                        /**
                         * Encodes the specified Divider message. Does not implicitly {@link google.apps.card.v1.Divider.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.Divider
                         * @static
                         * @param {google.apps.card.v1.IDivider} message Divider message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Divider.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Divider message, length delimited. Does not implicitly {@link google.apps.card.v1.Divider.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.Divider
                         * @static
                         * @param {google.apps.card.v1.IDivider} message Divider message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Divider.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Divider message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.Divider
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.Divider} Divider
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Divider.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Divider();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Divider message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.Divider
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.Divider} Divider
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Divider.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Divider message.
                         * @function verify
                         * @memberof google.apps.card.v1.Divider
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Divider.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a Divider message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.Divider
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.Divider} Divider
                         */
                        Divider.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.Divider)
                                return object;
                            return new $root.google.apps.card.v1.Divider();
                        };
    
                        /**
                         * Creates a plain object from a Divider message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.Divider
                         * @static
                         * @param {google.apps.card.v1.Divider} message Divider
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Divider.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this Divider to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.Divider
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Divider.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Divider
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.Divider
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Divider.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.Divider";
                        };
    
                        return Divider;
                    })();
    
                    v1.DecoratedText = (function() {
    
                        /**
                         * Properties of a DecoratedText.
                         * @memberof google.apps.card.v1
                         * @interface IDecoratedText
                         * @property {google.apps.card.v1.IIcon|null} [icon] DecoratedText icon
                         * @property {google.apps.card.v1.IIcon|null} [startIcon] DecoratedText startIcon
                         * @property {string|null} [topLabel] DecoratedText topLabel
                         * @property {string|null} [text] DecoratedText text
                         * @property {boolean|null} [wrapText] DecoratedText wrapText
                         * @property {string|null} [bottomLabel] DecoratedText bottomLabel
                         * @property {google.apps.card.v1.IOnClick|null} [onClick] DecoratedText onClick
                         * @property {google.apps.card.v1.IButton|null} [button] DecoratedText button
                         * @property {google.apps.card.v1.DecoratedText.ISwitchControl|null} [switchControl] DecoratedText switchControl
                         * @property {google.apps.card.v1.IIcon|null} [endIcon] DecoratedText endIcon
                         */
    
                        /**
                         * Constructs a new DecoratedText.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a DecoratedText.
                         * @implements IDecoratedText
                         * @constructor
                         * @param {google.apps.card.v1.IDecoratedText=} [properties] Properties to set
                         */
                        function DecoratedText(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DecoratedText icon.
                         * @member {google.apps.card.v1.IIcon|null|undefined} icon
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        DecoratedText.prototype.icon = null;
    
                        /**
                         * DecoratedText startIcon.
                         * @member {google.apps.card.v1.IIcon|null|undefined} startIcon
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        DecoratedText.prototype.startIcon = null;
    
                        /**
                         * DecoratedText topLabel.
                         * @member {string} topLabel
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        DecoratedText.prototype.topLabel = "";
    
                        /**
                         * DecoratedText text.
                         * @member {string} text
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        DecoratedText.prototype.text = "";
    
                        /**
                         * DecoratedText wrapText.
                         * @member {boolean} wrapText
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        DecoratedText.prototype.wrapText = false;
    
                        /**
                         * DecoratedText bottomLabel.
                         * @member {string} bottomLabel
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        DecoratedText.prototype.bottomLabel = "";
    
                        /**
                         * DecoratedText onClick.
                         * @member {google.apps.card.v1.IOnClick|null|undefined} onClick
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        DecoratedText.prototype.onClick = null;
    
                        /**
                         * DecoratedText button.
                         * @member {google.apps.card.v1.IButton|null|undefined} button
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        DecoratedText.prototype.button = null;
    
                        /**
                         * DecoratedText switchControl.
                         * @member {google.apps.card.v1.DecoratedText.ISwitchControl|null|undefined} switchControl
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        DecoratedText.prototype.switchControl = null;
    
                        /**
                         * DecoratedText endIcon.
                         * @member {google.apps.card.v1.IIcon|null|undefined} endIcon
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        DecoratedText.prototype.endIcon = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * DecoratedText control.
                         * @member {"button"|"switchControl"|"endIcon"|undefined} control
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         */
                        Object.defineProperty(DecoratedText.prototype, "control", {
                            get: $util.oneOfGetter($oneOfFields = ["button", "switchControl", "endIcon"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new DecoratedText instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.DecoratedText
                         * @static
                         * @param {google.apps.card.v1.IDecoratedText=} [properties] Properties to set
                         * @returns {google.apps.card.v1.DecoratedText} DecoratedText instance
                         */
                        DecoratedText.create = function create(properties) {
                            return new DecoratedText(properties);
                        };
    
                        /**
                         * Encodes the specified DecoratedText message. Does not implicitly {@link google.apps.card.v1.DecoratedText.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.DecoratedText
                         * @static
                         * @param {google.apps.card.v1.IDecoratedText} message DecoratedText message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DecoratedText.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
                                $root.google.apps.card.v1.Icon.encode(message.icon, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.topLabel != null && Object.hasOwnProperty.call(message, "topLabel"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.topLabel);
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.text);
                            if (message.wrapText != null && Object.hasOwnProperty.call(message, "wrapText"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.wrapText);
                            if (message.bottomLabel != null && Object.hasOwnProperty.call(message, "bottomLabel"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.bottomLabel);
                            if (message.onClick != null && Object.hasOwnProperty.call(message, "onClick"))
                                $root.google.apps.card.v1.OnClick.encode(message.onClick, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.button != null && Object.hasOwnProperty.call(message, "button"))
                                $root.google.apps.card.v1.Button.encode(message.button, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.switchControl != null && Object.hasOwnProperty.call(message, "switchControl"))
                                $root.google.apps.card.v1.DecoratedText.SwitchControl.encode(message.switchControl, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.endIcon != null && Object.hasOwnProperty.call(message, "endIcon"))
                                $root.google.apps.card.v1.Icon.encode(message.endIcon, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.startIcon != null && Object.hasOwnProperty.call(message, "startIcon"))
                                $root.google.apps.card.v1.Icon.encode(message.startIcon, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DecoratedText message, length delimited. Does not implicitly {@link google.apps.card.v1.DecoratedText.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.DecoratedText
                         * @static
                         * @param {google.apps.card.v1.IDecoratedText} message DecoratedText message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DecoratedText.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DecoratedText message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.DecoratedText
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.DecoratedText} DecoratedText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DecoratedText.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.DecoratedText();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.icon = $root.google.apps.card.v1.Icon.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 12: {
                                        message.startIcon = $root.google.apps.card.v1.Icon.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.topLabel = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.wrapText = reader.bool();
                                        break;
                                    }
                                case 6: {
                                        message.bottomLabel = reader.string();
                                        break;
                                    }
                                case 7: {
                                        message.onClick = $root.google.apps.card.v1.OnClick.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.button = $root.google.apps.card.v1.Button.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.switchControl = $root.google.apps.card.v1.DecoratedText.SwitchControl.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.endIcon = $root.google.apps.card.v1.Icon.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DecoratedText message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.DecoratedText
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.DecoratedText} DecoratedText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DecoratedText.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DecoratedText message.
                         * @function verify
                         * @memberof google.apps.card.v1.DecoratedText
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DecoratedText.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.icon != null && message.hasOwnProperty("icon")) {
                                var error = $root.google.apps.card.v1.Icon.verify(message.icon);
                                if (error)
                                    return "icon." + error;
                            }
                            if (message.startIcon != null && message.hasOwnProperty("startIcon")) {
                                var error = $root.google.apps.card.v1.Icon.verify(message.startIcon);
                                if (error)
                                    return "startIcon." + error;
                            }
                            if (message.topLabel != null && message.hasOwnProperty("topLabel"))
                                if (!$util.isString(message.topLabel))
                                    return "topLabel: string expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.wrapText != null && message.hasOwnProperty("wrapText"))
                                if (typeof message.wrapText !== "boolean")
                                    return "wrapText: boolean expected";
                            if (message.bottomLabel != null && message.hasOwnProperty("bottomLabel"))
                                if (!$util.isString(message.bottomLabel))
                                    return "bottomLabel: string expected";
                            if (message.onClick != null && message.hasOwnProperty("onClick")) {
                                var error = $root.google.apps.card.v1.OnClick.verify(message.onClick);
                                if (error)
                                    return "onClick." + error;
                            }
                            if (message.button != null && message.hasOwnProperty("button")) {
                                properties.control = 1;
                                {
                                    var error = $root.google.apps.card.v1.Button.verify(message.button);
                                    if (error)
                                        return "button." + error;
                                }
                            }
                            if (message.switchControl != null && message.hasOwnProperty("switchControl")) {
                                if (properties.control === 1)
                                    return "control: multiple values";
                                properties.control = 1;
                                {
                                    var error = $root.google.apps.card.v1.DecoratedText.SwitchControl.verify(message.switchControl);
                                    if (error)
                                        return "switchControl." + error;
                                }
                            }
                            if (message.endIcon != null && message.hasOwnProperty("endIcon")) {
                                if (properties.control === 1)
                                    return "control: multiple values";
                                properties.control = 1;
                                {
                                    var error = $root.google.apps.card.v1.Icon.verify(message.endIcon);
                                    if (error)
                                        return "endIcon." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DecoratedText message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.DecoratedText
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.DecoratedText} DecoratedText
                         */
                        DecoratedText.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.DecoratedText)
                                return object;
                            var message = new $root.google.apps.card.v1.DecoratedText();
                            if (object.icon != null) {
                                if (typeof object.icon !== "object")
                                    throw TypeError(".google.apps.card.v1.DecoratedText.icon: object expected");
                                message.icon = $root.google.apps.card.v1.Icon.fromObject(object.icon);
                            }
                            if (object.startIcon != null) {
                                if (typeof object.startIcon !== "object")
                                    throw TypeError(".google.apps.card.v1.DecoratedText.startIcon: object expected");
                                message.startIcon = $root.google.apps.card.v1.Icon.fromObject(object.startIcon);
                            }
                            if (object.topLabel != null)
                                message.topLabel = String(object.topLabel);
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.wrapText != null)
                                message.wrapText = Boolean(object.wrapText);
                            if (object.bottomLabel != null)
                                message.bottomLabel = String(object.bottomLabel);
                            if (object.onClick != null) {
                                if (typeof object.onClick !== "object")
                                    throw TypeError(".google.apps.card.v1.DecoratedText.onClick: object expected");
                                message.onClick = $root.google.apps.card.v1.OnClick.fromObject(object.onClick);
                            }
                            if (object.button != null) {
                                if (typeof object.button !== "object")
                                    throw TypeError(".google.apps.card.v1.DecoratedText.button: object expected");
                                message.button = $root.google.apps.card.v1.Button.fromObject(object.button);
                            }
                            if (object.switchControl != null) {
                                if (typeof object.switchControl !== "object")
                                    throw TypeError(".google.apps.card.v1.DecoratedText.switchControl: object expected");
                                message.switchControl = $root.google.apps.card.v1.DecoratedText.SwitchControl.fromObject(object.switchControl);
                            }
                            if (object.endIcon != null) {
                                if (typeof object.endIcon !== "object")
                                    throw TypeError(".google.apps.card.v1.DecoratedText.endIcon: object expected");
                                message.endIcon = $root.google.apps.card.v1.Icon.fromObject(object.endIcon);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DecoratedText message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.DecoratedText
                         * @static
                         * @param {google.apps.card.v1.DecoratedText} message DecoratedText
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DecoratedText.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.icon = null;
                                object.topLabel = "";
                                object.text = "";
                                object.wrapText = false;
                                object.bottomLabel = "";
                                object.onClick = null;
                                object.startIcon = null;
                            }
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                object.icon = $root.google.apps.card.v1.Icon.toObject(message.icon, options);
                            if (message.topLabel != null && message.hasOwnProperty("topLabel"))
                                object.topLabel = message.topLabel;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.wrapText != null && message.hasOwnProperty("wrapText"))
                                object.wrapText = message.wrapText;
                            if (message.bottomLabel != null && message.hasOwnProperty("bottomLabel"))
                                object.bottomLabel = message.bottomLabel;
                            if (message.onClick != null && message.hasOwnProperty("onClick"))
                                object.onClick = $root.google.apps.card.v1.OnClick.toObject(message.onClick, options);
                            if (message.button != null && message.hasOwnProperty("button")) {
                                object.button = $root.google.apps.card.v1.Button.toObject(message.button, options);
                                if (options.oneofs)
                                    object.control = "button";
                            }
                            if (message.switchControl != null && message.hasOwnProperty("switchControl")) {
                                object.switchControl = $root.google.apps.card.v1.DecoratedText.SwitchControl.toObject(message.switchControl, options);
                                if (options.oneofs)
                                    object.control = "switchControl";
                            }
                            if (message.endIcon != null && message.hasOwnProperty("endIcon")) {
                                object.endIcon = $root.google.apps.card.v1.Icon.toObject(message.endIcon, options);
                                if (options.oneofs)
                                    object.control = "endIcon";
                            }
                            if (message.startIcon != null && message.hasOwnProperty("startIcon"))
                                object.startIcon = $root.google.apps.card.v1.Icon.toObject(message.startIcon, options);
                            return object;
                        };
    
                        /**
                         * Converts this DecoratedText to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.DecoratedText
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DecoratedText.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DecoratedText
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.DecoratedText
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DecoratedText.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.DecoratedText";
                        };
    
                        DecoratedText.SwitchControl = (function() {
    
                            /**
                             * Properties of a SwitchControl.
                             * @memberof google.apps.card.v1.DecoratedText
                             * @interface ISwitchControl
                             * @property {string|null} [name] SwitchControl name
                             * @property {string|null} [value] SwitchControl value
                             * @property {boolean|null} [selected] SwitchControl selected
                             * @property {google.apps.card.v1.IAction|null} [onChangeAction] SwitchControl onChangeAction
                             * @property {google.apps.card.v1.DecoratedText.SwitchControl.ControlType|null} [controlType] SwitchControl controlType
                             */
    
                            /**
                             * Constructs a new SwitchControl.
                             * @memberof google.apps.card.v1.DecoratedText
                             * @classdesc Represents a SwitchControl.
                             * @implements ISwitchControl
                             * @constructor
                             * @param {google.apps.card.v1.DecoratedText.ISwitchControl=} [properties] Properties to set
                             */
                            function SwitchControl(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * SwitchControl name.
                             * @member {string} name
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @instance
                             */
                            SwitchControl.prototype.name = "";
    
                            /**
                             * SwitchControl value.
                             * @member {string} value
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @instance
                             */
                            SwitchControl.prototype.value = "";
    
                            /**
                             * SwitchControl selected.
                             * @member {boolean} selected
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @instance
                             */
                            SwitchControl.prototype.selected = false;
    
                            /**
                             * SwitchControl onChangeAction.
                             * @member {google.apps.card.v1.IAction|null|undefined} onChangeAction
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @instance
                             */
                            SwitchControl.prototype.onChangeAction = null;
    
                            /**
                             * SwitchControl controlType.
                             * @member {google.apps.card.v1.DecoratedText.SwitchControl.ControlType} controlType
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @instance
                             */
                            SwitchControl.prototype.controlType = 0;
    
                            /**
                             * Creates a new SwitchControl instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @static
                             * @param {google.apps.card.v1.DecoratedText.ISwitchControl=} [properties] Properties to set
                             * @returns {google.apps.card.v1.DecoratedText.SwitchControl} SwitchControl instance
                             */
                            SwitchControl.create = function create(properties) {
                                return new SwitchControl(properties);
                            };
    
                            /**
                             * Encodes the specified SwitchControl message. Does not implicitly {@link google.apps.card.v1.DecoratedText.SwitchControl.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @static
                             * @param {google.apps.card.v1.DecoratedText.ISwitchControl} message SwitchControl message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SwitchControl.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                                if (message.selected != null && Object.hasOwnProperty.call(message, "selected"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.selected);
                                if (message.onChangeAction != null && Object.hasOwnProperty.call(message, "onChangeAction"))
                                    $root.google.apps.card.v1.Action.encode(message.onChangeAction, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                if (message.controlType != null && Object.hasOwnProperty.call(message, "controlType"))
                                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.controlType);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified SwitchControl message, length delimited. Does not implicitly {@link google.apps.card.v1.DecoratedText.SwitchControl.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @static
                             * @param {google.apps.card.v1.DecoratedText.ISwitchControl} message SwitchControl message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SwitchControl.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a SwitchControl message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.DecoratedText.SwitchControl} SwitchControl
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SwitchControl.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.DecoratedText.SwitchControl();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.name = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.value = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.selected = reader.bool();
                                            break;
                                        }
                                    case 4: {
                                            message.onChangeAction = $root.google.apps.card.v1.Action.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 5: {
                                            message.controlType = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a SwitchControl message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.DecoratedText.SwitchControl} SwitchControl
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SwitchControl.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a SwitchControl message.
                             * @function verify
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            SwitchControl.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    if (!$util.isString(message.value))
                                        return "value: string expected";
                                if (message.selected != null && message.hasOwnProperty("selected"))
                                    if (typeof message.selected !== "boolean")
                                        return "selected: boolean expected";
                                if (message.onChangeAction != null && message.hasOwnProperty("onChangeAction")) {
                                    var error = $root.google.apps.card.v1.Action.verify(message.onChangeAction);
                                    if (error)
                                        return "onChangeAction." + error;
                                }
                                if (message.controlType != null && message.hasOwnProperty("controlType"))
                                    switch (message.controlType) {
                                    default:
                                        return "controlType: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates a SwitchControl message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.DecoratedText.SwitchControl} SwitchControl
                             */
                            SwitchControl.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.DecoratedText.SwitchControl)
                                    return object;
                                var message = new $root.google.apps.card.v1.DecoratedText.SwitchControl();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.value != null)
                                    message.value = String(object.value);
                                if (object.selected != null)
                                    message.selected = Boolean(object.selected);
                                if (object.onChangeAction != null) {
                                    if (typeof object.onChangeAction !== "object")
                                        throw TypeError(".google.apps.card.v1.DecoratedText.SwitchControl.onChangeAction: object expected");
                                    message.onChangeAction = $root.google.apps.card.v1.Action.fromObject(object.onChangeAction);
                                }
                                switch (object.controlType) {
                                default:
                                    if (typeof object.controlType === "number") {
                                        message.controlType = object.controlType;
                                        break;
                                    }
                                    break;
                                case "SWITCH":
                                case 0:
                                    message.controlType = 0;
                                    break;
                                case "CHECKBOX":
                                case 1:
                                    message.controlType = 1;
                                    break;
                                case "CHECK_BOX":
                                case 2:
                                    message.controlType = 2;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a SwitchControl message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @static
                             * @param {google.apps.card.v1.DecoratedText.SwitchControl} message SwitchControl
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            SwitchControl.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.value = "";
                                    object.selected = false;
                                    object.onChangeAction = null;
                                    object.controlType = options.enums === String ? "SWITCH" : 0;
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = message.value;
                                if (message.selected != null && message.hasOwnProperty("selected"))
                                    object.selected = message.selected;
                                if (message.onChangeAction != null && message.hasOwnProperty("onChangeAction"))
                                    object.onChangeAction = $root.google.apps.card.v1.Action.toObject(message.onChangeAction, options);
                                if (message.controlType != null && message.hasOwnProperty("controlType"))
                                    object.controlType = options.enums === String ? $root.google.apps.card.v1.DecoratedText.SwitchControl.ControlType[message.controlType] === undefined ? message.controlType : $root.google.apps.card.v1.DecoratedText.SwitchControl.ControlType[message.controlType] : message.controlType;
                                return object;
                            };
    
                            /**
                             * Converts this SwitchControl to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            SwitchControl.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for SwitchControl
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.DecoratedText.SwitchControl
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            SwitchControl.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.DecoratedText.SwitchControl";
                            };
    
                            /**
                             * ControlType enum.
                             * @name google.apps.card.v1.DecoratedText.SwitchControl.ControlType
                             * @enum {number}
                             * @property {number} SWITCH=0 SWITCH value
                             * @property {number} CHECKBOX=1 CHECKBOX value
                             * @property {number} CHECK_BOX=2 CHECK_BOX value
                             */
                            SwitchControl.ControlType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "SWITCH"] = 0;
                                values[valuesById[1] = "CHECKBOX"] = 1;
                                values[valuesById[2] = "CHECK_BOX"] = 2;
                                return values;
                            })();
    
                            return SwitchControl;
                        })();
    
                        return DecoratedText;
                    })();
    
                    v1.TextInput = (function() {
    
                        /**
                         * Properties of a TextInput.
                         * @memberof google.apps.card.v1
                         * @interface ITextInput
                         * @property {string|null} [name] TextInput name
                         * @property {string|null} [label] TextInput label
                         * @property {string|null} [hintText] TextInput hintText
                         * @property {string|null} [value] TextInput value
                         * @property {google.apps.card.v1.TextInput.Type|null} [type] TextInput type
                         * @property {google.apps.card.v1.IAction|null} [onChangeAction] TextInput onChangeAction
                         * @property {google.apps.card.v1.ISuggestions|null} [initialSuggestions] TextInput initialSuggestions
                         * @property {google.apps.card.v1.IAction|null} [autoCompleteAction] TextInput autoCompleteAction
                         * @property {string|null} [placeholderText] TextInput placeholderText
                         */
    
                        /**
                         * Constructs a new TextInput.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a TextInput.
                         * @implements ITextInput
                         * @constructor
                         * @param {google.apps.card.v1.ITextInput=} [properties] Properties to set
                         */
                        function TextInput(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextInput name.
                         * @member {string} name
                         * @memberof google.apps.card.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.name = "";
    
                        /**
                         * TextInput label.
                         * @member {string} label
                         * @memberof google.apps.card.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.label = "";
    
                        /**
                         * TextInput hintText.
                         * @member {string} hintText
                         * @memberof google.apps.card.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.hintText = "";
    
                        /**
                         * TextInput value.
                         * @member {string} value
                         * @memberof google.apps.card.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.value = "";
    
                        /**
                         * TextInput type.
                         * @member {google.apps.card.v1.TextInput.Type} type
                         * @memberof google.apps.card.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.type = 0;
    
                        /**
                         * TextInput onChangeAction.
                         * @member {google.apps.card.v1.IAction|null|undefined} onChangeAction
                         * @memberof google.apps.card.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.onChangeAction = null;
    
                        /**
                         * TextInput initialSuggestions.
                         * @member {google.apps.card.v1.ISuggestions|null|undefined} initialSuggestions
                         * @memberof google.apps.card.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.initialSuggestions = null;
    
                        /**
                         * TextInput autoCompleteAction.
                         * @member {google.apps.card.v1.IAction|null|undefined} autoCompleteAction
                         * @memberof google.apps.card.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.autoCompleteAction = null;
    
                        /**
                         * TextInput placeholderText.
                         * @member {string} placeholderText
                         * @memberof google.apps.card.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.placeholderText = "";
    
                        /**
                         * Creates a new TextInput instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.TextInput
                         * @static
                         * @param {google.apps.card.v1.ITextInput=} [properties] Properties to set
                         * @returns {google.apps.card.v1.TextInput} TextInput instance
                         */
                        TextInput.create = function create(properties) {
                            return new TextInput(properties);
                        };
    
                        /**
                         * Encodes the specified TextInput message. Does not implicitly {@link google.apps.card.v1.TextInput.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.TextInput
                         * @static
                         * @param {google.apps.card.v1.ITextInput} message TextInput message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextInput.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);
                            if (message.hintText != null && Object.hasOwnProperty.call(message, "hintText"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.hintText);
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.value);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                            if (message.onChangeAction != null && Object.hasOwnProperty.call(message, "onChangeAction"))
                                $root.google.apps.card.v1.Action.encode(message.onChangeAction, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.initialSuggestions != null && Object.hasOwnProperty.call(message, "initialSuggestions"))
                                $root.google.apps.card.v1.Suggestions.encode(message.initialSuggestions, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.autoCompleteAction != null && Object.hasOwnProperty.call(message, "autoCompleteAction"))
                                $root.google.apps.card.v1.Action.encode(message.autoCompleteAction, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.placeholderText != null && Object.hasOwnProperty.call(message, "placeholderText"))
                                writer.uint32(/* id 12, wireType 2 =*/98).string(message.placeholderText);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextInput message, length delimited. Does not implicitly {@link google.apps.card.v1.TextInput.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.TextInput
                         * @static
                         * @param {google.apps.card.v1.ITextInput} message TextInput message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextInput.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextInput message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.TextInput
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.TextInput} TextInput
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextInput.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.TextInput();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.label = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.hintText = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.value = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.onChangeAction = $root.google.apps.card.v1.Action.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 7: {
                                        message.initialSuggestions = $root.google.apps.card.v1.Suggestions.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.autoCompleteAction = $root.google.apps.card.v1.Action.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 12: {
                                        message.placeholderText = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextInput message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.TextInput
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.TextInput} TextInput
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextInput.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextInput message.
                         * @function verify
                         * @memberof google.apps.card.v1.TextInput
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextInput.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.label != null && message.hasOwnProperty("label"))
                                if (!$util.isString(message.label))
                                    return "label: string expected";
                            if (message.hintText != null && message.hasOwnProperty("hintText"))
                                if (!$util.isString(message.hintText))
                                    return "hintText: string expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isString(message.value))
                                    return "value: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.onChangeAction != null && message.hasOwnProperty("onChangeAction")) {
                                var error = $root.google.apps.card.v1.Action.verify(message.onChangeAction);
                                if (error)
                                    return "onChangeAction." + error;
                            }
                            if (message.initialSuggestions != null && message.hasOwnProperty("initialSuggestions")) {
                                var error = $root.google.apps.card.v1.Suggestions.verify(message.initialSuggestions);
                                if (error)
                                    return "initialSuggestions." + error;
                            }
                            if (message.autoCompleteAction != null && message.hasOwnProperty("autoCompleteAction")) {
                                var error = $root.google.apps.card.v1.Action.verify(message.autoCompleteAction);
                                if (error)
                                    return "autoCompleteAction." + error;
                            }
                            if (message.placeholderText != null && message.hasOwnProperty("placeholderText"))
                                if (!$util.isString(message.placeholderText))
                                    return "placeholderText: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a TextInput message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.TextInput
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.TextInput} TextInput
                         */
                        TextInput.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.TextInput)
                                return object;
                            var message = new $root.google.apps.card.v1.TextInput();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.label != null)
                                message.label = String(object.label);
                            if (object.hintText != null)
                                message.hintText = String(object.hintText);
                            if (object.value != null)
                                message.value = String(object.value);
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "SINGLE_LINE":
                            case 0:
                                message.type = 0;
                                break;
                            case "MULTIPLE_LINE":
                            case 1:
                                message.type = 1;
                                break;
                            }
                            if (object.onChangeAction != null) {
                                if (typeof object.onChangeAction !== "object")
                                    throw TypeError(".google.apps.card.v1.TextInput.onChangeAction: object expected");
                                message.onChangeAction = $root.google.apps.card.v1.Action.fromObject(object.onChangeAction);
                            }
                            if (object.initialSuggestions != null) {
                                if (typeof object.initialSuggestions !== "object")
                                    throw TypeError(".google.apps.card.v1.TextInput.initialSuggestions: object expected");
                                message.initialSuggestions = $root.google.apps.card.v1.Suggestions.fromObject(object.initialSuggestions);
                            }
                            if (object.autoCompleteAction != null) {
                                if (typeof object.autoCompleteAction !== "object")
                                    throw TypeError(".google.apps.card.v1.TextInput.autoCompleteAction: object expected");
                                message.autoCompleteAction = $root.google.apps.card.v1.Action.fromObject(object.autoCompleteAction);
                            }
                            if (object.placeholderText != null)
                                message.placeholderText = String(object.placeholderText);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextInput message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.TextInput
                         * @static
                         * @param {google.apps.card.v1.TextInput} message TextInput
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextInput.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.label = "";
                                object.hintText = "";
                                object.value = "";
                                object.type = options.enums === String ? "SINGLE_LINE" : 0;
                                object.onChangeAction = null;
                                object.initialSuggestions = null;
                                object.autoCompleteAction = null;
                                object.placeholderText = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.label != null && message.hasOwnProperty("label"))
                                object.label = message.label;
                            if (message.hintText != null && message.hasOwnProperty("hintText"))
                                object.hintText = message.hintText;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.apps.card.v1.TextInput.Type[message.type] === undefined ? message.type : $root.google.apps.card.v1.TextInput.Type[message.type] : message.type;
                            if (message.onChangeAction != null && message.hasOwnProperty("onChangeAction"))
                                object.onChangeAction = $root.google.apps.card.v1.Action.toObject(message.onChangeAction, options);
                            if (message.initialSuggestions != null && message.hasOwnProperty("initialSuggestions"))
                                object.initialSuggestions = $root.google.apps.card.v1.Suggestions.toObject(message.initialSuggestions, options);
                            if (message.autoCompleteAction != null && message.hasOwnProperty("autoCompleteAction"))
                                object.autoCompleteAction = $root.google.apps.card.v1.Action.toObject(message.autoCompleteAction, options);
                            if (message.placeholderText != null && message.hasOwnProperty("placeholderText"))
                                object.placeholderText = message.placeholderText;
                            return object;
                        };
    
                        /**
                         * Converts this TextInput to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.TextInput
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextInput.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextInput
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.TextInput
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextInput.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.TextInput";
                        };
    
                        /**
                         * Type enum.
                         * @name google.apps.card.v1.TextInput.Type
                         * @enum {number}
                         * @property {number} SINGLE_LINE=0 SINGLE_LINE value
                         * @property {number} MULTIPLE_LINE=1 MULTIPLE_LINE value
                         */
                        TextInput.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "SINGLE_LINE"] = 0;
                            values[valuesById[1] = "MULTIPLE_LINE"] = 1;
                            return values;
                        })();
    
                        return TextInput;
                    })();
    
                    v1.Suggestions = (function() {
    
                        /**
                         * Properties of a Suggestions.
                         * @memberof google.apps.card.v1
                         * @interface ISuggestions
                         * @property {Array.<google.apps.card.v1.Suggestions.ISuggestionItem>|null} [items] Suggestions items
                         */
    
                        /**
                         * Constructs a new Suggestions.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a Suggestions.
                         * @implements ISuggestions
                         * @constructor
                         * @param {google.apps.card.v1.ISuggestions=} [properties] Properties to set
                         */
                        function Suggestions(properties) {
                            this.items = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Suggestions items.
                         * @member {Array.<google.apps.card.v1.Suggestions.ISuggestionItem>} items
                         * @memberof google.apps.card.v1.Suggestions
                         * @instance
                         */
                        Suggestions.prototype.items = $util.emptyArray;
    
                        /**
                         * Creates a new Suggestions instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.Suggestions
                         * @static
                         * @param {google.apps.card.v1.ISuggestions=} [properties] Properties to set
                         * @returns {google.apps.card.v1.Suggestions} Suggestions instance
                         */
                        Suggestions.create = function create(properties) {
                            return new Suggestions(properties);
                        };
    
                        /**
                         * Encodes the specified Suggestions message. Does not implicitly {@link google.apps.card.v1.Suggestions.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.Suggestions
                         * @static
                         * @param {google.apps.card.v1.ISuggestions} message Suggestions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Suggestions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.items != null && message.items.length)
                                for (var i = 0; i < message.items.length; ++i)
                                    $root.google.apps.card.v1.Suggestions.SuggestionItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Suggestions message, length delimited. Does not implicitly {@link google.apps.card.v1.Suggestions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.Suggestions
                         * @static
                         * @param {google.apps.card.v1.ISuggestions} message Suggestions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Suggestions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Suggestions message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.Suggestions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.Suggestions} Suggestions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Suggestions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Suggestions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.items && message.items.length))
                                            message.items = [];
                                        message.items.push($root.google.apps.card.v1.Suggestions.SuggestionItem.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Suggestions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.Suggestions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.Suggestions} Suggestions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Suggestions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Suggestions message.
                         * @function verify
                         * @memberof google.apps.card.v1.Suggestions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Suggestions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.items != null && message.hasOwnProperty("items")) {
                                if (!Array.isArray(message.items))
                                    return "items: array expected";
                                for (var i = 0; i < message.items.length; ++i) {
                                    var error = $root.google.apps.card.v1.Suggestions.SuggestionItem.verify(message.items[i]);
                                    if (error)
                                        return "items." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Suggestions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.Suggestions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.Suggestions} Suggestions
                         */
                        Suggestions.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.Suggestions)
                                return object;
                            var message = new $root.google.apps.card.v1.Suggestions();
                            if (object.items) {
                                if (!Array.isArray(object.items))
                                    throw TypeError(".google.apps.card.v1.Suggestions.items: array expected");
                                message.items = [];
                                for (var i = 0; i < object.items.length; ++i) {
                                    if (typeof object.items[i] !== "object")
                                        throw TypeError(".google.apps.card.v1.Suggestions.items: object expected");
                                    message.items[i] = $root.google.apps.card.v1.Suggestions.SuggestionItem.fromObject(object.items[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Suggestions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.Suggestions
                         * @static
                         * @param {google.apps.card.v1.Suggestions} message Suggestions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Suggestions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.items = [];
                            if (message.items && message.items.length) {
                                object.items = [];
                                for (var j = 0; j < message.items.length; ++j)
                                    object.items[j] = $root.google.apps.card.v1.Suggestions.SuggestionItem.toObject(message.items[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Suggestions to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.Suggestions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Suggestions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Suggestions
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.Suggestions
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Suggestions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.Suggestions";
                        };
    
                        Suggestions.SuggestionItem = (function() {
    
                            /**
                             * Properties of a SuggestionItem.
                             * @memberof google.apps.card.v1.Suggestions
                             * @interface ISuggestionItem
                             * @property {string|null} [text] SuggestionItem text
                             */
    
                            /**
                             * Constructs a new SuggestionItem.
                             * @memberof google.apps.card.v1.Suggestions
                             * @classdesc Represents a SuggestionItem.
                             * @implements ISuggestionItem
                             * @constructor
                             * @param {google.apps.card.v1.Suggestions.ISuggestionItem=} [properties] Properties to set
                             */
                            function SuggestionItem(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * SuggestionItem text.
                             * @member {string|null|undefined} text
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @instance
                             */
                            SuggestionItem.prototype.text = null;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * SuggestionItem content.
                             * @member {"text"|undefined} content
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @instance
                             */
                            Object.defineProperty(SuggestionItem.prototype, "content", {
                                get: $util.oneOfGetter($oneOfFields = ["text"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new SuggestionItem instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @static
                             * @param {google.apps.card.v1.Suggestions.ISuggestionItem=} [properties] Properties to set
                             * @returns {google.apps.card.v1.Suggestions.SuggestionItem} SuggestionItem instance
                             */
                            SuggestionItem.create = function create(properties) {
                                return new SuggestionItem(properties);
                            };
    
                            /**
                             * Encodes the specified SuggestionItem message. Does not implicitly {@link google.apps.card.v1.Suggestions.SuggestionItem.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @static
                             * @param {google.apps.card.v1.Suggestions.ISuggestionItem} message SuggestionItem message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SuggestionItem.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified SuggestionItem message, length delimited. Does not implicitly {@link google.apps.card.v1.Suggestions.SuggestionItem.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @static
                             * @param {google.apps.card.v1.Suggestions.ISuggestionItem} message SuggestionItem message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SuggestionItem.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a SuggestionItem message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.Suggestions.SuggestionItem} SuggestionItem
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SuggestionItem.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Suggestions.SuggestionItem();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.text = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a SuggestionItem message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.Suggestions.SuggestionItem} SuggestionItem
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SuggestionItem.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a SuggestionItem message.
                             * @function verify
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            SuggestionItem.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.text != null && message.hasOwnProperty("text")) {
                                    properties.content = 1;
                                    if (!$util.isString(message.text))
                                        return "text: string expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a SuggestionItem message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.Suggestions.SuggestionItem} SuggestionItem
                             */
                            SuggestionItem.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.Suggestions.SuggestionItem)
                                    return object;
                                var message = new $root.google.apps.card.v1.Suggestions.SuggestionItem();
                                if (object.text != null)
                                    message.text = String(object.text);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a SuggestionItem message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @static
                             * @param {google.apps.card.v1.Suggestions.SuggestionItem} message SuggestionItem
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            SuggestionItem.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (message.text != null && message.hasOwnProperty("text")) {
                                    object.text = message.text;
                                    if (options.oneofs)
                                        object.content = "text";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this SuggestionItem to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            SuggestionItem.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for SuggestionItem
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.Suggestions.SuggestionItem
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            SuggestionItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.Suggestions.SuggestionItem";
                            };
    
                            return SuggestionItem;
                        })();
    
                        return Suggestions;
                    })();
    
                    v1.ButtonList = (function() {
    
                        /**
                         * Properties of a ButtonList.
                         * @memberof google.apps.card.v1
                         * @interface IButtonList
                         * @property {Array.<google.apps.card.v1.IButton>|null} [buttons] ButtonList buttons
                         */
    
                        /**
                         * Constructs a new ButtonList.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a ButtonList.
                         * @implements IButtonList
                         * @constructor
                         * @param {google.apps.card.v1.IButtonList=} [properties] Properties to set
                         */
                        function ButtonList(properties) {
                            this.buttons = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ButtonList buttons.
                         * @member {Array.<google.apps.card.v1.IButton>} buttons
                         * @memberof google.apps.card.v1.ButtonList
                         * @instance
                         */
                        ButtonList.prototype.buttons = $util.emptyArray;
    
                        /**
                         * Creates a new ButtonList instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.ButtonList
                         * @static
                         * @param {google.apps.card.v1.IButtonList=} [properties] Properties to set
                         * @returns {google.apps.card.v1.ButtonList} ButtonList instance
                         */
                        ButtonList.create = function create(properties) {
                            return new ButtonList(properties);
                        };
    
                        /**
                         * Encodes the specified ButtonList message. Does not implicitly {@link google.apps.card.v1.ButtonList.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.ButtonList
                         * @static
                         * @param {google.apps.card.v1.IButtonList} message ButtonList message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ButtonList.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.buttons != null && message.buttons.length)
                                for (var i = 0; i < message.buttons.length; ++i)
                                    $root.google.apps.card.v1.Button.encode(message.buttons[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ButtonList message, length delimited. Does not implicitly {@link google.apps.card.v1.ButtonList.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.ButtonList
                         * @static
                         * @param {google.apps.card.v1.IButtonList} message ButtonList message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ButtonList.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ButtonList message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.ButtonList
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.ButtonList} ButtonList
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ButtonList.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.ButtonList();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.buttons && message.buttons.length))
                                            message.buttons = [];
                                        message.buttons.push($root.google.apps.card.v1.Button.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ButtonList message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.ButtonList
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.ButtonList} ButtonList
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ButtonList.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ButtonList message.
                         * @function verify
                         * @memberof google.apps.card.v1.ButtonList
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ButtonList.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.buttons != null && message.hasOwnProperty("buttons")) {
                                if (!Array.isArray(message.buttons))
                                    return "buttons: array expected";
                                for (var i = 0; i < message.buttons.length; ++i) {
                                    var error = $root.google.apps.card.v1.Button.verify(message.buttons[i]);
                                    if (error)
                                        return "buttons." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ButtonList message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.ButtonList
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.ButtonList} ButtonList
                         */
                        ButtonList.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.ButtonList)
                                return object;
                            var message = new $root.google.apps.card.v1.ButtonList();
                            if (object.buttons) {
                                if (!Array.isArray(object.buttons))
                                    throw TypeError(".google.apps.card.v1.ButtonList.buttons: array expected");
                                message.buttons = [];
                                for (var i = 0; i < object.buttons.length; ++i) {
                                    if (typeof object.buttons[i] !== "object")
                                        throw TypeError(".google.apps.card.v1.ButtonList.buttons: object expected");
                                    message.buttons[i] = $root.google.apps.card.v1.Button.fromObject(object.buttons[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ButtonList message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.ButtonList
                         * @static
                         * @param {google.apps.card.v1.ButtonList} message ButtonList
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ButtonList.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.buttons = [];
                            if (message.buttons && message.buttons.length) {
                                object.buttons = [];
                                for (var j = 0; j < message.buttons.length; ++j)
                                    object.buttons[j] = $root.google.apps.card.v1.Button.toObject(message.buttons[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ButtonList to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.ButtonList
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ButtonList.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ButtonList
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.ButtonList
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ButtonList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.ButtonList";
                        };
    
                        return ButtonList;
                    })();
    
                    v1.SelectionInput = (function() {
    
                        /**
                         * Properties of a SelectionInput.
                         * @memberof google.apps.card.v1
                         * @interface ISelectionInput
                         * @property {string|null} [name] SelectionInput name
                         * @property {string|null} [label] SelectionInput label
                         * @property {google.apps.card.v1.SelectionInput.SelectionType|null} [type] SelectionInput type
                         * @property {Array.<google.apps.card.v1.SelectionInput.ISelectionItem>|null} [items] SelectionInput items
                         * @property {google.apps.card.v1.IAction|null} [onChangeAction] SelectionInput onChangeAction
                         * @property {number|null} [multiSelectMaxSelectedItems] SelectionInput multiSelectMaxSelectedItems
                         * @property {number|null} [multiSelectMinQueryLength] SelectionInput multiSelectMinQueryLength
                         * @property {google.apps.card.v1.IAction|null} [externalDataSource] SelectionInput externalDataSource
                         * @property {google.apps.card.v1.SelectionInput.IPlatformDataSource|null} [platformDataSource] SelectionInput platformDataSource
                         */
    
                        /**
                         * Constructs a new SelectionInput.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a SelectionInput.
                         * @implements ISelectionInput
                         * @constructor
                         * @param {google.apps.card.v1.ISelectionInput=} [properties] Properties to set
                         */
                        function SelectionInput(properties) {
                            this.items = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SelectionInput name.
                         * @member {string} name
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         */
                        SelectionInput.prototype.name = "";
    
                        /**
                         * SelectionInput label.
                         * @member {string} label
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         */
                        SelectionInput.prototype.label = "";
    
                        /**
                         * SelectionInput type.
                         * @member {google.apps.card.v1.SelectionInput.SelectionType} type
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         */
                        SelectionInput.prototype.type = 0;
    
                        /**
                         * SelectionInput items.
                         * @member {Array.<google.apps.card.v1.SelectionInput.ISelectionItem>} items
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         */
                        SelectionInput.prototype.items = $util.emptyArray;
    
                        /**
                         * SelectionInput onChangeAction.
                         * @member {google.apps.card.v1.IAction|null|undefined} onChangeAction
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         */
                        SelectionInput.prototype.onChangeAction = null;
    
                        /**
                         * SelectionInput multiSelectMaxSelectedItems.
                         * @member {number} multiSelectMaxSelectedItems
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         */
                        SelectionInput.prototype.multiSelectMaxSelectedItems = 0;
    
                        /**
                         * SelectionInput multiSelectMinQueryLength.
                         * @member {number} multiSelectMinQueryLength
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         */
                        SelectionInput.prototype.multiSelectMinQueryLength = 0;
    
                        /**
                         * SelectionInput externalDataSource.
                         * @member {google.apps.card.v1.IAction|null|undefined} externalDataSource
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         */
                        SelectionInput.prototype.externalDataSource = null;
    
                        /**
                         * SelectionInput platformDataSource.
                         * @member {google.apps.card.v1.SelectionInput.IPlatformDataSource|null|undefined} platformDataSource
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         */
                        SelectionInput.prototype.platformDataSource = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * SelectionInput multiSelectDataSource.
                         * @member {"externalDataSource"|"platformDataSource"|undefined} multiSelectDataSource
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         */
                        Object.defineProperty(SelectionInput.prototype, "multiSelectDataSource", {
                            get: $util.oneOfGetter($oneOfFields = ["externalDataSource", "platformDataSource"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new SelectionInput instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.SelectionInput
                         * @static
                         * @param {google.apps.card.v1.ISelectionInput=} [properties] Properties to set
                         * @returns {google.apps.card.v1.SelectionInput} SelectionInput instance
                         */
                        SelectionInput.create = function create(properties) {
                            return new SelectionInput(properties);
                        };
    
                        /**
                         * Encodes the specified SelectionInput message. Does not implicitly {@link google.apps.card.v1.SelectionInput.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.SelectionInput
                         * @static
                         * @param {google.apps.card.v1.ISelectionInput} message SelectionInput message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SelectionInput.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                            if (message.items != null && message.items.length)
                                for (var i = 0; i < message.items.length; ++i)
                                    $root.google.apps.card.v1.SelectionInput.SelectionItem.encode(message.items[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.onChangeAction != null && Object.hasOwnProperty.call(message, "onChangeAction"))
                                $root.google.apps.card.v1.Action.encode(message.onChangeAction, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.multiSelectMaxSelectedItems != null && Object.hasOwnProperty.call(message, "multiSelectMaxSelectedItems"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.multiSelectMaxSelectedItems);
                            if (message.multiSelectMinQueryLength != null && Object.hasOwnProperty.call(message, "multiSelectMinQueryLength"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.multiSelectMinQueryLength);
                            if (message.externalDataSource != null && Object.hasOwnProperty.call(message, "externalDataSource"))
                                $root.google.apps.card.v1.Action.encode(message.externalDataSource, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.platformDataSource != null && Object.hasOwnProperty.call(message, "platformDataSource"))
                                $root.google.apps.card.v1.SelectionInput.PlatformDataSource.encode(message.platformDataSource, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SelectionInput message, length delimited. Does not implicitly {@link google.apps.card.v1.SelectionInput.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.SelectionInput
                         * @static
                         * @param {google.apps.card.v1.ISelectionInput} message SelectionInput message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SelectionInput.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SelectionInput message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.SelectionInput
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.SelectionInput} SelectionInput
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SelectionInput.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.SelectionInput();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.label = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        if (!(message.items && message.items.length))
                                            message.items = [];
                                        message.items.push($root.google.apps.card.v1.SelectionInput.SelectionItem.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 5: {
                                        message.onChangeAction = $root.google.apps.card.v1.Action.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.multiSelectMaxSelectedItems = reader.int32();
                                        break;
                                    }
                                case 7: {
                                        message.multiSelectMinQueryLength = reader.int32();
                                        break;
                                    }
                                case 8: {
                                        message.externalDataSource = $root.google.apps.card.v1.Action.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.platformDataSource = $root.google.apps.card.v1.SelectionInput.PlatformDataSource.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SelectionInput message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.SelectionInput
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.SelectionInput} SelectionInput
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SelectionInput.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SelectionInput message.
                         * @function verify
                         * @memberof google.apps.card.v1.SelectionInput
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SelectionInput.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.label != null && message.hasOwnProperty("label"))
                                if (!$util.isString(message.label))
                                    return "label: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.items != null && message.hasOwnProperty("items")) {
                                if (!Array.isArray(message.items))
                                    return "items: array expected";
                                for (var i = 0; i < message.items.length; ++i) {
                                    var error = $root.google.apps.card.v1.SelectionInput.SelectionItem.verify(message.items[i]);
                                    if (error)
                                        return "items." + error;
                                }
                            }
                            if (message.onChangeAction != null && message.hasOwnProperty("onChangeAction")) {
                                var error = $root.google.apps.card.v1.Action.verify(message.onChangeAction);
                                if (error)
                                    return "onChangeAction." + error;
                            }
                            if (message.multiSelectMaxSelectedItems != null && message.hasOwnProperty("multiSelectMaxSelectedItems"))
                                if (!$util.isInteger(message.multiSelectMaxSelectedItems))
                                    return "multiSelectMaxSelectedItems: integer expected";
                            if (message.multiSelectMinQueryLength != null && message.hasOwnProperty("multiSelectMinQueryLength"))
                                if (!$util.isInteger(message.multiSelectMinQueryLength))
                                    return "multiSelectMinQueryLength: integer expected";
                            if (message.externalDataSource != null && message.hasOwnProperty("externalDataSource")) {
                                properties.multiSelectDataSource = 1;
                                {
                                    var error = $root.google.apps.card.v1.Action.verify(message.externalDataSource);
                                    if (error)
                                        return "externalDataSource." + error;
                                }
                            }
                            if (message.platformDataSource != null && message.hasOwnProperty("platformDataSource")) {
                                if (properties.multiSelectDataSource === 1)
                                    return "multiSelectDataSource: multiple values";
                                properties.multiSelectDataSource = 1;
                                {
                                    var error = $root.google.apps.card.v1.SelectionInput.PlatformDataSource.verify(message.platformDataSource);
                                    if (error)
                                        return "platformDataSource." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SelectionInput message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.SelectionInput
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.SelectionInput} SelectionInput
                         */
                        SelectionInput.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.SelectionInput)
                                return object;
                            var message = new $root.google.apps.card.v1.SelectionInput();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.label != null)
                                message.label = String(object.label);
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "CHECK_BOX":
                            case 0:
                                message.type = 0;
                                break;
                            case "RADIO_BUTTON":
                            case 1:
                                message.type = 1;
                                break;
                            case "SWITCH":
                            case 2:
                                message.type = 2;
                                break;
                            case "DROPDOWN":
                            case 3:
                                message.type = 3;
                                break;
                            case "MULTI_SELECT":
                            case 4:
                                message.type = 4;
                                break;
                            }
                            if (object.items) {
                                if (!Array.isArray(object.items))
                                    throw TypeError(".google.apps.card.v1.SelectionInput.items: array expected");
                                message.items = [];
                                for (var i = 0; i < object.items.length; ++i) {
                                    if (typeof object.items[i] !== "object")
                                        throw TypeError(".google.apps.card.v1.SelectionInput.items: object expected");
                                    message.items[i] = $root.google.apps.card.v1.SelectionInput.SelectionItem.fromObject(object.items[i]);
                                }
                            }
                            if (object.onChangeAction != null) {
                                if (typeof object.onChangeAction !== "object")
                                    throw TypeError(".google.apps.card.v1.SelectionInput.onChangeAction: object expected");
                                message.onChangeAction = $root.google.apps.card.v1.Action.fromObject(object.onChangeAction);
                            }
                            if (object.multiSelectMaxSelectedItems != null)
                                message.multiSelectMaxSelectedItems = object.multiSelectMaxSelectedItems | 0;
                            if (object.multiSelectMinQueryLength != null)
                                message.multiSelectMinQueryLength = object.multiSelectMinQueryLength | 0;
                            if (object.externalDataSource != null) {
                                if (typeof object.externalDataSource !== "object")
                                    throw TypeError(".google.apps.card.v1.SelectionInput.externalDataSource: object expected");
                                message.externalDataSource = $root.google.apps.card.v1.Action.fromObject(object.externalDataSource);
                            }
                            if (object.platformDataSource != null) {
                                if (typeof object.platformDataSource !== "object")
                                    throw TypeError(".google.apps.card.v1.SelectionInput.platformDataSource: object expected");
                                message.platformDataSource = $root.google.apps.card.v1.SelectionInput.PlatformDataSource.fromObject(object.platformDataSource);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SelectionInput message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.SelectionInput
                         * @static
                         * @param {google.apps.card.v1.SelectionInput} message SelectionInput
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SelectionInput.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.items = [];
                            if (options.defaults) {
                                object.name = "";
                                object.label = "";
                                object.type = options.enums === String ? "CHECK_BOX" : 0;
                                object.onChangeAction = null;
                                object.multiSelectMaxSelectedItems = 0;
                                object.multiSelectMinQueryLength = 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.label != null && message.hasOwnProperty("label"))
                                object.label = message.label;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.apps.card.v1.SelectionInput.SelectionType[message.type] === undefined ? message.type : $root.google.apps.card.v1.SelectionInput.SelectionType[message.type] : message.type;
                            if (message.items && message.items.length) {
                                object.items = [];
                                for (var j = 0; j < message.items.length; ++j)
                                    object.items[j] = $root.google.apps.card.v1.SelectionInput.SelectionItem.toObject(message.items[j], options);
                            }
                            if (message.onChangeAction != null && message.hasOwnProperty("onChangeAction"))
                                object.onChangeAction = $root.google.apps.card.v1.Action.toObject(message.onChangeAction, options);
                            if (message.multiSelectMaxSelectedItems != null && message.hasOwnProperty("multiSelectMaxSelectedItems"))
                                object.multiSelectMaxSelectedItems = message.multiSelectMaxSelectedItems;
                            if (message.multiSelectMinQueryLength != null && message.hasOwnProperty("multiSelectMinQueryLength"))
                                object.multiSelectMinQueryLength = message.multiSelectMinQueryLength;
                            if (message.externalDataSource != null && message.hasOwnProperty("externalDataSource")) {
                                object.externalDataSource = $root.google.apps.card.v1.Action.toObject(message.externalDataSource, options);
                                if (options.oneofs)
                                    object.multiSelectDataSource = "externalDataSource";
                            }
                            if (message.platformDataSource != null && message.hasOwnProperty("platformDataSource")) {
                                object.platformDataSource = $root.google.apps.card.v1.SelectionInput.PlatformDataSource.toObject(message.platformDataSource, options);
                                if (options.oneofs)
                                    object.multiSelectDataSource = "platformDataSource";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this SelectionInput to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.SelectionInput
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SelectionInput.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SelectionInput
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.SelectionInput
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SelectionInput.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.SelectionInput";
                        };
    
                        /**
                         * SelectionType enum.
                         * @name google.apps.card.v1.SelectionInput.SelectionType
                         * @enum {number}
                         * @property {number} CHECK_BOX=0 CHECK_BOX value
                         * @property {number} RADIO_BUTTON=1 RADIO_BUTTON value
                         * @property {number} SWITCH=2 SWITCH value
                         * @property {number} DROPDOWN=3 DROPDOWN value
                         * @property {number} MULTI_SELECT=4 MULTI_SELECT value
                         */
                        SelectionInput.SelectionType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "CHECK_BOX"] = 0;
                            values[valuesById[1] = "RADIO_BUTTON"] = 1;
                            values[valuesById[2] = "SWITCH"] = 2;
                            values[valuesById[3] = "DROPDOWN"] = 3;
                            values[valuesById[4] = "MULTI_SELECT"] = 4;
                            return values;
                        })();
    
                        SelectionInput.SelectionItem = (function() {
    
                            /**
                             * Properties of a SelectionItem.
                             * @memberof google.apps.card.v1.SelectionInput
                             * @interface ISelectionItem
                             * @property {string|null} [text] SelectionItem text
                             * @property {string|null} [value] SelectionItem value
                             * @property {boolean|null} [selected] SelectionItem selected
                             * @property {string|null} [startIconUri] SelectionItem startIconUri
                             * @property {string|null} [bottomText] SelectionItem bottomText
                             */
    
                            /**
                             * Constructs a new SelectionItem.
                             * @memberof google.apps.card.v1.SelectionInput
                             * @classdesc Represents a SelectionItem.
                             * @implements ISelectionItem
                             * @constructor
                             * @param {google.apps.card.v1.SelectionInput.ISelectionItem=} [properties] Properties to set
                             */
                            function SelectionItem(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * SelectionItem text.
                             * @member {string} text
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @instance
                             */
                            SelectionItem.prototype.text = "";
    
                            /**
                             * SelectionItem value.
                             * @member {string} value
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @instance
                             */
                            SelectionItem.prototype.value = "";
    
                            /**
                             * SelectionItem selected.
                             * @member {boolean} selected
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @instance
                             */
                            SelectionItem.prototype.selected = false;
    
                            /**
                             * SelectionItem startIconUri.
                             * @member {string} startIconUri
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @instance
                             */
                            SelectionItem.prototype.startIconUri = "";
    
                            /**
                             * SelectionItem bottomText.
                             * @member {string} bottomText
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @instance
                             */
                            SelectionItem.prototype.bottomText = "";
    
                            /**
                             * Creates a new SelectionItem instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @static
                             * @param {google.apps.card.v1.SelectionInput.ISelectionItem=} [properties] Properties to set
                             * @returns {google.apps.card.v1.SelectionInput.SelectionItem} SelectionItem instance
                             */
                            SelectionItem.create = function create(properties) {
                                return new SelectionItem(properties);
                            };
    
                            /**
                             * Encodes the specified SelectionItem message. Does not implicitly {@link google.apps.card.v1.SelectionInput.SelectionItem.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @static
                             * @param {google.apps.card.v1.SelectionInput.ISelectionItem} message SelectionItem message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SelectionItem.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                                if (message.selected != null && Object.hasOwnProperty.call(message, "selected"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.selected);
                                if (message.startIconUri != null && Object.hasOwnProperty.call(message, "startIconUri"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.startIconUri);
                                if (message.bottomText != null && Object.hasOwnProperty.call(message, "bottomText"))
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.bottomText);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified SelectionItem message, length delimited. Does not implicitly {@link google.apps.card.v1.SelectionInput.SelectionItem.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @static
                             * @param {google.apps.card.v1.SelectionInput.ISelectionItem} message SelectionItem message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            SelectionItem.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a SelectionItem message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.SelectionInput.SelectionItem} SelectionItem
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SelectionItem.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.SelectionInput.SelectionItem();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.text = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.value = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.selected = reader.bool();
                                            break;
                                        }
                                    case 4: {
                                            message.startIconUri = reader.string();
                                            break;
                                        }
                                    case 5: {
                                            message.bottomText = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a SelectionItem message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.SelectionInput.SelectionItem} SelectionItem
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            SelectionItem.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a SelectionItem message.
                             * @function verify
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            SelectionItem.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.text != null && message.hasOwnProperty("text"))
                                    if (!$util.isString(message.text))
                                        return "text: string expected";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    if (!$util.isString(message.value))
                                        return "value: string expected";
                                if (message.selected != null && message.hasOwnProperty("selected"))
                                    if (typeof message.selected !== "boolean")
                                        return "selected: boolean expected";
                                if (message.startIconUri != null && message.hasOwnProperty("startIconUri"))
                                    if (!$util.isString(message.startIconUri))
                                        return "startIconUri: string expected";
                                if (message.bottomText != null && message.hasOwnProperty("bottomText"))
                                    if (!$util.isString(message.bottomText))
                                        return "bottomText: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a SelectionItem message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.SelectionInput.SelectionItem} SelectionItem
                             */
                            SelectionItem.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.SelectionInput.SelectionItem)
                                    return object;
                                var message = new $root.google.apps.card.v1.SelectionInput.SelectionItem();
                                if (object.text != null)
                                    message.text = String(object.text);
                                if (object.value != null)
                                    message.value = String(object.value);
                                if (object.selected != null)
                                    message.selected = Boolean(object.selected);
                                if (object.startIconUri != null)
                                    message.startIconUri = String(object.startIconUri);
                                if (object.bottomText != null)
                                    message.bottomText = String(object.bottomText);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a SelectionItem message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @static
                             * @param {google.apps.card.v1.SelectionInput.SelectionItem} message SelectionItem
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            SelectionItem.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.text = "";
                                    object.value = "";
                                    object.selected = false;
                                    object.startIconUri = "";
                                    object.bottomText = "";
                                }
                                if (message.text != null && message.hasOwnProperty("text"))
                                    object.text = message.text;
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = message.value;
                                if (message.selected != null && message.hasOwnProperty("selected"))
                                    object.selected = message.selected;
                                if (message.startIconUri != null && message.hasOwnProperty("startIconUri"))
                                    object.startIconUri = message.startIconUri;
                                if (message.bottomText != null && message.hasOwnProperty("bottomText"))
                                    object.bottomText = message.bottomText;
                                return object;
                            };
    
                            /**
                             * Converts this SelectionItem to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            SelectionItem.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for SelectionItem
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.SelectionInput.SelectionItem
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            SelectionItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.SelectionInput.SelectionItem";
                            };
    
                            return SelectionItem;
                        })();
    
                        SelectionInput.PlatformDataSource = (function() {
    
                            /**
                             * Properties of a PlatformDataSource.
                             * @memberof google.apps.card.v1.SelectionInput
                             * @interface IPlatformDataSource
                             * @property {google.apps.card.v1.SelectionInput.PlatformDataSource.CommonDataSource|null} [commonDataSource] PlatformDataSource commonDataSource
                             */
    
                            /**
                             * Constructs a new PlatformDataSource.
                             * @memberof google.apps.card.v1.SelectionInput
                             * @classdesc Represents a PlatformDataSource.
                             * @implements IPlatformDataSource
                             * @constructor
                             * @param {google.apps.card.v1.SelectionInput.IPlatformDataSource=} [properties] Properties to set
                             */
                            function PlatformDataSource(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * PlatformDataSource commonDataSource.
                             * @member {google.apps.card.v1.SelectionInput.PlatformDataSource.CommonDataSource|null|undefined} commonDataSource
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @instance
                             */
                            PlatformDataSource.prototype.commonDataSource = null;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * PlatformDataSource dataSource.
                             * @member {"commonDataSource"|undefined} dataSource
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @instance
                             */
                            Object.defineProperty(PlatformDataSource.prototype, "dataSource", {
                                get: $util.oneOfGetter($oneOfFields = ["commonDataSource"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new PlatformDataSource instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @static
                             * @param {google.apps.card.v1.SelectionInput.IPlatformDataSource=} [properties] Properties to set
                             * @returns {google.apps.card.v1.SelectionInput.PlatformDataSource} PlatformDataSource instance
                             */
                            PlatformDataSource.create = function create(properties) {
                                return new PlatformDataSource(properties);
                            };
    
                            /**
                             * Encodes the specified PlatformDataSource message. Does not implicitly {@link google.apps.card.v1.SelectionInput.PlatformDataSource.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @static
                             * @param {google.apps.card.v1.SelectionInput.IPlatformDataSource} message PlatformDataSource message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PlatformDataSource.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.commonDataSource != null && Object.hasOwnProperty.call(message, "commonDataSource"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.commonDataSource);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified PlatformDataSource message, length delimited. Does not implicitly {@link google.apps.card.v1.SelectionInput.PlatformDataSource.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @static
                             * @param {google.apps.card.v1.SelectionInput.IPlatformDataSource} message PlatformDataSource message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PlatformDataSource.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a PlatformDataSource message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.SelectionInput.PlatformDataSource} PlatformDataSource
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PlatformDataSource.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.SelectionInput.PlatformDataSource();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.commonDataSource = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a PlatformDataSource message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.SelectionInput.PlatformDataSource} PlatformDataSource
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PlatformDataSource.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a PlatformDataSource message.
                             * @function verify
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            PlatformDataSource.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.commonDataSource != null && message.hasOwnProperty("commonDataSource")) {
                                    properties.dataSource = 1;
                                    switch (message.commonDataSource) {
                                    default:
                                        return "commonDataSource: enum value expected";
                                    case 0:
                                    case 1:
                                        break;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a PlatformDataSource message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.SelectionInput.PlatformDataSource} PlatformDataSource
                             */
                            PlatformDataSource.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.SelectionInput.PlatformDataSource)
                                    return object;
                                var message = new $root.google.apps.card.v1.SelectionInput.PlatformDataSource();
                                switch (object.commonDataSource) {
                                default:
                                    if (typeof object.commonDataSource === "number") {
                                        message.commonDataSource = object.commonDataSource;
                                        break;
                                    }
                                    break;
                                case "UNKNOWN":
                                case 0:
                                    message.commonDataSource = 0;
                                    break;
                                case "USER":
                                case 1:
                                    message.commonDataSource = 1;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a PlatformDataSource message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @static
                             * @param {google.apps.card.v1.SelectionInput.PlatformDataSource} message PlatformDataSource
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            PlatformDataSource.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (message.commonDataSource != null && message.hasOwnProperty("commonDataSource")) {
                                    object.commonDataSource = options.enums === String ? $root.google.apps.card.v1.SelectionInput.PlatformDataSource.CommonDataSource[message.commonDataSource] === undefined ? message.commonDataSource : $root.google.apps.card.v1.SelectionInput.PlatformDataSource.CommonDataSource[message.commonDataSource] : message.commonDataSource;
                                    if (options.oneofs)
                                        object.dataSource = "commonDataSource";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this PlatformDataSource to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            PlatformDataSource.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for PlatformDataSource
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.SelectionInput.PlatformDataSource
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            PlatformDataSource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.SelectionInput.PlatformDataSource";
                            };
    
                            /**
                             * CommonDataSource enum.
                             * @name google.apps.card.v1.SelectionInput.PlatformDataSource.CommonDataSource
                             * @enum {number}
                             * @property {number} UNKNOWN=0 UNKNOWN value
                             * @property {number} USER=1 USER value
                             */
                            PlatformDataSource.CommonDataSource = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "UNKNOWN"] = 0;
                                values[valuesById[1] = "USER"] = 1;
                                return values;
                            })();
    
                            return PlatformDataSource;
                        })();
    
                        return SelectionInput;
                    })();
    
                    v1.DateTimePicker = (function() {
    
                        /**
                         * Properties of a DateTimePicker.
                         * @memberof google.apps.card.v1
                         * @interface IDateTimePicker
                         * @property {string|null} [name] DateTimePicker name
                         * @property {string|null} [label] DateTimePicker label
                         * @property {google.apps.card.v1.DateTimePicker.DateTimePickerType|null} [type] DateTimePicker type
                         * @property {number|Long|null} [valueMsEpoch] DateTimePicker valueMsEpoch
                         * @property {number|null} [timezoneOffsetDate] DateTimePicker timezoneOffsetDate
                         * @property {google.apps.card.v1.IAction|null} [onChangeAction] DateTimePicker onChangeAction
                         */
    
                        /**
                         * Constructs a new DateTimePicker.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a DateTimePicker.
                         * @implements IDateTimePicker
                         * @constructor
                         * @param {google.apps.card.v1.IDateTimePicker=} [properties] Properties to set
                         */
                        function DateTimePicker(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DateTimePicker name.
                         * @member {string} name
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @instance
                         */
                        DateTimePicker.prototype.name = "";
    
                        /**
                         * DateTimePicker label.
                         * @member {string} label
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @instance
                         */
                        DateTimePicker.prototype.label = "";
    
                        /**
                         * DateTimePicker type.
                         * @member {google.apps.card.v1.DateTimePicker.DateTimePickerType} type
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @instance
                         */
                        DateTimePicker.prototype.type = 0;
    
                        /**
                         * DateTimePicker valueMsEpoch.
                         * @member {number|Long} valueMsEpoch
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @instance
                         */
                        DateTimePicker.prototype.valueMsEpoch = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * DateTimePicker timezoneOffsetDate.
                         * @member {number} timezoneOffsetDate
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @instance
                         */
                        DateTimePicker.prototype.timezoneOffsetDate = 0;
    
                        /**
                         * DateTimePicker onChangeAction.
                         * @member {google.apps.card.v1.IAction|null|undefined} onChangeAction
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @instance
                         */
                        DateTimePicker.prototype.onChangeAction = null;
    
                        /**
                         * Creates a new DateTimePicker instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @static
                         * @param {google.apps.card.v1.IDateTimePicker=} [properties] Properties to set
                         * @returns {google.apps.card.v1.DateTimePicker} DateTimePicker instance
                         */
                        DateTimePicker.create = function create(properties) {
                            return new DateTimePicker(properties);
                        };
    
                        /**
                         * Encodes the specified DateTimePicker message. Does not implicitly {@link google.apps.card.v1.DateTimePicker.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @static
                         * @param {google.apps.card.v1.IDateTimePicker} message DateTimePicker message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DateTimePicker.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                            if (message.valueMsEpoch != null && Object.hasOwnProperty.call(message, "valueMsEpoch"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.valueMsEpoch);
                            if (message.timezoneOffsetDate != null && Object.hasOwnProperty.call(message, "timezoneOffsetDate"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.timezoneOffsetDate);
                            if (message.onChangeAction != null && Object.hasOwnProperty.call(message, "onChangeAction"))
                                $root.google.apps.card.v1.Action.encode(message.onChangeAction, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DateTimePicker message, length delimited. Does not implicitly {@link google.apps.card.v1.DateTimePicker.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @static
                         * @param {google.apps.card.v1.IDateTimePicker} message DateTimePicker message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DateTimePicker.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DateTimePicker message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.DateTimePicker} DateTimePicker
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DateTimePicker.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.DateTimePicker();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.label = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.valueMsEpoch = reader.int64();
                                        break;
                                    }
                                case 5: {
                                        message.timezoneOffsetDate = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.onChangeAction = $root.google.apps.card.v1.Action.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DateTimePicker message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.DateTimePicker} DateTimePicker
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DateTimePicker.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DateTimePicker message.
                         * @function verify
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DateTimePicker.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.label != null && message.hasOwnProperty("label"))
                                if (!$util.isString(message.label))
                                    return "label: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.valueMsEpoch != null && message.hasOwnProperty("valueMsEpoch"))
                                if (!$util.isInteger(message.valueMsEpoch) && !(message.valueMsEpoch && $util.isInteger(message.valueMsEpoch.low) && $util.isInteger(message.valueMsEpoch.high)))
                                    return "valueMsEpoch: integer|Long expected";
                            if (message.timezoneOffsetDate != null && message.hasOwnProperty("timezoneOffsetDate"))
                                if (!$util.isInteger(message.timezoneOffsetDate))
                                    return "timezoneOffsetDate: integer expected";
                            if (message.onChangeAction != null && message.hasOwnProperty("onChangeAction")) {
                                var error = $root.google.apps.card.v1.Action.verify(message.onChangeAction);
                                if (error)
                                    return "onChangeAction." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a DateTimePicker message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.DateTimePicker} DateTimePicker
                         */
                        DateTimePicker.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.DateTimePicker)
                                return object;
                            var message = new $root.google.apps.card.v1.DateTimePicker();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.label != null)
                                message.label = String(object.label);
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "DATE_AND_TIME":
                            case 0:
                                message.type = 0;
                                break;
                            case "DATE_ONLY":
                            case 1:
                                message.type = 1;
                                break;
                            case "TIME_ONLY":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.valueMsEpoch != null)
                                if ($util.Long)
                                    (message.valueMsEpoch = $util.Long.fromValue(object.valueMsEpoch)).unsigned = false;
                                else if (typeof object.valueMsEpoch === "string")
                                    message.valueMsEpoch = parseInt(object.valueMsEpoch, 10);
                                else if (typeof object.valueMsEpoch === "number")
                                    message.valueMsEpoch = object.valueMsEpoch;
                                else if (typeof object.valueMsEpoch === "object")
                                    message.valueMsEpoch = new $util.LongBits(object.valueMsEpoch.low >>> 0, object.valueMsEpoch.high >>> 0).toNumber();
                            if (object.timezoneOffsetDate != null)
                                message.timezoneOffsetDate = object.timezoneOffsetDate | 0;
                            if (object.onChangeAction != null) {
                                if (typeof object.onChangeAction !== "object")
                                    throw TypeError(".google.apps.card.v1.DateTimePicker.onChangeAction: object expected");
                                message.onChangeAction = $root.google.apps.card.v1.Action.fromObject(object.onChangeAction);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DateTimePicker message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @static
                         * @param {google.apps.card.v1.DateTimePicker} message DateTimePicker
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DateTimePicker.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.label = "";
                                object.type = options.enums === String ? "DATE_AND_TIME" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.valueMsEpoch = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.valueMsEpoch = options.longs === String ? "0" : 0;
                                object.timezoneOffsetDate = 0;
                                object.onChangeAction = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.label != null && message.hasOwnProperty("label"))
                                object.label = message.label;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.apps.card.v1.DateTimePicker.DateTimePickerType[message.type] === undefined ? message.type : $root.google.apps.card.v1.DateTimePicker.DateTimePickerType[message.type] : message.type;
                            if (message.valueMsEpoch != null && message.hasOwnProperty("valueMsEpoch"))
                                if (typeof message.valueMsEpoch === "number")
                                    object.valueMsEpoch = options.longs === String ? String(message.valueMsEpoch) : message.valueMsEpoch;
                                else
                                    object.valueMsEpoch = options.longs === String ? $util.Long.prototype.toString.call(message.valueMsEpoch) : options.longs === Number ? new $util.LongBits(message.valueMsEpoch.low >>> 0, message.valueMsEpoch.high >>> 0).toNumber() : message.valueMsEpoch;
                            if (message.timezoneOffsetDate != null && message.hasOwnProperty("timezoneOffsetDate"))
                                object.timezoneOffsetDate = message.timezoneOffsetDate;
                            if (message.onChangeAction != null && message.hasOwnProperty("onChangeAction"))
                                object.onChangeAction = $root.google.apps.card.v1.Action.toObject(message.onChangeAction, options);
                            return object;
                        };
    
                        /**
                         * Converts this DateTimePicker to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DateTimePicker.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DateTimePicker
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.DateTimePicker
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DateTimePicker.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.DateTimePicker";
                        };
    
                        /**
                         * DateTimePickerType enum.
                         * @name google.apps.card.v1.DateTimePicker.DateTimePickerType
                         * @enum {number}
                         * @property {number} DATE_AND_TIME=0 DATE_AND_TIME value
                         * @property {number} DATE_ONLY=1 DATE_ONLY value
                         * @property {number} TIME_ONLY=2 TIME_ONLY value
                         */
                        DateTimePicker.DateTimePickerType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "DATE_AND_TIME"] = 0;
                            values[valuesById[1] = "DATE_ONLY"] = 1;
                            values[valuesById[2] = "TIME_ONLY"] = 2;
                            return values;
                        })();
    
                        return DateTimePicker;
                    })();
    
                    v1.Button = (function() {
    
                        /**
                         * Properties of a Button.
                         * @memberof google.apps.card.v1
                         * @interface IButton
                         * @property {string|null} [text] Button text
                         * @property {google.apps.card.v1.IIcon|null} [icon] Button icon
                         * @property {google.type.IColor|null} [color] Button color
                         * @property {google.apps.card.v1.IOnClick|null} [onClick] Button onClick
                         * @property {boolean|null} [disabled] Button disabled
                         * @property {string|null} [altText] Button altText
                         */
    
                        /**
                         * Constructs a new Button.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a Button.
                         * @implements IButton
                         * @constructor
                         * @param {google.apps.card.v1.IButton=} [properties] Properties to set
                         */
                        function Button(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Button text.
                         * @member {string} text
                         * @memberof google.apps.card.v1.Button
                         * @instance
                         */
                        Button.prototype.text = "";
    
                        /**
                         * Button icon.
                         * @member {google.apps.card.v1.IIcon|null|undefined} icon
                         * @memberof google.apps.card.v1.Button
                         * @instance
                         */
                        Button.prototype.icon = null;
    
                        /**
                         * Button color.
                         * @member {google.type.IColor|null|undefined} color
                         * @memberof google.apps.card.v1.Button
                         * @instance
                         */
                        Button.prototype.color = null;
    
                        /**
                         * Button onClick.
                         * @member {google.apps.card.v1.IOnClick|null|undefined} onClick
                         * @memberof google.apps.card.v1.Button
                         * @instance
                         */
                        Button.prototype.onClick = null;
    
                        /**
                         * Button disabled.
                         * @member {boolean} disabled
                         * @memberof google.apps.card.v1.Button
                         * @instance
                         */
                        Button.prototype.disabled = false;
    
                        /**
                         * Button altText.
                         * @member {string} altText
                         * @memberof google.apps.card.v1.Button
                         * @instance
                         */
                        Button.prototype.altText = "";
    
                        /**
                         * Creates a new Button instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.Button
                         * @static
                         * @param {google.apps.card.v1.IButton=} [properties] Properties to set
                         * @returns {google.apps.card.v1.Button} Button instance
                         */
                        Button.create = function create(properties) {
                            return new Button(properties);
                        };
    
                        /**
                         * Encodes the specified Button message. Does not implicitly {@link google.apps.card.v1.Button.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.Button
                         * @static
                         * @param {google.apps.card.v1.IButton} message Button message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Button.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
                                $root.google.apps.card.v1.Icon.encode(message.icon, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.color != null && Object.hasOwnProperty.call(message, "color"))
                                $root.google.type.Color.encode(message.color, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.onClick != null && Object.hasOwnProperty.call(message, "onClick"))
                                $root.google.apps.card.v1.OnClick.encode(message.onClick, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.disabled != null && Object.hasOwnProperty.call(message, "disabled"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.disabled);
                            if (message.altText != null && Object.hasOwnProperty.call(message, "altText"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.altText);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Button message, length delimited. Does not implicitly {@link google.apps.card.v1.Button.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.Button
                         * @static
                         * @param {google.apps.card.v1.IButton} message Button message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Button.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Button message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.Button
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.Button} Button
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Button.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Button();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.icon = $root.google.apps.card.v1.Icon.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.color = $root.google.type.Color.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.onClick = $root.google.apps.card.v1.OnClick.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.disabled = reader.bool();
                                        break;
                                    }
                                case 6: {
                                        message.altText = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Button message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.Button
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.Button} Button
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Button.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Button message.
                         * @function verify
                         * @memberof google.apps.card.v1.Button
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Button.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.icon != null && message.hasOwnProperty("icon")) {
                                var error = $root.google.apps.card.v1.Icon.verify(message.icon);
                                if (error)
                                    return "icon." + error;
                            }
                            if (message.color != null && message.hasOwnProperty("color")) {
                                var error = $root.google.type.Color.verify(message.color);
                                if (error)
                                    return "color." + error;
                            }
                            if (message.onClick != null && message.hasOwnProperty("onClick")) {
                                var error = $root.google.apps.card.v1.OnClick.verify(message.onClick);
                                if (error)
                                    return "onClick." + error;
                            }
                            if (message.disabled != null && message.hasOwnProperty("disabled"))
                                if (typeof message.disabled !== "boolean")
                                    return "disabled: boolean expected";
                            if (message.altText != null && message.hasOwnProperty("altText"))
                                if (!$util.isString(message.altText))
                                    return "altText: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Button message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.Button
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.Button} Button
                         */
                        Button.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.Button)
                                return object;
                            var message = new $root.google.apps.card.v1.Button();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.icon != null) {
                                if (typeof object.icon !== "object")
                                    throw TypeError(".google.apps.card.v1.Button.icon: object expected");
                                message.icon = $root.google.apps.card.v1.Icon.fromObject(object.icon);
                            }
                            if (object.color != null) {
                                if (typeof object.color !== "object")
                                    throw TypeError(".google.apps.card.v1.Button.color: object expected");
                                message.color = $root.google.type.Color.fromObject(object.color);
                            }
                            if (object.onClick != null) {
                                if (typeof object.onClick !== "object")
                                    throw TypeError(".google.apps.card.v1.Button.onClick: object expected");
                                message.onClick = $root.google.apps.card.v1.OnClick.fromObject(object.onClick);
                            }
                            if (object.disabled != null)
                                message.disabled = Boolean(object.disabled);
                            if (object.altText != null)
                                message.altText = String(object.altText);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Button message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.Button
                         * @static
                         * @param {google.apps.card.v1.Button} message Button
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Button.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.text = "";
                                object.icon = null;
                                object.color = null;
                                object.onClick = null;
                                object.disabled = false;
                                object.altText = "";
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.icon != null && message.hasOwnProperty("icon"))
                                object.icon = $root.google.apps.card.v1.Icon.toObject(message.icon, options);
                            if (message.color != null && message.hasOwnProperty("color"))
                                object.color = $root.google.type.Color.toObject(message.color, options);
                            if (message.onClick != null && message.hasOwnProperty("onClick"))
                                object.onClick = $root.google.apps.card.v1.OnClick.toObject(message.onClick, options);
                            if (message.disabled != null && message.hasOwnProperty("disabled"))
                                object.disabled = message.disabled;
                            if (message.altText != null && message.hasOwnProperty("altText"))
                                object.altText = message.altText;
                            return object;
                        };
    
                        /**
                         * Converts this Button to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.Button
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Button.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Button
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.Button
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Button.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.Button";
                        };
    
                        return Button;
                    })();
    
                    v1.Icon = (function() {
    
                        /**
                         * Properties of an Icon.
                         * @memberof google.apps.card.v1
                         * @interface IIcon
                         * @property {string|null} [knownIcon] Icon knownIcon
                         * @property {string|null} [iconUrl] Icon iconUrl
                         * @property {google.apps.card.v1.IMaterialIcon|null} [materialIcon] Icon materialIcon
                         * @property {string|null} [altText] Icon altText
                         * @property {google.apps.card.v1.Widget.ImageType|null} [imageType] Icon imageType
                         */
    
                        /**
                         * Constructs a new Icon.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents an Icon.
                         * @implements IIcon
                         * @constructor
                         * @param {google.apps.card.v1.IIcon=} [properties] Properties to set
                         */
                        function Icon(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Icon knownIcon.
                         * @member {string|null|undefined} knownIcon
                         * @memberof google.apps.card.v1.Icon
                         * @instance
                         */
                        Icon.prototype.knownIcon = null;
    
                        /**
                         * Icon iconUrl.
                         * @member {string|null|undefined} iconUrl
                         * @memberof google.apps.card.v1.Icon
                         * @instance
                         */
                        Icon.prototype.iconUrl = null;
    
                        /**
                         * Icon materialIcon.
                         * @member {google.apps.card.v1.IMaterialIcon|null|undefined} materialIcon
                         * @memberof google.apps.card.v1.Icon
                         * @instance
                         */
                        Icon.prototype.materialIcon = null;
    
                        /**
                         * Icon altText.
                         * @member {string} altText
                         * @memberof google.apps.card.v1.Icon
                         * @instance
                         */
                        Icon.prototype.altText = "";
    
                        /**
                         * Icon imageType.
                         * @member {google.apps.card.v1.Widget.ImageType} imageType
                         * @memberof google.apps.card.v1.Icon
                         * @instance
                         */
                        Icon.prototype.imageType = 0;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Icon icons.
                         * @member {"knownIcon"|"iconUrl"|"materialIcon"|undefined} icons
                         * @memberof google.apps.card.v1.Icon
                         * @instance
                         */
                        Object.defineProperty(Icon.prototype, "icons", {
                            get: $util.oneOfGetter($oneOfFields = ["knownIcon", "iconUrl", "materialIcon"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Icon instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.Icon
                         * @static
                         * @param {google.apps.card.v1.IIcon=} [properties] Properties to set
                         * @returns {google.apps.card.v1.Icon} Icon instance
                         */
                        Icon.create = function create(properties) {
                            return new Icon(properties);
                        };
    
                        /**
                         * Encodes the specified Icon message. Does not implicitly {@link google.apps.card.v1.Icon.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.Icon
                         * @static
                         * @param {google.apps.card.v1.IIcon} message Icon message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Icon.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.knownIcon != null && Object.hasOwnProperty.call(message, "knownIcon"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.knownIcon);
                            if (message.iconUrl != null && Object.hasOwnProperty.call(message, "iconUrl"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.iconUrl);
                            if (message.altText != null && Object.hasOwnProperty.call(message, "altText"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.altText);
                            if (message.imageType != null && Object.hasOwnProperty.call(message, "imageType"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.imageType);
                            if (message.materialIcon != null && Object.hasOwnProperty.call(message, "materialIcon"))
                                $root.google.apps.card.v1.MaterialIcon.encode(message.materialIcon, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Icon message, length delimited. Does not implicitly {@link google.apps.card.v1.Icon.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.Icon
                         * @static
                         * @param {google.apps.card.v1.IIcon} message Icon message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Icon.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Icon message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.Icon
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.Icon} Icon
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Icon.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Icon();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.knownIcon = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.iconUrl = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.materialIcon = $root.google.apps.card.v1.MaterialIcon.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.altText = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.imageType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Icon message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.Icon
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.Icon} Icon
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Icon.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Icon message.
                         * @function verify
                         * @memberof google.apps.card.v1.Icon
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Icon.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.knownIcon != null && message.hasOwnProperty("knownIcon")) {
                                properties.icons = 1;
                                if (!$util.isString(message.knownIcon))
                                    return "knownIcon: string expected";
                            }
                            if (message.iconUrl != null && message.hasOwnProperty("iconUrl")) {
                                if (properties.icons === 1)
                                    return "icons: multiple values";
                                properties.icons = 1;
                                if (!$util.isString(message.iconUrl))
                                    return "iconUrl: string expected";
                            }
                            if (message.materialIcon != null && message.hasOwnProperty("materialIcon")) {
                                if (properties.icons === 1)
                                    return "icons: multiple values";
                                properties.icons = 1;
                                {
                                    var error = $root.google.apps.card.v1.MaterialIcon.verify(message.materialIcon);
                                    if (error)
                                        return "materialIcon." + error;
                                }
                            }
                            if (message.altText != null && message.hasOwnProperty("altText"))
                                if (!$util.isString(message.altText))
                                    return "altText: string expected";
                            if (message.imageType != null && message.hasOwnProperty("imageType"))
                                switch (message.imageType) {
                                default:
                                    return "imageType: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an Icon message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.Icon
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.Icon} Icon
                         */
                        Icon.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.Icon)
                                return object;
                            var message = new $root.google.apps.card.v1.Icon();
                            if (object.knownIcon != null)
                                message.knownIcon = String(object.knownIcon);
                            if (object.iconUrl != null)
                                message.iconUrl = String(object.iconUrl);
                            if (object.materialIcon != null) {
                                if (typeof object.materialIcon !== "object")
                                    throw TypeError(".google.apps.card.v1.Icon.materialIcon: object expected");
                                message.materialIcon = $root.google.apps.card.v1.MaterialIcon.fromObject(object.materialIcon);
                            }
                            if (object.altText != null)
                                message.altText = String(object.altText);
                            switch (object.imageType) {
                            default:
                                if (typeof object.imageType === "number") {
                                    message.imageType = object.imageType;
                                    break;
                                }
                                break;
                            case "SQUARE":
                            case 0:
                                message.imageType = 0;
                                break;
                            case "CIRCLE":
                            case 1:
                                message.imageType = 1;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Icon message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.Icon
                         * @static
                         * @param {google.apps.card.v1.Icon} message Icon
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Icon.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.altText = "";
                                object.imageType = options.enums === String ? "SQUARE" : 0;
                            }
                            if (message.knownIcon != null && message.hasOwnProperty("knownIcon")) {
                                object.knownIcon = message.knownIcon;
                                if (options.oneofs)
                                    object.icons = "knownIcon";
                            }
                            if (message.iconUrl != null && message.hasOwnProperty("iconUrl")) {
                                object.iconUrl = message.iconUrl;
                                if (options.oneofs)
                                    object.icons = "iconUrl";
                            }
                            if (message.altText != null && message.hasOwnProperty("altText"))
                                object.altText = message.altText;
                            if (message.imageType != null && message.hasOwnProperty("imageType"))
                                object.imageType = options.enums === String ? $root.google.apps.card.v1.Widget.ImageType[message.imageType] === undefined ? message.imageType : $root.google.apps.card.v1.Widget.ImageType[message.imageType] : message.imageType;
                            if (message.materialIcon != null && message.hasOwnProperty("materialIcon")) {
                                object.materialIcon = $root.google.apps.card.v1.MaterialIcon.toObject(message.materialIcon, options);
                                if (options.oneofs)
                                    object.icons = "materialIcon";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Icon to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.Icon
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Icon.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Icon
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.Icon
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Icon.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.Icon";
                        };
    
                        return Icon;
                    })();
    
                    v1.MaterialIcon = (function() {
    
                        /**
                         * Properties of a MaterialIcon.
                         * @memberof google.apps.card.v1
                         * @interface IMaterialIcon
                         * @property {string|null} [name] MaterialIcon name
                         * @property {boolean|null} [fill] MaterialIcon fill
                         * @property {number|null} [weight] MaterialIcon weight
                         * @property {number|null} [grade] MaterialIcon grade
                         */
    
                        /**
                         * Constructs a new MaterialIcon.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a MaterialIcon.
                         * @implements IMaterialIcon
                         * @constructor
                         * @param {google.apps.card.v1.IMaterialIcon=} [properties] Properties to set
                         */
                        function MaterialIcon(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * MaterialIcon name.
                         * @member {string} name
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @instance
                         */
                        MaterialIcon.prototype.name = "";
    
                        /**
                         * MaterialIcon fill.
                         * @member {boolean} fill
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @instance
                         */
                        MaterialIcon.prototype.fill = false;
    
                        /**
                         * MaterialIcon weight.
                         * @member {number} weight
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @instance
                         */
                        MaterialIcon.prototype.weight = 0;
    
                        /**
                         * MaterialIcon grade.
                         * @member {number} grade
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @instance
                         */
                        MaterialIcon.prototype.grade = 0;
    
                        /**
                         * Creates a new MaterialIcon instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @static
                         * @param {google.apps.card.v1.IMaterialIcon=} [properties] Properties to set
                         * @returns {google.apps.card.v1.MaterialIcon} MaterialIcon instance
                         */
                        MaterialIcon.create = function create(properties) {
                            return new MaterialIcon(properties);
                        };
    
                        /**
                         * Encodes the specified MaterialIcon message. Does not implicitly {@link google.apps.card.v1.MaterialIcon.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @static
                         * @param {google.apps.card.v1.IMaterialIcon} message MaterialIcon message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MaterialIcon.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.fill != null && Object.hasOwnProperty.call(message, "fill"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fill);
                            if (message.weight != null && Object.hasOwnProperty.call(message, "weight"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.weight);
                            if (message.grade != null && Object.hasOwnProperty.call(message, "grade"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.grade);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified MaterialIcon message, length delimited. Does not implicitly {@link google.apps.card.v1.MaterialIcon.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @static
                         * @param {google.apps.card.v1.IMaterialIcon} message MaterialIcon message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MaterialIcon.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a MaterialIcon message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.MaterialIcon} MaterialIcon
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MaterialIcon.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.MaterialIcon();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.fill = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.weight = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.grade = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a MaterialIcon message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.MaterialIcon} MaterialIcon
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MaterialIcon.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a MaterialIcon message.
                         * @function verify
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        MaterialIcon.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.fill != null && message.hasOwnProperty("fill"))
                                if (typeof message.fill !== "boolean")
                                    return "fill: boolean expected";
                            if (message.weight != null && message.hasOwnProperty("weight"))
                                if (!$util.isInteger(message.weight))
                                    return "weight: integer expected";
                            if (message.grade != null && message.hasOwnProperty("grade"))
                                if (!$util.isInteger(message.grade))
                                    return "grade: integer expected";
                            return null;
                        };
    
                        /**
                         * Creates a MaterialIcon message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.MaterialIcon} MaterialIcon
                         */
                        MaterialIcon.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.MaterialIcon)
                                return object;
                            var message = new $root.google.apps.card.v1.MaterialIcon();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.fill != null)
                                message.fill = Boolean(object.fill);
                            if (object.weight != null)
                                message.weight = object.weight | 0;
                            if (object.grade != null)
                                message.grade = object.grade | 0;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a MaterialIcon message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @static
                         * @param {google.apps.card.v1.MaterialIcon} message MaterialIcon
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        MaterialIcon.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.fill = false;
                                object.weight = 0;
                                object.grade = 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.fill != null && message.hasOwnProperty("fill"))
                                object.fill = message.fill;
                            if (message.weight != null && message.hasOwnProperty("weight"))
                                object.weight = message.weight;
                            if (message.grade != null && message.hasOwnProperty("grade"))
                                object.grade = message.grade;
                            return object;
                        };
    
                        /**
                         * Converts this MaterialIcon to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        MaterialIcon.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for MaterialIcon
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.MaterialIcon
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        MaterialIcon.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.MaterialIcon";
                        };
    
                        return MaterialIcon;
                    })();
    
                    v1.ImageCropStyle = (function() {
    
                        /**
                         * Properties of an ImageCropStyle.
                         * @memberof google.apps.card.v1
                         * @interface IImageCropStyle
                         * @property {google.apps.card.v1.ImageCropStyle.ImageCropType|null} [type] ImageCropStyle type
                         * @property {number|null} [aspectRatio] ImageCropStyle aspectRatio
                         */
    
                        /**
                         * Constructs a new ImageCropStyle.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents an ImageCropStyle.
                         * @implements IImageCropStyle
                         * @constructor
                         * @param {google.apps.card.v1.IImageCropStyle=} [properties] Properties to set
                         */
                        function ImageCropStyle(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ImageCropStyle type.
                         * @member {google.apps.card.v1.ImageCropStyle.ImageCropType} type
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @instance
                         */
                        ImageCropStyle.prototype.type = 0;
    
                        /**
                         * ImageCropStyle aspectRatio.
                         * @member {number} aspectRatio
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @instance
                         */
                        ImageCropStyle.prototype.aspectRatio = 0;
    
                        /**
                         * Creates a new ImageCropStyle instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @static
                         * @param {google.apps.card.v1.IImageCropStyle=} [properties] Properties to set
                         * @returns {google.apps.card.v1.ImageCropStyle} ImageCropStyle instance
                         */
                        ImageCropStyle.create = function create(properties) {
                            return new ImageCropStyle(properties);
                        };
    
                        /**
                         * Encodes the specified ImageCropStyle message. Does not implicitly {@link google.apps.card.v1.ImageCropStyle.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @static
                         * @param {google.apps.card.v1.IImageCropStyle} message ImageCropStyle message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ImageCropStyle.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.aspectRatio != null && Object.hasOwnProperty.call(message, "aspectRatio"))
                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.aspectRatio);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ImageCropStyle message, length delimited. Does not implicitly {@link google.apps.card.v1.ImageCropStyle.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @static
                         * @param {google.apps.card.v1.IImageCropStyle} message ImageCropStyle message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ImageCropStyle.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ImageCropStyle message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.ImageCropStyle} ImageCropStyle
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ImageCropStyle.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.ImageCropStyle();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.aspectRatio = reader.double();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ImageCropStyle message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.ImageCropStyle} ImageCropStyle
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ImageCropStyle.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ImageCropStyle message.
                         * @function verify
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ImageCropStyle.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.aspectRatio != null && message.hasOwnProperty("aspectRatio"))
                                if (typeof message.aspectRatio !== "number")
                                    return "aspectRatio: number expected";
                            return null;
                        };
    
                        /**
                         * Creates an ImageCropStyle message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.ImageCropStyle} ImageCropStyle
                         */
                        ImageCropStyle.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.ImageCropStyle)
                                return object;
                            var message = new $root.google.apps.card.v1.ImageCropStyle();
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "IMAGE_CROP_TYPE_UNSPECIFIED":
                            case 0:
                                message.type = 0;
                                break;
                            case "SQUARE":
                            case 1:
                                message.type = 1;
                                break;
                            case "CIRCLE":
                            case 2:
                                message.type = 2;
                                break;
                            case "RECTANGLE_CUSTOM":
                            case 3:
                                message.type = 3;
                                break;
                            case "RECTANGLE_4_3":
                            case 4:
                                message.type = 4;
                                break;
                            }
                            if (object.aspectRatio != null)
                                message.aspectRatio = Number(object.aspectRatio);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ImageCropStyle message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @static
                         * @param {google.apps.card.v1.ImageCropStyle} message ImageCropStyle
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ImageCropStyle.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.type = options.enums === String ? "IMAGE_CROP_TYPE_UNSPECIFIED" : 0;
                                object.aspectRatio = 0;
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.apps.card.v1.ImageCropStyle.ImageCropType[message.type] === undefined ? message.type : $root.google.apps.card.v1.ImageCropStyle.ImageCropType[message.type] : message.type;
                            if (message.aspectRatio != null && message.hasOwnProperty("aspectRatio"))
                                object.aspectRatio = options.json && !isFinite(message.aspectRatio) ? String(message.aspectRatio) : message.aspectRatio;
                            return object;
                        };
    
                        /**
                         * Converts this ImageCropStyle to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ImageCropStyle.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ImageCropStyle
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.ImageCropStyle
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ImageCropStyle.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.ImageCropStyle";
                        };
    
                        /**
                         * ImageCropType enum.
                         * @name google.apps.card.v1.ImageCropStyle.ImageCropType
                         * @enum {number}
                         * @property {number} IMAGE_CROP_TYPE_UNSPECIFIED=0 IMAGE_CROP_TYPE_UNSPECIFIED value
                         * @property {number} SQUARE=1 SQUARE value
                         * @property {number} CIRCLE=2 CIRCLE value
                         * @property {number} RECTANGLE_CUSTOM=3 RECTANGLE_CUSTOM value
                         * @property {number} RECTANGLE_4_3=4 RECTANGLE_4_3 value
                         */
                        ImageCropStyle.ImageCropType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "IMAGE_CROP_TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "SQUARE"] = 1;
                            values[valuesById[2] = "CIRCLE"] = 2;
                            values[valuesById[3] = "RECTANGLE_CUSTOM"] = 3;
                            values[valuesById[4] = "RECTANGLE_4_3"] = 4;
                            return values;
                        })();
    
                        return ImageCropStyle;
                    })();
    
                    v1.BorderStyle = (function() {
    
                        /**
                         * Properties of a BorderStyle.
                         * @memberof google.apps.card.v1
                         * @interface IBorderStyle
                         * @property {google.apps.card.v1.BorderStyle.BorderType|null} [type] BorderStyle type
                         * @property {google.type.IColor|null} [strokeColor] BorderStyle strokeColor
                         * @property {number|null} [cornerRadius] BorderStyle cornerRadius
                         */
    
                        /**
                         * Constructs a new BorderStyle.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a BorderStyle.
                         * @implements IBorderStyle
                         * @constructor
                         * @param {google.apps.card.v1.IBorderStyle=} [properties] Properties to set
                         */
                        function BorderStyle(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * BorderStyle type.
                         * @member {google.apps.card.v1.BorderStyle.BorderType} type
                         * @memberof google.apps.card.v1.BorderStyle
                         * @instance
                         */
                        BorderStyle.prototype.type = 0;
    
                        /**
                         * BorderStyle strokeColor.
                         * @member {google.type.IColor|null|undefined} strokeColor
                         * @memberof google.apps.card.v1.BorderStyle
                         * @instance
                         */
                        BorderStyle.prototype.strokeColor = null;
    
                        /**
                         * BorderStyle cornerRadius.
                         * @member {number} cornerRadius
                         * @memberof google.apps.card.v1.BorderStyle
                         * @instance
                         */
                        BorderStyle.prototype.cornerRadius = 0;
    
                        /**
                         * Creates a new BorderStyle instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.BorderStyle
                         * @static
                         * @param {google.apps.card.v1.IBorderStyle=} [properties] Properties to set
                         * @returns {google.apps.card.v1.BorderStyle} BorderStyle instance
                         */
                        BorderStyle.create = function create(properties) {
                            return new BorderStyle(properties);
                        };
    
                        /**
                         * Encodes the specified BorderStyle message. Does not implicitly {@link google.apps.card.v1.BorderStyle.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.BorderStyle
                         * @static
                         * @param {google.apps.card.v1.IBorderStyle} message BorderStyle message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BorderStyle.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.strokeColor != null && Object.hasOwnProperty.call(message, "strokeColor"))
                                $root.google.type.Color.encode(message.strokeColor, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.cornerRadius != null && Object.hasOwnProperty.call(message, "cornerRadius"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cornerRadius);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified BorderStyle message, length delimited. Does not implicitly {@link google.apps.card.v1.BorderStyle.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.BorderStyle
                         * @static
                         * @param {google.apps.card.v1.IBorderStyle} message BorderStyle message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BorderStyle.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a BorderStyle message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.BorderStyle
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.BorderStyle} BorderStyle
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BorderStyle.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.BorderStyle();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.strokeColor = $root.google.type.Color.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.cornerRadius = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a BorderStyle message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.BorderStyle
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.BorderStyle} BorderStyle
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BorderStyle.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a BorderStyle message.
                         * @function verify
                         * @memberof google.apps.card.v1.BorderStyle
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BorderStyle.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.strokeColor != null && message.hasOwnProperty("strokeColor")) {
                                var error = $root.google.type.Color.verify(message.strokeColor);
                                if (error)
                                    return "strokeColor." + error;
                            }
                            if (message.cornerRadius != null && message.hasOwnProperty("cornerRadius"))
                                if (!$util.isInteger(message.cornerRadius))
                                    return "cornerRadius: integer expected";
                            return null;
                        };
    
                        /**
                         * Creates a BorderStyle message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.BorderStyle
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.BorderStyle} BorderStyle
                         */
                        BorderStyle.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.BorderStyle)
                                return object;
                            var message = new $root.google.apps.card.v1.BorderStyle();
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "BORDER_TYPE_UNSPECIFIED":
                            case 0:
                                message.type = 0;
                                break;
                            case "NO_BORDER":
                            case 1:
                                message.type = 1;
                                break;
                            case "STROKE":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.strokeColor != null) {
                                if (typeof object.strokeColor !== "object")
                                    throw TypeError(".google.apps.card.v1.BorderStyle.strokeColor: object expected");
                                message.strokeColor = $root.google.type.Color.fromObject(object.strokeColor);
                            }
                            if (object.cornerRadius != null)
                                message.cornerRadius = object.cornerRadius | 0;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a BorderStyle message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.BorderStyle
                         * @static
                         * @param {google.apps.card.v1.BorderStyle} message BorderStyle
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BorderStyle.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.type = options.enums === String ? "BORDER_TYPE_UNSPECIFIED" : 0;
                                object.strokeColor = null;
                                object.cornerRadius = 0;
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.apps.card.v1.BorderStyle.BorderType[message.type] === undefined ? message.type : $root.google.apps.card.v1.BorderStyle.BorderType[message.type] : message.type;
                            if (message.strokeColor != null && message.hasOwnProperty("strokeColor"))
                                object.strokeColor = $root.google.type.Color.toObject(message.strokeColor, options);
                            if (message.cornerRadius != null && message.hasOwnProperty("cornerRadius"))
                                object.cornerRadius = message.cornerRadius;
                            return object;
                        };
    
                        /**
                         * Converts this BorderStyle to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.BorderStyle
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BorderStyle.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for BorderStyle
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.BorderStyle
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        BorderStyle.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.BorderStyle";
                        };
    
                        /**
                         * BorderType enum.
                         * @name google.apps.card.v1.BorderStyle.BorderType
                         * @enum {number}
                         * @property {number} BORDER_TYPE_UNSPECIFIED=0 BORDER_TYPE_UNSPECIFIED value
                         * @property {number} NO_BORDER=1 NO_BORDER value
                         * @property {number} STROKE=2 STROKE value
                         */
                        BorderStyle.BorderType = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "BORDER_TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "NO_BORDER"] = 1;
                            values[valuesById[2] = "STROKE"] = 2;
                            return values;
                        })();
    
                        return BorderStyle;
                    })();
    
                    v1.ImageComponent = (function() {
    
                        /**
                         * Properties of an ImageComponent.
                         * @memberof google.apps.card.v1
                         * @interface IImageComponent
                         * @property {string|null} [imageUri] ImageComponent imageUri
                         * @property {string|null} [altText] ImageComponent altText
                         * @property {google.apps.card.v1.IImageCropStyle|null} [cropStyle] ImageComponent cropStyle
                         * @property {google.apps.card.v1.IBorderStyle|null} [borderStyle] ImageComponent borderStyle
                         */
    
                        /**
                         * Constructs a new ImageComponent.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents an ImageComponent.
                         * @implements IImageComponent
                         * @constructor
                         * @param {google.apps.card.v1.IImageComponent=} [properties] Properties to set
                         */
                        function ImageComponent(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ImageComponent imageUri.
                         * @member {string} imageUri
                         * @memberof google.apps.card.v1.ImageComponent
                         * @instance
                         */
                        ImageComponent.prototype.imageUri = "";
    
                        /**
                         * ImageComponent altText.
                         * @member {string} altText
                         * @memberof google.apps.card.v1.ImageComponent
                         * @instance
                         */
                        ImageComponent.prototype.altText = "";
    
                        /**
                         * ImageComponent cropStyle.
                         * @member {google.apps.card.v1.IImageCropStyle|null|undefined} cropStyle
                         * @memberof google.apps.card.v1.ImageComponent
                         * @instance
                         */
                        ImageComponent.prototype.cropStyle = null;
    
                        /**
                         * ImageComponent borderStyle.
                         * @member {google.apps.card.v1.IBorderStyle|null|undefined} borderStyle
                         * @memberof google.apps.card.v1.ImageComponent
                         * @instance
                         */
                        ImageComponent.prototype.borderStyle = null;
    
                        /**
                         * Creates a new ImageComponent instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.ImageComponent
                         * @static
                         * @param {google.apps.card.v1.IImageComponent=} [properties] Properties to set
                         * @returns {google.apps.card.v1.ImageComponent} ImageComponent instance
                         */
                        ImageComponent.create = function create(properties) {
                            return new ImageComponent(properties);
                        };
    
                        /**
                         * Encodes the specified ImageComponent message. Does not implicitly {@link google.apps.card.v1.ImageComponent.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.ImageComponent
                         * @static
                         * @param {google.apps.card.v1.IImageComponent} message ImageComponent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ImageComponent.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.imageUri != null && Object.hasOwnProperty.call(message, "imageUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.imageUri);
                            if (message.altText != null && Object.hasOwnProperty.call(message, "altText"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.altText);
                            if (message.cropStyle != null && Object.hasOwnProperty.call(message, "cropStyle"))
                                $root.google.apps.card.v1.ImageCropStyle.encode(message.cropStyle, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.borderStyle != null && Object.hasOwnProperty.call(message, "borderStyle"))
                                $root.google.apps.card.v1.BorderStyle.encode(message.borderStyle, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ImageComponent message, length delimited. Does not implicitly {@link google.apps.card.v1.ImageComponent.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.ImageComponent
                         * @static
                         * @param {google.apps.card.v1.IImageComponent} message ImageComponent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ImageComponent.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ImageComponent message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.ImageComponent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.ImageComponent} ImageComponent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ImageComponent.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.ImageComponent();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.imageUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.altText = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.cropStyle = $root.google.apps.card.v1.ImageCropStyle.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.borderStyle = $root.google.apps.card.v1.BorderStyle.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ImageComponent message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.ImageComponent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.ImageComponent} ImageComponent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ImageComponent.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ImageComponent message.
                         * @function verify
                         * @memberof google.apps.card.v1.ImageComponent
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ImageComponent.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.imageUri != null && message.hasOwnProperty("imageUri"))
                                if (!$util.isString(message.imageUri))
                                    return "imageUri: string expected";
                            if (message.altText != null && message.hasOwnProperty("altText"))
                                if (!$util.isString(message.altText))
                                    return "altText: string expected";
                            if (message.cropStyle != null && message.hasOwnProperty("cropStyle")) {
                                var error = $root.google.apps.card.v1.ImageCropStyle.verify(message.cropStyle);
                                if (error)
                                    return "cropStyle." + error;
                            }
                            if (message.borderStyle != null && message.hasOwnProperty("borderStyle")) {
                                var error = $root.google.apps.card.v1.BorderStyle.verify(message.borderStyle);
                                if (error)
                                    return "borderStyle." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ImageComponent message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.ImageComponent
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.ImageComponent} ImageComponent
                         */
                        ImageComponent.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.ImageComponent)
                                return object;
                            var message = new $root.google.apps.card.v1.ImageComponent();
                            if (object.imageUri != null)
                                message.imageUri = String(object.imageUri);
                            if (object.altText != null)
                                message.altText = String(object.altText);
                            if (object.cropStyle != null) {
                                if (typeof object.cropStyle !== "object")
                                    throw TypeError(".google.apps.card.v1.ImageComponent.cropStyle: object expected");
                                message.cropStyle = $root.google.apps.card.v1.ImageCropStyle.fromObject(object.cropStyle);
                            }
                            if (object.borderStyle != null) {
                                if (typeof object.borderStyle !== "object")
                                    throw TypeError(".google.apps.card.v1.ImageComponent.borderStyle: object expected");
                                message.borderStyle = $root.google.apps.card.v1.BorderStyle.fromObject(object.borderStyle);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ImageComponent message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.ImageComponent
                         * @static
                         * @param {google.apps.card.v1.ImageComponent} message ImageComponent
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ImageComponent.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.imageUri = "";
                                object.altText = "";
                                object.cropStyle = null;
                                object.borderStyle = null;
                            }
                            if (message.imageUri != null && message.hasOwnProperty("imageUri"))
                                object.imageUri = message.imageUri;
                            if (message.altText != null && message.hasOwnProperty("altText"))
                                object.altText = message.altText;
                            if (message.cropStyle != null && message.hasOwnProperty("cropStyle"))
                                object.cropStyle = $root.google.apps.card.v1.ImageCropStyle.toObject(message.cropStyle, options);
                            if (message.borderStyle != null && message.hasOwnProperty("borderStyle"))
                                object.borderStyle = $root.google.apps.card.v1.BorderStyle.toObject(message.borderStyle, options);
                            return object;
                        };
    
                        /**
                         * Converts this ImageComponent to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.ImageComponent
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ImageComponent.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ImageComponent
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.ImageComponent
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ImageComponent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.ImageComponent";
                        };
    
                        return ImageComponent;
                    })();
    
                    v1.Grid = (function() {
    
                        /**
                         * Properties of a Grid.
                         * @memberof google.apps.card.v1
                         * @interface IGrid
                         * @property {string|null} [title] Grid title
                         * @property {Array.<google.apps.card.v1.Grid.IGridItem>|null} [items] Grid items
                         * @property {google.apps.card.v1.IBorderStyle|null} [borderStyle] Grid borderStyle
                         * @property {number|null} [columnCount] Grid columnCount
                         * @property {google.apps.card.v1.IOnClick|null} [onClick] Grid onClick
                         */
    
                        /**
                         * Constructs a new Grid.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a Grid.
                         * @implements IGrid
                         * @constructor
                         * @param {google.apps.card.v1.IGrid=} [properties] Properties to set
                         */
                        function Grid(properties) {
                            this.items = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Grid title.
                         * @member {string} title
                         * @memberof google.apps.card.v1.Grid
                         * @instance
                         */
                        Grid.prototype.title = "";
    
                        /**
                         * Grid items.
                         * @member {Array.<google.apps.card.v1.Grid.IGridItem>} items
                         * @memberof google.apps.card.v1.Grid
                         * @instance
                         */
                        Grid.prototype.items = $util.emptyArray;
    
                        /**
                         * Grid borderStyle.
                         * @member {google.apps.card.v1.IBorderStyle|null|undefined} borderStyle
                         * @memberof google.apps.card.v1.Grid
                         * @instance
                         */
                        Grid.prototype.borderStyle = null;
    
                        /**
                         * Grid columnCount.
                         * @member {number} columnCount
                         * @memberof google.apps.card.v1.Grid
                         * @instance
                         */
                        Grid.prototype.columnCount = 0;
    
                        /**
                         * Grid onClick.
                         * @member {google.apps.card.v1.IOnClick|null|undefined} onClick
                         * @memberof google.apps.card.v1.Grid
                         * @instance
                         */
                        Grid.prototype.onClick = null;
    
                        /**
                         * Creates a new Grid instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.Grid
                         * @static
                         * @param {google.apps.card.v1.IGrid=} [properties] Properties to set
                         * @returns {google.apps.card.v1.Grid} Grid instance
                         */
                        Grid.create = function create(properties) {
                            return new Grid(properties);
                        };
    
                        /**
                         * Encodes the specified Grid message. Does not implicitly {@link google.apps.card.v1.Grid.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.Grid
                         * @static
                         * @param {google.apps.card.v1.IGrid} message Grid message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Grid.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                            if (message.items != null && message.items.length)
                                for (var i = 0; i < message.items.length; ++i)
                                    $root.google.apps.card.v1.Grid.GridItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.borderStyle != null && Object.hasOwnProperty.call(message, "borderStyle"))
                                $root.google.apps.card.v1.BorderStyle.encode(message.borderStyle, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.columnCount != null && Object.hasOwnProperty.call(message, "columnCount"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.columnCount);
                            if (message.onClick != null && Object.hasOwnProperty.call(message, "onClick"))
                                $root.google.apps.card.v1.OnClick.encode(message.onClick, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Grid message, length delimited. Does not implicitly {@link google.apps.card.v1.Grid.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.Grid
                         * @static
                         * @param {google.apps.card.v1.IGrid} message Grid message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Grid.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Grid message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.Grid
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.Grid} Grid
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Grid.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Grid();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.title = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.items && message.items.length))
                                            message.items = [];
                                        message.items.push($root.google.apps.card.v1.Grid.GridItem.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.borderStyle = $root.google.apps.card.v1.BorderStyle.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.columnCount = reader.int32();
                                        break;
                                    }
                                case 5: {
                                        message.onClick = $root.google.apps.card.v1.OnClick.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Grid message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.Grid
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.Grid} Grid
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Grid.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Grid message.
                         * @function verify
                         * @memberof google.apps.card.v1.Grid
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Grid.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.items != null && message.hasOwnProperty("items")) {
                                if (!Array.isArray(message.items))
                                    return "items: array expected";
                                for (var i = 0; i < message.items.length; ++i) {
                                    var error = $root.google.apps.card.v1.Grid.GridItem.verify(message.items[i]);
                                    if (error)
                                        return "items." + error;
                                }
                            }
                            if (message.borderStyle != null && message.hasOwnProperty("borderStyle")) {
                                var error = $root.google.apps.card.v1.BorderStyle.verify(message.borderStyle);
                                if (error)
                                    return "borderStyle." + error;
                            }
                            if (message.columnCount != null && message.hasOwnProperty("columnCount"))
                                if (!$util.isInteger(message.columnCount))
                                    return "columnCount: integer expected";
                            if (message.onClick != null && message.hasOwnProperty("onClick")) {
                                var error = $root.google.apps.card.v1.OnClick.verify(message.onClick);
                                if (error)
                                    return "onClick." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Grid message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.Grid
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.Grid} Grid
                         */
                        Grid.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.Grid)
                                return object;
                            var message = new $root.google.apps.card.v1.Grid();
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.items) {
                                if (!Array.isArray(object.items))
                                    throw TypeError(".google.apps.card.v1.Grid.items: array expected");
                                message.items = [];
                                for (var i = 0; i < object.items.length; ++i) {
                                    if (typeof object.items[i] !== "object")
                                        throw TypeError(".google.apps.card.v1.Grid.items: object expected");
                                    message.items[i] = $root.google.apps.card.v1.Grid.GridItem.fromObject(object.items[i]);
                                }
                            }
                            if (object.borderStyle != null) {
                                if (typeof object.borderStyle !== "object")
                                    throw TypeError(".google.apps.card.v1.Grid.borderStyle: object expected");
                                message.borderStyle = $root.google.apps.card.v1.BorderStyle.fromObject(object.borderStyle);
                            }
                            if (object.columnCount != null)
                                message.columnCount = object.columnCount | 0;
                            if (object.onClick != null) {
                                if (typeof object.onClick !== "object")
                                    throw TypeError(".google.apps.card.v1.Grid.onClick: object expected");
                                message.onClick = $root.google.apps.card.v1.OnClick.fromObject(object.onClick);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Grid message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.Grid
                         * @static
                         * @param {google.apps.card.v1.Grid} message Grid
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Grid.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.items = [];
                            if (options.defaults) {
                                object.title = "";
                                object.borderStyle = null;
                                object.columnCount = 0;
                                object.onClick = null;
                            }
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.items && message.items.length) {
                                object.items = [];
                                for (var j = 0; j < message.items.length; ++j)
                                    object.items[j] = $root.google.apps.card.v1.Grid.GridItem.toObject(message.items[j], options);
                            }
                            if (message.borderStyle != null && message.hasOwnProperty("borderStyle"))
                                object.borderStyle = $root.google.apps.card.v1.BorderStyle.toObject(message.borderStyle, options);
                            if (message.columnCount != null && message.hasOwnProperty("columnCount"))
                                object.columnCount = message.columnCount;
                            if (message.onClick != null && message.hasOwnProperty("onClick"))
                                object.onClick = $root.google.apps.card.v1.OnClick.toObject(message.onClick, options);
                            return object;
                        };
    
                        /**
                         * Converts this Grid to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.Grid
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Grid.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Grid
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.Grid
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Grid.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.Grid";
                        };
    
                        Grid.GridItem = (function() {
    
                            /**
                             * Properties of a GridItem.
                             * @memberof google.apps.card.v1.Grid
                             * @interface IGridItem
                             * @property {string|null} [id] GridItem id
                             * @property {google.apps.card.v1.IImageComponent|null} [image] GridItem image
                             * @property {string|null} [title] GridItem title
                             * @property {string|null} [subtitle] GridItem subtitle
                             * @property {google.apps.card.v1.Grid.GridItem.GridItemLayout|null} [layout] GridItem layout
                             */
    
                            /**
                             * Constructs a new GridItem.
                             * @memberof google.apps.card.v1.Grid
                             * @classdesc Represents a GridItem.
                             * @implements IGridItem
                             * @constructor
                             * @param {google.apps.card.v1.Grid.IGridItem=} [properties] Properties to set
                             */
                            function GridItem(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * GridItem id.
                             * @member {string} id
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @instance
                             */
                            GridItem.prototype.id = "";
    
                            /**
                             * GridItem image.
                             * @member {google.apps.card.v1.IImageComponent|null|undefined} image
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @instance
                             */
                            GridItem.prototype.image = null;
    
                            /**
                             * GridItem title.
                             * @member {string} title
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @instance
                             */
                            GridItem.prototype.title = "";
    
                            /**
                             * GridItem subtitle.
                             * @member {string} subtitle
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @instance
                             */
                            GridItem.prototype.subtitle = "";
    
                            /**
                             * GridItem layout.
                             * @member {google.apps.card.v1.Grid.GridItem.GridItemLayout} layout
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @instance
                             */
                            GridItem.prototype.layout = 0;
    
                            /**
                             * Creates a new GridItem instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @static
                             * @param {google.apps.card.v1.Grid.IGridItem=} [properties] Properties to set
                             * @returns {google.apps.card.v1.Grid.GridItem} GridItem instance
                             */
                            GridItem.create = function create(properties) {
                                return new GridItem(properties);
                            };
    
                            /**
                             * Encodes the specified GridItem message. Does not implicitly {@link google.apps.card.v1.Grid.GridItem.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @static
                             * @param {google.apps.card.v1.Grid.IGridItem} message GridItem message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GridItem.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                                if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                                    $root.google.apps.card.v1.ImageComponent.encode(message.image, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.title);
                                if (message.subtitle != null && Object.hasOwnProperty.call(message, "subtitle"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.subtitle);
                                if (message.layout != null && Object.hasOwnProperty.call(message, "layout"))
                                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.layout);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified GridItem message, length delimited. Does not implicitly {@link google.apps.card.v1.Grid.GridItem.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @static
                             * @param {google.apps.card.v1.Grid.IGridItem} message GridItem message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            GridItem.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a GridItem message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.Grid.GridItem} GridItem
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GridItem.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Grid.GridItem();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.id = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.image = $root.google.apps.card.v1.ImageComponent.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 3: {
                                            message.title = reader.string();
                                            break;
                                        }
                                    case 4: {
                                            message.subtitle = reader.string();
                                            break;
                                        }
                                    case 9: {
                                            message.layout = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a GridItem message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.Grid.GridItem} GridItem
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            GridItem.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a GridItem message.
                             * @function verify
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            GridItem.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.id != null && message.hasOwnProperty("id"))
                                    if (!$util.isString(message.id))
                                        return "id: string expected";
                                if (message.image != null && message.hasOwnProperty("image")) {
                                    var error = $root.google.apps.card.v1.ImageComponent.verify(message.image);
                                    if (error)
                                        return "image." + error;
                                }
                                if (message.title != null && message.hasOwnProperty("title"))
                                    if (!$util.isString(message.title))
                                        return "title: string expected";
                                if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                                    if (!$util.isString(message.subtitle))
                                        return "subtitle: string expected";
                                if (message.layout != null && message.hasOwnProperty("layout"))
                                    switch (message.layout) {
                                    default:
                                        return "layout: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates a GridItem message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.Grid.GridItem} GridItem
                             */
                            GridItem.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.Grid.GridItem)
                                    return object;
                                var message = new $root.google.apps.card.v1.Grid.GridItem();
                                if (object.id != null)
                                    message.id = String(object.id);
                                if (object.image != null) {
                                    if (typeof object.image !== "object")
                                        throw TypeError(".google.apps.card.v1.Grid.GridItem.image: object expected");
                                    message.image = $root.google.apps.card.v1.ImageComponent.fromObject(object.image);
                                }
                                if (object.title != null)
                                    message.title = String(object.title);
                                if (object.subtitle != null)
                                    message.subtitle = String(object.subtitle);
                                switch (object.layout) {
                                default:
                                    if (typeof object.layout === "number") {
                                        message.layout = object.layout;
                                        break;
                                    }
                                    break;
                                case "GRID_ITEM_LAYOUT_UNSPECIFIED":
                                case 0:
                                    message.layout = 0;
                                    break;
                                case "TEXT_BELOW":
                                case 1:
                                    message.layout = 1;
                                    break;
                                case "TEXT_ABOVE":
                                case 2:
                                    message.layout = 2;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a GridItem message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @static
                             * @param {google.apps.card.v1.Grid.GridItem} message GridItem
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            GridItem.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.id = "";
                                    object.image = null;
                                    object.title = "";
                                    object.subtitle = "";
                                    object.layout = options.enums === String ? "GRID_ITEM_LAYOUT_UNSPECIFIED" : 0;
                                }
                                if (message.id != null && message.hasOwnProperty("id"))
                                    object.id = message.id;
                                if (message.image != null && message.hasOwnProperty("image"))
                                    object.image = $root.google.apps.card.v1.ImageComponent.toObject(message.image, options);
                                if (message.title != null && message.hasOwnProperty("title"))
                                    object.title = message.title;
                                if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                                    object.subtitle = message.subtitle;
                                if (message.layout != null && message.hasOwnProperty("layout"))
                                    object.layout = options.enums === String ? $root.google.apps.card.v1.Grid.GridItem.GridItemLayout[message.layout] === undefined ? message.layout : $root.google.apps.card.v1.Grid.GridItem.GridItemLayout[message.layout] : message.layout;
                                return object;
                            };
    
                            /**
                             * Converts this GridItem to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            GridItem.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for GridItem
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.Grid.GridItem
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            GridItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.Grid.GridItem";
                            };
    
                            /**
                             * GridItemLayout enum.
                             * @name google.apps.card.v1.Grid.GridItem.GridItemLayout
                             * @enum {number}
                             * @property {number} GRID_ITEM_LAYOUT_UNSPECIFIED=0 GRID_ITEM_LAYOUT_UNSPECIFIED value
                             * @property {number} TEXT_BELOW=1 TEXT_BELOW value
                             * @property {number} TEXT_ABOVE=2 TEXT_ABOVE value
                             */
                            GridItem.GridItemLayout = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "GRID_ITEM_LAYOUT_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "TEXT_BELOW"] = 1;
                                values[valuesById[2] = "TEXT_ABOVE"] = 2;
                                return values;
                            })();
    
                            return GridItem;
                        })();
    
                        return Grid;
                    })();
    
                    v1.Columns = (function() {
    
                        /**
                         * Properties of a Columns.
                         * @memberof google.apps.card.v1
                         * @interface IColumns
                         * @property {Array.<google.apps.card.v1.Columns.IColumn>|null} [columnItems] Columns columnItems
                         */
    
                        /**
                         * Constructs a new Columns.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents a Columns.
                         * @implements IColumns
                         * @constructor
                         * @param {google.apps.card.v1.IColumns=} [properties] Properties to set
                         */
                        function Columns(properties) {
                            this.columnItems = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Columns columnItems.
                         * @member {Array.<google.apps.card.v1.Columns.IColumn>} columnItems
                         * @memberof google.apps.card.v1.Columns
                         * @instance
                         */
                        Columns.prototype.columnItems = $util.emptyArray;
    
                        /**
                         * Creates a new Columns instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.Columns
                         * @static
                         * @param {google.apps.card.v1.IColumns=} [properties] Properties to set
                         * @returns {google.apps.card.v1.Columns} Columns instance
                         */
                        Columns.create = function create(properties) {
                            return new Columns(properties);
                        };
    
                        /**
                         * Encodes the specified Columns message. Does not implicitly {@link google.apps.card.v1.Columns.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.Columns
                         * @static
                         * @param {google.apps.card.v1.IColumns} message Columns message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Columns.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.columnItems != null && message.columnItems.length)
                                for (var i = 0; i < message.columnItems.length; ++i)
                                    $root.google.apps.card.v1.Columns.Column.encode(message.columnItems[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Columns message, length delimited. Does not implicitly {@link google.apps.card.v1.Columns.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.Columns
                         * @static
                         * @param {google.apps.card.v1.IColumns} message Columns message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Columns.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Columns message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.Columns
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.Columns} Columns
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Columns.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Columns();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2: {
                                        if (!(message.columnItems && message.columnItems.length))
                                            message.columnItems = [];
                                        message.columnItems.push($root.google.apps.card.v1.Columns.Column.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Columns message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.Columns
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.Columns} Columns
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Columns.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Columns message.
                         * @function verify
                         * @memberof google.apps.card.v1.Columns
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Columns.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.columnItems != null && message.hasOwnProperty("columnItems")) {
                                if (!Array.isArray(message.columnItems))
                                    return "columnItems: array expected";
                                for (var i = 0; i < message.columnItems.length; ++i) {
                                    var error = $root.google.apps.card.v1.Columns.Column.verify(message.columnItems[i]);
                                    if (error)
                                        return "columnItems." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Columns message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.Columns
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.Columns} Columns
                         */
                        Columns.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.Columns)
                                return object;
                            var message = new $root.google.apps.card.v1.Columns();
                            if (object.columnItems) {
                                if (!Array.isArray(object.columnItems))
                                    throw TypeError(".google.apps.card.v1.Columns.columnItems: array expected");
                                message.columnItems = [];
                                for (var i = 0; i < object.columnItems.length; ++i) {
                                    if (typeof object.columnItems[i] !== "object")
                                        throw TypeError(".google.apps.card.v1.Columns.columnItems: object expected");
                                    message.columnItems[i] = $root.google.apps.card.v1.Columns.Column.fromObject(object.columnItems[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Columns message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.Columns
                         * @static
                         * @param {google.apps.card.v1.Columns} message Columns
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Columns.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.columnItems = [];
                            if (message.columnItems && message.columnItems.length) {
                                object.columnItems = [];
                                for (var j = 0; j < message.columnItems.length; ++j)
                                    object.columnItems[j] = $root.google.apps.card.v1.Columns.Column.toObject(message.columnItems[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Columns to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.Columns
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Columns.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Columns
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.Columns
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Columns.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.Columns";
                        };
    
                        Columns.Column = (function() {
    
                            /**
                             * Properties of a Column.
                             * @memberof google.apps.card.v1.Columns
                             * @interface IColumn
                             * @property {google.apps.card.v1.Columns.Column.HorizontalSizeStyle|null} [horizontalSizeStyle] Column horizontalSizeStyle
                             * @property {google.apps.card.v1.Widget.HorizontalAlignment|null} [horizontalAlignment] Column horizontalAlignment
                             * @property {google.apps.card.v1.Columns.Column.VerticalAlignment|null} [verticalAlignment] Column verticalAlignment
                             * @property {Array.<google.apps.card.v1.Columns.Column.IWidgets>|null} [widgets] Column widgets
                             */
    
                            /**
                             * Constructs a new Column.
                             * @memberof google.apps.card.v1.Columns
                             * @classdesc Represents a Column.
                             * @implements IColumn
                             * @constructor
                             * @param {google.apps.card.v1.Columns.IColumn=} [properties] Properties to set
                             */
                            function Column(properties) {
                                this.widgets = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Column horizontalSizeStyle.
                             * @member {google.apps.card.v1.Columns.Column.HorizontalSizeStyle} horizontalSizeStyle
                             * @memberof google.apps.card.v1.Columns.Column
                             * @instance
                             */
                            Column.prototype.horizontalSizeStyle = 0;
    
                            /**
                             * Column horizontalAlignment.
                             * @member {google.apps.card.v1.Widget.HorizontalAlignment} horizontalAlignment
                             * @memberof google.apps.card.v1.Columns.Column
                             * @instance
                             */
                            Column.prototype.horizontalAlignment = 0;
    
                            /**
                             * Column verticalAlignment.
                             * @member {google.apps.card.v1.Columns.Column.VerticalAlignment} verticalAlignment
                             * @memberof google.apps.card.v1.Columns.Column
                             * @instance
                             */
                            Column.prototype.verticalAlignment = 0;
    
                            /**
                             * Column widgets.
                             * @member {Array.<google.apps.card.v1.Columns.Column.IWidgets>} widgets
                             * @memberof google.apps.card.v1.Columns.Column
                             * @instance
                             */
                            Column.prototype.widgets = $util.emptyArray;
    
                            /**
                             * Creates a new Column instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.Columns.Column
                             * @static
                             * @param {google.apps.card.v1.Columns.IColumn=} [properties] Properties to set
                             * @returns {google.apps.card.v1.Columns.Column} Column instance
                             */
                            Column.create = function create(properties) {
                                return new Column(properties);
                            };
    
                            /**
                             * Encodes the specified Column message. Does not implicitly {@link google.apps.card.v1.Columns.Column.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.Columns.Column
                             * @static
                             * @param {google.apps.card.v1.Columns.IColumn} message Column message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Column.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.horizontalSizeStyle != null && Object.hasOwnProperty.call(message, "horizontalSizeStyle"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.horizontalSizeStyle);
                                if (message.horizontalAlignment != null && Object.hasOwnProperty.call(message, "horizontalAlignment"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.horizontalAlignment);
                                if (message.verticalAlignment != null && Object.hasOwnProperty.call(message, "verticalAlignment"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.verticalAlignment);
                                if (message.widgets != null && message.widgets.length)
                                    for (var i = 0; i < message.widgets.length; ++i)
                                        $root.google.apps.card.v1.Columns.Column.Widgets.encode(message.widgets[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Column message, length delimited. Does not implicitly {@link google.apps.card.v1.Columns.Column.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.Columns.Column
                             * @static
                             * @param {google.apps.card.v1.Columns.IColumn} message Column message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Column.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Column message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.Columns.Column
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.Columns.Column} Column
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Column.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Columns.Column();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.horizontalSizeStyle = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.horizontalAlignment = reader.int32();
                                            break;
                                        }
                                    case 3: {
                                            message.verticalAlignment = reader.int32();
                                            break;
                                        }
                                    case 4: {
                                            if (!(message.widgets && message.widgets.length))
                                                message.widgets = [];
                                            message.widgets.push($root.google.apps.card.v1.Columns.Column.Widgets.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Column message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.Columns.Column
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.Columns.Column} Column
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Column.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Column message.
                             * @function verify
                             * @memberof google.apps.card.v1.Columns.Column
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Column.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.horizontalSizeStyle != null && message.hasOwnProperty("horizontalSizeStyle"))
                                    switch (message.horizontalSizeStyle) {
                                    default:
                                        return "horizontalSizeStyle: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.horizontalAlignment != null && message.hasOwnProperty("horizontalAlignment"))
                                    switch (message.horizontalAlignment) {
                                    default:
                                        return "horizontalAlignment: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.verticalAlignment != null && message.hasOwnProperty("verticalAlignment"))
                                    switch (message.verticalAlignment) {
                                    default:
                                        return "verticalAlignment: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.widgets != null && message.hasOwnProperty("widgets")) {
                                    if (!Array.isArray(message.widgets))
                                        return "widgets: array expected";
                                    for (var i = 0; i < message.widgets.length; ++i) {
                                        var error = $root.google.apps.card.v1.Columns.Column.Widgets.verify(message.widgets[i]);
                                        if (error)
                                            return "widgets." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Column message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.Columns.Column
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.Columns.Column} Column
                             */
                            Column.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.Columns.Column)
                                    return object;
                                var message = new $root.google.apps.card.v1.Columns.Column();
                                switch (object.horizontalSizeStyle) {
                                default:
                                    if (typeof object.horizontalSizeStyle === "number") {
                                        message.horizontalSizeStyle = object.horizontalSizeStyle;
                                        break;
                                    }
                                    break;
                                case "HORIZONTAL_SIZE_STYLE_UNSPECIFIED":
                                case 0:
                                    message.horizontalSizeStyle = 0;
                                    break;
                                case "FILL_AVAILABLE_SPACE":
                                case 1:
                                    message.horizontalSizeStyle = 1;
                                    break;
                                case "FILL_MINIMUM_SPACE":
                                case 2:
                                    message.horizontalSizeStyle = 2;
                                    break;
                                }
                                switch (object.horizontalAlignment) {
                                default:
                                    if (typeof object.horizontalAlignment === "number") {
                                        message.horizontalAlignment = object.horizontalAlignment;
                                        break;
                                    }
                                    break;
                                case "HORIZONTAL_ALIGNMENT_UNSPECIFIED":
                                case 0:
                                    message.horizontalAlignment = 0;
                                    break;
                                case "START":
                                case 1:
                                    message.horizontalAlignment = 1;
                                    break;
                                case "CENTER":
                                case 2:
                                    message.horizontalAlignment = 2;
                                    break;
                                case "END":
                                case 3:
                                    message.horizontalAlignment = 3;
                                    break;
                                }
                                switch (object.verticalAlignment) {
                                default:
                                    if (typeof object.verticalAlignment === "number") {
                                        message.verticalAlignment = object.verticalAlignment;
                                        break;
                                    }
                                    break;
                                case "VERTICAL_ALIGNMENT_UNSPECIFIED":
                                case 0:
                                    message.verticalAlignment = 0;
                                    break;
                                case "CENTER":
                                case 1:
                                    message.verticalAlignment = 1;
                                    break;
                                case "TOP":
                                case 2:
                                    message.verticalAlignment = 2;
                                    break;
                                case "BOTTOM":
                                case 3:
                                    message.verticalAlignment = 3;
                                    break;
                                }
                                if (object.widgets) {
                                    if (!Array.isArray(object.widgets))
                                        throw TypeError(".google.apps.card.v1.Columns.Column.widgets: array expected");
                                    message.widgets = [];
                                    for (var i = 0; i < object.widgets.length; ++i) {
                                        if (typeof object.widgets[i] !== "object")
                                            throw TypeError(".google.apps.card.v1.Columns.Column.widgets: object expected");
                                        message.widgets[i] = $root.google.apps.card.v1.Columns.Column.Widgets.fromObject(object.widgets[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Column message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.Columns.Column
                             * @static
                             * @param {google.apps.card.v1.Columns.Column} message Column
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Column.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.widgets = [];
                                if (options.defaults) {
                                    object.horizontalSizeStyle = options.enums === String ? "HORIZONTAL_SIZE_STYLE_UNSPECIFIED" : 0;
                                    object.horizontalAlignment = options.enums === String ? "HORIZONTAL_ALIGNMENT_UNSPECIFIED" : 0;
                                    object.verticalAlignment = options.enums === String ? "VERTICAL_ALIGNMENT_UNSPECIFIED" : 0;
                                }
                                if (message.horizontalSizeStyle != null && message.hasOwnProperty("horizontalSizeStyle"))
                                    object.horizontalSizeStyle = options.enums === String ? $root.google.apps.card.v1.Columns.Column.HorizontalSizeStyle[message.horizontalSizeStyle] === undefined ? message.horizontalSizeStyle : $root.google.apps.card.v1.Columns.Column.HorizontalSizeStyle[message.horizontalSizeStyle] : message.horizontalSizeStyle;
                                if (message.horizontalAlignment != null && message.hasOwnProperty("horizontalAlignment"))
                                    object.horizontalAlignment = options.enums === String ? $root.google.apps.card.v1.Widget.HorizontalAlignment[message.horizontalAlignment] === undefined ? message.horizontalAlignment : $root.google.apps.card.v1.Widget.HorizontalAlignment[message.horizontalAlignment] : message.horizontalAlignment;
                                if (message.verticalAlignment != null && message.hasOwnProperty("verticalAlignment"))
                                    object.verticalAlignment = options.enums === String ? $root.google.apps.card.v1.Columns.Column.VerticalAlignment[message.verticalAlignment] === undefined ? message.verticalAlignment : $root.google.apps.card.v1.Columns.Column.VerticalAlignment[message.verticalAlignment] : message.verticalAlignment;
                                if (message.widgets && message.widgets.length) {
                                    object.widgets = [];
                                    for (var j = 0; j < message.widgets.length; ++j)
                                        object.widgets[j] = $root.google.apps.card.v1.Columns.Column.Widgets.toObject(message.widgets[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Column to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.Columns.Column
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Column.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Column
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.Columns.Column
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Column.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.Columns.Column";
                            };
    
                            /**
                             * HorizontalSizeStyle enum.
                             * @name google.apps.card.v1.Columns.Column.HorizontalSizeStyle
                             * @enum {number}
                             * @property {number} HORIZONTAL_SIZE_STYLE_UNSPECIFIED=0 HORIZONTAL_SIZE_STYLE_UNSPECIFIED value
                             * @property {number} FILL_AVAILABLE_SPACE=1 FILL_AVAILABLE_SPACE value
                             * @property {number} FILL_MINIMUM_SPACE=2 FILL_MINIMUM_SPACE value
                             */
                            Column.HorizontalSizeStyle = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "HORIZONTAL_SIZE_STYLE_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "FILL_AVAILABLE_SPACE"] = 1;
                                values[valuesById[2] = "FILL_MINIMUM_SPACE"] = 2;
                                return values;
                            })();
    
                            /**
                             * VerticalAlignment enum.
                             * @name google.apps.card.v1.Columns.Column.VerticalAlignment
                             * @enum {number}
                             * @property {number} VERTICAL_ALIGNMENT_UNSPECIFIED=0 VERTICAL_ALIGNMENT_UNSPECIFIED value
                             * @property {number} CENTER=1 CENTER value
                             * @property {number} TOP=2 TOP value
                             * @property {number} BOTTOM=3 BOTTOM value
                             */
                            Column.VerticalAlignment = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "VERTICAL_ALIGNMENT_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "CENTER"] = 1;
                                values[valuesById[2] = "TOP"] = 2;
                                values[valuesById[3] = "BOTTOM"] = 3;
                                return values;
                            })();
    
                            Column.Widgets = (function() {
    
                                /**
                                 * Properties of a Widgets.
                                 * @memberof google.apps.card.v1.Columns.Column
                                 * @interface IWidgets
                                 * @property {google.apps.card.v1.ITextParagraph|null} [textParagraph] Widgets textParagraph
                                 * @property {google.apps.card.v1.IImage|null} [image] Widgets image
                                 * @property {google.apps.card.v1.IDecoratedText|null} [decoratedText] Widgets decoratedText
                                 * @property {google.apps.card.v1.IButtonList|null} [buttonList] Widgets buttonList
                                 * @property {google.apps.card.v1.ITextInput|null} [textInput] Widgets textInput
                                 * @property {google.apps.card.v1.ISelectionInput|null} [selectionInput] Widgets selectionInput
                                 * @property {google.apps.card.v1.IDateTimePicker|null} [dateTimePicker] Widgets dateTimePicker
                                 */
    
                                /**
                                 * Constructs a new Widgets.
                                 * @memberof google.apps.card.v1.Columns.Column
                                 * @classdesc Represents a Widgets.
                                 * @implements IWidgets
                                 * @constructor
                                 * @param {google.apps.card.v1.Columns.Column.IWidgets=} [properties] Properties to set
                                 */
                                function Widgets(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }
    
                                /**
                                 * Widgets textParagraph.
                                 * @member {google.apps.card.v1.ITextParagraph|null|undefined} textParagraph
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @instance
                                 */
                                Widgets.prototype.textParagraph = null;
    
                                /**
                                 * Widgets image.
                                 * @member {google.apps.card.v1.IImage|null|undefined} image
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @instance
                                 */
                                Widgets.prototype.image = null;
    
                                /**
                                 * Widgets decoratedText.
                                 * @member {google.apps.card.v1.IDecoratedText|null|undefined} decoratedText
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @instance
                                 */
                                Widgets.prototype.decoratedText = null;
    
                                /**
                                 * Widgets buttonList.
                                 * @member {google.apps.card.v1.IButtonList|null|undefined} buttonList
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @instance
                                 */
                                Widgets.prototype.buttonList = null;
    
                                /**
                                 * Widgets textInput.
                                 * @member {google.apps.card.v1.ITextInput|null|undefined} textInput
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @instance
                                 */
                                Widgets.prototype.textInput = null;
    
                                /**
                                 * Widgets selectionInput.
                                 * @member {google.apps.card.v1.ISelectionInput|null|undefined} selectionInput
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @instance
                                 */
                                Widgets.prototype.selectionInput = null;
    
                                /**
                                 * Widgets dateTimePicker.
                                 * @member {google.apps.card.v1.IDateTimePicker|null|undefined} dateTimePicker
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @instance
                                 */
                                Widgets.prototype.dateTimePicker = null;
    
                                // OneOf field names bound to virtual getters and setters
                                var $oneOfFields;
    
                                /**
                                 * Widgets data.
                                 * @member {"textParagraph"|"image"|"decoratedText"|"buttonList"|"textInput"|"selectionInput"|"dateTimePicker"|undefined} data
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @instance
                                 */
                                Object.defineProperty(Widgets.prototype, "data", {
                                    get: $util.oneOfGetter($oneOfFields = ["textParagraph", "image", "decoratedText", "buttonList", "textInput", "selectionInput", "dateTimePicker"]),
                                    set: $util.oneOfSetter($oneOfFields)
                                });
    
                                /**
                                 * Creates a new Widgets instance using the specified properties.
                                 * @function create
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @static
                                 * @param {google.apps.card.v1.Columns.Column.IWidgets=} [properties] Properties to set
                                 * @returns {google.apps.card.v1.Columns.Column.Widgets} Widgets instance
                                 */
                                Widgets.create = function create(properties) {
                                    return new Widgets(properties);
                                };
    
                                /**
                                 * Encodes the specified Widgets message. Does not implicitly {@link google.apps.card.v1.Columns.Column.Widgets.verify|verify} messages.
                                 * @function encode
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @static
                                 * @param {google.apps.card.v1.Columns.Column.IWidgets} message Widgets message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Widgets.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.textParagraph != null && Object.hasOwnProperty.call(message, "textParagraph"))
                                        $root.google.apps.card.v1.TextParagraph.encode(message.textParagraph, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                                        $root.google.apps.card.v1.Image.encode(message.image, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    if (message.decoratedText != null && Object.hasOwnProperty.call(message, "decoratedText"))
                                        $root.google.apps.card.v1.DecoratedText.encode(message.decoratedText, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    if (message.buttonList != null && Object.hasOwnProperty.call(message, "buttonList"))
                                        $root.google.apps.card.v1.ButtonList.encode(message.buttonList, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.textInput != null && Object.hasOwnProperty.call(message, "textInput"))
                                        $root.google.apps.card.v1.TextInput.encode(message.textInput, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                    if (message.selectionInput != null && Object.hasOwnProperty.call(message, "selectionInput"))
                                        $root.google.apps.card.v1.SelectionInput.encode(message.selectionInput, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                                    if (message.dateTimePicker != null && Object.hasOwnProperty.call(message, "dateTimePicker"))
                                        $root.google.apps.card.v1.DateTimePicker.encode(message.dateTimePicker, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                                    return writer;
                                };
    
                                /**
                                 * Encodes the specified Widgets message, length delimited. Does not implicitly {@link google.apps.card.v1.Columns.Column.Widgets.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @static
                                 * @param {google.apps.card.v1.Columns.Column.IWidgets} message Widgets message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Widgets.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };
    
                                /**
                                 * Decodes a Widgets message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {google.apps.card.v1.Columns.Column.Widgets} Widgets
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Widgets.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Columns.Column.Widgets();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1: {
                                                message.textParagraph = $root.google.apps.card.v1.TextParagraph.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 2: {
                                                message.image = $root.google.apps.card.v1.Image.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 3: {
                                                message.decoratedText = $root.google.apps.card.v1.DecoratedText.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 4: {
                                                message.buttonList = $root.google.apps.card.v1.ButtonList.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 5: {
                                                message.textInput = $root.google.apps.card.v1.TextInput.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 6: {
                                                message.selectionInput = $root.google.apps.card.v1.SelectionInput.decode(reader, reader.uint32());
                                                break;
                                            }
                                        case 7: {
                                                message.dateTimePicker = $root.google.apps.card.v1.DateTimePicker.decode(reader, reader.uint32());
                                                break;
                                            }
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };
    
                                /**
                                 * Decodes a Widgets message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {google.apps.card.v1.Columns.Column.Widgets} Widgets
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Widgets.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };
    
                                /**
                                 * Verifies a Widgets message.
                                 * @function verify
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Widgets.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    var properties = {};
                                    if (message.textParagraph != null && message.hasOwnProperty("textParagraph")) {
                                        properties.data = 1;
                                        {
                                            var error = $root.google.apps.card.v1.TextParagraph.verify(message.textParagraph);
                                            if (error)
                                                return "textParagraph." + error;
                                        }
                                    }
                                    if (message.image != null && message.hasOwnProperty("image")) {
                                        if (properties.data === 1)
                                            return "data: multiple values";
                                        properties.data = 1;
                                        {
                                            var error = $root.google.apps.card.v1.Image.verify(message.image);
                                            if (error)
                                                return "image." + error;
                                        }
                                    }
                                    if (message.decoratedText != null && message.hasOwnProperty("decoratedText")) {
                                        if (properties.data === 1)
                                            return "data: multiple values";
                                        properties.data = 1;
                                        {
                                            var error = $root.google.apps.card.v1.DecoratedText.verify(message.decoratedText);
                                            if (error)
                                                return "decoratedText." + error;
                                        }
                                    }
                                    if (message.buttonList != null && message.hasOwnProperty("buttonList")) {
                                        if (properties.data === 1)
                                            return "data: multiple values";
                                        properties.data = 1;
                                        {
                                            var error = $root.google.apps.card.v1.ButtonList.verify(message.buttonList);
                                            if (error)
                                                return "buttonList." + error;
                                        }
                                    }
                                    if (message.textInput != null && message.hasOwnProperty("textInput")) {
                                        if (properties.data === 1)
                                            return "data: multiple values";
                                        properties.data = 1;
                                        {
                                            var error = $root.google.apps.card.v1.TextInput.verify(message.textInput);
                                            if (error)
                                                return "textInput." + error;
                                        }
                                    }
                                    if (message.selectionInput != null && message.hasOwnProperty("selectionInput")) {
                                        if (properties.data === 1)
                                            return "data: multiple values";
                                        properties.data = 1;
                                        {
                                            var error = $root.google.apps.card.v1.SelectionInput.verify(message.selectionInput);
                                            if (error)
                                                return "selectionInput." + error;
                                        }
                                    }
                                    if (message.dateTimePicker != null && message.hasOwnProperty("dateTimePicker")) {
                                        if (properties.data === 1)
                                            return "data: multiple values";
                                        properties.data = 1;
                                        {
                                            var error = $root.google.apps.card.v1.DateTimePicker.verify(message.dateTimePicker);
                                            if (error)
                                                return "dateTimePicker." + error;
                                        }
                                    }
                                    return null;
                                };
    
                                /**
                                 * Creates a Widgets message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {google.apps.card.v1.Columns.Column.Widgets} Widgets
                                 */
                                Widgets.fromObject = function fromObject(object) {
                                    if (object instanceof $root.google.apps.card.v1.Columns.Column.Widgets)
                                        return object;
                                    var message = new $root.google.apps.card.v1.Columns.Column.Widgets();
                                    if (object.textParagraph != null) {
                                        if (typeof object.textParagraph !== "object")
                                            throw TypeError(".google.apps.card.v1.Columns.Column.Widgets.textParagraph: object expected");
                                        message.textParagraph = $root.google.apps.card.v1.TextParagraph.fromObject(object.textParagraph);
                                    }
                                    if (object.image != null) {
                                        if (typeof object.image !== "object")
                                            throw TypeError(".google.apps.card.v1.Columns.Column.Widgets.image: object expected");
                                        message.image = $root.google.apps.card.v1.Image.fromObject(object.image);
                                    }
                                    if (object.decoratedText != null) {
                                        if (typeof object.decoratedText !== "object")
                                            throw TypeError(".google.apps.card.v1.Columns.Column.Widgets.decoratedText: object expected");
                                        message.decoratedText = $root.google.apps.card.v1.DecoratedText.fromObject(object.decoratedText);
                                    }
                                    if (object.buttonList != null) {
                                        if (typeof object.buttonList !== "object")
                                            throw TypeError(".google.apps.card.v1.Columns.Column.Widgets.buttonList: object expected");
                                        message.buttonList = $root.google.apps.card.v1.ButtonList.fromObject(object.buttonList);
                                    }
                                    if (object.textInput != null) {
                                        if (typeof object.textInput !== "object")
                                            throw TypeError(".google.apps.card.v1.Columns.Column.Widgets.textInput: object expected");
                                        message.textInput = $root.google.apps.card.v1.TextInput.fromObject(object.textInput);
                                    }
                                    if (object.selectionInput != null) {
                                        if (typeof object.selectionInput !== "object")
                                            throw TypeError(".google.apps.card.v1.Columns.Column.Widgets.selectionInput: object expected");
                                        message.selectionInput = $root.google.apps.card.v1.SelectionInput.fromObject(object.selectionInput);
                                    }
                                    if (object.dateTimePicker != null) {
                                        if (typeof object.dateTimePicker !== "object")
                                            throw TypeError(".google.apps.card.v1.Columns.Column.Widgets.dateTimePicker: object expected");
                                        message.dateTimePicker = $root.google.apps.card.v1.DateTimePicker.fromObject(object.dateTimePicker);
                                    }
                                    return message;
                                };
    
                                /**
                                 * Creates a plain object from a Widgets message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @static
                                 * @param {google.apps.card.v1.Columns.Column.Widgets} message Widgets
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Widgets.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (message.textParagraph != null && message.hasOwnProperty("textParagraph")) {
                                        object.textParagraph = $root.google.apps.card.v1.TextParagraph.toObject(message.textParagraph, options);
                                        if (options.oneofs)
                                            object.data = "textParagraph";
                                    }
                                    if (message.image != null && message.hasOwnProperty("image")) {
                                        object.image = $root.google.apps.card.v1.Image.toObject(message.image, options);
                                        if (options.oneofs)
                                            object.data = "image";
                                    }
                                    if (message.decoratedText != null && message.hasOwnProperty("decoratedText")) {
                                        object.decoratedText = $root.google.apps.card.v1.DecoratedText.toObject(message.decoratedText, options);
                                        if (options.oneofs)
                                            object.data = "decoratedText";
                                    }
                                    if (message.buttonList != null && message.hasOwnProperty("buttonList")) {
                                        object.buttonList = $root.google.apps.card.v1.ButtonList.toObject(message.buttonList, options);
                                        if (options.oneofs)
                                            object.data = "buttonList";
                                    }
                                    if (message.textInput != null && message.hasOwnProperty("textInput")) {
                                        object.textInput = $root.google.apps.card.v1.TextInput.toObject(message.textInput, options);
                                        if (options.oneofs)
                                            object.data = "textInput";
                                    }
                                    if (message.selectionInput != null && message.hasOwnProperty("selectionInput")) {
                                        object.selectionInput = $root.google.apps.card.v1.SelectionInput.toObject(message.selectionInput, options);
                                        if (options.oneofs)
                                            object.data = "selectionInput";
                                    }
                                    if (message.dateTimePicker != null && message.hasOwnProperty("dateTimePicker")) {
                                        object.dateTimePicker = $root.google.apps.card.v1.DateTimePicker.toObject(message.dateTimePicker, options);
                                        if (options.oneofs)
                                            object.data = "dateTimePicker";
                                    }
                                    return object;
                                };
    
                                /**
                                 * Converts this Widgets to JSON.
                                 * @function toJSON
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Widgets.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };
    
                                /**
                                 * Gets the default type url for Widgets
                                 * @function getTypeUrl
                                 * @memberof google.apps.card.v1.Columns.Column.Widgets
                                 * @static
                                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns {string} The default type url
                                 */
                                Widgets.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                    if (typeUrlPrefix === undefined) {
                                        typeUrlPrefix = "type.googleapis.com";
                                    }
                                    return typeUrlPrefix + "/google.apps.card.v1.Columns.Column.Widgets";
                                };
    
                                return Widgets;
                            })();
    
                            return Column;
                        })();
    
                        return Columns;
                    })();
    
                    v1.OnClick = (function() {
    
                        /**
                         * Properties of an OnClick.
                         * @memberof google.apps.card.v1
                         * @interface IOnClick
                         * @property {google.apps.card.v1.IAction|null} [action] OnClick action
                         * @property {google.apps.card.v1.IOpenLink|null} [openLink] OnClick openLink
                         * @property {google.apps.card.v1.IAction|null} [openDynamicLinkAction] OnClick openDynamicLinkAction
                         * @property {google.apps.card.v1.ICard|null} [card] OnClick card
                         */
    
                        /**
                         * Constructs a new OnClick.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents an OnClick.
                         * @implements IOnClick
                         * @constructor
                         * @param {google.apps.card.v1.IOnClick=} [properties] Properties to set
                         */
                        function OnClick(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * OnClick action.
                         * @member {google.apps.card.v1.IAction|null|undefined} action
                         * @memberof google.apps.card.v1.OnClick
                         * @instance
                         */
                        OnClick.prototype.action = null;
    
                        /**
                         * OnClick openLink.
                         * @member {google.apps.card.v1.IOpenLink|null|undefined} openLink
                         * @memberof google.apps.card.v1.OnClick
                         * @instance
                         */
                        OnClick.prototype.openLink = null;
    
                        /**
                         * OnClick openDynamicLinkAction.
                         * @member {google.apps.card.v1.IAction|null|undefined} openDynamicLinkAction
                         * @memberof google.apps.card.v1.OnClick
                         * @instance
                         */
                        OnClick.prototype.openDynamicLinkAction = null;
    
                        /**
                         * OnClick card.
                         * @member {google.apps.card.v1.ICard|null|undefined} card
                         * @memberof google.apps.card.v1.OnClick
                         * @instance
                         */
                        OnClick.prototype.card = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * OnClick data.
                         * @member {"action"|"openLink"|"openDynamicLinkAction"|"card"|undefined} data
                         * @memberof google.apps.card.v1.OnClick
                         * @instance
                         */
                        Object.defineProperty(OnClick.prototype, "data", {
                            get: $util.oneOfGetter($oneOfFields = ["action", "openLink", "openDynamicLinkAction", "card"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new OnClick instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.OnClick
                         * @static
                         * @param {google.apps.card.v1.IOnClick=} [properties] Properties to set
                         * @returns {google.apps.card.v1.OnClick} OnClick instance
                         */
                        OnClick.create = function create(properties) {
                            return new OnClick(properties);
                        };
    
                        /**
                         * Encodes the specified OnClick message. Does not implicitly {@link google.apps.card.v1.OnClick.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.OnClick
                         * @static
                         * @param {google.apps.card.v1.IOnClick} message OnClick message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OnClick.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                                $root.google.apps.card.v1.Action.encode(message.action, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.openLink != null && Object.hasOwnProperty.call(message, "openLink"))
                                $root.google.apps.card.v1.OpenLink.encode(message.openLink, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.openDynamicLinkAction != null && Object.hasOwnProperty.call(message, "openDynamicLinkAction"))
                                $root.google.apps.card.v1.Action.encode(message.openDynamicLinkAction, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.card != null && Object.hasOwnProperty.call(message, "card"))
                                $root.google.apps.card.v1.Card.encode(message.card, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified OnClick message, length delimited. Does not implicitly {@link google.apps.card.v1.OnClick.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.OnClick
                         * @static
                         * @param {google.apps.card.v1.IOnClick} message OnClick message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OnClick.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an OnClick message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.OnClick
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.OnClick} OnClick
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OnClick.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.OnClick();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.action = $root.google.apps.card.v1.Action.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.openLink = $root.google.apps.card.v1.OpenLink.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.openDynamicLinkAction = $root.google.apps.card.v1.Action.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.card = $root.google.apps.card.v1.Card.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an OnClick message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.OnClick
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.OnClick} OnClick
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OnClick.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an OnClick message.
                         * @function verify
                         * @memberof google.apps.card.v1.OnClick
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        OnClick.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.action != null && message.hasOwnProperty("action")) {
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.Action.verify(message.action);
                                    if (error)
                                        return "action." + error;
                                }
                            }
                            if (message.openLink != null && message.hasOwnProperty("openLink")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.OpenLink.verify(message.openLink);
                                    if (error)
                                        return "openLink." + error;
                                }
                            }
                            if (message.openDynamicLinkAction != null && message.hasOwnProperty("openDynamicLinkAction")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.Action.verify(message.openDynamicLinkAction);
                                    if (error)
                                        return "openDynamicLinkAction." + error;
                                }
                            }
                            if (message.card != null && message.hasOwnProperty("card")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.apps.card.v1.Card.verify(message.card);
                                    if (error)
                                        return "card." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an OnClick message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.OnClick
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.OnClick} OnClick
                         */
                        OnClick.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.OnClick)
                                return object;
                            var message = new $root.google.apps.card.v1.OnClick();
                            if (object.action != null) {
                                if (typeof object.action !== "object")
                                    throw TypeError(".google.apps.card.v1.OnClick.action: object expected");
                                message.action = $root.google.apps.card.v1.Action.fromObject(object.action);
                            }
                            if (object.openLink != null) {
                                if (typeof object.openLink !== "object")
                                    throw TypeError(".google.apps.card.v1.OnClick.openLink: object expected");
                                message.openLink = $root.google.apps.card.v1.OpenLink.fromObject(object.openLink);
                            }
                            if (object.openDynamicLinkAction != null) {
                                if (typeof object.openDynamicLinkAction !== "object")
                                    throw TypeError(".google.apps.card.v1.OnClick.openDynamicLinkAction: object expected");
                                message.openDynamicLinkAction = $root.google.apps.card.v1.Action.fromObject(object.openDynamicLinkAction);
                            }
                            if (object.card != null) {
                                if (typeof object.card !== "object")
                                    throw TypeError(".google.apps.card.v1.OnClick.card: object expected");
                                message.card = $root.google.apps.card.v1.Card.fromObject(object.card);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an OnClick message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.OnClick
                         * @static
                         * @param {google.apps.card.v1.OnClick} message OnClick
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        OnClick.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.action != null && message.hasOwnProperty("action")) {
                                object.action = $root.google.apps.card.v1.Action.toObject(message.action, options);
                                if (options.oneofs)
                                    object.data = "action";
                            }
                            if (message.openLink != null && message.hasOwnProperty("openLink")) {
                                object.openLink = $root.google.apps.card.v1.OpenLink.toObject(message.openLink, options);
                                if (options.oneofs)
                                    object.data = "openLink";
                            }
                            if (message.openDynamicLinkAction != null && message.hasOwnProperty("openDynamicLinkAction")) {
                                object.openDynamicLinkAction = $root.google.apps.card.v1.Action.toObject(message.openDynamicLinkAction, options);
                                if (options.oneofs)
                                    object.data = "openDynamicLinkAction";
                            }
                            if (message.card != null && message.hasOwnProperty("card")) {
                                object.card = $root.google.apps.card.v1.Card.toObject(message.card, options);
                                if (options.oneofs)
                                    object.data = "card";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this OnClick to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.OnClick
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        OnClick.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for OnClick
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.OnClick
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        OnClick.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.OnClick";
                        };
    
                        return OnClick;
                    })();
    
                    v1.OpenLink = (function() {
    
                        /**
                         * Properties of an OpenLink.
                         * @memberof google.apps.card.v1
                         * @interface IOpenLink
                         * @property {string|null} [url] OpenLink url
                         * @property {google.apps.card.v1.OpenLink.OpenAs|null} [openAs] OpenLink openAs
                         * @property {google.apps.card.v1.OpenLink.OnClose|null} [onClose] OpenLink onClose
                         */
    
                        /**
                         * Constructs a new OpenLink.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents an OpenLink.
                         * @implements IOpenLink
                         * @constructor
                         * @param {google.apps.card.v1.IOpenLink=} [properties] Properties to set
                         */
                        function OpenLink(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * OpenLink url.
                         * @member {string} url
                         * @memberof google.apps.card.v1.OpenLink
                         * @instance
                         */
                        OpenLink.prototype.url = "";
    
                        /**
                         * OpenLink openAs.
                         * @member {google.apps.card.v1.OpenLink.OpenAs} openAs
                         * @memberof google.apps.card.v1.OpenLink
                         * @instance
                         */
                        OpenLink.prototype.openAs = 0;
    
                        /**
                         * OpenLink onClose.
                         * @member {google.apps.card.v1.OpenLink.OnClose} onClose
                         * @memberof google.apps.card.v1.OpenLink
                         * @instance
                         */
                        OpenLink.prototype.onClose = 0;
    
                        /**
                         * Creates a new OpenLink instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.OpenLink
                         * @static
                         * @param {google.apps.card.v1.IOpenLink=} [properties] Properties to set
                         * @returns {google.apps.card.v1.OpenLink} OpenLink instance
                         */
                        OpenLink.create = function create(properties) {
                            return new OpenLink(properties);
                        };
    
                        /**
                         * Encodes the specified OpenLink message. Does not implicitly {@link google.apps.card.v1.OpenLink.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.OpenLink
                         * @static
                         * @param {google.apps.card.v1.IOpenLink} message OpenLink message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OpenLink.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                            if (message.openAs != null && Object.hasOwnProperty.call(message, "openAs"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.openAs);
                            if (message.onClose != null && Object.hasOwnProperty.call(message, "onClose"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.onClose);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified OpenLink message, length delimited. Does not implicitly {@link google.apps.card.v1.OpenLink.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.OpenLink
                         * @static
                         * @param {google.apps.card.v1.IOpenLink} message OpenLink message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OpenLink.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an OpenLink message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.OpenLink
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.OpenLink} OpenLink
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OpenLink.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.OpenLink();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.url = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.openAs = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.onClose = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an OpenLink message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.OpenLink
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.OpenLink} OpenLink
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OpenLink.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an OpenLink message.
                         * @function verify
                         * @memberof google.apps.card.v1.OpenLink
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        OpenLink.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.url != null && message.hasOwnProperty("url"))
                                if (!$util.isString(message.url))
                                    return "url: string expected";
                            if (message.openAs != null && message.hasOwnProperty("openAs"))
                                switch (message.openAs) {
                                default:
                                    return "openAs: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.onClose != null && message.hasOwnProperty("onClose"))
                                switch (message.onClose) {
                                default:
                                    return "onClose: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an OpenLink message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.OpenLink
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.OpenLink} OpenLink
                         */
                        OpenLink.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.OpenLink)
                                return object;
                            var message = new $root.google.apps.card.v1.OpenLink();
                            if (object.url != null)
                                message.url = String(object.url);
                            switch (object.openAs) {
                            default:
                                if (typeof object.openAs === "number") {
                                    message.openAs = object.openAs;
                                    break;
                                }
                                break;
                            case "FULL_SIZE":
                            case 0:
                                message.openAs = 0;
                                break;
                            case "OVERLAY":
                            case 1:
                                message.openAs = 1;
                                break;
                            }
                            switch (object.onClose) {
                            default:
                                if (typeof object.onClose === "number") {
                                    message.onClose = object.onClose;
                                    break;
                                }
                                break;
                            case "NOTHING":
                            case 0:
                                message.onClose = 0;
                                break;
                            case "RELOAD":
                            case 1:
                                message.onClose = 1;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an OpenLink message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.OpenLink
                         * @static
                         * @param {google.apps.card.v1.OpenLink} message OpenLink
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        OpenLink.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.url = "";
                                object.openAs = options.enums === String ? "FULL_SIZE" : 0;
                                object.onClose = options.enums === String ? "NOTHING" : 0;
                            }
                            if (message.url != null && message.hasOwnProperty("url"))
                                object.url = message.url;
                            if (message.openAs != null && message.hasOwnProperty("openAs"))
                                object.openAs = options.enums === String ? $root.google.apps.card.v1.OpenLink.OpenAs[message.openAs] === undefined ? message.openAs : $root.google.apps.card.v1.OpenLink.OpenAs[message.openAs] : message.openAs;
                            if (message.onClose != null && message.hasOwnProperty("onClose"))
                                object.onClose = options.enums === String ? $root.google.apps.card.v1.OpenLink.OnClose[message.onClose] === undefined ? message.onClose : $root.google.apps.card.v1.OpenLink.OnClose[message.onClose] : message.onClose;
                            return object;
                        };
    
                        /**
                         * Converts this OpenLink to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.OpenLink
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        OpenLink.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for OpenLink
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.OpenLink
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        OpenLink.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.OpenLink";
                        };
    
                        /**
                         * OpenAs enum.
                         * @name google.apps.card.v1.OpenLink.OpenAs
                         * @enum {number}
                         * @property {number} FULL_SIZE=0 FULL_SIZE value
                         * @property {number} OVERLAY=1 OVERLAY value
                         */
                        OpenLink.OpenAs = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "FULL_SIZE"] = 0;
                            values[valuesById[1] = "OVERLAY"] = 1;
                            return values;
                        })();
    
                        /**
                         * OnClose enum.
                         * @name google.apps.card.v1.OpenLink.OnClose
                         * @enum {number}
                         * @property {number} NOTHING=0 NOTHING value
                         * @property {number} RELOAD=1 RELOAD value
                         */
                        OpenLink.OnClose = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "NOTHING"] = 0;
                            values[valuesById[1] = "RELOAD"] = 1;
                            return values;
                        })();
    
                        return OpenLink;
                    })();
    
                    v1.Action = (function() {
    
                        /**
                         * Properties of an Action.
                         * @memberof google.apps.card.v1
                         * @interface IAction
                         * @property {string|null} ["function"] Action function
                         * @property {Array.<google.apps.card.v1.Action.IActionParameter>|null} [parameters] Action parameters
                         * @property {google.apps.card.v1.Action.LoadIndicator|null} [loadIndicator] Action loadIndicator
                         * @property {boolean|null} [persistValues] Action persistValues
                         * @property {google.apps.card.v1.Action.Interaction|null} [interaction] Action interaction
                         */
    
                        /**
                         * Constructs a new Action.
                         * @memberof google.apps.card.v1
                         * @classdesc Represents an Action.
                         * @implements IAction
                         * @constructor
                         * @param {google.apps.card.v1.IAction=} [properties] Properties to set
                         */
                        function Action(properties) {
                            this.parameters = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Action function.
                         * @member {string} function
                         * @memberof google.apps.card.v1.Action
                         * @instance
                         */
                        Action.prototype["function"] = "";
    
                        /**
                         * Action parameters.
                         * @member {Array.<google.apps.card.v1.Action.IActionParameter>} parameters
                         * @memberof google.apps.card.v1.Action
                         * @instance
                         */
                        Action.prototype.parameters = $util.emptyArray;
    
                        /**
                         * Action loadIndicator.
                         * @member {google.apps.card.v1.Action.LoadIndicator} loadIndicator
                         * @memberof google.apps.card.v1.Action
                         * @instance
                         */
                        Action.prototype.loadIndicator = 0;
    
                        /**
                         * Action persistValues.
                         * @member {boolean} persistValues
                         * @memberof google.apps.card.v1.Action
                         * @instance
                         */
                        Action.prototype.persistValues = false;
    
                        /**
                         * Action interaction.
                         * @member {google.apps.card.v1.Action.Interaction} interaction
                         * @memberof google.apps.card.v1.Action
                         * @instance
                         */
                        Action.prototype.interaction = 0;
    
                        /**
                         * Creates a new Action instance using the specified properties.
                         * @function create
                         * @memberof google.apps.card.v1.Action
                         * @static
                         * @param {google.apps.card.v1.IAction=} [properties] Properties to set
                         * @returns {google.apps.card.v1.Action} Action instance
                         */
                        Action.create = function create(properties) {
                            return new Action(properties);
                        };
    
                        /**
                         * Encodes the specified Action message. Does not implicitly {@link google.apps.card.v1.Action.verify|verify} messages.
                         * @function encode
                         * @memberof google.apps.card.v1.Action
                         * @static
                         * @param {google.apps.card.v1.IAction} message Action message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Action.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message["function"] != null && Object.hasOwnProperty.call(message, "function"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message["function"]);
                            if (message.parameters != null && message.parameters.length)
                                for (var i = 0; i < message.parameters.length; ++i)
                                    $root.google.apps.card.v1.Action.ActionParameter.encode(message.parameters[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.loadIndicator != null && Object.hasOwnProperty.call(message, "loadIndicator"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.loadIndicator);
                            if (message.persistValues != null && Object.hasOwnProperty.call(message, "persistValues"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.persistValues);
                            if (message.interaction != null && Object.hasOwnProperty.call(message, "interaction"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.interaction);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Action message, length delimited. Does not implicitly {@link google.apps.card.v1.Action.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.apps.card.v1.Action
                         * @static
                         * @param {google.apps.card.v1.IAction} message Action message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Action.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Action message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.apps.card.v1.Action
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.apps.card.v1.Action} Action
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Action.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Action();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message["function"] = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.parameters && message.parameters.length))
                                            message.parameters = [];
                                        message.parameters.push($root.google.apps.card.v1.Action.ActionParameter.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.loadIndicator = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.persistValues = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.interaction = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Action message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.apps.card.v1.Action
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.apps.card.v1.Action} Action
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Action.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Action message.
                         * @function verify
                         * @memberof google.apps.card.v1.Action
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Action.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message["function"] != null && message.hasOwnProperty("function"))
                                if (!$util.isString(message["function"]))
                                    return "function: string expected";
                            if (message.parameters != null && message.hasOwnProperty("parameters")) {
                                if (!Array.isArray(message.parameters))
                                    return "parameters: array expected";
                                for (var i = 0; i < message.parameters.length; ++i) {
                                    var error = $root.google.apps.card.v1.Action.ActionParameter.verify(message.parameters[i]);
                                    if (error)
                                        return "parameters." + error;
                                }
                            }
                            if (message.loadIndicator != null && message.hasOwnProperty("loadIndicator"))
                                switch (message.loadIndicator) {
                                default:
                                    return "loadIndicator: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.persistValues != null && message.hasOwnProperty("persistValues"))
                                if (typeof message.persistValues !== "boolean")
                                    return "persistValues: boolean expected";
                            if (message.interaction != null && message.hasOwnProperty("interaction"))
                                switch (message.interaction) {
                                default:
                                    return "interaction: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an Action message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.apps.card.v1.Action
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.apps.card.v1.Action} Action
                         */
                        Action.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.apps.card.v1.Action)
                                return object;
                            var message = new $root.google.apps.card.v1.Action();
                            if (object["function"] != null)
                                message["function"] = String(object["function"]);
                            if (object.parameters) {
                                if (!Array.isArray(object.parameters))
                                    throw TypeError(".google.apps.card.v1.Action.parameters: array expected");
                                message.parameters = [];
                                for (var i = 0; i < object.parameters.length; ++i) {
                                    if (typeof object.parameters[i] !== "object")
                                        throw TypeError(".google.apps.card.v1.Action.parameters: object expected");
                                    message.parameters[i] = $root.google.apps.card.v1.Action.ActionParameter.fromObject(object.parameters[i]);
                                }
                            }
                            switch (object.loadIndicator) {
                            default:
                                if (typeof object.loadIndicator === "number") {
                                    message.loadIndicator = object.loadIndicator;
                                    break;
                                }
                                break;
                            case "SPINNER":
                            case 0:
                                message.loadIndicator = 0;
                                break;
                            case "NONE":
                            case 1:
                                message.loadIndicator = 1;
                                break;
                            }
                            if (object.persistValues != null)
                                message.persistValues = Boolean(object.persistValues);
                            switch (object.interaction) {
                            default:
                                if (typeof object.interaction === "number") {
                                    message.interaction = object.interaction;
                                    break;
                                }
                                break;
                            case "INTERACTION_UNSPECIFIED":
                            case 0:
                                message.interaction = 0;
                                break;
                            case "OPEN_DIALOG":
                            case 1:
                                message.interaction = 1;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Action message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.apps.card.v1.Action
                         * @static
                         * @param {google.apps.card.v1.Action} message Action
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Action.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.parameters = [];
                            if (options.defaults) {
                                object["function"] = "";
                                object.loadIndicator = options.enums === String ? "SPINNER" : 0;
                                object.persistValues = false;
                                object.interaction = options.enums === String ? "INTERACTION_UNSPECIFIED" : 0;
                            }
                            if (message["function"] != null && message.hasOwnProperty("function"))
                                object["function"] = message["function"];
                            if (message.parameters && message.parameters.length) {
                                object.parameters = [];
                                for (var j = 0; j < message.parameters.length; ++j)
                                    object.parameters[j] = $root.google.apps.card.v1.Action.ActionParameter.toObject(message.parameters[j], options);
                            }
                            if (message.loadIndicator != null && message.hasOwnProperty("loadIndicator"))
                                object.loadIndicator = options.enums === String ? $root.google.apps.card.v1.Action.LoadIndicator[message.loadIndicator] === undefined ? message.loadIndicator : $root.google.apps.card.v1.Action.LoadIndicator[message.loadIndicator] : message.loadIndicator;
                            if (message.persistValues != null && message.hasOwnProperty("persistValues"))
                                object.persistValues = message.persistValues;
                            if (message.interaction != null && message.hasOwnProperty("interaction"))
                                object.interaction = options.enums === String ? $root.google.apps.card.v1.Action.Interaction[message.interaction] === undefined ? message.interaction : $root.google.apps.card.v1.Action.Interaction[message.interaction] : message.interaction;
                            return object;
                        };
    
                        /**
                         * Converts this Action to JSON.
                         * @function toJSON
                         * @memberof google.apps.card.v1.Action
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Action.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Action
                         * @function getTypeUrl
                         * @memberof google.apps.card.v1.Action
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Action.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.apps.card.v1.Action";
                        };
    
                        Action.ActionParameter = (function() {
    
                            /**
                             * Properties of an ActionParameter.
                             * @memberof google.apps.card.v1.Action
                             * @interface IActionParameter
                             * @property {string|null} [key] ActionParameter key
                             * @property {string|null} [value] ActionParameter value
                             */
    
                            /**
                             * Constructs a new ActionParameter.
                             * @memberof google.apps.card.v1.Action
                             * @classdesc Represents an ActionParameter.
                             * @implements IActionParameter
                             * @constructor
                             * @param {google.apps.card.v1.Action.IActionParameter=} [properties] Properties to set
                             */
                            function ActionParameter(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ActionParameter key.
                             * @member {string} key
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @instance
                             */
                            ActionParameter.prototype.key = "";
    
                            /**
                             * ActionParameter value.
                             * @member {string} value
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @instance
                             */
                            ActionParameter.prototype.value = "";
    
                            /**
                             * Creates a new ActionParameter instance using the specified properties.
                             * @function create
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @static
                             * @param {google.apps.card.v1.Action.IActionParameter=} [properties] Properties to set
                             * @returns {google.apps.card.v1.Action.ActionParameter} ActionParameter instance
                             */
                            ActionParameter.create = function create(properties) {
                                return new ActionParameter(properties);
                            };
    
                            /**
                             * Encodes the specified ActionParameter message. Does not implicitly {@link google.apps.card.v1.Action.ActionParameter.verify|verify} messages.
                             * @function encode
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @static
                             * @param {google.apps.card.v1.Action.IActionParameter} message ActionParameter message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ActionParameter.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ActionParameter message, length delimited. Does not implicitly {@link google.apps.card.v1.Action.ActionParameter.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @static
                             * @param {google.apps.card.v1.Action.IActionParameter} message ActionParameter message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ActionParameter.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ActionParameter message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.apps.card.v1.Action.ActionParameter} ActionParameter
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ActionParameter.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.apps.card.v1.Action.ActionParameter();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.key = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.value = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ActionParameter message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.apps.card.v1.Action.ActionParameter} ActionParameter
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ActionParameter.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ActionParameter message.
                             * @function verify
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ActionParameter.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.key != null && message.hasOwnProperty("key"))
                                    if (!$util.isString(message.key))
                                        return "key: string expected";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    if (!$util.isString(message.value))
                                        return "value: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an ActionParameter message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.apps.card.v1.Action.ActionParameter} ActionParameter
                             */
                            ActionParameter.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.apps.card.v1.Action.ActionParameter)
                                    return object;
                                var message = new $root.google.apps.card.v1.Action.ActionParameter();
                                if (object.key != null)
                                    message.key = String(object.key);
                                if (object.value != null)
                                    message.value = String(object.value);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ActionParameter message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @static
                             * @param {google.apps.card.v1.Action.ActionParameter} message ActionParameter
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ActionParameter.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.key = "";
                                    object.value = "";
                                }
                                if (message.key != null && message.hasOwnProperty("key"))
                                    object.key = message.key;
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = message.value;
                                return object;
                            };
    
                            /**
                             * Converts this ActionParameter to JSON.
                             * @function toJSON
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ActionParameter.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ActionParameter
                             * @function getTypeUrl
                             * @memberof google.apps.card.v1.Action.ActionParameter
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ActionParameter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.apps.card.v1.Action.ActionParameter";
                            };
    
                            return ActionParameter;
                        })();
    
                        /**
                         * LoadIndicator enum.
                         * @name google.apps.card.v1.Action.LoadIndicator
                         * @enum {number}
                         * @property {number} SPINNER=0 SPINNER value
                         * @property {number} NONE=1 NONE value
                         */
                        Action.LoadIndicator = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "SPINNER"] = 0;
                            values[valuesById[1] = "NONE"] = 1;
                            return values;
                        })();
    
                        /**
                         * Interaction enum.
                         * @name google.apps.card.v1.Action.Interaction
                         * @enum {number}
                         * @property {number} INTERACTION_UNSPECIFIED=0 INTERACTION_UNSPECIFIED value
                         * @property {number} OPEN_DIALOG=1 OPEN_DIALOG value
                         */
                        Action.Interaction = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "INTERACTION_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "OPEN_DIALOG"] = 1;
                            return values;
                        })();
    
                        return Action;
                    })();
    
                    return v1;
                })();
    
                return card;
            })();
    
            return apps;
        })();
    
        google.type = (function() {
    
            /**
             * Namespace type.
             * @memberof google
             * @namespace
             */
            var type = {};
    
            type.Color = (function() {
    
                /**
                 * Properties of a Color.
                 * @memberof google.type
                 * @interface IColor
                 * @property {number|null} [red] Color red
                 * @property {number|null} [green] Color green
                 * @property {number|null} [blue] Color blue
                 * @property {google.protobuf.IFloatValue|null} [alpha] Color alpha
                 */
    
                /**
                 * Constructs a new Color.
                 * @memberof google.type
                 * @classdesc Represents a Color.
                 * @implements IColor
                 * @constructor
                 * @param {google.type.IColor=} [properties] Properties to set
                 */
                function Color(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Color red.
                 * @member {number} red
                 * @memberof google.type.Color
                 * @instance
                 */
                Color.prototype.red = 0;
    
                /**
                 * Color green.
                 * @member {number} green
                 * @memberof google.type.Color
                 * @instance
                 */
                Color.prototype.green = 0;
    
                /**
                 * Color blue.
                 * @member {number} blue
                 * @memberof google.type.Color
                 * @instance
                 */
                Color.prototype.blue = 0;
    
                /**
                 * Color alpha.
                 * @member {google.protobuf.IFloatValue|null|undefined} alpha
                 * @memberof google.type.Color
                 * @instance
                 */
                Color.prototype.alpha = null;
    
                /**
                 * Creates a new Color instance using the specified properties.
                 * @function create
                 * @memberof google.type.Color
                 * @static
                 * @param {google.type.IColor=} [properties] Properties to set
                 * @returns {google.type.Color} Color instance
                 */
                Color.create = function create(properties) {
                    return new Color(properties);
                };
    
                /**
                 * Encodes the specified Color message. Does not implicitly {@link google.type.Color.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.Color
                 * @static
                 * @param {google.type.IColor} message Color message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Color.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.red != null && Object.hasOwnProperty.call(message, "red"))
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.red);
                    if (message.green != null && Object.hasOwnProperty.call(message, "green"))
                        writer.uint32(/* id 2, wireType 5 =*/21).float(message.green);
                    if (message.blue != null && Object.hasOwnProperty.call(message, "blue"))
                        writer.uint32(/* id 3, wireType 5 =*/29).float(message.blue);
                    if (message.alpha != null && Object.hasOwnProperty.call(message, "alpha"))
                        $root.google.protobuf.FloatValue.encode(message.alpha, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Color message, length delimited. Does not implicitly {@link google.type.Color.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.Color
                 * @static
                 * @param {google.type.IColor} message Color message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Color.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Color message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.Color
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.Color} Color
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Color.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.Color();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.red = reader.float();
                                break;
                            }
                        case 2: {
                                message.green = reader.float();
                                break;
                            }
                        case 3: {
                                message.blue = reader.float();
                                break;
                            }
                        case 4: {
                                message.alpha = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Color message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.Color
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.Color} Color
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Color.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Color message.
                 * @function verify
                 * @memberof google.type.Color
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Color.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.red != null && message.hasOwnProperty("red"))
                        if (typeof message.red !== "number")
                            return "red: number expected";
                    if (message.green != null && message.hasOwnProperty("green"))
                        if (typeof message.green !== "number")
                            return "green: number expected";
                    if (message.blue != null && message.hasOwnProperty("blue"))
                        if (typeof message.blue !== "number")
                            return "blue: number expected";
                    if (message.alpha != null && message.hasOwnProperty("alpha")) {
                        var error = $root.google.protobuf.FloatValue.verify(message.alpha);
                        if (error)
                            return "alpha." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a Color message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.Color
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.Color} Color
                 */
                Color.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.Color)
                        return object;
                    var message = new $root.google.type.Color();
                    if (object.red != null)
                        message.red = Number(object.red);
                    if (object.green != null)
                        message.green = Number(object.green);
                    if (object.blue != null)
                        message.blue = Number(object.blue);
                    if (object.alpha != null) {
                        if (typeof object.alpha !== "object")
                            throw TypeError(".google.type.Color.alpha: object expected");
                        message.alpha = $root.google.protobuf.FloatValue.fromObject(object.alpha);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Color message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.Color
                 * @static
                 * @param {google.type.Color} message Color
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Color.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.red = 0;
                        object.green = 0;
                        object.blue = 0;
                        object.alpha = null;
                    }
                    if (message.red != null && message.hasOwnProperty("red"))
                        object.red = options.json && !isFinite(message.red) ? String(message.red) : message.red;
                    if (message.green != null && message.hasOwnProperty("green"))
                        object.green = options.json && !isFinite(message.green) ? String(message.green) : message.green;
                    if (message.blue != null && message.hasOwnProperty("blue"))
                        object.blue = options.json && !isFinite(message.blue) ? String(message.blue) : message.blue;
                    if (message.alpha != null && message.hasOwnProperty("alpha"))
                        object.alpha = $root.google.protobuf.FloatValue.toObject(message.alpha, options);
                    return object;
                };
    
                /**
                 * Converts this Color to JSON.
                 * @function toJSON
                 * @memberof google.type.Color
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Color.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Color
                 * @function getTypeUrl
                 * @memberof google.type.Color
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Color.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.type.Color";
                };
    
                return Color;
            })();
    
            return type;
        })();
    
        google.chat = (function() {
    
            /**
             * Namespace chat.
             * @memberof google
             * @namespace
             */
            var chat = {};
    
            chat.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof google.chat
                 * @namespace
                 */
                var v1 = {};
    
                v1.ActionStatus = (function() {
    
                    /**
                     * Properties of an ActionStatus.
                     * @memberof google.chat.v1
                     * @interface IActionStatus
                     * @property {google.rpc.Code|null} [statusCode] ActionStatus statusCode
                     * @property {string|null} [userFacingMessage] ActionStatus userFacingMessage
                     */
    
                    /**
                     * Constructs a new ActionStatus.
                     * @memberof google.chat.v1
                     * @classdesc Represents an ActionStatus.
                     * @implements IActionStatus
                     * @constructor
                     * @param {google.chat.v1.IActionStatus=} [properties] Properties to set
                     */
                    function ActionStatus(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ActionStatus statusCode.
                     * @member {google.rpc.Code} statusCode
                     * @memberof google.chat.v1.ActionStatus
                     * @instance
                     */
                    ActionStatus.prototype.statusCode = 0;
    
                    /**
                     * ActionStatus userFacingMessage.
                     * @member {string} userFacingMessage
                     * @memberof google.chat.v1.ActionStatus
                     * @instance
                     */
                    ActionStatus.prototype.userFacingMessage = "";
    
                    /**
                     * Creates a new ActionStatus instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ActionStatus
                     * @static
                     * @param {google.chat.v1.IActionStatus=} [properties] Properties to set
                     * @returns {google.chat.v1.ActionStatus} ActionStatus instance
                     */
                    ActionStatus.create = function create(properties) {
                        return new ActionStatus(properties);
                    };
    
                    /**
                     * Encodes the specified ActionStatus message. Does not implicitly {@link google.chat.v1.ActionStatus.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ActionStatus
                     * @static
                     * @param {google.chat.v1.IActionStatus} message ActionStatus message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ActionStatus.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.statusCode != null && Object.hasOwnProperty.call(message, "statusCode"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.statusCode);
                        if (message.userFacingMessage != null && Object.hasOwnProperty.call(message, "userFacingMessage"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.userFacingMessage);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ActionStatus message, length delimited. Does not implicitly {@link google.chat.v1.ActionStatus.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ActionStatus
                     * @static
                     * @param {google.chat.v1.IActionStatus} message ActionStatus message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ActionStatus.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ActionStatus message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ActionStatus
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ActionStatus} ActionStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ActionStatus.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ActionStatus();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.statusCode = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.userFacingMessage = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ActionStatus message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ActionStatus
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ActionStatus} ActionStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ActionStatus.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ActionStatus message.
                     * @function verify
                     * @memberof google.chat.v1.ActionStatus
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ActionStatus.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.statusCode != null && message.hasOwnProperty("statusCode"))
                            switch (message.statusCode) {
                            default:
                                return "statusCode: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 16:
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                                break;
                            }
                        if (message.userFacingMessage != null && message.hasOwnProperty("userFacingMessage"))
                            if (!$util.isString(message.userFacingMessage))
                                return "userFacingMessage: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an ActionStatus message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ActionStatus
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ActionStatus} ActionStatus
                     */
                    ActionStatus.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ActionStatus)
                            return object;
                        var message = new $root.google.chat.v1.ActionStatus();
                        switch (object.statusCode) {
                        default:
                            if (typeof object.statusCode === "number") {
                                message.statusCode = object.statusCode;
                                break;
                            }
                            break;
                        case "OK":
                        case 0:
                            message.statusCode = 0;
                            break;
                        case "CANCELLED":
                        case 1:
                            message.statusCode = 1;
                            break;
                        case "UNKNOWN":
                        case 2:
                            message.statusCode = 2;
                            break;
                        case "INVALID_ARGUMENT":
                        case 3:
                            message.statusCode = 3;
                            break;
                        case "DEADLINE_EXCEEDED":
                        case 4:
                            message.statusCode = 4;
                            break;
                        case "NOT_FOUND":
                        case 5:
                            message.statusCode = 5;
                            break;
                        case "ALREADY_EXISTS":
                        case 6:
                            message.statusCode = 6;
                            break;
                        case "PERMISSION_DENIED":
                        case 7:
                            message.statusCode = 7;
                            break;
                        case "UNAUTHENTICATED":
                        case 16:
                            message.statusCode = 16;
                            break;
                        case "RESOURCE_EXHAUSTED":
                        case 8:
                            message.statusCode = 8;
                            break;
                        case "FAILED_PRECONDITION":
                        case 9:
                            message.statusCode = 9;
                            break;
                        case "ABORTED":
                        case 10:
                            message.statusCode = 10;
                            break;
                        case "OUT_OF_RANGE":
                        case 11:
                            message.statusCode = 11;
                            break;
                        case "UNIMPLEMENTED":
                        case 12:
                            message.statusCode = 12;
                            break;
                        case "INTERNAL":
                        case 13:
                            message.statusCode = 13;
                            break;
                        case "UNAVAILABLE":
                        case 14:
                            message.statusCode = 14;
                            break;
                        case "DATA_LOSS":
                        case 15:
                            message.statusCode = 15;
                            break;
                        }
                        if (object.userFacingMessage != null)
                            message.userFacingMessage = String(object.userFacingMessage);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ActionStatus message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ActionStatus
                     * @static
                     * @param {google.chat.v1.ActionStatus} message ActionStatus
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ActionStatus.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.statusCode = options.enums === String ? "OK" : 0;
                            object.userFacingMessage = "";
                        }
                        if (message.statusCode != null && message.hasOwnProperty("statusCode"))
                            object.statusCode = options.enums === String ? $root.google.rpc.Code[message.statusCode] === undefined ? message.statusCode : $root.google.rpc.Code[message.statusCode] : message.statusCode;
                        if (message.userFacingMessage != null && message.hasOwnProperty("userFacingMessage"))
                            object.userFacingMessage = message.userFacingMessage;
                        return object;
                    };
    
                    /**
                     * Converts this ActionStatus to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ActionStatus
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ActionStatus.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ActionStatus
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ActionStatus
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ActionStatus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ActionStatus";
                    };
    
                    return ActionStatus;
                })();
    
                v1.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.chat.v1
                     * @interface IAnnotation
                     * @property {google.chat.v1.AnnotationType|null} [type] Annotation type
                     * @property {number|null} [startIndex] Annotation startIndex
                     * @property {number|null} [length] Annotation length
                     * @property {google.chat.v1.IUserMentionMetadata|null} [userMention] Annotation userMention
                     * @property {google.chat.v1.ISlashCommandMetadata|null} [slashCommand] Annotation slashCommand
                     * @property {google.chat.v1.IRichLinkMetadata|null} [richLinkMetadata] Annotation richLinkMetadata
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.chat.v1
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.chat.v1.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation type.
                     * @member {google.chat.v1.AnnotationType} type
                     * @memberof google.chat.v1.Annotation
                     * @instance
                     */
                    Annotation.prototype.type = 0;
    
                    /**
                     * Annotation startIndex.
                     * @member {number|null|undefined} startIndex
                     * @memberof google.chat.v1.Annotation
                     * @instance
                     */
                    Annotation.prototype.startIndex = null;
    
                    /**
                     * Annotation length.
                     * @member {number} length
                     * @memberof google.chat.v1.Annotation
                     * @instance
                     */
                    Annotation.prototype.length = 0;
    
                    /**
                     * Annotation userMention.
                     * @member {google.chat.v1.IUserMentionMetadata|null|undefined} userMention
                     * @memberof google.chat.v1.Annotation
                     * @instance
                     */
                    Annotation.prototype.userMention = null;
    
                    /**
                     * Annotation slashCommand.
                     * @member {google.chat.v1.ISlashCommandMetadata|null|undefined} slashCommand
                     * @memberof google.chat.v1.Annotation
                     * @instance
                     */
                    Annotation.prototype.slashCommand = null;
    
                    /**
                     * Annotation richLinkMetadata.
                     * @member {google.chat.v1.IRichLinkMetadata|null|undefined} richLinkMetadata
                     * @memberof google.chat.v1.Annotation
                     * @instance
                     */
                    Annotation.prototype.richLinkMetadata = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Annotation _startIndex.
                     * @member {"startIndex"|undefined} _startIndex
                     * @memberof google.chat.v1.Annotation
                     * @instance
                     */
                    Object.defineProperty(Annotation.prototype, "_startIndex", {
                        get: $util.oneOfGetter($oneOfFields = ["startIndex"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Annotation metadata.
                     * @member {"userMention"|"slashCommand"|"richLinkMetadata"|undefined} metadata
                     * @memberof google.chat.v1.Annotation
                     * @instance
                     */
                    Object.defineProperty(Annotation.prototype, "metadata", {
                        get: $util.oneOfGetter($oneOfFields = ["userMention", "slashCommand", "richLinkMetadata"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.Annotation
                     * @static
                     * @param {google.chat.v1.IAnnotation=} [properties] Properties to set
                     * @returns {google.chat.v1.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.chat.v1.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.Annotation
                     * @static
                     * @param {google.chat.v1.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                        if (message.startIndex != null && Object.hasOwnProperty.call(message, "startIndex"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.startIndex);
                        if (message.length != null && Object.hasOwnProperty.call(message, "length"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.length);
                        if (message.userMention != null && Object.hasOwnProperty.call(message, "userMention"))
                            $root.google.chat.v1.UserMentionMetadata.encode(message.userMention, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.slashCommand != null && Object.hasOwnProperty.call(message, "slashCommand"))
                            $root.google.chat.v1.SlashCommandMetadata.encode(message.slashCommand, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.richLinkMetadata != null && Object.hasOwnProperty.call(message, "richLinkMetadata"))
                            $root.google.chat.v1.RichLinkMetadata.encode(message.richLinkMetadata, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.chat.v1.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.Annotation
                     * @static
                     * @param {google.chat.v1.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.type = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.startIndex = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.length = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.userMention = $root.google.chat.v1.UserMentionMetadata.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.slashCommand = $root.google.chat.v1.SlashCommandMetadata.decode(reader, reader.uint32());
                                    break;
                                }
                            case 6: {
                                    message.richLinkMetadata = $root.google.chat.v1.RichLinkMetadata.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.chat.v1.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.startIndex != null && message.hasOwnProperty("startIndex")) {
                            properties._startIndex = 1;
                            if (!$util.isInteger(message.startIndex))
                                return "startIndex: integer expected";
                        }
                        if (message.length != null && message.hasOwnProperty("length"))
                            if (!$util.isInteger(message.length))
                                return "length: integer expected";
                        if (message.userMention != null && message.hasOwnProperty("userMention")) {
                            properties.metadata = 1;
                            {
                                var error = $root.google.chat.v1.UserMentionMetadata.verify(message.userMention);
                                if (error)
                                    return "userMention." + error;
                            }
                        }
                        if (message.slashCommand != null && message.hasOwnProperty("slashCommand")) {
                            if (properties.metadata === 1)
                                return "metadata: multiple values";
                            properties.metadata = 1;
                            {
                                var error = $root.google.chat.v1.SlashCommandMetadata.verify(message.slashCommand);
                                if (error)
                                    return "slashCommand." + error;
                            }
                        }
                        if (message.richLinkMetadata != null && message.hasOwnProperty("richLinkMetadata")) {
                            if (properties.metadata === 1)
                                return "metadata: multiple values";
                            properties.metadata = 1;
                            {
                                var error = $root.google.chat.v1.RichLinkMetadata.verify(message.richLinkMetadata);
                                if (error)
                                    return "richLinkMetadata." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.Annotation)
                            return object;
                        var message = new $root.google.chat.v1.Annotation();
                        switch (object.type) {
                        default:
                            if (typeof object.type === "number") {
                                message.type = object.type;
                                break;
                            }
                            break;
                        case "ANNOTATION_TYPE_UNSPECIFIED":
                        case 0:
                            message.type = 0;
                            break;
                        case "USER_MENTION":
                        case 1:
                            message.type = 1;
                            break;
                        case "SLASH_COMMAND":
                        case 2:
                            message.type = 2;
                            break;
                        case "RICH_LINK":
                        case 3:
                            message.type = 3;
                            break;
                        }
                        if (object.startIndex != null)
                            message.startIndex = object.startIndex | 0;
                        if (object.length != null)
                            message.length = object.length | 0;
                        if (object.userMention != null) {
                            if (typeof object.userMention !== "object")
                                throw TypeError(".google.chat.v1.Annotation.userMention: object expected");
                            message.userMention = $root.google.chat.v1.UserMentionMetadata.fromObject(object.userMention);
                        }
                        if (object.slashCommand != null) {
                            if (typeof object.slashCommand !== "object")
                                throw TypeError(".google.chat.v1.Annotation.slashCommand: object expected");
                            message.slashCommand = $root.google.chat.v1.SlashCommandMetadata.fromObject(object.slashCommand);
                        }
                        if (object.richLinkMetadata != null) {
                            if (typeof object.richLinkMetadata !== "object")
                                throw TypeError(".google.chat.v1.Annotation.richLinkMetadata: object expected");
                            message.richLinkMetadata = $root.google.chat.v1.RichLinkMetadata.fromObject(object.richLinkMetadata);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.Annotation
                     * @static
                     * @param {google.chat.v1.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.type = options.enums === String ? "ANNOTATION_TYPE_UNSPECIFIED" : 0;
                            object.length = 0;
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.google.chat.v1.AnnotationType[message.type] === undefined ? message.type : $root.google.chat.v1.AnnotationType[message.type] : message.type;
                        if (message.startIndex != null && message.hasOwnProperty("startIndex")) {
                            object.startIndex = message.startIndex;
                            if (options.oneofs)
                                object._startIndex = "startIndex";
                        }
                        if (message.length != null && message.hasOwnProperty("length"))
                            object.length = message.length;
                        if (message.userMention != null && message.hasOwnProperty("userMention")) {
                            object.userMention = $root.google.chat.v1.UserMentionMetadata.toObject(message.userMention, options);
                            if (options.oneofs)
                                object.metadata = "userMention";
                        }
                        if (message.slashCommand != null && message.hasOwnProperty("slashCommand")) {
                            object.slashCommand = $root.google.chat.v1.SlashCommandMetadata.toObject(message.slashCommand, options);
                            if (options.oneofs)
                                object.metadata = "slashCommand";
                        }
                        if (message.richLinkMetadata != null && message.hasOwnProperty("richLinkMetadata")) {
                            object.richLinkMetadata = $root.google.chat.v1.RichLinkMetadata.toObject(message.richLinkMetadata, options);
                            if (options.oneofs)
                                object.metadata = "richLinkMetadata";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.chat.v1.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.Annotation";
                    };
    
                    return Annotation;
                })();
    
                v1.UserMentionMetadata = (function() {
    
                    /**
                     * Properties of a UserMentionMetadata.
                     * @memberof google.chat.v1
                     * @interface IUserMentionMetadata
                     * @property {google.chat.v1.IUser|null} [user] UserMentionMetadata user
                     * @property {google.chat.v1.UserMentionMetadata.Type|null} [type] UserMentionMetadata type
                     */
    
                    /**
                     * Constructs a new UserMentionMetadata.
                     * @memberof google.chat.v1
                     * @classdesc Represents a UserMentionMetadata.
                     * @implements IUserMentionMetadata
                     * @constructor
                     * @param {google.chat.v1.IUserMentionMetadata=} [properties] Properties to set
                     */
                    function UserMentionMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UserMentionMetadata user.
                     * @member {google.chat.v1.IUser|null|undefined} user
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @instance
                     */
                    UserMentionMetadata.prototype.user = null;
    
                    /**
                     * UserMentionMetadata type.
                     * @member {google.chat.v1.UserMentionMetadata.Type} type
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @instance
                     */
                    UserMentionMetadata.prototype.type = 0;
    
                    /**
                     * Creates a new UserMentionMetadata instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @static
                     * @param {google.chat.v1.IUserMentionMetadata=} [properties] Properties to set
                     * @returns {google.chat.v1.UserMentionMetadata} UserMentionMetadata instance
                     */
                    UserMentionMetadata.create = function create(properties) {
                        return new UserMentionMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified UserMentionMetadata message. Does not implicitly {@link google.chat.v1.UserMentionMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @static
                     * @param {google.chat.v1.IUserMentionMetadata} message UserMentionMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UserMentionMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                            $root.google.chat.v1.User.encode(message.user, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UserMentionMetadata message, length delimited. Does not implicitly {@link google.chat.v1.UserMentionMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @static
                     * @param {google.chat.v1.IUserMentionMetadata} message UserMentionMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UserMentionMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a UserMentionMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.UserMentionMetadata} UserMentionMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UserMentionMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.UserMentionMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.user = $root.google.chat.v1.User.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.type = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a UserMentionMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.UserMentionMetadata} UserMentionMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UserMentionMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a UserMentionMetadata message.
                     * @function verify
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UserMentionMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.user != null && message.hasOwnProperty("user")) {
                            var error = $root.google.chat.v1.User.verify(message.user);
                            if (error)
                                return "user." + error;
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a UserMentionMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.UserMentionMetadata} UserMentionMetadata
                     */
                    UserMentionMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.UserMentionMetadata)
                            return object;
                        var message = new $root.google.chat.v1.UserMentionMetadata();
                        if (object.user != null) {
                            if (typeof object.user !== "object")
                                throw TypeError(".google.chat.v1.UserMentionMetadata.user: object expected");
                            message.user = $root.google.chat.v1.User.fromObject(object.user);
                        }
                        switch (object.type) {
                        default:
                            if (typeof object.type === "number") {
                                message.type = object.type;
                                break;
                            }
                            break;
                        case "TYPE_UNSPECIFIED":
                        case 0:
                            message.type = 0;
                            break;
                        case "ADD":
                        case 1:
                            message.type = 1;
                            break;
                        case "MENTION":
                        case 2:
                            message.type = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a UserMentionMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @static
                     * @param {google.chat.v1.UserMentionMetadata} message UserMentionMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UserMentionMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.user = null;
                            object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                        }
                        if (message.user != null && message.hasOwnProperty("user"))
                            object.user = $root.google.chat.v1.User.toObject(message.user, options);
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.google.chat.v1.UserMentionMetadata.Type[message.type] === undefined ? message.type : $root.google.chat.v1.UserMentionMetadata.Type[message.type] : message.type;
                        return object;
                    };
    
                    /**
                     * Converts this UserMentionMetadata to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UserMentionMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for UserMentionMetadata
                     * @function getTypeUrl
                     * @memberof google.chat.v1.UserMentionMetadata
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    UserMentionMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.UserMentionMetadata";
                    };
    
                    /**
                     * Type enum.
                     * @name google.chat.v1.UserMentionMetadata.Type
                     * @enum {number}
                     * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                     * @property {number} ADD=1 ADD value
                     * @property {number} MENTION=2 MENTION value
                     */
                    UserMentionMetadata.Type = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADD"] = 1;
                        values[valuesById[2] = "MENTION"] = 2;
                        return values;
                    })();
    
                    return UserMentionMetadata;
                })();
    
                v1.SlashCommandMetadata = (function() {
    
                    /**
                     * Properties of a SlashCommandMetadata.
                     * @memberof google.chat.v1
                     * @interface ISlashCommandMetadata
                     * @property {google.chat.v1.IUser|null} [bot] SlashCommandMetadata bot
                     * @property {google.chat.v1.SlashCommandMetadata.Type|null} [type] SlashCommandMetadata type
                     * @property {string|null} [commandName] SlashCommandMetadata commandName
                     * @property {number|Long|null} [commandId] SlashCommandMetadata commandId
                     * @property {boolean|null} [triggersDialog] SlashCommandMetadata triggersDialog
                     */
    
                    /**
                     * Constructs a new SlashCommandMetadata.
                     * @memberof google.chat.v1
                     * @classdesc Represents a SlashCommandMetadata.
                     * @implements ISlashCommandMetadata
                     * @constructor
                     * @param {google.chat.v1.ISlashCommandMetadata=} [properties] Properties to set
                     */
                    function SlashCommandMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlashCommandMetadata bot.
                     * @member {google.chat.v1.IUser|null|undefined} bot
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @instance
                     */
                    SlashCommandMetadata.prototype.bot = null;
    
                    /**
                     * SlashCommandMetadata type.
                     * @member {google.chat.v1.SlashCommandMetadata.Type} type
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @instance
                     */
                    SlashCommandMetadata.prototype.type = 0;
    
                    /**
                     * SlashCommandMetadata commandName.
                     * @member {string} commandName
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @instance
                     */
                    SlashCommandMetadata.prototype.commandName = "";
    
                    /**
                     * SlashCommandMetadata commandId.
                     * @member {number|Long} commandId
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @instance
                     */
                    SlashCommandMetadata.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * SlashCommandMetadata triggersDialog.
                     * @member {boolean} triggersDialog
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @instance
                     */
                    SlashCommandMetadata.prototype.triggersDialog = false;
    
                    /**
                     * Creates a new SlashCommandMetadata instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @static
                     * @param {google.chat.v1.ISlashCommandMetadata=} [properties] Properties to set
                     * @returns {google.chat.v1.SlashCommandMetadata} SlashCommandMetadata instance
                     */
                    SlashCommandMetadata.create = function create(properties) {
                        return new SlashCommandMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified SlashCommandMetadata message. Does not implicitly {@link google.chat.v1.SlashCommandMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @static
                     * @param {google.chat.v1.ISlashCommandMetadata} message SlashCommandMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlashCommandMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.bot != null && Object.hasOwnProperty.call(message, "bot"))
                            $root.google.chat.v1.User.encode(message.bot, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                        if (message.commandName != null && Object.hasOwnProperty.call(message, "commandName"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.commandName);
                        if (message.commandId != null && Object.hasOwnProperty.call(message, "commandId"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.commandId);
                        if (message.triggersDialog != null && Object.hasOwnProperty.call(message, "triggersDialog"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.triggersDialog);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlashCommandMetadata message, length delimited. Does not implicitly {@link google.chat.v1.SlashCommandMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @static
                     * @param {google.chat.v1.ISlashCommandMetadata} message SlashCommandMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlashCommandMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlashCommandMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.SlashCommandMetadata} SlashCommandMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlashCommandMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.SlashCommandMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.bot = $root.google.chat.v1.User.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.type = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.commandName = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.commandId = reader.int64();
                                    break;
                                }
                            case 5: {
                                    message.triggersDialog = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlashCommandMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.SlashCommandMetadata} SlashCommandMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlashCommandMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlashCommandMetadata message.
                     * @function verify
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlashCommandMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.bot != null && message.hasOwnProperty("bot")) {
                            var error = $root.google.chat.v1.User.verify(message.bot);
                            if (error)
                                return "bot." + error;
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.commandName != null && message.hasOwnProperty("commandName"))
                            if (!$util.isString(message.commandName))
                                return "commandName: string expected";
                        if (message.commandId != null && message.hasOwnProperty("commandId"))
                            if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                                return "commandId: integer|Long expected";
                        if (message.triggersDialog != null && message.hasOwnProperty("triggersDialog"))
                            if (typeof message.triggersDialog !== "boolean")
                                return "triggersDialog: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a SlashCommandMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.SlashCommandMetadata} SlashCommandMetadata
                     */
                    SlashCommandMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.SlashCommandMetadata)
                            return object;
                        var message = new $root.google.chat.v1.SlashCommandMetadata();
                        if (object.bot != null) {
                            if (typeof object.bot !== "object")
                                throw TypeError(".google.chat.v1.SlashCommandMetadata.bot: object expected");
                            message.bot = $root.google.chat.v1.User.fromObject(object.bot);
                        }
                        switch (object.type) {
                        default:
                            if (typeof object.type === "number") {
                                message.type = object.type;
                                break;
                            }
                            break;
                        case "TYPE_UNSPECIFIED":
                        case 0:
                            message.type = 0;
                            break;
                        case "ADD":
                        case 1:
                            message.type = 1;
                            break;
                        case "INVOKE":
                        case 2:
                            message.type = 2;
                            break;
                        }
                        if (object.commandName != null)
                            message.commandName = String(object.commandName);
                        if (object.commandId != null)
                            if ($util.Long)
                                (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                            else if (typeof object.commandId === "string")
                                message.commandId = parseInt(object.commandId, 10);
                            else if (typeof object.commandId === "number")
                                message.commandId = object.commandId;
                            else if (typeof object.commandId === "object")
                                message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                        if (object.triggersDialog != null)
                            message.triggersDialog = Boolean(object.triggersDialog);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlashCommandMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @static
                     * @param {google.chat.v1.SlashCommandMetadata} message SlashCommandMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlashCommandMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.bot = null;
                            object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                            object.commandName = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.commandId = options.longs === String ? "0" : 0;
                            object.triggersDialog = false;
                        }
                        if (message.bot != null && message.hasOwnProperty("bot"))
                            object.bot = $root.google.chat.v1.User.toObject(message.bot, options);
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.google.chat.v1.SlashCommandMetadata.Type[message.type] === undefined ? message.type : $root.google.chat.v1.SlashCommandMetadata.Type[message.type] : message.type;
                        if (message.commandName != null && message.hasOwnProperty("commandName"))
                            object.commandName = message.commandName;
                        if (message.commandId != null && message.hasOwnProperty("commandId"))
                            if (typeof message.commandId === "number")
                                object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                            else
                                object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                        if (message.triggersDialog != null && message.hasOwnProperty("triggersDialog"))
                            object.triggersDialog = message.triggersDialog;
                        return object;
                    };
    
                    /**
                     * Converts this SlashCommandMetadata to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlashCommandMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlashCommandMetadata
                     * @function getTypeUrl
                     * @memberof google.chat.v1.SlashCommandMetadata
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlashCommandMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.SlashCommandMetadata";
                    };
    
                    /**
                     * Type enum.
                     * @name google.chat.v1.SlashCommandMetadata.Type
                     * @enum {number}
                     * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                     * @property {number} ADD=1 ADD value
                     * @property {number} INVOKE=2 INVOKE value
                     */
                    SlashCommandMetadata.Type = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ADD"] = 1;
                        values[valuesById[2] = "INVOKE"] = 2;
                        return values;
                    })();
    
                    return SlashCommandMetadata;
                })();
    
                v1.RichLinkMetadata = (function() {
    
                    /**
                     * Properties of a RichLinkMetadata.
                     * @memberof google.chat.v1
                     * @interface IRichLinkMetadata
                     * @property {string|null} [uri] RichLinkMetadata uri
                     * @property {google.chat.v1.RichLinkMetadata.RichLinkType|null} [richLinkType] RichLinkMetadata richLinkType
                     * @property {google.chat.v1.IDriveLinkData|null} [driveLinkData] RichLinkMetadata driveLinkData
                     */
    
                    /**
                     * Constructs a new RichLinkMetadata.
                     * @memberof google.chat.v1
                     * @classdesc Represents a RichLinkMetadata.
                     * @implements IRichLinkMetadata
                     * @constructor
                     * @param {google.chat.v1.IRichLinkMetadata=} [properties] Properties to set
                     */
                    function RichLinkMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * RichLinkMetadata uri.
                     * @member {string} uri
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @instance
                     */
                    RichLinkMetadata.prototype.uri = "";
    
                    /**
                     * RichLinkMetadata richLinkType.
                     * @member {google.chat.v1.RichLinkMetadata.RichLinkType} richLinkType
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @instance
                     */
                    RichLinkMetadata.prototype.richLinkType = 0;
    
                    /**
                     * RichLinkMetadata driveLinkData.
                     * @member {google.chat.v1.IDriveLinkData|null|undefined} driveLinkData
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @instance
                     */
                    RichLinkMetadata.prototype.driveLinkData = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * RichLinkMetadata data.
                     * @member {"driveLinkData"|undefined} data
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @instance
                     */
                    Object.defineProperty(RichLinkMetadata.prototype, "data", {
                        get: $util.oneOfGetter($oneOfFields = ["driveLinkData"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new RichLinkMetadata instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @static
                     * @param {google.chat.v1.IRichLinkMetadata=} [properties] Properties to set
                     * @returns {google.chat.v1.RichLinkMetadata} RichLinkMetadata instance
                     */
                    RichLinkMetadata.create = function create(properties) {
                        return new RichLinkMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified RichLinkMetadata message. Does not implicitly {@link google.chat.v1.RichLinkMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @static
                     * @param {google.chat.v1.IRichLinkMetadata} message RichLinkMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RichLinkMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);
                        if (message.richLinkType != null && Object.hasOwnProperty.call(message, "richLinkType"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.richLinkType);
                        if (message.driveLinkData != null && Object.hasOwnProperty.call(message, "driveLinkData"))
                            $root.google.chat.v1.DriveLinkData.encode(message.driveLinkData, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified RichLinkMetadata message, length delimited. Does not implicitly {@link google.chat.v1.RichLinkMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @static
                     * @param {google.chat.v1.IRichLinkMetadata} message RichLinkMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RichLinkMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a RichLinkMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.RichLinkMetadata} RichLinkMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RichLinkMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.RichLinkMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.uri = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.richLinkType = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.driveLinkData = $root.google.chat.v1.DriveLinkData.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a RichLinkMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.RichLinkMetadata} RichLinkMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RichLinkMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a RichLinkMetadata message.
                     * @function verify
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RichLinkMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            if (!$util.isString(message.uri))
                                return "uri: string expected";
                        if (message.richLinkType != null && message.hasOwnProperty("richLinkType"))
                            switch (message.richLinkType) {
                            default:
                                return "richLinkType: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.driveLinkData != null && message.hasOwnProperty("driveLinkData")) {
                            properties.data = 1;
                            {
                                var error = $root.google.chat.v1.DriveLinkData.verify(message.driveLinkData);
                                if (error)
                                    return "driveLinkData." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a RichLinkMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.RichLinkMetadata} RichLinkMetadata
                     */
                    RichLinkMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.RichLinkMetadata)
                            return object;
                        var message = new $root.google.chat.v1.RichLinkMetadata();
                        if (object.uri != null)
                            message.uri = String(object.uri);
                        switch (object.richLinkType) {
                        default:
                            if (typeof object.richLinkType === "number") {
                                message.richLinkType = object.richLinkType;
                                break;
                            }
                            break;
                        case "RICH_LINK_TYPE_UNSPECIFIED":
                        case 0:
                            message.richLinkType = 0;
                            break;
                        case "DRIVE_FILE":
                        case 1:
                            message.richLinkType = 1;
                            break;
                        }
                        if (object.driveLinkData != null) {
                            if (typeof object.driveLinkData !== "object")
                                throw TypeError(".google.chat.v1.RichLinkMetadata.driveLinkData: object expected");
                            message.driveLinkData = $root.google.chat.v1.DriveLinkData.fromObject(object.driveLinkData);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a RichLinkMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @static
                     * @param {google.chat.v1.RichLinkMetadata} message RichLinkMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RichLinkMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.uri = "";
                            object.richLinkType = options.enums === String ? "RICH_LINK_TYPE_UNSPECIFIED" : 0;
                        }
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            object.uri = message.uri;
                        if (message.richLinkType != null && message.hasOwnProperty("richLinkType"))
                            object.richLinkType = options.enums === String ? $root.google.chat.v1.RichLinkMetadata.RichLinkType[message.richLinkType] === undefined ? message.richLinkType : $root.google.chat.v1.RichLinkMetadata.RichLinkType[message.richLinkType] : message.richLinkType;
                        if (message.driveLinkData != null && message.hasOwnProperty("driveLinkData")) {
                            object.driveLinkData = $root.google.chat.v1.DriveLinkData.toObject(message.driveLinkData, options);
                            if (options.oneofs)
                                object.data = "driveLinkData";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this RichLinkMetadata to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RichLinkMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for RichLinkMetadata
                     * @function getTypeUrl
                     * @memberof google.chat.v1.RichLinkMetadata
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    RichLinkMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.RichLinkMetadata";
                    };
    
                    /**
                     * RichLinkType enum.
                     * @name google.chat.v1.RichLinkMetadata.RichLinkType
                     * @enum {number}
                     * @property {number} RICH_LINK_TYPE_UNSPECIFIED=0 RICH_LINK_TYPE_UNSPECIFIED value
                     * @property {number} DRIVE_FILE=1 DRIVE_FILE value
                     */
                    RichLinkMetadata.RichLinkType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "RICH_LINK_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "DRIVE_FILE"] = 1;
                        return values;
                    })();
    
                    return RichLinkMetadata;
                })();
    
                v1.DriveLinkData = (function() {
    
                    /**
                     * Properties of a DriveLinkData.
                     * @memberof google.chat.v1
                     * @interface IDriveLinkData
                     * @property {google.chat.v1.IDriveDataRef|null} [driveDataRef] DriveLinkData driveDataRef
                     * @property {string|null} [mimeType] DriveLinkData mimeType
                     */
    
                    /**
                     * Constructs a new DriveLinkData.
                     * @memberof google.chat.v1
                     * @classdesc Represents a DriveLinkData.
                     * @implements IDriveLinkData
                     * @constructor
                     * @param {google.chat.v1.IDriveLinkData=} [properties] Properties to set
                     */
                    function DriveLinkData(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DriveLinkData driveDataRef.
                     * @member {google.chat.v1.IDriveDataRef|null|undefined} driveDataRef
                     * @memberof google.chat.v1.DriveLinkData
                     * @instance
                     */
                    DriveLinkData.prototype.driveDataRef = null;
    
                    /**
                     * DriveLinkData mimeType.
                     * @member {string} mimeType
                     * @memberof google.chat.v1.DriveLinkData
                     * @instance
                     */
                    DriveLinkData.prototype.mimeType = "";
    
                    /**
                     * Creates a new DriveLinkData instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.DriveLinkData
                     * @static
                     * @param {google.chat.v1.IDriveLinkData=} [properties] Properties to set
                     * @returns {google.chat.v1.DriveLinkData} DriveLinkData instance
                     */
                    DriveLinkData.create = function create(properties) {
                        return new DriveLinkData(properties);
                    };
    
                    /**
                     * Encodes the specified DriveLinkData message. Does not implicitly {@link google.chat.v1.DriveLinkData.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.DriveLinkData
                     * @static
                     * @param {google.chat.v1.IDriveLinkData} message DriveLinkData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DriveLinkData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.driveDataRef != null && Object.hasOwnProperty.call(message, "driveDataRef"))
                            $root.google.chat.v1.DriveDataRef.encode(message.driveDataRef, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.mimeType);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DriveLinkData message, length delimited. Does not implicitly {@link google.chat.v1.DriveLinkData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.DriveLinkData
                     * @static
                     * @param {google.chat.v1.IDriveLinkData} message DriveLinkData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DriveLinkData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DriveLinkData message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.DriveLinkData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.DriveLinkData} DriveLinkData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DriveLinkData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.DriveLinkData();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.driveDataRef = $root.google.chat.v1.DriveDataRef.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.mimeType = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DriveLinkData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.DriveLinkData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.DriveLinkData} DriveLinkData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DriveLinkData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DriveLinkData message.
                     * @function verify
                     * @memberof google.chat.v1.DriveLinkData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DriveLinkData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.driveDataRef != null && message.hasOwnProperty("driveDataRef")) {
                            var error = $root.google.chat.v1.DriveDataRef.verify(message.driveDataRef);
                            if (error)
                                return "driveDataRef." + error;
                        }
                        if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                            if (!$util.isString(message.mimeType))
                                return "mimeType: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DriveLinkData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.DriveLinkData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.DriveLinkData} DriveLinkData
                     */
                    DriveLinkData.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.DriveLinkData)
                            return object;
                        var message = new $root.google.chat.v1.DriveLinkData();
                        if (object.driveDataRef != null) {
                            if (typeof object.driveDataRef !== "object")
                                throw TypeError(".google.chat.v1.DriveLinkData.driveDataRef: object expected");
                            message.driveDataRef = $root.google.chat.v1.DriveDataRef.fromObject(object.driveDataRef);
                        }
                        if (object.mimeType != null)
                            message.mimeType = String(object.mimeType);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DriveLinkData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.DriveLinkData
                     * @static
                     * @param {google.chat.v1.DriveLinkData} message DriveLinkData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DriveLinkData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.driveDataRef = null;
                            object.mimeType = "";
                        }
                        if (message.driveDataRef != null && message.hasOwnProperty("driveDataRef"))
                            object.driveDataRef = $root.google.chat.v1.DriveDataRef.toObject(message.driveDataRef, options);
                        if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                            object.mimeType = message.mimeType;
                        return object;
                    };
    
                    /**
                     * Converts this DriveLinkData to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.DriveLinkData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DriveLinkData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DriveLinkData
                     * @function getTypeUrl
                     * @memberof google.chat.v1.DriveLinkData
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DriveLinkData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.DriveLinkData";
                    };
    
                    return DriveLinkData;
                })();
    
                /**
                 * AnnotationType enum.
                 * @name google.chat.v1.AnnotationType
                 * @enum {number}
                 * @property {number} ANNOTATION_TYPE_UNSPECIFIED=0 ANNOTATION_TYPE_UNSPECIFIED value
                 * @property {number} USER_MENTION=1 USER_MENTION value
                 * @property {number} SLASH_COMMAND=2 SLASH_COMMAND value
                 * @property {number} RICH_LINK=3 RICH_LINK value
                 */
                v1.AnnotationType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ANNOTATION_TYPE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "USER_MENTION"] = 1;
                    values[valuesById[2] = "SLASH_COMMAND"] = 2;
                    values[valuesById[3] = "RICH_LINK"] = 3;
                    return values;
                })();
    
                v1.Attachment = (function() {
    
                    /**
                     * Properties of an Attachment.
                     * @memberof google.chat.v1
                     * @interface IAttachment
                     * @property {string|null} [name] Attachment name
                     * @property {string|null} [contentName] Attachment contentName
                     * @property {string|null} [contentType] Attachment contentType
                     * @property {google.chat.v1.IAttachmentDataRef|null} [attachmentDataRef] Attachment attachmentDataRef
                     * @property {google.chat.v1.IDriveDataRef|null} [driveDataRef] Attachment driveDataRef
                     * @property {string|null} [thumbnailUri] Attachment thumbnailUri
                     * @property {string|null} [downloadUri] Attachment downloadUri
                     * @property {google.chat.v1.Attachment.Source|null} [source] Attachment source
                     */
    
                    /**
                     * Constructs a new Attachment.
                     * @memberof google.chat.v1
                     * @classdesc Represents an Attachment.
                     * @implements IAttachment
                     * @constructor
                     * @param {google.chat.v1.IAttachment=} [properties] Properties to set
                     */
                    function Attachment(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Attachment name.
                     * @member {string} name
                     * @memberof google.chat.v1.Attachment
                     * @instance
                     */
                    Attachment.prototype.name = "";
    
                    /**
                     * Attachment contentName.
                     * @member {string} contentName
                     * @memberof google.chat.v1.Attachment
                     * @instance
                     */
                    Attachment.prototype.contentName = "";
    
                    /**
                     * Attachment contentType.
                     * @member {string} contentType
                     * @memberof google.chat.v1.Attachment
                     * @instance
                     */
                    Attachment.prototype.contentType = "";
    
                    /**
                     * Attachment attachmentDataRef.
                     * @member {google.chat.v1.IAttachmentDataRef|null|undefined} attachmentDataRef
                     * @memberof google.chat.v1.Attachment
                     * @instance
                     */
                    Attachment.prototype.attachmentDataRef = null;
    
                    /**
                     * Attachment driveDataRef.
                     * @member {google.chat.v1.IDriveDataRef|null|undefined} driveDataRef
                     * @memberof google.chat.v1.Attachment
                     * @instance
                     */
                    Attachment.prototype.driveDataRef = null;
    
                    /**
                     * Attachment thumbnailUri.
                     * @member {string} thumbnailUri
                     * @memberof google.chat.v1.Attachment
                     * @instance
                     */
                    Attachment.prototype.thumbnailUri = "";
    
                    /**
                     * Attachment downloadUri.
                     * @member {string} downloadUri
                     * @memberof google.chat.v1.Attachment
                     * @instance
                     */
                    Attachment.prototype.downloadUri = "";
    
                    /**
                     * Attachment source.
                     * @member {google.chat.v1.Attachment.Source} source
                     * @memberof google.chat.v1.Attachment
                     * @instance
                     */
                    Attachment.prototype.source = 0;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Attachment dataRef.
                     * @member {"attachmentDataRef"|"driveDataRef"|undefined} dataRef
                     * @memberof google.chat.v1.Attachment
                     * @instance
                     */
                    Object.defineProperty(Attachment.prototype, "dataRef", {
                        get: $util.oneOfGetter($oneOfFields = ["attachmentDataRef", "driveDataRef"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Attachment instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.Attachment
                     * @static
                     * @param {google.chat.v1.IAttachment=} [properties] Properties to set
                     * @returns {google.chat.v1.Attachment} Attachment instance
                     */
                    Attachment.create = function create(properties) {
                        return new Attachment(properties);
                    };
    
                    /**
                     * Encodes the specified Attachment message. Does not implicitly {@link google.chat.v1.Attachment.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.Attachment
                     * @static
                     * @param {google.chat.v1.IAttachment} message Attachment message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Attachment.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.contentName != null && Object.hasOwnProperty.call(message, "contentName"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.contentName);
                        if (message.contentType != null && Object.hasOwnProperty.call(message, "contentType"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.contentType);
                        if (message.attachmentDataRef != null && Object.hasOwnProperty.call(message, "attachmentDataRef"))
                            $root.google.chat.v1.AttachmentDataRef.encode(message.attachmentDataRef, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.thumbnailUri != null && Object.hasOwnProperty.call(message, "thumbnailUri"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.thumbnailUri);
                        if (message.downloadUri != null && Object.hasOwnProperty.call(message, "downloadUri"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.downloadUri);
                        if (message.driveDataRef != null && Object.hasOwnProperty.call(message, "driveDataRef"))
                            $root.google.chat.v1.DriveDataRef.encode(message.driveDataRef, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.source);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Attachment message, length delimited. Does not implicitly {@link google.chat.v1.Attachment.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.Attachment
                     * @static
                     * @param {google.chat.v1.IAttachment} message Attachment message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Attachment.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Attachment message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.Attachment
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.Attachment} Attachment
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Attachment.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Attachment();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.contentName = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.contentType = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.attachmentDataRef = $root.google.chat.v1.AttachmentDataRef.decode(reader, reader.uint32());
                                    break;
                                }
                            case 7: {
                                    message.driveDataRef = $root.google.chat.v1.DriveDataRef.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.thumbnailUri = reader.string();
                                    break;
                                }
                            case 6: {
                                    message.downloadUri = reader.string();
                                    break;
                                }
                            case 9: {
                                    message.source = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Attachment message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.Attachment
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.Attachment} Attachment
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Attachment.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Attachment message.
                     * @function verify
                     * @memberof google.chat.v1.Attachment
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Attachment.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.contentName != null && message.hasOwnProperty("contentName"))
                            if (!$util.isString(message.contentName))
                                return "contentName: string expected";
                        if (message.contentType != null && message.hasOwnProperty("contentType"))
                            if (!$util.isString(message.contentType))
                                return "contentType: string expected";
                        if (message.attachmentDataRef != null && message.hasOwnProperty("attachmentDataRef")) {
                            properties.dataRef = 1;
                            {
                                var error = $root.google.chat.v1.AttachmentDataRef.verify(message.attachmentDataRef);
                                if (error)
                                    return "attachmentDataRef." + error;
                            }
                        }
                        if (message.driveDataRef != null && message.hasOwnProperty("driveDataRef")) {
                            if (properties.dataRef === 1)
                                return "dataRef: multiple values";
                            properties.dataRef = 1;
                            {
                                var error = $root.google.chat.v1.DriveDataRef.verify(message.driveDataRef);
                                if (error)
                                    return "driveDataRef." + error;
                            }
                        }
                        if (message.thumbnailUri != null && message.hasOwnProperty("thumbnailUri"))
                            if (!$util.isString(message.thumbnailUri))
                                return "thumbnailUri: string expected";
                        if (message.downloadUri != null && message.hasOwnProperty("downloadUri"))
                            if (!$util.isString(message.downloadUri))
                                return "downloadUri: string expected";
                        if (message.source != null && message.hasOwnProperty("source"))
                            switch (message.source) {
                            default:
                                return "source: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Attachment message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.Attachment
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.Attachment} Attachment
                     */
                    Attachment.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.Attachment)
                            return object;
                        var message = new $root.google.chat.v1.Attachment();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.contentName != null)
                            message.contentName = String(object.contentName);
                        if (object.contentType != null)
                            message.contentType = String(object.contentType);
                        if (object.attachmentDataRef != null) {
                            if (typeof object.attachmentDataRef !== "object")
                                throw TypeError(".google.chat.v1.Attachment.attachmentDataRef: object expected");
                            message.attachmentDataRef = $root.google.chat.v1.AttachmentDataRef.fromObject(object.attachmentDataRef);
                        }
                        if (object.driveDataRef != null) {
                            if (typeof object.driveDataRef !== "object")
                                throw TypeError(".google.chat.v1.Attachment.driveDataRef: object expected");
                            message.driveDataRef = $root.google.chat.v1.DriveDataRef.fromObject(object.driveDataRef);
                        }
                        if (object.thumbnailUri != null)
                            message.thumbnailUri = String(object.thumbnailUri);
                        if (object.downloadUri != null)
                            message.downloadUri = String(object.downloadUri);
                        switch (object.source) {
                        default:
                            if (typeof object.source === "number") {
                                message.source = object.source;
                                break;
                            }
                            break;
                        case "SOURCE_UNSPECIFIED":
                        case 0:
                            message.source = 0;
                            break;
                        case "DRIVE_FILE":
                        case 1:
                            message.source = 1;
                            break;
                        case "UPLOADED_CONTENT":
                        case 2:
                            message.source = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Attachment message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.Attachment
                     * @static
                     * @param {google.chat.v1.Attachment} message Attachment
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Attachment.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.contentName = "";
                            object.contentType = "";
                            object.thumbnailUri = "";
                            object.downloadUri = "";
                            object.source = options.enums === String ? "SOURCE_UNSPECIFIED" : 0;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.contentName != null && message.hasOwnProperty("contentName"))
                            object.contentName = message.contentName;
                        if (message.contentType != null && message.hasOwnProperty("contentType"))
                            object.contentType = message.contentType;
                        if (message.attachmentDataRef != null && message.hasOwnProperty("attachmentDataRef")) {
                            object.attachmentDataRef = $root.google.chat.v1.AttachmentDataRef.toObject(message.attachmentDataRef, options);
                            if (options.oneofs)
                                object.dataRef = "attachmentDataRef";
                        }
                        if (message.thumbnailUri != null && message.hasOwnProperty("thumbnailUri"))
                            object.thumbnailUri = message.thumbnailUri;
                        if (message.downloadUri != null && message.hasOwnProperty("downloadUri"))
                            object.downloadUri = message.downloadUri;
                        if (message.driveDataRef != null && message.hasOwnProperty("driveDataRef")) {
                            object.driveDataRef = $root.google.chat.v1.DriveDataRef.toObject(message.driveDataRef, options);
                            if (options.oneofs)
                                object.dataRef = "driveDataRef";
                        }
                        if (message.source != null && message.hasOwnProperty("source"))
                            object.source = options.enums === String ? $root.google.chat.v1.Attachment.Source[message.source] === undefined ? message.source : $root.google.chat.v1.Attachment.Source[message.source] : message.source;
                        return object;
                    };
    
                    /**
                     * Converts this Attachment to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.Attachment
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Attachment.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Attachment
                     * @function getTypeUrl
                     * @memberof google.chat.v1.Attachment
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Attachment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.Attachment";
                    };
    
                    /**
                     * Source enum.
                     * @name google.chat.v1.Attachment.Source
                     * @enum {number}
                     * @property {number} SOURCE_UNSPECIFIED=0 SOURCE_UNSPECIFIED value
                     * @property {number} DRIVE_FILE=1 DRIVE_FILE value
                     * @property {number} UPLOADED_CONTENT=2 UPLOADED_CONTENT value
                     */
                    Attachment.Source = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "SOURCE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "DRIVE_FILE"] = 1;
                        values[valuesById[2] = "UPLOADED_CONTENT"] = 2;
                        return values;
                    })();
    
                    return Attachment;
                })();
    
                v1.DriveDataRef = (function() {
    
                    /**
                     * Properties of a DriveDataRef.
                     * @memberof google.chat.v1
                     * @interface IDriveDataRef
                     * @property {string|null} [driveFileId] DriveDataRef driveFileId
                     */
    
                    /**
                     * Constructs a new DriveDataRef.
                     * @memberof google.chat.v1
                     * @classdesc Represents a DriveDataRef.
                     * @implements IDriveDataRef
                     * @constructor
                     * @param {google.chat.v1.IDriveDataRef=} [properties] Properties to set
                     */
                    function DriveDataRef(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DriveDataRef driveFileId.
                     * @member {string} driveFileId
                     * @memberof google.chat.v1.DriveDataRef
                     * @instance
                     */
                    DriveDataRef.prototype.driveFileId = "";
    
                    /**
                     * Creates a new DriveDataRef instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.DriveDataRef
                     * @static
                     * @param {google.chat.v1.IDriveDataRef=} [properties] Properties to set
                     * @returns {google.chat.v1.DriveDataRef} DriveDataRef instance
                     */
                    DriveDataRef.create = function create(properties) {
                        return new DriveDataRef(properties);
                    };
    
                    /**
                     * Encodes the specified DriveDataRef message. Does not implicitly {@link google.chat.v1.DriveDataRef.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.DriveDataRef
                     * @static
                     * @param {google.chat.v1.IDriveDataRef} message DriveDataRef message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DriveDataRef.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.driveFileId != null && Object.hasOwnProperty.call(message, "driveFileId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.driveFileId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DriveDataRef message, length delimited. Does not implicitly {@link google.chat.v1.DriveDataRef.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.DriveDataRef
                     * @static
                     * @param {google.chat.v1.IDriveDataRef} message DriveDataRef message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DriveDataRef.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DriveDataRef message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.DriveDataRef
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.DriveDataRef} DriveDataRef
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DriveDataRef.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.DriveDataRef();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2: {
                                    message.driveFileId = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DriveDataRef message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.DriveDataRef
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.DriveDataRef} DriveDataRef
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DriveDataRef.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DriveDataRef message.
                     * @function verify
                     * @memberof google.chat.v1.DriveDataRef
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DriveDataRef.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.driveFileId != null && message.hasOwnProperty("driveFileId"))
                            if (!$util.isString(message.driveFileId))
                                return "driveFileId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DriveDataRef message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.DriveDataRef
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.DriveDataRef} DriveDataRef
                     */
                    DriveDataRef.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.DriveDataRef)
                            return object;
                        var message = new $root.google.chat.v1.DriveDataRef();
                        if (object.driveFileId != null)
                            message.driveFileId = String(object.driveFileId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DriveDataRef message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.DriveDataRef
                     * @static
                     * @param {google.chat.v1.DriveDataRef} message DriveDataRef
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DriveDataRef.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.driveFileId = "";
                        if (message.driveFileId != null && message.hasOwnProperty("driveFileId"))
                            object.driveFileId = message.driveFileId;
                        return object;
                    };
    
                    /**
                     * Converts this DriveDataRef to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.DriveDataRef
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DriveDataRef.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DriveDataRef
                     * @function getTypeUrl
                     * @memberof google.chat.v1.DriveDataRef
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DriveDataRef.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.DriveDataRef";
                    };
    
                    return DriveDataRef;
                })();
    
                v1.AttachmentDataRef = (function() {
    
                    /**
                     * Properties of an AttachmentDataRef.
                     * @memberof google.chat.v1
                     * @interface IAttachmentDataRef
                     * @property {string|null} [resourceName] AttachmentDataRef resourceName
                     * @property {string|null} [attachmentUploadToken] AttachmentDataRef attachmentUploadToken
                     */
    
                    /**
                     * Constructs a new AttachmentDataRef.
                     * @memberof google.chat.v1
                     * @classdesc Represents an AttachmentDataRef.
                     * @implements IAttachmentDataRef
                     * @constructor
                     * @param {google.chat.v1.IAttachmentDataRef=} [properties] Properties to set
                     */
                    function AttachmentDataRef(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AttachmentDataRef resourceName.
                     * @member {string} resourceName
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @instance
                     */
                    AttachmentDataRef.prototype.resourceName = "";
    
                    /**
                     * AttachmentDataRef attachmentUploadToken.
                     * @member {string} attachmentUploadToken
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @instance
                     */
                    AttachmentDataRef.prototype.attachmentUploadToken = "";
    
                    /**
                     * Creates a new AttachmentDataRef instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @static
                     * @param {google.chat.v1.IAttachmentDataRef=} [properties] Properties to set
                     * @returns {google.chat.v1.AttachmentDataRef} AttachmentDataRef instance
                     */
                    AttachmentDataRef.create = function create(properties) {
                        return new AttachmentDataRef(properties);
                    };
    
                    /**
                     * Encodes the specified AttachmentDataRef message. Does not implicitly {@link google.chat.v1.AttachmentDataRef.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @static
                     * @param {google.chat.v1.IAttachmentDataRef} message AttachmentDataRef message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AttachmentDataRef.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resourceName != null && Object.hasOwnProperty.call(message, "resourceName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.resourceName);
                        if (message.attachmentUploadToken != null && Object.hasOwnProperty.call(message, "attachmentUploadToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.attachmentUploadToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AttachmentDataRef message, length delimited. Does not implicitly {@link google.chat.v1.AttachmentDataRef.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @static
                     * @param {google.chat.v1.IAttachmentDataRef} message AttachmentDataRef message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AttachmentDataRef.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AttachmentDataRef message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.AttachmentDataRef} AttachmentDataRef
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AttachmentDataRef.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.AttachmentDataRef();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.resourceName = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.attachmentUploadToken = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AttachmentDataRef message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.AttachmentDataRef} AttachmentDataRef
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AttachmentDataRef.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AttachmentDataRef message.
                     * @function verify
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AttachmentDataRef.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resourceName != null && message.hasOwnProperty("resourceName"))
                            if (!$util.isString(message.resourceName))
                                return "resourceName: string expected";
                        if (message.attachmentUploadToken != null && message.hasOwnProperty("attachmentUploadToken"))
                            if (!$util.isString(message.attachmentUploadToken))
                                return "attachmentUploadToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an AttachmentDataRef message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.AttachmentDataRef} AttachmentDataRef
                     */
                    AttachmentDataRef.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.AttachmentDataRef)
                            return object;
                        var message = new $root.google.chat.v1.AttachmentDataRef();
                        if (object.resourceName != null)
                            message.resourceName = String(object.resourceName);
                        if (object.attachmentUploadToken != null)
                            message.attachmentUploadToken = String(object.attachmentUploadToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AttachmentDataRef message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @static
                     * @param {google.chat.v1.AttachmentDataRef} message AttachmentDataRef
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AttachmentDataRef.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.resourceName = "";
                            object.attachmentUploadToken = "";
                        }
                        if (message.resourceName != null && message.hasOwnProperty("resourceName"))
                            object.resourceName = message.resourceName;
                        if (message.attachmentUploadToken != null && message.hasOwnProperty("attachmentUploadToken"))
                            object.attachmentUploadToken = message.attachmentUploadToken;
                        return object;
                    };
    
                    /**
                     * Converts this AttachmentDataRef to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AttachmentDataRef.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AttachmentDataRef
                     * @function getTypeUrl
                     * @memberof google.chat.v1.AttachmentDataRef
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AttachmentDataRef.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.AttachmentDataRef";
                    };
    
                    return AttachmentDataRef;
                })();
    
                v1.GetAttachmentRequest = (function() {
    
                    /**
                     * Properties of a GetAttachmentRequest.
                     * @memberof google.chat.v1
                     * @interface IGetAttachmentRequest
                     * @property {string|null} [name] GetAttachmentRequest name
                     */
    
                    /**
                     * Constructs a new GetAttachmentRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a GetAttachmentRequest.
                     * @implements IGetAttachmentRequest
                     * @constructor
                     * @param {google.chat.v1.IGetAttachmentRequest=} [properties] Properties to set
                     */
                    function GetAttachmentRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetAttachmentRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @instance
                     */
                    GetAttachmentRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetAttachmentRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @static
                     * @param {google.chat.v1.IGetAttachmentRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.GetAttachmentRequest} GetAttachmentRequest instance
                     */
                    GetAttachmentRequest.create = function create(properties) {
                        return new GetAttachmentRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetAttachmentRequest message. Does not implicitly {@link google.chat.v1.GetAttachmentRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @static
                     * @param {google.chat.v1.IGetAttachmentRequest} message GetAttachmentRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetAttachmentRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetAttachmentRequest message, length delimited. Does not implicitly {@link google.chat.v1.GetAttachmentRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @static
                     * @param {google.chat.v1.IGetAttachmentRequest} message GetAttachmentRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetAttachmentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetAttachmentRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.GetAttachmentRequest} GetAttachmentRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetAttachmentRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.GetAttachmentRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetAttachmentRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.GetAttachmentRequest} GetAttachmentRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetAttachmentRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetAttachmentRequest message.
                     * @function verify
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetAttachmentRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetAttachmentRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.GetAttachmentRequest} GetAttachmentRequest
                     */
                    GetAttachmentRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.GetAttachmentRequest)
                            return object;
                        var message = new $root.google.chat.v1.GetAttachmentRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetAttachmentRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @static
                     * @param {google.chat.v1.GetAttachmentRequest} message GetAttachmentRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetAttachmentRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetAttachmentRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetAttachmentRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetAttachmentRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.GetAttachmentRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetAttachmentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.GetAttachmentRequest";
                    };
    
                    return GetAttachmentRequest;
                })();
    
                v1.UploadAttachmentRequest = (function() {
    
                    /**
                     * Properties of an UploadAttachmentRequest.
                     * @memberof google.chat.v1
                     * @interface IUploadAttachmentRequest
                     * @property {string|null} [parent] UploadAttachmentRequest parent
                     * @property {string|null} [filename] UploadAttachmentRequest filename
                     */
    
                    /**
                     * Constructs a new UploadAttachmentRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents an UploadAttachmentRequest.
                     * @implements IUploadAttachmentRequest
                     * @constructor
                     * @param {google.chat.v1.IUploadAttachmentRequest=} [properties] Properties to set
                     */
                    function UploadAttachmentRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UploadAttachmentRequest parent.
                     * @member {string} parent
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @instance
                     */
                    UploadAttachmentRequest.prototype.parent = "";
    
                    /**
                     * UploadAttachmentRequest filename.
                     * @member {string} filename
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @instance
                     */
                    UploadAttachmentRequest.prototype.filename = "";
    
                    /**
                     * Creates a new UploadAttachmentRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @static
                     * @param {google.chat.v1.IUploadAttachmentRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.UploadAttachmentRequest} UploadAttachmentRequest instance
                     */
                    UploadAttachmentRequest.create = function create(properties) {
                        return new UploadAttachmentRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UploadAttachmentRequest message. Does not implicitly {@link google.chat.v1.UploadAttachmentRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @static
                     * @param {google.chat.v1.IUploadAttachmentRequest} message UploadAttachmentRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UploadAttachmentRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.filename != null && Object.hasOwnProperty.call(message, "filename"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.filename);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UploadAttachmentRequest message, length delimited. Does not implicitly {@link google.chat.v1.UploadAttachmentRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @static
                     * @param {google.chat.v1.IUploadAttachmentRequest} message UploadAttachmentRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UploadAttachmentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UploadAttachmentRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.UploadAttachmentRequest} UploadAttachmentRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UploadAttachmentRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.UploadAttachmentRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parent = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.filename = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UploadAttachmentRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.UploadAttachmentRequest} UploadAttachmentRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UploadAttachmentRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UploadAttachmentRequest message.
                     * @function verify
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UploadAttachmentRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.filename != null && message.hasOwnProperty("filename"))
                            if (!$util.isString(message.filename))
                                return "filename: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an UploadAttachmentRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.UploadAttachmentRequest} UploadAttachmentRequest
                     */
                    UploadAttachmentRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.UploadAttachmentRequest)
                            return object;
                        var message = new $root.google.chat.v1.UploadAttachmentRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.filename != null)
                            message.filename = String(object.filename);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UploadAttachmentRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @static
                     * @param {google.chat.v1.UploadAttachmentRequest} message UploadAttachmentRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UploadAttachmentRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.filename = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.filename != null && message.hasOwnProperty("filename"))
                            object.filename = message.filename;
                        return object;
                    };
    
                    /**
                     * Converts this UploadAttachmentRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UploadAttachmentRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for UploadAttachmentRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.UploadAttachmentRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    UploadAttachmentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.UploadAttachmentRequest";
                    };
    
                    return UploadAttachmentRequest;
                })();
    
                v1.UploadAttachmentResponse = (function() {
    
                    /**
                     * Properties of an UploadAttachmentResponse.
                     * @memberof google.chat.v1
                     * @interface IUploadAttachmentResponse
                     * @property {google.chat.v1.IAttachmentDataRef|null} [attachmentDataRef] UploadAttachmentResponse attachmentDataRef
                     */
    
                    /**
                     * Constructs a new UploadAttachmentResponse.
                     * @memberof google.chat.v1
                     * @classdesc Represents an UploadAttachmentResponse.
                     * @implements IUploadAttachmentResponse
                     * @constructor
                     * @param {google.chat.v1.IUploadAttachmentResponse=} [properties] Properties to set
                     */
                    function UploadAttachmentResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UploadAttachmentResponse attachmentDataRef.
                     * @member {google.chat.v1.IAttachmentDataRef|null|undefined} attachmentDataRef
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @instance
                     */
                    UploadAttachmentResponse.prototype.attachmentDataRef = null;
    
                    /**
                     * Creates a new UploadAttachmentResponse instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @static
                     * @param {google.chat.v1.IUploadAttachmentResponse=} [properties] Properties to set
                     * @returns {google.chat.v1.UploadAttachmentResponse} UploadAttachmentResponse instance
                     */
                    UploadAttachmentResponse.create = function create(properties) {
                        return new UploadAttachmentResponse(properties);
                    };
    
                    /**
                     * Encodes the specified UploadAttachmentResponse message. Does not implicitly {@link google.chat.v1.UploadAttachmentResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @static
                     * @param {google.chat.v1.IUploadAttachmentResponse} message UploadAttachmentResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UploadAttachmentResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.attachmentDataRef != null && Object.hasOwnProperty.call(message, "attachmentDataRef"))
                            $root.google.chat.v1.AttachmentDataRef.encode(message.attachmentDataRef, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UploadAttachmentResponse message, length delimited. Does not implicitly {@link google.chat.v1.UploadAttachmentResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @static
                     * @param {google.chat.v1.IUploadAttachmentResponse} message UploadAttachmentResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UploadAttachmentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UploadAttachmentResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.UploadAttachmentResponse} UploadAttachmentResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UploadAttachmentResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.UploadAttachmentResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.attachmentDataRef = $root.google.chat.v1.AttachmentDataRef.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UploadAttachmentResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.UploadAttachmentResponse} UploadAttachmentResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UploadAttachmentResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UploadAttachmentResponse message.
                     * @function verify
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UploadAttachmentResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.attachmentDataRef != null && message.hasOwnProperty("attachmentDataRef")) {
                            var error = $root.google.chat.v1.AttachmentDataRef.verify(message.attachmentDataRef);
                            if (error)
                                return "attachmentDataRef." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UploadAttachmentResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.UploadAttachmentResponse} UploadAttachmentResponse
                     */
                    UploadAttachmentResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.UploadAttachmentResponse)
                            return object;
                        var message = new $root.google.chat.v1.UploadAttachmentResponse();
                        if (object.attachmentDataRef != null) {
                            if (typeof object.attachmentDataRef !== "object")
                                throw TypeError(".google.chat.v1.UploadAttachmentResponse.attachmentDataRef: object expected");
                            message.attachmentDataRef = $root.google.chat.v1.AttachmentDataRef.fromObject(object.attachmentDataRef);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UploadAttachmentResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @static
                     * @param {google.chat.v1.UploadAttachmentResponse} message UploadAttachmentResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UploadAttachmentResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.attachmentDataRef = null;
                        if (message.attachmentDataRef != null && message.hasOwnProperty("attachmentDataRef"))
                            object.attachmentDataRef = $root.google.chat.v1.AttachmentDataRef.toObject(message.attachmentDataRef, options);
                        return object;
                    };
    
                    /**
                     * Converts this UploadAttachmentResponse to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UploadAttachmentResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for UploadAttachmentResponse
                     * @function getTypeUrl
                     * @memberof google.chat.v1.UploadAttachmentResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    UploadAttachmentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.UploadAttachmentResponse";
                    };
    
                    return UploadAttachmentResponse;
                })();
    
                v1.User = (function() {
    
                    /**
                     * Properties of a User.
                     * @memberof google.chat.v1
                     * @interface IUser
                     * @property {string|null} [name] User name
                     * @property {string|null} [displayName] User displayName
                     * @property {string|null} [domainId] User domainId
                     * @property {google.chat.v1.User.Type|null} [type] User type
                     * @property {boolean|null} [isAnonymous] User isAnonymous
                     */
    
                    /**
                     * Constructs a new User.
                     * @memberof google.chat.v1
                     * @classdesc Represents a User.
                     * @implements IUser
                     * @constructor
                     * @param {google.chat.v1.IUser=} [properties] Properties to set
                     */
                    function User(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * User name.
                     * @member {string} name
                     * @memberof google.chat.v1.User
                     * @instance
                     */
                    User.prototype.name = "";
    
                    /**
                     * User displayName.
                     * @member {string} displayName
                     * @memberof google.chat.v1.User
                     * @instance
                     */
                    User.prototype.displayName = "";
    
                    /**
                     * User domainId.
                     * @member {string} domainId
                     * @memberof google.chat.v1.User
                     * @instance
                     */
                    User.prototype.domainId = "";
    
                    /**
                     * User type.
                     * @member {google.chat.v1.User.Type} type
                     * @memberof google.chat.v1.User
                     * @instance
                     */
                    User.prototype.type = 0;
    
                    /**
                     * User isAnonymous.
                     * @member {boolean} isAnonymous
                     * @memberof google.chat.v1.User
                     * @instance
                     */
                    User.prototype.isAnonymous = false;
    
                    /**
                     * Creates a new User instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.User
                     * @static
                     * @param {google.chat.v1.IUser=} [properties] Properties to set
                     * @returns {google.chat.v1.User} User instance
                     */
                    User.create = function create(properties) {
                        return new User(properties);
                    };
    
                    /**
                     * Encodes the specified User message. Does not implicitly {@link google.chat.v1.User.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.User
                     * @static
                     * @param {google.chat.v1.IUser} message User message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    User.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                        if (message.domainId != null && Object.hasOwnProperty.call(message, "domainId"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.domainId);
                        if (message.isAnonymous != null && Object.hasOwnProperty.call(message, "isAnonymous"))
                            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isAnonymous);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified User message, length delimited. Does not implicitly {@link google.chat.v1.User.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.User
                     * @static
                     * @param {google.chat.v1.IUser} message User message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    User.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a User message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.User
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.User} User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    User.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.User();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.displayName = reader.string();
                                    break;
                                }
                            case 6: {
                                    message.domainId = reader.string();
                                    break;
                                }
                            case 5: {
                                    message.type = reader.int32();
                                    break;
                                }
                            case 7: {
                                    message.isAnonymous = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a User message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.User
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.User} User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    User.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a User message.
                     * @function verify
                     * @memberof google.chat.v1.User
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    User.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            if (!$util.isString(message.displayName))
                                return "displayName: string expected";
                        if (message.domainId != null && message.hasOwnProperty("domainId"))
                            if (!$util.isString(message.domainId))
                                return "domainId: string expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.isAnonymous != null && message.hasOwnProperty("isAnonymous"))
                            if (typeof message.isAnonymous !== "boolean")
                                return "isAnonymous: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a User message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.User
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.User} User
                     */
                    User.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.User)
                            return object;
                        var message = new $root.google.chat.v1.User();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.displayName != null)
                            message.displayName = String(object.displayName);
                        if (object.domainId != null)
                            message.domainId = String(object.domainId);
                        switch (object.type) {
                        default:
                            if (typeof object.type === "number") {
                                message.type = object.type;
                                break;
                            }
                            break;
                        case "TYPE_UNSPECIFIED":
                        case 0:
                            message.type = 0;
                            break;
                        case "HUMAN":
                        case 1:
                            message.type = 1;
                            break;
                        case "BOT":
                        case 2:
                            message.type = 2;
                            break;
                        }
                        if (object.isAnonymous != null)
                            message.isAnonymous = Boolean(object.isAnonymous);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a User message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.User
                     * @static
                     * @param {google.chat.v1.User} message User
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    User.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.displayName = "";
                            object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                            object.domainId = "";
                            object.isAnonymous = false;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            object.displayName = message.displayName;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.google.chat.v1.User.Type[message.type] === undefined ? message.type : $root.google.chat.v1.User.Type[message.type] : message.type;
                        if (message.domainId != null && message.hasOwnProperty("domainId"))
                            object.domainId = message.domainId;
                        if (message.isAnonymous != null && message.hasOwnProperty("isAnonymous"))
                            object.isAnonymous = message.isAnonymous;
                        return object;
                    };
    
                    /**
                     * Converts this User to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.User
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    User.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for User
                     * @function getTypeUrl
                     * @memberof google.chat.v1.User
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    User.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.User";
                    };
    
                    /**
                     * Type enum.
                     * @name google.chat.v1.User.Type
                     * @enum {number}
                     * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                     * @property {number} HUMAN=1 HUMAN value
                     * @property {number} BOT=2 BOT value
                     */
                    User.Type = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "HUMAN"] = 1;
                        values[valuesById[2] = "BOT"] = 2;
                        return values;
                    })();
    
                    return User;
                })();
    
                v1.ChatService = (function() {
    
                    /**
                     * Constructs a new ChatService service.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ChatService
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function ChatService(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (ChatService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ChatService;
    
                    /**
                     * Creates new ChatService service using the specified rpc implementation.
                     * @function create
                     * @memberof google.chat.v1.ChatService
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {ChatService} RPC service. Useful where requests and/or responses are streamed.
                     */
                    ChatService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|createMessage}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef CreateMessageCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Message} [response] Message
                     */
    
                    /**
                     * Calls CreateMessage.
                     * @function createMessage
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ICreateMessageRequest} request CreateMessageRequest message or plain object
                     * @param {google.chat.v1.ChatService.CreateMessageCallback} callback Node-style callback called with the error, if any, and Message
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.createMessage = function createMessage(request, callback) {
                        return this.rpcCall(createMessage, $root.google.chat.v1.CreateMessageRequest, $root.google.chat.v1.Message, request, callback);
                    }, "name", { value: "CreateMessage" });
    
                    /**
                     * Calls CreateMessage.
                     * @function createMessage
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ICreateMessageRequest} request CreateMessageRequest message or plain object
                     * @returns {Promise<google.chat.v1.Message>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|listMessages}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef ListMessagesCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.ListMessagesResponse} [response] ListMessagesResponse
                     */
    
                    /**
                     * Calls ListMessages.
                     * @function listMessages
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IListMessagesRequest} request ListMessagesRequest message or plain object
                     * @param {google.chat.v1.ChatService.ListMessagesCallback} callback Node-style callback called with the error, if any, and ListMessagesResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.listMessages = function listMessages(request, callback) {
                        return this.rpcCall(listMessages, $root.google.chat.v1.ListMessagesRequest, $root.google.chat.v1.ListMessagesResponse, request, callback);
                    }, "name", { value: "ListMessages" });
    
                    /**
                     * Calls ListMessages.
                     * @function listMessages
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IListMessagesRequest} request ListMessagesRequest message or plain object
                     * @returns {Promise<google.chat.v1.ListMessagesResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|listMemberships}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef ListMembershipsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.ListMembershipsResponse} [response] ListMembershipsResponse
                     */
    
                    /**
                     * Calls ListMemberships.
                     * @function listMemberships
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IListMembershipsRequest} request ListMembershipsRequest message or plain object
                     * @param {google.chat.v1.ChatService.ListMembershipsCallback} callback Node-style callback called with the error, if any, and ListMembershipsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.listMemberships = function listMemberships(request, callback) {
                        return this.rpcCall(listMemberships, $root.google.chat.v1.ListMembershipsRequest, $root.google.chat.v1.ListMembershipsResponse, request, callback);
                    }, "name", { value: "ListMemberships" });
    
                    /**
                     * Calls ListMemberships.
                     * @function listMemberships
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IListMembershipsRequest} request ListMembershipsRequest message or plain object
                     * @returns {Promise<google.chat.v1.ListMembershipsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|getMembership}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef GetMembershipCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Membership} [response] Membership
                     */
    
                    /**
                     * Calls GetMembership.
                     * @function getMembership
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetMembershipRequest} request GetMembershipRequest message or plain object
                     * @param {google.chat.v1.ChatService.GetMembershipCallback} callback Node-style callback called with the error, if any, and Membership
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.getMembership = function getMembership(request, callback) {
                        return this.rpcCall(getMembership, $root.google.chat.v1.GetMembershipRequest, $root.google.chat.v1.Membership, request, callback);
                    }, "name", { value: "GetMembership" });
    
                    /**
                     * Calls GetMembership.
                     * @function getMembership
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetMembershipRequest} request GetMembershipRequest message or plain object
                     * @returns {Promise<google.chat.v1.Membership>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|getMessage}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef GetMessageCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Message} [response] Message
                     */
    
                    /**
                     * Calls GetMessage.
                     * @function getMessage
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetMessageRequest} request GetMessageRequest message or plain object
                     * @param {google.chat.v1.ChatService.GetMessageCallback} callback Node-style callback called with the error, if any, and Message
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.getMessage = function getMessage(request, callback) {
                        return this.rpcCall(getMessage, $root.google.chat.v1.GetMessageRequest, $root.google.chat.v1.Message, request, callback);
                    }, "name", { value: "GetMessage" });
    
                    /**
                     * Calls GetMessage.
                     * @function getMessage
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetMessageRequest} request GetMessageRequest message or plain object
                     * @returns {Promise<google.chat.v1.Message>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|updateMessage}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef UpdateMessageCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Message} [response] Message
                     */
    
                    /**
                     * Calls UpdateMessage.
                     * @function updateMessage
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IUpdateMessageRequest} request UpdateMessageRequest message or plain object
                     * @param {google.chat.v1.ChatService.UpdateMessageCallback} callback Node-style callback called with the error, if any, and Message
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.updateMessage = function updateMessage(request, callback) {
                        return this.rpcCall(updateMessage, $root.google.chat.v1.UpdateMessageRequest, $root.google.chat.v1.Message, request, callback);
                    }, "name", { value: "UpdateMessage" });
    
                    /**
                     * Calls UpdateMessage.
                     * @function updateMessage
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IUpdateMessageRequest} request UpdateMessageRequest message or plain object
                     * @returns {Promise<google.chat.v1.Message>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|deleteMessage}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef DeleteMessageCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteMessage.
                     * @function deleteMessage
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IDeleteMessageRequest} request DeleteMessageRequest message or plain object
                     * @param {google.chat.v1.ChatService.DeleteMessageCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.deleteMessage = function deleteMessage(request, callback) {
                        return this.rpcCall(deleteMessage, $root.google.chat.v1.DeleteMessageRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteMessage" });
    
                    /**
                     * Calls DeleteMessage.
                     * @function deleteMessage
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IDeleteMessageRequest} request DeleteMessageRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|getAttachment}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef GetAttachmentCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Attachment} [response] Attachment
                     */
    
                    /**
                     * Calls GetAttachment.
                     * @function getAttachment
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetAttachmentRequest} request GetAttachmentRequest message or plain object
                     * @param {google.chat.v1.ChatService.GetAttachmentCallback} callback Node-style callback called with the error, if any, and Attachment
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.getAttachment = function getAttachment(request, callback) {
                        return this.rpcCall(getAttachment, $root.google.chat.v1.GetAttachmentRequest, $root.google.chat.v1.Attachment, request, callback);
                    }, "name", { value: "GetAttachment" });
    
                    /**
                     * Calls GetAttachment.
                     * @function getAttachment
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetAttachmentRequest} request GetAttachmentRequest message or plain object
                     * @returns {Promise<google.chat.v1.Attachment>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|uploadAttachment}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef UploadAttachmentCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.UploadAttachmentResponse} [response] UploadAttachmentResponse
                     */
    
                    /**
                     * Calls UploadAttachment.
                     * @function uploadAttachment
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IUploadAttachmentRequest} request UploadAttachmentRequest message or plain object
                     * @param {google.chat.v1.ChatService.UploadAttachmentCallback} callback Node-style callback called with the error, if any, and UploadAttachmentResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.uploadAttachment = function uploadAttachment(request, callback) {
                        return this.rpcCall(uploadAttachment, $root.google.chat.v1.UploadAttachmentRequest, $root.google.chat.v1.UploadAttachmentResponse, request, callback);
                    }, "name", { value: "UploadAttachment" });
    
                    /**
                     * Calls UploadAttachment.
                     * @function uploadAttachment
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IUploadAttachmentRequest} request UploadAttachmentRequest message or plain object
                     * @returns {Promise<google.chat.v1.UploadAttachmentResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|listSpaces}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef ListSpacesCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.ListSpacesResponse} [response] ListSpacesResponse
                     */
    
                    /**
                     * Calls ListSpaces.
                     * @function listSpaces
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IListSpacesRequest} request ListSpacesRequest message or plain object
                     * @param {google.chat.v1.ChatService.ListSpacesCallback} callback Node-style callback called with the error, if any, and ListSpacesResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.listSpaces = function listSpaces(request, callback) {
                        return this.rpcCall(listSpaces, $root.google.chat.v1.ListSpacesRequest, $root.google.chat.v1.ListSpacesResponse, request, callback);
                    }, "name", { value: "ListSpaces" });
    
                    /**
                     * Calls ListSpaces.
                     * @function listSpaces
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IListSpacesRequest} request ListSpacesRequest message or plain object
                     * @returns {Promise<google.chat.v1.ListSpacesResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|getSpace}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef GetSpaceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Space} [response] Space
                     */
    
                    /**
                     * Calls GetSpace.
                     * @function getSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetSpaceRequest} request GetSpaceRequest message or plain object
                     * @param {google.chat.v1.ChatService.GetSpaceCallback} callback Node-style callback called with the error, if any, and Space
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.getSpace = function getSpace(request, callback) {
                        return this.rpcCall(getSpace, $root.google.chat.v1.GetSpaceRequest, $root.google.chat.v1.Space, request, callback);
                    }, "name", { value: "GetSpace" });
    
                    /**
                     * Calls GetSpace.
                     * @function getSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetSpaceRequest} request GetSpaceRequest message or plain object
                     * @returns {Promise<google.chat.v1.Space>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|createSpace}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef CreateSpaceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Space} [response] Space
                     */
    
                    /**
                     * Calls CreateSpace.
                     * @function createSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ICreateSpaceRequest} request CreateSpaceRequest message or plain object
                     * @param {google.chat.v1.ChatService.CreateSpaceCallback} callback Node-style callback called with the error, if any, and Space
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.createSpace = function createSpace(request, callback) {
                        return this.rpcCall(createSpace, $root.google.chat.v1.CreateSpaceRequest, $root.google.chat.v1.Space, request, callback);
                    }, "name", { value: "CreateSpace" });
    
                    /**
                     * Calls CreateSpace.
                     * @function createSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ICreateSpaceRequest} request CreateSpaceRequest message or plain object
                     * @returns {Promise<google.chat.v1.Space>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|setUpSpace}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef SetUpSpaceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Space} [response] Space
                     */
    
                    /**
                     * Calls SetUpSpace.
                     * @function setUpSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ISetUpSpaceRequest} request SetUpSpaceRequest message or plain object
                     * @param {google.chat.v1.ChatService.SetUpSpaceCallback} callback Node-style callback called with the error, if any, and Space
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.setUpSpace = function setUpSpace(request, callback) {
                        return this.rpcCall(setUpSpace, $root.google.chat.v1.SetUpSpaceRequest, $root.google.chat.v1.Space, request, callback);
                    }, "name", { value: "SetUpSpace" });
    
                    /**
                     * Calls SetUpSpace.
                     * @function setUpSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ISetUpSpaceRequest} request SetUpSpaceRequest message or plain object
                     * @returns {Promise<google.chat.v1.Space>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|updateSpace}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef UpdateSpaceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Space} [response] Space
                     */
    
                    /**
                     * Calls UpdateSpace.
                     * @function updateSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IUpdateSpaceRequest} request UpdateSpaceRequest message or plain object
                     * @param {google.chat.v1.ChatService.UpdateSpaceCallback} callback Node-style callback called with the error, if any, and Space
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.updateSpace = function updateSpace(request, callback) {
                        return this.rpcCall(updateSpace, $root.google.chat.v1.UpdateSpaceRequest, $root.google.chat.v1.Space, request, callback);
                    }, "name", { value: "UpdateSpace" });
    
                    /**
                     * Calls UpdateSpace.
                     * @function updateSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IUpdateSpaceRequest} request UpdateSpaceRequest message or plain object
                     * @returns {Promise<google.chat.v1.Space>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|deleteSpace}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef DeleteSpaceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteSpace.
                     * @function deleteSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IDeleteSpaceRequest} request DeleteSpaceRequest message or plain object
                     * @param {google.chat.v1.ChatService.DeleteSpaceCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.deleteSpace = function deleteSpace(request, callback) {
                        return this.rpcCall(deleteSpace, $root.google.chat.v1.DeleteSpaceRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteSpace" });
    
                    /**
                     * Calls DeleteSpace.
                     * @function deleteSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IDeleteSpaceRequest} request DeleteSpaceRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|completeImportSpace}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef CompleteImportSpaceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.CompleteImportSpaceResponse} [response] CompleteImportSpaceResponse
                     */
    
                    /**
                     * Calls CompleteImportSpace.
                     * @function completeImportSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ICompleteImportSpaceRequest} request CompleteImportSpaceRequest message or plain object
                     * @param {google.chat.v1.ChatService.CompleteImportSpaceCallback} callback Node-style callback called with the error, if any, and CompleteImportSpaceResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.completeImportSpace = function completeImportSpace(request, callback) {
                        return this.rpcCall(completeImportSpace, $root.google.chat.v1.CompleteImportSpaceRequest, $root.google.chat.v1.CompleteImportSpaceResponse, request, callback);
                    }, "name", { value: "CompleteImportSpace" });
    
                    /**
                     * Calls CompleteImportSpace.
                     * @function completeImportSpace
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ICompleteImportSpaceRequest} request CompleteImportSpaceRequest message or plain object
                     * @returns {Promise<google.chat.v1.CompleteImportSpaceResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|findDirectMessage}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef FindDirectMessageCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Space} [response] Space
                     */
    
                    /**
                     * Calls FindDirectMessage.
                     * @function findDirectMessage
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IFindDirectMessageRequest} request FindDirectMessageRequest message or plain object
                     * @param {google.chat.v1.ChatService.FindDirectMessageCallback} callback Node-style callback called with the error, if any, and Space
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.findDirectMessage = function findDirectMessage(request, callback) {
                        return this.rpcCall(findDirectMessage, $root.google.chat.v1.FindDirectMessageRequest, $root.google.chat.v1.Space, request, callback);
                    }, "name", { value: "FindDirectMessage" });
    
                    /**
                     * Calls FindDirectMessage.
                     * @function findDirectMessage
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IFindDirectMessageRequest} request FindDirectMessageRequest message or plain object
                     * @returns {Promise<google.chat.v1.Space>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|createMembership}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef CreateMembershipCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Membership} [response] Membership
                     */
    
                    /**
                     * Calls CreateMembership.
                     * @function createMembership
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ICreateMembershipRequest} request CreateMembershipRequest message or plain object
                     * @param {google.chat.v1.ChatService.CreateMembershipCallback} callback Node-style callback called with the error, if any, and Membership
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.createMembership = function createMembership(request, callback) {
                        return this.rpcCall(createMembership, $root.google.chat.v1.CreateMembershipRequest, $root.google.chat.v1.Membership, request, callback);
                    }, "name", { value: "CreateMembership" });
    
                    /**
                     * Calls CreateMembership.
                     * @function createMembership
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ICreateMembershipRequest} request CreateMembershipRequest message or plain object
                     * @returns {Promise<google.chat.v1.Membership>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|updateMembership}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef UpdateMembershipCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Membership} [response] Membership
                     */
    
                    /**
                     * Calls UpdateMembership.
                     * @function updateMembership
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IUpdateMembershipRequest} request UpdateMembershipRequest message or plain object
                     * @param {google.chat.v1.ChatService.UpdateMembershipCallback} callback Node-style callback called with the error, if any, and Membership
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.updateMembership = function updateMembership(request, callback) {
                        return this.rpcCall(updateMembership, $root.google.chat.v1.UpdateMembershipRequest, $root.google.chat.v1.Membership, request, callback);
                    }, "name", { value: "UpdateMembership" });
    
                    /**
                     * Calls UpdateMembership.
                     * @function updateMembership
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IUpdateMembershipRequest} request UpdateMembershipRequest message or plain object
                     * @returns {Promise<google.chat.v1.Membership>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|deleteMembership}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef DeleteMembershipCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Membership} [response] Membership
                     */
    
                    /**
                     * Calls DeleteMembership.
                     * @function deleteMembership
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IDeleteMembershipRequest} request DeleteMembershipRequest message or plain object
                     * @param {google.chat.v1.ChatService.DeleteMembershipCallback} callback Node-style callback called with the error, if any, and Membership
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.deleteMembership = function deleteMembership(request, callback) {
                        return this.rpcCall(deleteMembership, $root.google.chat.v1.DeleteMembershipRequest, $root.google.chat.v1.Membership, request, callback);
                    }, "name", { value: "DeleteMembership" });
    
                    /**
                     * Calls DeleteMembership.
                     * @function deleteMembership
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IDeleteMembershipRequest} request DeleteMembershipRequest message or plain object
                     * @returns {Promise<google.chat.v1.Membership>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|createReaction}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef CreateReactionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.Reaction} [response] Reaction
                     */
    
                    /**
                     * Calls CreateReaction.
                     * @function createReaction
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ICreateReactionRequest} request CreateReactionRequest message or plain object
                     * @param {google.chat.v1.ChatService.CreateReactionCallback} callback Node-style callback called with the error, if any, and Reaction
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.createReaction = function createReaction(request, callback) {
                        return this.rpcCall(createReaction, $root.google.chat.v1.CreateReactionRequest, $root.google.chat.v1.Reaction, request, callback);
                    }, "name", { value: "CreateReaction" });
    
                    /**
                     * Calls CreateReaction.
                     * @function createReaction
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.ICreateReactionRequest} request CreateReactionRequest message or plain object
                     * @returns {Promise<google.chat.v1.Reaction>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|listReactions}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef ListReactionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.ListReactionsResponse} [response] ListReactionsResponse
                     */
    
                    /**
                     * Calls ListReactions.
                     * @function listReactions
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IListReactionsRequest} request ListReactionsRequest message or plain object
                     * @param {google.chat.v1.ChatService.ListReactionsCallback} callback Node-style callback called with the error, if any, and ListReactionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.listReactions = function listReactions(request, callback) {
                        return this.rpcCall(listReactions, $root.google.chat.v1.ListReactionsRequest, $root.google.chat.v1.ListReactionsResponse, request, callback);
                    }, "name", { value: "ListReactions" });
    
                    /**
                     * Calls ListReactions.
                     * @function listReactions
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IListReactionsRequest} request ListReactionsRequest message or plain object
                     * @returns {Promise<google.chat.v1.ListReactionsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|deleteReaction}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef DeleteReactionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteReaction.
                     * @function deleteReaction
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IDeleteReactionRequest} request DeleteReactionRequest message or plain object
                     * @param {google.chat.v1.ChatService.DeleteReactionCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.deleteReaction = function deleteReaction(request, callback) {
                        return this.rpcCall(deleteReaction, $root.google.chat.v1.DeleteReactionRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteReaction" });
    
                    /**
                     * Calls DeleteReaction.
                     * @function deleteReaction
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IDeleteReactionRequest} request DeleteReactionRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|getSpaceReadState}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef GetSpaceReadStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.SpaceReadState} [response] SpaceReadState
                     */
    
                    /**
                     * Calls GetSpaceReadState.
                     * @function getSpaceReadState
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetSpaceReadStateRequest} request GetSpaceReadStateRequest message or plain object
                     * @param {google.chat.v1.ChatService.GetSpaceReadStateCallback} callback Node-style callback called with the error, if any, and SpaceReadState
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.getSpaceReadState = function getSpaceReadState(request, callback) {
                        return this.rpcCall(getSpaceReadState, $root.google.chat.v1.GetSpaceReadStateRequest, $root.google.chat.v1.SpaceReadState, request, callback);
                    }, "name", { value: "GetSpaceReadState" });
    
                    /**
                     * Calls GetSpaceReadState.
                     * @function getSpaceReadState
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetSpaceReadStateRequest} request GetSpaceReadStateRequest message or plain object
                     * @returns {Promise<google.chat.v1.SpaceReadState>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|updateSpaceReadState}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef UpdateSpaceReadStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.SpaceReadState} [response] SpaceReadState
                     */
    
                    /**
                     * Calls UpdateSpaceReadState.
                     * @function updateSpaceReadState
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IUpdateSpaceReadStateRequest} request UpdateSpaceReadStateRequest message or plain object
                     * @param {google.chat.v1.ChatService.UpdateSpaceReadStateCallback} callback Node-style callback called with the error, if any, and SpaceReadState
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.updateSpaceReadState = function updateSpaceReadState(request, callback) {
                        return this.rpcCall(updateSpaceReadState, $root.google.chat.v1.UpdateSpaceReadStateRequest, $root.google.chat.v1.SpaceReadState, request, callback);
                    }, "name", { value: "UpdateSpaceReadState" });
    
                    /**
                     * Calls UpdateSpaceReadState.
                     * @function updateSpaceReadState
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IUpdateSpaceReadStateRequest} request UpdateSpaceReadStateRequest message or plain object
                     * @returns {Promise<google.chat.v1.SpaceReadState>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.chat.v1.ChatService|getThreadReadState}.
                     * @memberof google.chat.v1.ChatService
                     * @typedef GetThreadReadStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.chat.v1.ThreadReadState} [response] ThreadReadState
                     */
    
                    /**
                     * Calls GetThreadReadState.
                     * @function getThreadReadState
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetThreadReadStateRequest} request GetThreadReadStateRequest message or plain object
                     * @param {google.chat.v1.ChatService.GetThreadReadStateCallback} callback Node-style callback called with the error, if any, and ThreadReadState
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ChatService.prototype.getThreadReadState = function getThreadReadState(request, callback) {
                        return this.rpcCall(getThreadReadState, $root.google.chat.v1.GetThreadReadStateRequest, $root.google.chat.v1.ThreadReadState, request, callback);
                    }, "name", { value: "GetThreadReadState" });
    
                    /**
                     * Calls GetThreadReadState.
                     * @function getThreadReadState
                     * @memberof google.chat.v1.ChatService
                     * @instance
                     * @param {google.chat.v1.IGetThreadReadStateRequest} request GetThreadReadStateRequest message or plain object
                     * @returns {Promise<google.chat.v1.ThreadReadState>} Promise
                     * @variation 2
                     */
    
                    return ChatService;
                })();
    
                v1.Membership = (function() {
    
                    /**
                     * Properties of a Membership.
                     * @memberof google.chat.v1
                     * @interface IMembership
                     * @property {string|null} [name] Membership name
                     * @property {google.chat.v1.Membership.MembershipState|null} [state] Membership state
                     * @property {google.chat.v1.Membership.MembershipRole|null} [role] Membership role
                     * @property {google.chat.v1.IUser|null} [member] Membership member
                     * @property {google.chat.v1.IGroup|null} [groupMember] Membership groupMember
                     * @property {google.protobuf.ITimestamp|null} [createTime] Membership createTime
                     * @property {google.protobuf.ITimestamp|null} [deleteTime] Membership deleteTime
                     */
    
                    /**
                     * Constructs a new Membership.
                     * @memberof google.chat.v1
                     * @classdesc Represents a Membership.
                     * @implements IMembership
                     * @constructor
                     * @param {google.chat.v1.IMembership=} [properties] Properties to set
                     */
                    function Membership(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Membership name.
                     * @member {string} name
                     * @memberof google.chat.v1.Membership
                     * @instance
                     */
                    Membership.prototype.name = "";
    
                    /**
                     * Membership state.
                     * @member {google.chat.v1.Membership.MembershipState} state
                     * @memberof google.chat.v1.Membership
                     * @instance
                     */
                    Membership.prototype.state = 0;
    
                    /**
                     * Membership role.
                     * @member {google.chat.v1.Membership.MembershipRole} role
                     * @memberof google.chat.v1.Membership
                     * @instance
                     */
                    Membership.prototype.role = 0;
    
                    /**
                     * Membership member.
                     * @member {google.chat.v1.IUser|null|undefined} member
                     * @memberof google.chat.v1.Membership
                     * @instance
                     */
                    Membership.prototype.member = null;
    
                    /**
                     * Membership groupMember.
                     * @member {google.chat.v1.IGroup|null|undefined} groupMember
                     * @memberof google.chat.v1.Membership
                     * @instance
                     */
                    Membership.prototype.groupMember = null;
    
                    /**
                     * Membership createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof google.chat.v1.Membership
                     * @instance
                     */
                    Membership.prototype.createTime = null;
    
                    /**
                     * Membership deleteTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} deleteTime
                     * @memberof google.chat.v1.Membership
                     * @instance
                     */
                    Membership.prototype.deleteTime = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Membership memberType.
                     * @member {"member"|"groupMember"|undefined} memberType
                     * @memberof google.chat.v1.Membership
                     * @instance
                     */
                    Object.defineProperty(Membership.prototype, "memberType", {
                        get: $util.oneOfGetter($oneOfFields = ["member", "groupMember"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Membership instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.Membership
                     * @static
                     * @param {google.chat.v1.IMembership=} [properties] Properties to set
                     * @returns {google.chat.v1.Membership} Membership instance
                     */
                    Membership.create = function create(properties) {
                        return new Membership(properties);
                    };
    
                    /**
                     * Encodes the specified Membership message. Does not implicitly {@link google.chat.v1.Membership.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.Membership
                     * @static
                     * @param {google.chat.v1.IMembership} message Membership message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Membership.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
                        if (message.member != null && Object.hasOwnProperty.call(message, "member"))
                            $root.google.chat.v1.User.encode(message.member, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.groupMember != null && Object.hasOwnProperty.call(message, "groupMember"))
                            $root.google.chat.v1.Group.encode(message.groupMember, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.role);
                        if (message.deleteTime != null && Object.hasOwnProperty.call(message, "deleteTime"))
                            $root.google.protobuf.Timestamp.encode(message.deleteTime, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Membership message, length delimited. Does not implicitly {@link google.chat.v1.Membership.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.Membership
                     * @static
                     * @param {google.chat.v1.IMembership} message Membership message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Membership.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Membership message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.Membership
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.Membership} Membership
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Membership.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Membership();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.state = reader.int32();
                                    break;
                                }
                            case 7: {
                                    message.role = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.member = $root.google.chat.v1.User.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.groupMember = $root.google.chat.v1.Group.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 8: {
                                    message.deleteTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Membership message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.Membership
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.Membership} Membership
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Membership.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Membership message.
                     * @function verify
                     * @memberof google.chat.v1.Membership
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Membership.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.role != null && message.hasOwnProperty("role"))
                            switch (message.role) {
                            default:
                                return "role: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.member != null && message.hasOwnProperty("member")) {
                            properties.memberType = 1;
                            {
                                var error = $root.google.chat.v1.User.verify(message.member);
                                if (error)
                                    return "member." + error;
                            }
                        }
                        if (message.groupMember != null && message.hasOwnProperty("groupMember")) {
                            if (properties.memberType === 1)
                                return "memberType: multiple values";
                            properties.memberType = 1;
                            {
                                var error = $root.google.chat.v1.Group.verify(message.groupMember);
                                if (error)
                                    return "groupMember." + error;
                            }
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.deleteTime != null && message.hasOwnProperty("deleteTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.deleteTime);
                            if (error)
                                return "deleteTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Membership message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.Membership
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.Membership} Membership
                     */
                    Membership.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.Membership)
                            return object;
                        var message = new $root.google.chat.v1.Membership();
                        if (object.name != null)
                            message.name = String(object.name);
                        switch (object.state) {
                        default:
                            if (typeof object.state === "number") {
                                message.state = object.state;
                                break;
                            }
                            break;
                        case "MEMBERSHIP_STATE_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "JOINED":
                        case 1:
                            message.state = 1;
                            break;
                        case "INVITED":
                        case 2:
                            message.state = 2;
                            break;
                        case "NOT_A_MEMBER":
                        case 3:
                            message.state = 3;
                            break;
                        }
                        switch (object.role) {
                        default:
                            if (typeof object.role === "number") {
                                message.role = object.role;
                                break;
                            }
                            break;
                        case "MEMBERSHIP_ROLE_UNSPECIFIED":
                        case 0:
                            message.role = 0;
                            break;
                        case "ROLE_MEMBER":
                        case 1:
                            message.role = 1;
                            break;
                        case "ROLE_MANAGER":
                        case 2:
                            message.role = 2;
                            break;
                        }
                        if (object.member != null) {
                            if (typeof object.member !== "object")
                                throw TypeError(".google.chat.v1.Membership.member: object expected");
                            message.member = $root.google.chat.v1.User.fromObject(object.member);
                        }
                        if (object.groupMember != null) {
                            if (typeof object.groupMember !== "object")
                                throw TypeError(".google.chat.v1.Membership.groupMember: object expected");
                            message.groupMember = $root.google.chat.v1.Group.fromObject(object.groupMember);
                        }
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".google.chat.v1.Membership.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.deleteTime != null) {
                            if (typeof object.deleteTime !== "object")
                                throw TypeError(".google.chat.v1.Membership.deleteTime: object expected");
                            message.deleteTime = $root.google.protobuf.Timestamp.fromObject(object.deleteTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Membership message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.Membership
                     * @static
                     * @param {google.chat.v1.Membership} message Membership
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Membership.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.state = options.enums === String ? "MEMBERSHIP_STATE_UNSPECIFIED" : 0;
                            object.createTime = null;
                            object.role = options.enums === String ? "MEMBERSHIP_ROLE_UNSPECIFIED" : 0;
                            object.deleteTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.google.chat.v1.Membership.MembershipState[message.state] === undefined ? message.state : $root.google.chat.v1.Membership.MembershipState[message.state] : message.state;
                        if (message.member != null && message.hasOwnProperty("member")) {
                            object.member = $root.google.chat.v1.User.toObject(message.member, options);
                            if (options.oneofs)
                                object.memberType = "member";
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.groupMember != null && message.hasOwnProperty("groupMember")) {
                            object.groupMember = $root.google.chat.v1.Group.toObject(message.groupMember, options);
                            if (options.oneofs)
                                object.memberType = "groupMember";
                        }
                        if (message.role != null && message.hasOwnProperty("role"))
                            object.role = options.enums === String ? $root.google.chat.v1.Membership.MembershipRole[message.role] === undefined ? message.role : $root.google.chat.v1.Membership.MembershipRole[message.role] : message.role;
                        if (message.deleteTime != null && message.hasOwnProperty("deleteTime"))
                            object.deleteTime = $root.google.protobuf.Timestamp.toObject(message.deleteTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this Membership to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.Membership
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Membership.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Membership
                     * @function getTypeUrl
                     * @memberof google.chat.v1.Membership
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Membership.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.Membership";
                    };
    
                    /**
                     * MembershipState enum.
                     * @name google.chat.v1.Membership.MembershipState
                     * @enum {number}
                     * @property {number} MEMBERSHIP_STATE_UNSPECIFIED=0 MEMBERSHIP_STATE_UNSPECIFIED value
                     * @property {number} JOINED=1 JOINED value
                     * @property {number} INVITED=2 INVITED value
                     * @property {number} NOT_A_MEMBER=3 NOT_A_MEMBER value
                     */
                    Membership.MembershipState = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "MEMBERSHIP_STATE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "JOINED"] = 1;
                        values[valuesById[2] = "INVITED"] = 2;
                        values[valuesById[3] = "NOT_A_MEMBER"] = 3;
                        return values;
                    })();
    
                    /**
                     * MembershipRole enum.
                     * @name google.chat.v1.Membership.MembershipRole
                     * @enum {number}
                     * @property {number} MEMBERSHIP_ROLE_UNSPECIFIED=0 MEMBERSHIP_ROLE_UNSPECIFIED value
                     * @property {number} ROLE_MEMBER=1 ROLE_MEMBER value
                     * @property {number} ROLE_MANAGER=2 ROLE_MANAGER value
                     */
                    Membership.MembershipRole = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "MEMBERSHIP_ROLE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ROLE_MEMBER"] = 1;
                        values[valuesById[2] = "ROLE_MANAGER"] = 2;
                        return values;
                    })();
    
                    return Membership;
                })();
    
                v1.CreateMembershipRequest = (function() {
    
                    /**
                     * Properties of a CreateMembershipRequest.
                     * @memberof google.chat.v1
                     * @interface ICreateMembershipRequest
                     * @property {string|null} [parent] CreateMembershipRequest parent
                     * @property {google.chat.v1.IMembership|null} [membership] CreateMembershipRequest membership
                     */
    
                    /**
                     * Constructs a new CreateMembershipRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a CreateMembershipRequest.
                     * @implements ICreateMembershipRequest
                     * @constructor
                     * @param {google.chat.v1.ICreateMembershipRequest=} [properties] Properties to set
                     */
                    function CreateMembershipRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateMembershipRequest parent.
                     * @member {string} parent
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @instance
                     */
                    CreateMembershipRequest.prototype.parent = "";
    
                    /**
                     * CreateMembershipRequest membership.
                     * @member {google.chat.v1.IMembership|null|undefined} membership
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @instance
                     */
                    CreateMembershipRequest.prototype.membership = null;
    
                    /**
                     * Creates a new CreateMembershipRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @static
                     * @param {google.chat.v1.ICreateMembershipRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.CreateMembershipRequest} CreateMembershipRequest instance
                     */
                    CreateMembershipRequest.create = function create(properties) {
                        return new CreateMembershipRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateMembershipRequest message. Does not implicitly {@link google.chat.v1.CreateMembershipRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @static
                     * @param {google.chat.v1.ICreateMembershipRequest} message CreateMembershipRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateMembershipRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.membership != null && Object.hasOwnProperty.call(message, "membership"))
                            $root.google.chat.v1.Membership.encode(message.membership, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateMembershipRequest message, length delimited. Does not implicitly {@link google.chat.v1.CreateMembershipRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @static
                     * @param {google.chat.v1.ICreateMembershipRequest} message CreateMembershipRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateMembershipRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateMembershipRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.CreateMembershipRequest} CreateMembershipRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateMembershipRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.CreateMembershipRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parent = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.membership = $root.google.chat.v1.Membership.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateMembershipRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.CreateMembershipRequest} CreateMembershipRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateMembershipRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateMembershipRequest message.
                     * @function verify
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateMembershipRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.membership != null && message.hasOwnProperty("membership")) {
                            var error = $root.google.chat.v1.Membership.verify(message.membership);
                            if (error)
                                return "membership." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CreateMembershipRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.CreateMembershipRequest} CreateMembershipRequest
                     */
                    CreateMembershipRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.CreateMembershipRequest)
                            return object;
                        var message = new $root.google.chat.v1.CreateMembershipRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.membership != null) {
                            if (typeof object.membership !== "object")
                                throw TypeError(".google.chat.v1.CreateMembershipRequest.membership: object expected");
                            message.membership = $root.google.chat.v1.Membership.fromObject(object.membership);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateMembershipRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @static
                     * @param {google.chat.v1.CreateMembershipRequest} message CreateMembershipRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateMembershipRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.membership = null;
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.membership != null && message.hasOwnProperty("membership"))
                            object.membership = $root.google.chat.v1.Membership.toObject(message.membership, options);
                        return object;
                    };
    
                    /**
                     * Converts this CreateMembershipRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateMembershipRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CreateMembershipRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.CreateMembershipRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CreateMembershipRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.CreateMembershipRequest";
                    };
    
                    return CreateMembershipRequest;
                })();
    
                v1.UpdateMembershipRequest = (function() {
    
                    /**
                     * Properties of an UpdateMembershipRequest.
                     * @memberof google.chat.v1
                     * @interface IUpdateMembershipRequest
                     * @property {google.chat.v1.IMembership|null} [membership] UpdateMembershipRequest membership
                     * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateMembershipRequest updateMask
                     */
    
                    /**
                     * Constructs a new UpdateMembershipRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents an UpdateMembershipRequest.
                     * @implements IUpdateMembershipRequest
                     * @constructor
                     * @param {google.chat.v1.IUpdateMembershipRequest=} [properties] Properties to set
                     */
                    function UpdateMembershipRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateMembershipRequest membership.
                     * @member {google.chat.v1.IMembership|null|undefined} membership
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @instance
                     */
                    UpdateMembershipRequest.prototype.membership = null;
    
                    /**
                     * UpdateMembershipRequest updateMask.
                     * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @instance
                     */
                    UpdateMembershipRequest.prototype.updateMask = null;
    
                    /**
                     * Creates a new UpdateMembershipRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @static
                     * @param {google.chat.v1.IUpdateMembershipRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.UpdateMembershipRequest} UpdateMembershipRequest instance
                     */
                    UpdateMembershipRequest.create = function create(properties) {
                        return new UpdateMembershipRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateMembershipRequest message. Does not implicitly {@link google.chat.v1.UpdateMembershipRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @static
                     * @param {google.chat.v1.IUpdateMembershipRequest} message UpdateMembershipRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateMembershipRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.membership != null && Object.hasOwnProperty.call(message, "membership"))
                            $root.google.chat.v1.Membership.encode(message.membership, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                            $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateMembershipRequest message, length delimited. Does not implicitly {@link google.chat.v1.UpdateMembershipRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @static
                     * @param {google.chat.v1.IUpdateMembershipRequest} message UpdateMembershipRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateMembershipRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateMembershipRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.UpdateMembershipRequest} UpdateMembershipRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateMembershipRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.UpdateMembershipRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.membership = $root.google.chat.v1.Membership.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateMembershipRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.UpdateMembershipRequest} UpdateMembershipRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateMembershipRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateMembershipRequest message.
                     * @function verify
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateMembershipRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.membership != null && message.hasOwnProperty("membership")) {
                            var error = $root.google.chat.v1.Membership.verify(message.membership);
                            if (error)
                                return "membership." + error;
                        }
                        if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                            if (error)
                                return "updateMask." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdateMembershipRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.UpdateMembershipRequest} UpdateMembershipRequest
                     */
                    UpdateMembershipRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.UpdateMembershipRequest)
                            return object;
                        var message = new $root.google.chat.v1.UpdateMembershipRequest();
                        if (object.membership != null) {
                            if (typeof object.membership !== "object")
                                throw TypeError(".google.chat.v1.UpdateMembershipRequest.membership: object expected");
                            message.membership = $root.google.chat.v1.Membership.fromObject(object.membership);
                        }
                        if (object.updateMask != null) {
                            if (typeof object.updateMask !== "object")
                                throw TypeError(".google.chat.v1.UpdateMembershipRequest.updateMask: object expected");
                            message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateMembershipRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @static
                     * @param {google.chat.v1.UpdateMembershipRequest} message UpdateMembershipRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateMembershipRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.membership = null;
                            object.updateMask = null;
                        }
                        if (message.membership != null && message.hasOwnProperty("membership"))
                            object.membership = $root.google.chat.v1.Membership.toObject(message.membership, options);
                        if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                            object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                        return object;
                    };
    
                    /**
                     * Converts this UpdateMembershipRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateMembershipRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for UpdateMembershipRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.UpdateMembershipRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    UpdateMembershipRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.UpdateMembershipRequest";
                    };
    
                    return UpdateMembershipRequest;
                })();
    
                v1.ListMembershipsRequest = (function() {
    
                    /**
                     * Properties of a ListMembershipsRequest.
                     * @memberof google.chat.v1
                     * @interface IListMembershipsRequest
                     * @property {string|null} [parent] ListMembershipsRequest parent
                     * @property {number|null} [pageSize] ListMembershipsRequest pageSize
                     * @property {string|null} [pageToken] ListMembershipsRequest pageToken
                     * @property {string|null} [filter] ListMembershipsRequest filter
                     * @property {boolean|null} [showGroups] ListMembershipsRequest showGroups
                     * @property {boolean|null} [showInvited] ListMembershipsRequest showInvited
                     */
    
                    /**
                     * Constructs a new ListMembershipsRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ListMembershipsRequest.
                     * @implements IListMembershipsRequest
                     * @constructor
                     * @param {google.chat.v1.IListMembershipsRequest=} [properties] Properties to set
                     */
                    function ListMembershipsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListMembershipsRequest parent.
                     * @member {string} parent
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @instance
                     */
                    ListMembershipsRequest.prototype.parent = "";
    
                    /**
                     * ListMembershipsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @instance
                     */
                    ListMembershipsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListMembershipsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @instance
                     */
                    ListMembershipsRequest.prototype.pageToken = "";
    
                    /**
                     * ListMembershipsRequest filter.
                     * @member {string} filter
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @instance
                     */
                    ListMembershipsRequest.prototype.filter = "";
    
                    /**
                     * ListMembershipsRequest showGroups.
                     * @member {boolean} showGroups
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @instance
                     */
                    ListMembershipsRequest.prototype.showGroups = false;
    
                    /**
                     * ListMembershipsRequest showInvited.
                     * @member {boolean} showInvited
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @instance
                     */
                    ListMembershipsRequest.prototype.showInvited = false;
    
                    /**
                     * Creates a new ListMembershipsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @static
                     * @param {google.chat.v1.IListMembershipsRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.ListMembershipsRequest} ListMembershipsRequest instance
                     */
                    ListMembershipsRequest.create = function create(properties) {
                        return new ListMembershipsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListMembershipsRequest message. Does not implicitly {@link google.chat.v1.ListMembershipsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @static
                     * @param {google.chat.v1.IListMembershipsRequest} message ListMembershipsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListMembershipsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.filter);
                        if (message.showGroups != null && Object.hasOwnProperty.call(message, "showGroups"))
                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.showGroups);
                        if (message.showInvited != null && Object.hasOwnProperty.call(message, "showInvited"))
                            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.showInvited);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListMembershipsRequest message, length delimited. Does not implicitly {@link google.chat.v1.ListMembershipsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @static
                     * @param {google.chat.v1.IListMembershipsRequest} message ListMembershipsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListMembershipsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListMembershipsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ListMembershipsRequest} ListMembershipsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListMembershipsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ListMembershipsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parent = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.pageSize = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.pageToken = reader.string();
                                    break;
                                }
                            case 5: {
                                    message.filter = reader.string();
                                    break;
                                }
                            case 6: {
                                    message.showGroups = reader.bool();
                                    break;
                                }
                            case 7: {
                                    message.showInvited = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListMembershipsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ListMembershipsRequest} ListMembershipsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListMembershipsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListMembershipsRequest message.
                     * @function verify
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListMembershipsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            if (!$util.isString(message.filter))
                                return "filter: string expected";
                        if (message.showGroups != null && message.hasOwnProperty("showGroups"))
                            if (typeof message.showGroups !== "boolean")
                                return "showGroups: boolean expected";
                        if (message.showInvited != null && message.hasOwnProperty("showInvited"))
                            if (typeof message.showInvited !== "boolean")
                                return "showInvited: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListMembershipsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ListMembershipsRequest} ListMembershipsRequest
                     */
                    ListMembershipsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ListMembershipsRequest)
                            return object;
                        var message = new $root.google.chat.v1.ListMembershipsRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        if (object.filter != null)
                            message.filter = String(object.filter);
                        if (object.showGroups != null)
                            message.showGroups = Boolean(object.showGroups);
                        if (object.showInvited != null)
                            message.showInvited = Boolean(object.showInvited);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListMembershipsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @static
                     * @param {google.chat.v1.ListMembershipsRequest} message ListMembershipsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListMembershipsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                            object.filter = "";
                            object.showGroups = false;
                            object.showInvited = false;
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            object.filter = message.filter;
                        if (message.showGroups != null && message.hasOwnProperty("showGroups"))
                            object.showGroups = message.showGroups;
                        if (message.showInvited != null && message.hasOwnProperty("showInvited"))
                            object.showInvited = message.showInvited;
                        return object;
                    };
    
                    /**
                     * Converts this ListMembershipsRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListMembershipsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ListMembershipsRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ListMembershipsRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ListMembershipsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ListMembershipsRequest";
                    };
    
                    return ListMembershipsRequest;
                })();
    
                v1.ListMembershipsResponse = (function() {
    
                    /**
                     * Properties of a ListMembershipsResponse.
                     * @memberof google.chat.v1
                     * @interface IListMembershipsResponse
                     * @property {Array.<google.chat.v1.IMembership>|null} [memberships] ListMembershipsResponse memberships
                     * @property {string|null} [nextPageToken] ListMembershipsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListMembershipsResponse.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ListMembershipsResponse.
                     * @implements IListMembershipsResponse
                     * @constructor
                     * @param {google.chat.v1.IListMembershipsResponse=} [properties] Properties to set
                     */
                    function ListMembershipsResponse(properties) {
                        this.memberships = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListMembershipsResponse memberships.
                     * @member {Array.<google.chat.v1.IMembership>} memberships
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @instance
                     */
                    ListMembershipsResponse.prototype.memberships = $util.emptyArray;
    
                    /**
                     * ListMembershipsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @instance
                     */
                    ListMembershipsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListMembershipsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @static
                     * @param {google.chat.v1.IListMembershipsResponse=} [properties] Properties to set
                     * @returns {google.chat.v1.ListMembershipsResponse} ListMembershipsResponse instance
                     */
                    ListMembershipsResponse.create = function create(properties) {
                        return new ListMembershipsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListMembershipsResponse message. Does not implicitly {@link google.chat.v1.ListMembershipsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @static
                     * @param {google.chat.v1.IListMembershipsResponse} message ListMembershipsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListMembershipsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.memberships != null && message.memberships.length)
                            for (var i = 0; i < message.memberships.length; ++i)
                                $root.google.chat.v1.Membership.encode(message.memberships[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListMembershipsResponse message, length delimited. Does not implicitly {@link google.chat.v1.ListMembershipsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @static
                     * @param {google.chat.v1.IListMembershipsResponse} message ListMembershipsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListMembershipsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListMembershipsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ListMembershipsResponse} ListMembershipsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListMembershipsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ListMembershipsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.memberships && message.memberships.length))
                                        message.memberships = [];
                                    message.memberships.push($root.google.chat.v1.Membership.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 2: {
                                    message.nextPageToken = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListMembershipsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ListMembershipsResponse} ListMembershipsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListMembershipsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListMembershipsResponse message.
                     * @function verify
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListMembershipsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.memberships != null && message.hasOwnProperty("memberships")) {
                            if (!Array.isArray(message.memberships))
                                return "memberships: array expected";
                            for (var i = 0; i < message.memberships.length; ++i) {
                                var error = $root.google.chat.v1.Membership.verify(message.memberships[i]);
                                if (error)
                                    return "memberships." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListMembershipsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ListMembershipsResponse} ListMembershipsResponse
                     */
                    ListMembershipsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ListMembershipsResponse)
                            return object;
                        var message = new $root.google.chat.v1.ListMembershipsResponse();
                        if (object.memberships) {
                            if (!Array.isArray(object.memberships))
                                throw TypeError(".google.chat.v1.ListMembershipsResponse.memberships: array expected");
                            message.memberships = [];
                            for (var i = 0; i < object.memberships.length; ++i) {
                                if (typeof object.memberships[i] !== "object")
                                    throw TypeError(".google.chat.v1.ListMembershipsResponse.memberships: object expected");
                                message.memberships[i] = $root.google.chat.v1.Membership.fromObject(object.memberships[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListMembershipsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @static
                     * @param {google.chat.v1.ListMembershipsResponse} message ListMembershipsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListMembershipsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.memberships = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.memberships && message.memberships.length) {
                            object.memberships = [];
                            for (var j = 0; j < message.memberships.length; ++j)
                                object.memberships[j] = $root.google.chat.v1.Membership.toObject(message.memberships[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListMembershipsResponse to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListMembershipsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ListMembershipsResponse
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ListMembershipsResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ListMembershipsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ListMembershipsResponse";
                    };
    
                    return ListMembershipsResponse;
                })();
    
                v1.GetMembershipRequest = (function() {
    
                    /**
                     * Properties of a GetMembershipRequest.
                     * @memberof google.chat.v1
                     * @interface IGetMembershipRequest
                     * @property {string|null} [name] GetMembershipRequest name
                     */
    
                    /**
                     * Constructs a new GetMembershipRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a GetMembershipRequest.
                     * @implements IGetMembershipRequest
                     * @constructor
                     * @param {google.chat.v1.IGetMembershipRequest=} [properties] Properties to set
                     */
                    function GetMembershipRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetMembershipRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @instance
                     */
                    GetMembershipRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetMembershipRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @static
                     * @param {google.chat.v1.IGetMembershipRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.GetMembershipRequest} GetMembershipRequest instance
                     */
                    GetMembershipRequest.create = function create(properties) {
                        return new GetMembershipRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetMembershipRequest message. Does not implicitly {@link google.chat.v1.GetMembershipRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @static
                     * @param {google.chat.v1.IGetMembershipRequest} message GetMembershipRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetMembershipRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetMembershipRequest message, length delimited. Does not implicitly {@link google.chat.v1.GetMembershipRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @static
                     * @param {google.chat.v1.IGetMembershipRequest} message GetMembershipRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetMembershipRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetMembershipRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.GetMembershipRequest} GetMembershipRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetMembershipRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.GetMembershipRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetMembershipRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.GetMembershipRequest} GetMembershipRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetMembershipRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetMembershipRequest message.
                     * @function verify
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetMembershipRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetMembershipRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.GetMembershipRequest} GetMembershipRequest
                     */
                    GetMembershipRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.GetMembershipRequest)
                            return object;
                        var message = new $root.google.chat.v1.GetMembershipRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetMembershipRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @static
                     * @param {google.chat.v1.GetMembershipRequest} message GetMembershipRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetMembershipRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetMembershipRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetMembershipRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetMembershipRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.GetMembershipRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetMembershipRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.GetMembershipRequest";
                    };
    
                    return GetMembershipRequest;
                })();
    
                v1.DeleteMembershipRequest = (function() {
    
                    /**
                     * Properties of a DeleteMembershipRequest.
                     * @memberof google.chat.v1
                     * @interface IDeleteMembershipRequest
                     * @property {string|null} [name] DeleteMembershipRequest name
                     */
    
                    /**
                     * Constructs a new DeleteMembershipRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a DeleteMembershipRequest.
                     * @implements IDeleteMembershipRequest
                     * @constructor
                     * @param {google.chat.v1.IDeleteMembershipRequest=} [properties] Properties to set
                     */
                    function DeleteMembershipRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteMembershipRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @instance
                     */
                    DeleteMembershipRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteMembershipRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @static
                     * @param {google.chat.v1.IDeleteMembershipRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.DeleteMembershipRequest} DeleteMembershipRequest instance
                     */
                    DeleteMembershipRequest.create = function create(properties) {
                        return new DeleteMembershipRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteMembershipRequest message. Does not implicitly {@link google.chat.v1.DeleteMembershipRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @static
                     * @param {google.chat.v1.IDeleteMembershipRequest} message DeleteMembershipRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteMembershipRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteMembershipRequest message, length delimited. Does not implicitly {@link google.chat.v1.DeleteMembershipRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @static
                     * @param {google.chat.v1.IDeleteMembershipRequest} message DeleteMembershipRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteMembershipRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteMembershipRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.DeleteMembershipRequest} DeleteMembershipRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteMembershipRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.DeleteMembershipRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteMembershipRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.DeleteMembershipRequest} DeleteMembershipRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteMembershipRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteMembershipRequest message.
                     * @function verify
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteMembershipRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteMembershipRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.DeleteMembershipRequest} DeleteMembershipRequest
                     */
                    DeleteMembershipRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.DeleteMembershipRequest)
                            return object;
                        var message = new $root.google.chat.v1.DeleteMembershipRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteMembershipRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @static
                     * @param {google.chat.v1.DeleteMembershipRequest} message DeleteMembershipRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteMembershipRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteMembershipRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteMembershipRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DeleteMembershipRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.DeleteMembershipRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DeleteMembershipRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.DeleteMembershipRequest";
                    };
    
                    return DeleteMembershipRequest;
                })();
    
                v1.Group = (function() {
    
                    /**
                     * Properties of a Group.
                     * @memberof google.chat.v1
                     * @interface IGroup
                     * @property {string|null} [name] Group name
                     */
    
                    /**
                     * Constructs a new Group.
                     * @memberof google.chat.v1
                     * @classdesc Represents a Group.
                     * @implements IGroup
                     * @constructor
                     * @param {google.chat.v1.IGroup=} [properties] Properties to set
                     */
                    function Group(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Group name.
                     * @member {string} name
                     * @memberof google.chat.v1.Group
                     * @instance
                     */
                    Group.prototype.name = "";
    
                    /**
                     * Creates a new Group instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.Group
                     * @static
                     * @param {google.chat.v1.IGroup=} [properties] Properties to set
                     * @returns {google.chat.v1.Group} Group instance
                     */
                    Group.create = function create(properties) {
                        return new Group(properties);
                    };
    
                    /**
                     * Encodes the specified Group message. Does not implicitly {@link google.chat.v1.Group.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.Group
                     * @static
                     * @param {google.chat.v1.IGroup} message Group message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Group.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Group message, length delimited. Does not implicitly {@link google.chat.v1.Group.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.Group
                     * @static
                     * @param {google.chat.v1.IGroup} message Group message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Group.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Group message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.Group
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.Group} Group
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Group.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Group();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Group message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.Group
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.Group} Group
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Group.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Group message.
                     * @function verify
                     * @memberof google.chat.v1.Group
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Group.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Group message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.Group
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.Group} Group
                     */
                    Group.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.Group)
                            return object;
                        var message = new $root.google.chat.v1.Group();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Group message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.Group
                     * @static
                     * @param {google.chat.v1.Group} message Group
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Group.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this Group to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.Group
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Group.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Group
                     * @function getTypeUrl
                     * @memberof google.chat.v1.Group
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Group.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.Group";
                    };
    
                    return Group;
                })();
    
                v1.Message = (function() {
    
                    /**
                     * Properties of a Message.
                     * @memberof google.chat.v1
                     * @interface IMessage
                     * @property {string|null} [name] Message name
                     * @property {google.chat.v1.IUser|null} [sender] Message sender
                     * @property {google.protobuf.ITimestamp|null} [createTime] Message createTime
                     * @property {google.protobuf.ITimestamp|null} [lastUpdateTime] Message lastUpdateTime
                     * @property {google.protobuf.ITimestamp|null} [deleteTime] Message deleteTime
                     * @property {string|null} [text] Message text
                     * @property {string|null} [formattedText] Message formattedText
                     * @property {Array.<google.chat.v1.ContextualAddOnMarkup.ICard>|null} [cards] Message cards
                     * @property {Array.<google.chat.v1.ICardWithId>|null} [cardsV2] Message cardsV2
                     * @property {Array.<google.chat.v1.IAnnotation>|null} [annotations] Message annotations
                     * @property {google.chat.v1.IThread|null} [thread] Message thread
                     * @property {google.chat.v1.ISpace|null} [space] Message space
                     * @property {string|null} [fallbackText] Message fallbackText
                     * @property {google.chat.v1.IActionResponse|null} [actionResponse] Message actionResponse
                     * @property {string|null} [argumentText] Message argumentText
                     * @property {google.chat.v1.ISlashCommand|null} [slashCommand] Message slashCommand
                     * @property {Array.<google.chat.v1.IAttachment>|null} [attachment] Message attachment
                     * @property {google.chat.v1.IMatchedUrl|null} [matchedUrl] Message matchedUrl
                     * @property {boolean|null} [threadReply] Message threadReply
                     * @property {string|null} [clientAssignedMessageId] Message clientAssignedMessageId
                     * @property {Array.<google.chat.v1.IEmojiReactionSummary>|null} [emojiReactionSummaries] Message emojiReactionSummaries
                     * @property {google.chat.v1.IUser|null} [privateMessageViewer] Message privateMessageViewer
                     * @property {google.chat.v1.IDeletionMetadata|null} [deletionMetadata] Message deletionMetadata
                     * @property {google.chat.v1.IQuotedMessageMetadata|null} [quotedMessageMetadata] Message quotedMessageMetadata
                     * @property {Array.<google.chat.v1.IAttachedGif>|null} [attachedGifs] Message attachedGifs
                     * @property {Array.<google.chat.v1.IAccessoryWidget>|null} [accessoryWidgets] Message accessoryWidgets
                     */
    
                    /**
                     * Constructs a new Message.
                     * @memberof google.chat.v1
                     * @classdesc Represents a Message.
                     * @implements IMessage
                     * @constructor
                     * @param {google.chat.v1.IMessage=} [properties] Properties to set
                     */
                    function Message(properties) {
                        this.cards = [];
                        this.cardsV2 = [];
                        this.annotations = [];
                        this.attachment = [];
                        this.emojiReactionSummaries = [];
                        this.attachedGifs = [];
                        this.accessoryWidgets = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Message name.
                     * @member {string} name
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.name = "";
    
                    /**
                     * Message sender.
                     * @member {google.chat.v1.IUser|null|undefined} sender
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.sender = null;
    
                    /**
                     * Message createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.createTime = null;
    
                    /**
                     * Message lastUpdateTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} lastUpdateTime
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.lastUpdateTime = null;
    
                    /**
                     * Message deleteTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} deleteTime
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.deleteTime = null;
    
                    /**
                     * Message text.
                     * @member {string} text
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.text = "";
    
                    /**
                     * Message formattedText.
                     * @member {string} formattedText
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.formattedText = "";
    
                    /**
                     * Message cards.
                     * @member {Array.<google.chat.v1.ContextualAddOnMarkup.ICard>} cards
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.cards = $util.emptyArray;
    
                    /**
                     * Message cardsV2.
                     * @member {Array.<google.chat.v1.ICardWithId>} cardsV2
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.cardsV2 = $util.emptyArray;
    
                    /**
                     * Message annotations.
                     * @member {Array.<google.chat.v1.IAnnotation>} annotations
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.annotations = $util.emptyArray;
    
                    /**
                     * Message thread.
                     * @member {google.chat.v1.IThread|null|undefined} thread
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.thread = null;
    
                    /**
                     * Message space.
                     * @member {google.chat.v1.ISpace|null|undefined} space
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.space = null;
    
                    /**
                     * Message fallbackText.
                     * @member {string} fallbackText
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.fallbackText = "";
    
                    /**
                     * Message actionResponse.
                     * @member {google.chat.v1.IActionResponse|null|undefined} actionResponse
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.actionResponse = null;
    
                    /**
                     * Message argumentText.
                     * @member {string} argumentText
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.argumentText = "";
    
                    /**
                     * Message slashCommand.
                     * @member {google.chat.v1.ISlashCommand|null|undefined} slashCommand
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.slashCommand = null;
    
                    /**
                     * Message attachment.
                     * @member {Array.<google.chat.v1.IAttachment>} attachment
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.attachment = $util.emptyArray;
    
                    /**
                     * Message matchedUrl.
                     * @member {google.chat.v1.IMatchedUrl|null|undefined} matchedUrl
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.matchedUrl = null;
    
                    /**
                     * Message threadReply.
                     * @member {boolean} threadReply
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.threadReply = false;
    
                    /**
                     * Message clientAssignedMessageId.
                     * @member {string} clientAssignedMessageId
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.clientAssignedMessageId = "";
    
                    /**
                     * Message emojiReactionSummaries.
                     * @member {Array.<google.chat.v1.IEmojiReactionSummary>} emojiReactionSummaries
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.emojiReactionSummaries = $util.emptyArray;
    
                    /**
                     * Message privateMessageViewer.
                     * @member {google.chat.v1.IUser|null|undefined} privateMessageViewer
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.privateMessageViewer = null;
    
                    /**
                     * Message deletionMetadata.
                     * @member {google.chat.v1.IDeletionMetadata|null|undefined} deletionMetadata
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.deletionMetadata = null;
    
                    /**
                     * Message quotedMessageMetadata.
                     * @member {google.chat.v1.IQuotedMessageMetadata|null|undefined} quotedMessageMetadata
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.quotedMessageMetadata = null;
    
                    /**
                     * Message attachedGifs.
                     * @member {Array.<google.chat.v1.IAttachedGif>} attachedGifs
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.attachedGifs = $util.emptyArray;
    
                    /**
                     * Message accessoryWidgets.
                     * @member {Array.<google.chat.v1.IAccessoryWidget>} accessoryWidgets
                     * @memberof google.chat.v1.Message
                     * @instance
                     */
                    Message.prototype.accessoryWidgets = $util.emptyArray;
    
                    /**
                     * Creates a new Message instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.Message
                     * @static
                     * @param {google.chat.v1.IMessage=} [properties] Properties to set
                     * @returns {google.chat.v1.Message} Message instance
                     */
                    Message.create = function create(properties) {
                        return new Message(properties);
                    };
    
                    /**
                     * Encodes the specified Message message. Does not implicitly {@link google.chat.v1.Message.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.Message
                     * @static
                     * @param {google.chat.v1.IMessage} message Message message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Message.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            $root.google.chat.v1.User.encode(message.sender, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.text);
                        if (message.cards != null && message.cards.length)
                            for (var i = 0; i < message.cards.length; ++i)
                                $root.google.chat.v1.ContextualAddOnMarkup.Card.encode(message.cards[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.annotations != null && message.annotations.length)
                            for (var i = 0; i < message.annotations.length; ++i)
                                $root.google.chat.v1.Annotation.encode(message.annotations[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.thread != null && Object.hasOwnProperty.call(message, "thread"))
                            $root.google.chat.v1.Thread.encode(message.thread, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.space != null && Object.hasOwnProperty.call(message, "space"))
                            $root.google.chat.v1.Space.encode(message.space, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                        if (message.fallbackText != null && Object.hasOwnProperty.call(message, "fallbackText"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.fallbackText);
                        if (message.actionResponse != null && Object.hasOwnProperty.call(message, "actionResponse"))
                            $root.google.chat.v1.ActionResponse.encode(message.actionResponse, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                        if (message.argumentText != null && Object.hasOwnProperty.call(message, "argumentText"))
                            writer.uint32(/* id 15, wireType 2 =*/122).string(message.argumentText);
                        if (message.slashCommand != null && Object.hasOwnProperty.call(message, "slashCommand"))
                            $root.google.chat.v1.SlashCommand.encode(message.slashCommand, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                        if (message.attachment != null && message.attachment.length)
                            for (var i = 0; i < message.attachment.length; ++i)
                                $root.google.chat.v1.Attachment.encode(message.attachment[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                        if (message.matchedUrl != null && Object.hasOwnProperty.call(message, "matchedUrl"))
                            $root.google.chat.v1.MatchedUrl.encode(message.matchedUrl, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                        if (message.cardsV2 != null && message.cardsV2.length)
                            for (var i = 0; i < message.cardsV2.length; ++i)
                                $root.google.chat.v1.CardWithId.encode(message.cardsV2[i], writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                        if (message.lastUpdateTime != null && Object.hasOwnProperty.call(message, "lastUpdateTime"))
                            $root.google.protobuf.Timestamp.encode(message.lastUpdateTime, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                        if (message.threadReply != null && Object.hasOwnProperty.call(message, "threadReply"))
                            writer.uint32(/* id 25, wireType 0 =*/200).bool(message.threadReply);
                        if (message.deleteTime != null && Object.hasOwnProperty.call(message, "deleteTime"))
                            $root.google.protobuf.Timestamp.encode(message.deleteTime, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                        if (message.clientAssignedMessageId != null && Object.hasOwnProperty.call(message, "clientAssignedMessageId"))
                            writer.uint32(/* id 32, wireType 2 =*/258).string(message.clientAssignedMessageId);
                        if (message.emojiReactionSummaries != null && message.emojiReactionSummaries.length)
                            for (var i = 0; i < message.emojiReactionSummaries.length; ++i)
                                $root.google.chat.v1.EmojiReactionSummary.encode(message.emojiReactionSummaries[i], writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
                        if (message.privateMessageViewer != null && Object.hasOwnProperty.call(message, "privateMessageViewer"))
                            $root.google.chat.v1.User.encode(message.privateMessageViewer, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
                        if (message.deletionMetadata != null && Object.hasOwnProperty.call(message, "deletionMetadata"))
                            $root.google.chat.v1.DeletionMetadata.encode(message.deletionMetadata, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
                        if (message.quotedMessageMetadata != null && Object.hasOwnProperty.call(message, "quotedMessageMetadata"))
                            $root.google.chat.v1.QuotedMessageMetadata.encode(message.quotedMessageMetadata, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
                        if (message.attachedGifs != null && message.attachedGifs.length)
                            for (var i = 0; i < message.attachedGifs.length; ++i)
                                $root.google.chat.v1.AttachedGif.encode(message.attachedGifs[i], writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();
                        if (message.formattedText != null && Object.hasOwnProperty.call(message, "formattedText"))
                            writer.uint32(/* id 43, wireType 2 =*/346).string(message.formattedText);
                        if (message.accessoryWidgets != null && message.accessoryWidgets.length)
                            for (var i = 0; i < message.accessoryWidgets.length; ++i)
                                $root.google.chat.v1.AccessoryWidget.encode(message.accessoryWidgets[i], writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Message message, length delimited. Does not implicitly {@link google.chat.v1.Message.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.Message
                     * @static
                     * @param {google.chat.v1.IMessage} message Message message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Message.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Message message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.Message
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.Message} Message
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Message.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Message();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.sender = $root.google.chat.v1.User.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 23: {
                                    message.lastUpdateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 26: {
                                    message.deleteTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.text = reader.string();
                                    break;
                                }
                            case 43: {
                                    message.formattedText = reader.string();
                                    break;
                                }
                            case 5: {
                                    if (!(message.cards && message.cards.length))
                                        message.cards = [];
                                    message.cards.push($root.google.chat.v1.ContextualAddOnMarkup.Card.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 22: {
                                    if (!(message.cardsV2 && message.cardsV2.length))
                                        message.cardsV2 = [];
                                    message.cardsV2.push($root.google.chat.v1.CardWithId.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 10: {
                                    if (!(message.annotations && message.annotations.length))
                                        message.annotations = [];
                                    message.annotations.push($root.google.chat.v1.Annotation.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 11: {
                                    message.thread = $root.google.chat.v1.Thread.decode(reader, reader.uint32());
                                    break;
                                }
                            case 12: {
                                    message.space = $root.google.chat.v1.Space.decode(reader, reader.uint32());
                                    break;
                                }
                            case 13: {
                                    message.fallbackText = reader.string();
                                    break;
                                }
                            case 14: {
                                    message.actionResponse = $root.google.chat.v1.ActionResponse.decode(reader, reader.uint32());
                                    break;
                                }
                            case 15: {
                                    message.argumentText = reader.string();
                                    break;
                                }
                            case 17: {
                                    message.slashCommand = $root.google.chat.v1.SlashCommand.decode(reader, reader.uint32());
                                    break;
                                }
                            case 18: {
                                    if (!(message.attachment && message.attachment.length))
                                        message.attachment = [];
                                    message.attachment.push($root.google.chat.v1.Attachment.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 20: {
                                    message.matchedUrl = $root.google.chat.v1.MatchedUrl.decode(reader, reader.uint32());
                                    break;
                                }
                            case 25: {
                                    message.threadReply = reader.bool();
                                    break;
                                }
                            case 32: {
                                    message.clientAssignedMessageId = reader.string();
                                    break;
                                }
                            case 33: {
                                    if (!(message.emojiReactionSummaries && message.emojiReactionSummaries.length))
                                        message.emojiReactionSummaries = [];
                                    message.emojiReactionSummaries.push($root.google.chat.v1.EmojiReactionSummary.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 36: {
                                    message.privateMessageViewer = $root.google.chat.v1.User.decode(reader, reader.uint32());
                                    break;
                                }
                            case 38: {
                                    message.deletionMetadata = $root.google.chat.v1.DeletionMetadata.decode(reader, reader.uint32());
                                    break;
                                }
                            case 39: {
                                    message.quotedMessageMetadata = $root.google.chat.v1.QuotedMessageMetadata.decode(reader, reader.uint32());
                                    break;
                                }
                            case 42: {
                                    if (!(message.attachedGifs && message.attachedGifs.length))
                                        message.attachedGifs = [];
                                    message.attachedGifs.push($root.google.chat.v1.AttachedGif.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 44: {
                                    if (!(message.accessoryWidgets && message.accessoryWidgets.length))
                                        message.accessoryWidgets = [];
                                    message.accessoryWidgets.push($root.google.chat.v1.AccessoryWidget.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Message message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.Message
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.Message} Message
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Message.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Message message.
                     * @function verify
                     * @memberof google.chat.v1.Message
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Message.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.sender != null && message.hasOwnProperty("sender")) {
                            var error = $root.google.chat.v1.User.verify(message.sender);
                            if (error)
                                return "sender." + error;
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.lastUpdateTime);
                            if (error)
                                return "lastUpdateTime." + error;
                        }
                        if (message.deleteTime != null && message.hasOwnProperty("deleteTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.deleteTime);
                            if (error)
                                return "deleteTime." + error;
                        }
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        if (message.formattedText != null && message.hasOwnProperty("formattedText"))
                            if (!$util.isString(message.formattedText))
                                return "formattedText: string expected";
                        if (message.cards != null && message.hasOwnProperty("cards")) {
                            if (!Array.isArray(message.cards))
                                return "cards: array expected";
                            for (var i = 0; i < message.cards.length; ++i) {
                                var error = $root.google.chat.v1.ContextualAddOnMarkup.Card.verify(message.cards[i]);
                                if (error)
                                    return "cards." + error;
                            }
                        }
                        if (message.cardsV2 != null && message.hasOwnProperty("cardsV2")) {
                            if (!Array.isArray(message.cardsV2))
                                return "cardsV2: array expected";
                            for (var i = 0; i < message.cardsV2.length; ++i) {
                                var error = $root.google.chat.v1.CardWithId.verify(message.cardsV2[i]);
                                if (error)
                                    return "cardsV2." + error;
                            }
                        }
                        if (message.annotations != null && message.hasOwnProperty("annotations")) {
                            if (!Array.isArray(message.annotations))
                                return "annotations: array expected";
                            for (var i = 0; i < message.annotations.length; ++i) {
                                var error = $root.google.chat.v1.Annotation.verify(message.annotations[i]);
                                if (error)
                                    return "annotations." + error;
                            }
                        }
                        if (message.thread != null && message.hasOwnProperty("thread")) {
                            var error = $root.google.chat.v1.Thread.verify(message.thread);
                            if (error)
                                return "thread." + error;
                        }
                        if (message.space != null && message.hasOwnProperty("space")) {
                            var error = $root.google.chat.v1.Space.verify(message.space);
                            if (error)
                                return "space." + error;
                        }
                        if (message.fallbackText != null && message.hasOwnProperty("fallbackText"))
                            if (!$util.isString(message.fallbackText))
                                return "fallbackText: string expected";
                        if (message.actionResponse != null && message.hasOwnProperty("actionResponse")) {
                            var error = $root.google.chat.v1.ActionResponse.verify(message.actionResponse);
                            if (error)
                                return "actionResponse." + error;
                        }
                        if (message.argumentText != null && message.hasOwnProperty("argumentText"))
                            if (!$util.isString(message.argumentText))
                                return "argumentText: string expected";
                        if (message.slashCommand != null && message.hasOwnProperty("slashCommand")) {
                            var error = $root.google.chat.v1.SlashCommand.verify(message.slashCommand);
                            if (error)
                                return "slashCommand." + error;
                        }
                        if (message.attachment != null && message.hasOwnProperty("attachment")) {
                            if (!Array.isArray(message.attachment))
                                return "attachment: array expected";
                            for (var i = 0; i < message.attachment.length; ++i) {
                                var error = $root.google.chat.v1.Attachment.verify(message.attachment[i]);
                                if (error)
                                    return "attachment." + error;
                            }
                        }
                        if (message.matchedUrl != null && message.hasOwnProperty("matchedUrl")) {
                            var error = $root.google.chat.v1.MatchedUrl.verify(message.matchedUrl);
                            if (error)
                                return "matchedUrl." + error;
                        }
                        if (message.threadReply != null && message.hasOwnProperty("threadReply"))
                            if (typeof message.threadReply !== "boolean")
                                return "threadReply: boolean expected";
                        if (message.clientAssignedMessageId != null && message.hasOwnProperty("clientAssignedMessageId"))
                            if (!$util.isString(message.clientAssignedMessageId))
                                return "clientAssignedMessageId: string expected";
                        if (message.emojiReactionSummaries != null && message.hasOwnProperty("emojiReactionSummaries")) {
                            if (!Array.isArray(message.emojiReactionSummaries))
                                return "emojiReactionSummaries: array expected";
                            for (var i = 0; i < message.emojiReactionSummaries.length; ++i) {
                                var error = $root.google.chat.v1.EmojiReactionSummary.verify(message.emojiReactionSummaries[i]);
                                if (error)
                                    return "emojiReactionSummaries." + error;
                            }
                        }
                        if (message.privateMessageViewer != null && message.hasOwnProperty("privateMessageViewer")) {
                            var error = $root.google.chat.v1.User.verify(message.privateMessageViewer);
                            if (error)
                                return "privateMessageViewer." + error;
                        }
                        if (message.deletionMetadata != null && message.hasOwnProperty("deletionMetadata")) {
                            var error = $root.google.chat.v1.DeletionMetadata.verify(message.deletionMetadata);
                            if (error)
                                return "deletionMetadata." + error;
                        }
                        if (message.quotedMessageMetadata != null && message.hasOwnProperty("quotedMessageMetadata")) {
                            var error = $root.google.chat.v1.QuotedMessageMetadata.verify(message.quotedMessageMetadata);
                            if (error)
                                return "quotedMessageMetadata." + error;
                        }
                        if (message.attachedGifs != null && message.hasOwnProperty("attachedGifs")) {
                            if (!Array.isArray(message.attachedGifs))
                                return "attachedGifs: array expected";
                            for (var i = 0; i < message.attachedGifs.length; ++i) {
                                var error = $root.google.chat.v1.AttachedGif.verify(message.attachedGifs[i]);
                                if (error)
                                    return "attachedGifs." + error;
                            }
                        }
                        if (message.accessoryWidgets != null && message.hasOwnProperty("accessoryWidgets")) {
                            if (!Array.isArray(message.accessoryWidgets))
                                return "accessoryWidgets: array expected";
                            for (var i = 0; i < message.accessoryWidgets.length; ++i) {
                                var error = $root.google.chat.v1.AccessoryWidget.verify(message.accessoryWidgets[i]);
                                if (error)
                                    return "accessoryWidgets." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Message message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.Message
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.Message} Message
                     */
                    Message.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.Message)
                            return object;
                        var message = new $root.google.chat.v1.Message();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.sender != null) {
                            if (typeof object.sender !== "object")
                                throw TypeError(".google.chat.v1.Message.sender: object expected");
                            message.sender = $root.google.chat.v1.User.fromObject(object.sender);
                        }
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".google.chat.v1.Message.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.lastUpdateTime != null) {
                            if (typeof object.lastUpdateTime !== "object")
                                throw TypeError(".google.chat.v1.Message.lastUpdateTime: object expected");
                            message.lastUpdateTime = $root.google.protobuf.Timestamp.fromObject(object.lastUpdateTime);
                        }
                        if (object.deleteTime != null) {
                            if (typeof object.deleteTime !== "object")
                                throw TypeError(".google.chat.v1.Message.deleteTime: object expected");
                            message.deleteTime = $root.google.protobuf.Timestamp.fromObject(object.deleteTime);
                        }
                        if (object.text != null)
                            message.text = String(object.text);
                        if (object.formattedText != null)
                            message.formattedText = String(object.formattedText);
                        if (object.cards) {
                            if (!Array.isArray(object.cards))
                                throw TypeError(".google.chat.v1.Message.cards: array expected");
                            message.cards = [];
                            for (var i = 0; i < object.cards.length; ++i) {
                                if (typeof object.cards[i] !== "object")
                                    throw TypeError(".google.chat.v1.Message.cards: object expected");
                                message.cards[i] = $root.google.chat.v1.ContextualAddOnMarkup.Card.fromObject(object.cards[i]);
                            }
                        }
                        if (object.cardsV2) {
                            if (!Array.isArray(object.cardsV2))
                                throw TypeError(".google.chat.v1.Message.cardsV2: array expected");
                            message.cardsV2 = [];
                            for (var i = 0; i < object.cardsV2.length; ++i) {
                                if (typeof object.cardsV2[i] !== "object")
                                    throw TypeError(".google.chat.v1.Message.cardsV2: object expected");
                                message.cardsV2[i] = $root.google.chat.v1.CardWithId.fromObject(object.cardsV2[i]);
                            }
                        }
                        if (object.annotations) {
                            if (!Array.isArray(object.annotations))
                                throw TypeError(".google.chat.v1.Message.annotations: array expected");
                            message.annotations = [];
                            for (var i = 0; i < object.annotations.length; ++i) {
                                if (typeof object.annotations[i] !== "object")
                                    throw TypeError(".google.chat.v1.Message.annotations: object expected");
                                message.annotations[i] = $root.google.chat.v1.Annotation.fromObject(object.annotations[i]);
                            }
                        }
                        if (object.thread != null) {
                            if (typeof object.thread !== "object")
                                throw TypeError(".google.chat.v1.Message.thread: object expected");
                            message.thread = $root.google.chat.v1.Thread.fromObject(object.thread);
                        }
                        if (object.space != null) {
                            if (typeof object.space !== "object")
                                throw TypeError(".google.chat.v1.Message.space: object expected");
                            message.space = $root.google.chat.v1.Space.fromObject(object.space);
                        }
                        if (object.fallbackText != null)
                            message.fallbackText = String(object.fallbackText);
                        if (object.actionResponse != null) {
                            if (typeof object.actionResponse !== "object")
                                throw TypeError(".google.chat.v1.Message.actionResponse: object expected");
                            message.actionResponse = $root.google.chat.v1.ActionResponse.fromObject(object.actionResponse);
                        }
                        if (object.argumentText != null)
                            message.argumentText = String(object.argumentText);
                        if (object.slashCommand != null) {
                            if (typeof object.slashCommand !== "object")
                                throw TypeError(".google.chat.v1.Message.slashCommand: object expected");
                            message.slashCommand = $root.google.chat.v1.SlashCommand.fromObject(object.slashCommand);
                        }
                        if (object.attachment) {
                            if (!Array.isArray(object.attachment))
                                throw TypeError(".google.chat.v1.Message.attachment: array expected");
                            message.attachment = [];
                            for (var i = 0; i < object.attachment.length; ++i) {
                                if (typeof object.attachment[i] !== "object")
                                    throw TypeError(".google.chat.v1.Message.attachment: object expected");
                                message.attachment[i] = $root.google.chat.v1.Attachment.fromObject(object.attachment[i]);
                            }
                        }
                        if (object.matchedUrl != null) {
                            if (typeof object.matchedUrl !== "object")
                                throw TypeError(".google.chat.v1.Message.matchedUrl: object expected");
                            message.matchedUrl = $root.google.chat.v1.MatchedUrl.fromObject(object.matchedUrl);
                        }
                        if (object.threadReply != null)
                            message.threadReply = Boolean(object.threadReply);
                        if (object.clientAssignedMessageId != null)
                            message.clientAssignedMessageId = String(object.clientAssignedMessageId);
                        if (object.emojiReactionSummaries) {
                            if (!Array.isArray(object.emojiReactionSummaries))
                                throw TypeError(".google.chat.v1.Message.emojiReactionSummaries: array expected");
                            message.emojiReactionSummaries = [];
                            for (var i = 0; i < object.emojiReactionSummaries.length; ++i) {
                                if (typeof object.emojiReactionSummaries[i] !== "object")
                                    throw TypeError(".google.chat.v1.Message.emojiReactionSummaries: object expected");
                                message.emojiReactionSummaries[i] = $root.google.chat.v1.EmojiReactionSummary.fromObject(object.emojiReactionSummaries[i]);
                            }
                        }
                        if (object.privateMessageViewer != null) {
                            if (typeof object.privateMessageViewer !== "object")
                                throw TypeError(".google.chat.v1.Message.privateMessageViewer: object expected");
                            message.privateMessageViewer = $root.google.chat.v1.User.fromObject(object.privateMessageViewer);
                        }
                        if (object.deletionMetadata != null) {
                            if (typeof object.deletionMetadata !== "object")
                                throw TypeError(".google.chat.v1.Message.deletionMetadata: object expected");
                            message.deletionMetadata = $root.google.chat.v1.DeletionMetadata.fromObject(object.deletionMetadata);
                        }
                        if (object.quotedMessageMetadata != null) {
                            if (typeof object.quotedMessageMetadata !== "object")
                                throw TypeError(".google.chat.v1.Message.quotedMessageMetadata: object expected");
                            message.quotedMessageMetadata = $root.google.chat.v1.QuotedMessageMetadata.fromObject(object.quotedMessageMetadata);
                        }
                        if (object.attachedGifs) {
                            if (!Array.isArray(object.attachedGifs))
                                throw TypeError(".google.chat.v1.Message.attachedGifs: array expected");
                            message.attachedGifs = [];
                            for (var i = 0; i < object.attachedGifs.length; ++i) {
                                if (typeof object.attachedGifs[i] !== "object")
                                    throw TypeError(".google.chat.v1.Message.attachedGifs: object expected");
                                message.attachedGifs[i] = $root.google.chat.v1.AttachedGif.fromObject(object.attachedGifs[i]);
                            }
                        }
                        if (object.accessoryWidgets) {
                            if (!Array.isArray(object.accessoryWidgets))
                                throw TypeError(".google.chat.v1.Message.accessoryWidgets: array expected");
                            message.accessoryWidgets = [];
                            for (var i = 0; i < object.accessoryWidgets.length; ++i) {
                                if (typeof object.accessoryWidgets[i] !== "object")
                                    throw TypeError(".google.chat.v1.Message.accessoryWidgets: object expected");
                                message.accessoryWidgets[i] = $root.google.chat.v1.AccessoryWidget.fromObject(object.accessoryWidgets[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Message message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.Message
                     * @static
                     * @param {google.chat.v1.Message} message Message
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Message.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.cards = [];
                            object.annotations = [];
                            object.attachment = [];
                            object.cardsV2 = [];
                            object.emojiReactionSummaries = [];
                            object.attachedGifs = [];
                            object.accessoryWidgets = [];
                        }
                        if (options.defaults) {
                            object.name = "";
                            object.sender = null;
                            object.createTime = null;
                            object.text = "";
                            object.thread = null;
                            object.space = null;
                            object.fallbackText = "";
                            object.actionResponse = null;
                            object.argumentText = "";
                            object.slashCommand = null;
                            object.matchedUrl = null;
                            object.lastUpdateTime = null;
                            object.threadReply = false;
                            object.deleteTime = null;
                            object.clientAssignedMessageId = "";
                            object.privateMessageViewer = null;
                            object.deletionMetadata = null;
                            object.quotedMessageMetadata = null;
                            object.formattedText = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = $root.google.chat.v1.User.toObject(message.sender, options);
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        if (message.cards && message.cards.length) {
                            object.cards = [];
                            for (var j = 0; j < message.cards.length; ++j)
                                object.cards[j] = $root.google.chat.v1.ContextualAddOnMarkup.Card.toObject(message.cards[j], options);
                        }
                        if (message.annotations && message.annotations.length) {
                            object.annotations = [];
                            for (var j = 0; j < message.annotations.length; ++j)
                                object.annotations[j] = $root.google.chat.v1.Annotation.toObject(message.annotations[j], options);
                        }
                        if (message.thread != null && message.hasOwnProperty("thread"))
                            object.thread = $root.google.chat.v1.Thread.toObject(message.thread, options);
                        if (message.space != null && message.hasOwnProperty("space"))
                            object.space = $root.google.chat.v1.Space.toObject(message.space, options);
                        if (message.fallbackText != null && message.hasOwnProperty("fallbackText"))
                            object.fallbackText = message.fallbackText;
                        if (message.actionResponse != null && message.hasOwnProperty("actionResponse"))
                            object.actionResponse = $root.google.chat.v1.ActionResponse.toObject(message.actionResponse, options);
                        if (message.argumentText != null && message.hasOwnProperty("argumentText"))
                            object.argumentText = message.argumentText;
                        if (message.slashCommand != null && message.hasOwnProperty("slashCommand"))
                            object.slashCommand = $root.google.chat.v1.SlashCommand.toObject(message.slashCommand, options);
                        if (message.attachment && message.attachment.length) {
                            object.attachment = [];
                            for (var j = 0; j < message.attachment.length; ++j)
                                object.attachment[j] = $root.google.chat.v1.Attachment.toObject(message.attachment[j], options);
                        }
                        if (message.matchedUrl != null && message.hasOwnProperty("matchedUrl"))
                            object.matchedUrl = $root.google.chat.v1.MatchedUrl.toObject(message.matchedUrl, options);
                        if (message.cardsV2 && message.cardsV2.length) {
                            object.cardsV2 = [];
                            for (var j = 0; j < message.cardsV2.length; ++j)
                                object.cardsV2[j] = $root.google.chat.v1.CardWithId.toObject(message.cardsV2[j], options);
                        }
                        if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime"))
                            object.lastUpdateTime = $root.google.protobuf.Timestamp.toObject(message.lastUpdateTime, options);
                        if (message.threadReply != null && message.hasOwnProperty("threadReply"))
                            object.threadReply = message.threadReply;
                        if (message.deleteTime != null && message.hasOwnProperty("deleteTime"))
                            object.deleteTime = $root.google.protobuf.Timestamp.toObject(message.deleteTime, options);
                        if (message.clientAssignedMessageId != null && message.hasOwnProperty("clientAssignedMessageId"))
                            object.clientAssignedMessageId = message.clientAssignedMessageId;
                        if (message.emojiReactionSummaries && message.emojiReactionSummaries.length) {
                            object.emojiReactionSummaries = [];
                            for (var j = 0; j < message.emojiReactionSummaries.length; ++j)
                                object.emojiReactionSummaries[j] = $root.google.chat.v1.EmojiReactionSummary.toObject(message.emojiReactionSummaries[j], options);
                        }
                        if (message.privateMessageViewer != null && message.hasOwnProperty("privateMessageViewer"))
                            object.privateMessageViewer = $root.google.chat.v1.User.toObject(message.privateMessageViewer, options);
                        if (message.deletionMetadata != null && message.hasOwnProperty("deletionMetadata"))
                            object.deletionMetadata = $root.google.chat.v1.DeletionMetadata.toObject(message.deletionMetadata, options);
                        if (message.quotedMessageMetadata != null && message.hasOwnProperty("quotedMessageMetadata"))
                            object.quotedMessageMetadata = $root.google.chat.v1.QuotedMessageMetadata.toObject(message.quotedMessageMetadata, options);
                        if (message.attachedGifs && message.attachedGifs.length) {
                            object.attachedGifs = [];
                            for (var j = 0; j < message.attachedGifs.length; ++j)
                                object.attachedGifs[j] = $root.google.chat.v1.AttachedGif.toObject(message.attachedGifs[j], options);
                        }
                        if (message.formattedText != null && message.hasOwnProperty("formattedText"))
                            object.formattedText = message.formattedText;
                        if (message.accessoryWidgets && message.accessoryWidgets.length) {
                            object.accessoryWidgets = [];
                            for (var j = 0; j < message.accessoryWidgets.length; ++j)
                                object.accessoryWidgets[j] = $root.google.chat.v1.AccessoryWidget.toObject(message.accessoryWidgets[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Message to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.Message
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Message.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Message
                     * @function getTypeUrl
                     * @memberof google.chat.v1.Message
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.Message";
                    };
    
                    return Message;
                })();
    
                v1.AttachedGif = (function() {
    
                    /**
                     * Properties of an AttachedGif.
                     * @memberof google.chat.v1
                     * @interface IAttachedGif
                     * @property {string|null} [uri] AttachedGif uri
                     */
    
                    /**
                     * Constructs a new AttachedGif.
                     * @memberof google.chat.v1
                     * @classdesc Represents an AttachedGif.
                     * @implements IAttachedGif
                     * @constructor
                     * @param {google.chat.v1.IAttachedGif=} [properties] Properties to set
                     */
                    function AttachedGif(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AttachedGif uri.
                     * @member {string} uri
                     * @memberof google.chat.v1.AttachedGif
                     * @instance
                     */
                    AttachedGif.prototype.uri = "";
    
                    /**
                     * Creates a new AttachedGif instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.AttachedGif
                     * @static
                     * @param {google.chat.v1.IAttachedGif=} [properties] Properties to set
                     * @returns {google.chat.v1.AttachedGif} AttachedGif instance
                     */
                    AttachedGif.create = function create(properties) {
                        return new AttachedGif(properties);
                    };
    
                    /**
                     * Encodes the specified AttachedGif message. Does not implicitly {@link google.chat.v1.AttachedGif.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.AttachedGif
                     * @static
                     * @param {google.chat.v1.IAttachedGif} message AttachedGif message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AttachedGif.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AttachedGif message, length delimited. Does not implicitly {@link google.chat.v1.AttachedGif.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.AttachedGif
                     * @static
                     * @param {google.chat.v1.IAttachedGif} message AttachedGif message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AttachedGif.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AttachedGif message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.AttachedGif
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.AttachedGif} AttachedGif
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AttachedGif.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.AttachedGif();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.uri = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AttachedGif message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.AttachedGif
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.AttachedGif} AttachedGif
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AttachedGif.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AttachedGif message.
                     * @function verify
                     * @memberof google.chat.v1.AttachedGif
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AttachedGif.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            if (!$util.isString(message.uri))
                                return "uri: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an AttachedGif message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.AttachedGif
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.AttachedGif} AttachedGif
                     */
                    AttachedGif.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.AttachedGif)
                            return object;
                        var message = new $root.google.chat.v1.AttachedGif();
                        if (object.uri != null)
                            message.uri = String(object.uri);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AttachedGif message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.AttachedGif
                     * @static
                     * @param {google.chat.v1.AttachedGif} message AttachedGif
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AttachedGif.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.uri = "";
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            object.uri = message.uri;
                        return object;
                    };
    
                    /**
                     * Converts this AttachedGif to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.AttachedGif
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AttachedGif.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AttachedGif
                     * @function getTypeUrl
                     * @memberof google.chat.v1.AttachedGif
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AttachedGif.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.AttachedGif";
                    };
    
                    return AttachedGif;
                })();
    
                v1.QuotedMessageMetadata = (function() {
    
                    /**
                     * Properties of a QuotedMessageMetadata.
                     * @memberof google.chat.v1
                     * @interface IQuotedMessageMetadata
                     * @property {string|null} [name] QuotedMessageMetadata name
                     * @property {google.protobuf.ITimestamp|null} [lastUpdateTime] QuotedMessageMetadata lastUpdateTime
                     */
    
                    /**
                     * Constructs a new QuotedMessageMetadata.
                     * @memberof google.chat.v1
                     * @classdesc Represents a QuotedMessageMetadata.
                     * @implements IQuotedMessageMetadata
                     * @constructor
                     * @param {google.chat.v1.IQuotedMessageMetadata=} [properties] Properties to set
                     */
                    function QuotedMessageMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * QuotedMessageMetadata name.
                     * @member {string} name
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @instance
                     */
                    QuotedMessageMetadata.prototype.name = "";
    
                    /**
                     * QuotedMessageMetadata lastUpdateTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} lastUpdateTime
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @instance
                     */
                    QuotedMessageMetadata.prototype.lastUpdateTime = null;
    
                    /**
                     * Creates a new QuotedMessageMetadata instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @static
                     * @param {google.chat.v1.IQuotedMessageMetadata=} [properties] Properties to set
                     * @returns {google.chat.v1.QuotedMessageMetadata} QuotedMessageMetadata instance
                     */
                    QuotedMessageMetadata.create = function create(properties) {
                        return new QuotedMessageMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified QuotedMessageMetadata message. Does not implicitly {@link google.chat.v1.QuotedMessageMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @static
                     * @param {google.chat.v1.IQuotedMessageMetadata} message QuotedMessageMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QuotedMessageMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.lastUpdateTime != null && Object.hasOwnProperty.call(message, "lastUpdateTime"))
                            $root.google.protobuf.Timestamp.encode(message.lastUpdateTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified QuotedMessageMetadata message, length delimited. Does not implicitly {@link google.chat.v1.QuotedMessageMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @static
                     * @param {google.chat.v1.IQuotedMessageMetadata} message QuotedMessageMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QuotedMessageMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a QuotedMessageMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.QuotedMessageMetadata} QuotedMessageMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QuotedMessageMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.QuotedMessageMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.lastUpdateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a QuotedMessageMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.QuotedMessageMetadata} QuotedMessageMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QuotedMessageMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a QuotedMessageMetadata message.
                     * @function verify
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QuotedMessageMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.lastUpdateTime);
                            if (error)
                                return "lastUpdateTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a QuotedMessageMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.QuotedMessageMetadata} QuotedMessageMetadata
                     */
                    QuotedMessageMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.QuotedMessageMetadata)
                            return object;
                        var message = new $root.google.chat.v1.QuotedMessageMetadata();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.lastUpdateTime != null) {
                            if (typeof object.lastUpdateTime !== "object")
                                throw TypeError(".google.chat.v1.QuotedMessageMetadata.lastUpdateTime: object expected");
                            message.lastUpdateTime = $root.google.protobuf.Timestamp.fromObject(object.lastUpdateTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a QuotedMessageMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @static
                     * @param {google.chat.v1.QuotedMessageMetadata} message QuotedMessageMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QuotedMessageMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.lastUpdateTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime"))
                            object.lastUpdateTime = $root.google.protobuf.Timestamp.toObject(message.lastUpdateTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this QuotedMessageMetadata to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QuotedMessageMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for QuotedMessageMetadata
                     * @function getTypeUrl
                     * @memberof google.chat.v1.QuotedMessageMetadata
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    QuotedMessageMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.QuotedMessageMetadata";
                    };
    
                    return QuotedMessageMetadata;
                })();
    
                v1.Thread = (function() {
    
                    /**
                     * Properties of a Thread.
                     * @memberof google.chat.v1
                     * @interface IThread
                     * @property {string|null} [name] Thread name
                     * @property {string|null} [threadKey] Thread threadKey
                     */
    
                    /**
                     * Constructs a new Thread.
                     * @memberof google.chat.v1
                     * @classdesc Represents a Thread.
                     * @implements IThread
                     * @constructor
                     * @param {google.chat.v1.IThread=} [properties] Properties to set
                     */
                    function Thread(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Thread name.
                     * @member {string} name
                     * @memberof google.chat.v1.Thread
                     * @instance
                     */
                    Thread.prototype.name = "";
    
                    /**
                     * Thread threadKey.
                     * @member {string} threadKey
                     * @memberof google.chat.v1.Thread
                     * @instance
                     */
                    Thread.prototype.threadKey = "";
    
                    /**
                     * Creates a new Thread instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.Thread
                     * @static
                     * @param {google.chat.v1.IThread=} [properties] Properties to set
                     * @returns {google.chat.v1.Thread} Thread instance
                     */
                    Thread.create = function create(properties) {
                        return new Thread(properties);
                    };
    
                    /**
                     * Encodes the specified Thread message. Does not implicitly {@link google.chat.v1.Thread.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.Thread
                     * @static
                     * @param {google.chat.v1.IThread} message Thread message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Thread.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.threadKey != null && Object.hasOwnProperty.call(message, "threadKey"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.threadKey);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Thread message, length delimited. Does not implicitly {@link google.chat.v1.Thread.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.Thread
                     * @static
                     * @param {google.chat.v1.IThread} message Thread message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Thread.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Thread message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.Thread
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.Thread} Thread
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Thread.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Thread();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.threadKey = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Thread message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.Thread
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.Thread} Thread
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Thread.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Thread message.
                     * @function verify
                     * @memberof google.chat.v1.Thread
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Thread.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.threadKey != null && message.hasOwnProperty("threadKey"))
                            if (!$util.isString(message.threadKey))
                                return "threadKey: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Thread message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.Thread
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.Thread} Thread
                     */
                    Thread.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.Thread)
                            return object;
                        var message = new $root.google.chat.v1.Thread();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.threadKey != null)
                            message.threadKey = String(object.threadKey);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Thread message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.Thread
                     * @static
                     * @param {google.chat.v1.Thread} message Thread
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Thread.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.threadKey = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.threadKey != null && message.hasOwnProperty("threadKey"))
                            object.threadKey = message.threadKey;
                        return object;
                    };
    
                    /**
                     * Converts this Thread to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.Thread
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Thread.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Thread
                     * @function getTypeUrl
                     * @memberof google.chat.v1.Thread
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Thread.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.Thread";
                    };
    
                    return Thread;
                })();
    
                v1.ActionResponse = (function() {
    
                    /**
                     * Properties of an ActionResponse.
                     * @memberof google.chat.v1
                     * @interface IActionResponse
                     * @property {google.chat.v1.ActionResponse.ResponseType|null} [type] ActionResponse type
                     * @property {string|null} [url] ActionResponse url
                     * @property {google.chat.v1.IDialogAction|null} [dialogAction] ActionResponse dialogAction
                     * @property {google.chat.v1.ActionResponse.IUpdatedWidget|null} [updatedWidget] ActionResponse updatedWidget
                     */
    
                    /**
                     * Constructs a new ActionResponse.
                     * @memberof google.chat.v1
                     * @classdesc Represents an ActionResponse.
                     * @implements IActionResponse
                     * @constructor
                     * @param {google.chat.v1.IActionResponse=} [properties] Properties to set
                     */
                    function ActionResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ActionResponse type.
                     * @member {google.chat.v1.ActionResponse.ResponseType} type
                     * @memberof google.chat.v1.ActionResponse
                     * @instance
                     */
                    ActionResponse.prototype.type = 0;
    
                    /**
                     * ActionResponse url.
                     * @member {string} url
                     * @memberof google.chat.v1.ActionResponse
                     * @instance
                     */
                    ActionResponse.prototype.url = "";
    
                    /**
                     * ActionResponse dialogAction.
                     * @member {google.chat.v1.IDialogAction|null|undefined} dialogAction
                     * @memberof google.chat.v1.ActionResponse
                     * @instance
                     */
                    ActionResponse.prototype.dialogAction = null;
    
                    /**
                     * ActionResponse updatedWidget.
                     * @member {google.chat.v1.ActionResponse.IUpdatedWidget|null|undefined} updatedWidget
                     * @memberof google.chat.v1.ActionResponse
                     * @instance
                     */
                    ActionResponse.prototype.updatedWidget = null;
    
                    /**
                     * Creates a new ActionResponse instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ActionResponse
                     * @static
                     * @param {google.chat.v1.IActionResponse=} [properties] Properties to set
                     * @returns {google.chat.v1.ActionResponse} ActionResponse instance
                     */
                    ActionResponse.create = function create(properties) {
                        return new ActionResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ActionResponse message. Does not implicitly {@link google.chat.v1.ActionResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ActionResponse
                     * @static
                     * @param {google.chat.v1.IActionResponse} message ActionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ActionResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                        if (message.dialogAction != null && Object.hasOwnProperty.call(message, "dialogAction"))
                            $root.google.chat.v1.DialogAction.encode(message.dialogAction, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.updatedWidget != null && Object.hasOwnProperty.call(message, "updatedWidget"))
                            $root.google.chat.v1.ActionResponse.UpdatedWidget.encode(message.updatedWidget, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ActionResponse message, length delimited. Does not implicitly {@link google.chat.v1.ActionResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ActionResponse
                     * @static
                     * @param {google.chat.v1.IActionResponse} message ActionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ActionResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ActionResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ActionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ActionResponse} ActionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ActionResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ActionResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.type = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.url = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.dialogAction = $root.google.chat.v1.DialogAction.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.updatedWidget = $root.google.chat.v1.ActionResponse.UpdatedWidget.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ActionResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ActionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ActionResponse} ActionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ActionResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ActionResponse message.
                     * @function verify
                     * @memberof google.chat.v1.ActionResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ActionResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 6:
                            case 3:
                            case 4:
                            case 7:
                                break;
                            }
                        if (message.url != null && message.hasOwnProperty("url"))
                            if (!$util.isString(message.url))
                                return "url: string expected";
                        if (message.dialogAction != null && message.hasOwnProperty("dialogAction")) {
                            var error = $root.google.chat.v1.DialogAction.verify(message.dialogAction);
                            if (error)
                                return "dialogAction." + error;
                        }
                        if (message.updatedWidget != null && message.hasOwnProperty("updatedWidget")) {
                            var error = $root.google.chat.v1.ActionResponse.UpdatedWidget.verify(message.updatedWidget);
                            if (error)
                                return "updatedWidget." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ActionResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ActionResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ActionResponse} ActionResponse
                     */
                    ActionResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ActionResponse)
                            return object;
                        var message = new $root.google.chat.v1.ActionResponse();
                        switch (object.type) {
                        default:
                            if (typeof object.type === "number") {
                                message.type = object.type;
                                break;
                            }
                            break;
                        case "TYPE_UNSPECIFIED":
                        case 0:
                            message.type = 0;
                            break;
                        case "NEW_MESSAGE":
                        case 1:
                            message.type = 1;
                            break;
                        case "UPDATE_MESSAGE":
                        case 2:
                            message.type = 2;
                            break;
                        case "UPDATE_USER_MESSAGE_CARDS":
                        case 6:
                            message.type = 6;
                            break;
                        case "REQUEST_CONFIG":
                        case 3:
                            message.type = 3;
                            break;
                        case "DIALOG":
                        case 4:
                            message.type = 4;
                            break;
                        case "UPDATE_WIDGET":
                        case 7:
                            message.type = 7;
                            break;
                        }
                        if (object.url != null)
                            message.url = String(object.url);
                        if (object.dialogAction != null) {
                            if (typeof object.dialogAction !== "object")
                                throw TypeError(".google.chat.v1.ActionResponse.dialogAction: object expected");
                            message.dialogAction = $root.google.chat.v1.DialogAction.fromObject(object.dialogAction);
                        }
                        if (object.updatedWidget != null) {
                            if (typeof object.updatedWidget !== "object")
                                throw TypeError(".google.chat.v1.ActionResponse.updatedWidget: object expected");
                            message.updatedWidget = $root.google.chat.v1.ActionResponse.UpdatedWidget.fromObject(object.updatedWidget);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ActionResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ActionResponse
                     * @static
                     * @param {google.chat.v1.ActionResponse} message ActionResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ActionResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                            object.url = "";
                            object.dialogAction = null;
                            object.updatedWidget = null;
                        }
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.google.chat.v1.ActionResponse.ResponseType[message.type] === undefined ? message.type : $root.google.chat.v1.ActionResponse.ResponseType[message.type] : message.type;
                        if (message.url != null && message.hasOwnProperty("url"))
                            object.url = message.url;
                        if (message.dialogAction != null && message.hasOwnProperty("dialogAction"))
                            object.dialogAction = $root.google.chat.v1.DialogAction.toObject(message.dialogAction, options);
                        if (message.updatedWidget != null && message.hasOwnProperty("updatedWidget"))
                            object.updatedWidget = $root.google.chat.v1.ActionResponse.UpdatedWidget.toObject(message.updatedWidget, options);
                        return object;
                    };
    
                    /**
                     * Converts this ActionResponse to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ActionResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ActionResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ActionResponse
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ActionResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ActionResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ActionResponse";
                    };
    
                    /**
                     * ResponseType enum.
                     * @name google.chat.v1.ActionResponse.ResponseType
                     * @enum {number}
                     * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                     * @property {number} NEW_MESSAGE=1 NEW_MESSAGE value
                     * @property {number} UPDATE_MESSAGE=2 UPDATE_MESSAGE value
                     * @property {number} UPDATE_USER_MESSAGE_CARDS=6 UPDATE_USER_MESSAGE_CARDS value
                     * @property {number} REQUEST_CONFIG=3 REQUEST_CONFIG value
                     * @property {number} DIALOG=4 DIALOG value
                     * @property {number} UPDATE_WIDGET=7 UPDATE_WIDGET value
                     */
                    ActionResponse.ResponseType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "NEW_MESSAGE"] = 1;
                        values[valuesById[2] = "UPDATE_MESSAGE"] = 2;
                        values[valuesById[6] = "UPDATE_USER_MESSAGE_CARDS"] = 6;
                        values[valuesById[3] = "REQUEST_CONFIG"] = 3;
                        values[valuesById[4] = "DIALOG"] = 4;
                        values[valuesById[7] = "UPDATE_WIDGET"] = 7;
                        return values;
                    })();
    
                    ActionResponse.SelectionItems = (function() {
    
                        /**
                         * Properties of a SelectionItems.
                         * @memberof google.chat.v1.ActionResponse
                         * @interface ISelectionItems
                         * @property {Array.<google.apps.card.v1.SelectionInput.ISelectionItem>|null} [items] SelectionItems items
                         */
    
                        /**
                         * Constructs a new SelectionItems.
                         * @memberof google.chat.v1.ActionResponse
                         * @classdesc Represents a SelectionItems.
                         * @implements ISelectionItems
                         * @constructor
                         * @param {google.chat.v1.ActionResponse.ISelectionItems=} [properties] Properties to set
                         */
                        function SelectionItems(properties) {
                            this.items = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SelectionItems items.
                         * @member {Array.<google.apps.card.v1.SelectionInput.ISelectionItem>} items
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @instance
                         */
                        SelectionItems.prototype.items = $util.emptyArray;
    
                        /**
                         * Creates a new SelectionItems instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @static
                         * @param {google.chat.v1.ActionResponse.ISelectionItems=} [properties] Properties to set
                         * @returns {google.chat.v1.ActionResponse.SelectionItems} SelectionItems instance
                         */
                        SelectionItems.create = function create(properties) {
                            return new SelectionItems(properties);
                        };
    
                        /**
                         * Encodes the specified SelectionItems message. Does not implicitly {@link google.chat.v1.ActionResponse.SelectionItems.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @static
                         * @param {google.chat.v1.ActionResponse.ISelectionItems} message SelectionItems message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SelectionItems.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.items != null && message.items.length)
                                for (var i = 0; i < message.items.length; ++i)
                                    $root.google.apps.card.v1.SelectionInput.SelectionItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SelectionItems message, length delimited. Does not implicitly {@link google.chat.v1.ActionResponse.SelectionItems.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @static
                         * @param {google.chat.v1.ActionResponse.ISelectionItems} message SelectionItems message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SelectionItems.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SelectionItems message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.ActionResponse.SelectionItems} SelectionItems
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SelectionItems.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ActionResponse.SelectionItems();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.items && message.items.length))
                                            message.items = [];
                                        message.items.push($root.google.apps.card.v1.SelectionInput.SelectionItem.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SelectionItems message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.ActionResponse.SelectionItems} SelectionItems
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SelectionItems.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SelectionItems message.
                         * @function verify
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SelectionItems.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.items != null && message.hasOwnProperty("items")) {
                                if (!Array.isArray(message.items))
                                    return "items: array expected";
                                for (var i = 0; i < message.items.length; ++i) {
                                    var error = $root.google.apps.card.v1.SelectionInput.SelectionItem.verify(message.items[i]);
                                    if (error)
                                        return "items." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SelectionItems message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.ActionResponse.SelectionItems} SelectionItems
                         */
                        SelectionItems.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.ActionResponse.SelectionItems)
                                return object;
                            var message = new $root.google.chat.v1.ActionResponse.SelectionItems();
                            if (object.items) {
                                if (!Array.isArray(object.items))
                                    throw TypeError(".google.chat.v1.ActionResponse.SelectionItems.items: array expected");
                                message.items = [];
                                for (var i = 0; i < object.items.length; ++i) {
                                    if (typeof object.items[i] !== "object")
                                        throw TypeError(".google.chat.v1.ActionResponse.SelectionItems.items: object expected");
                                    message.items[i] = $root.google.apps.card.v1.SelectionInput.SelectionItem.fromObject(object.items[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SelectionItems message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @static
                         * @param {google.chat.v1.ActionResponse.SelectionItems} message SelectionItems
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SelectionItems.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.items = [];
                            if (message.items && message.items.length) {
                                object.items = [];
                                for (var j = 0; j < message.items.length; ++j)
                                    object.items[j] = $root.google.apps.card.v1.SelectionInput.SelectionItem.toObject(message.items[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this SelectionItems to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SelectionItems.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SelectionItems
                         * @function getTypeUrl
                         * @memberof google.chat.v1.ActionResponse.SelectionItems
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SelectionItems.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.ActionResponse.SelectionItems";
                        };
    
                        return SelectionItems;
                    })();
    
                    ActionResponse.UpdatedWidget = (function() {
    
                        /**
                         * Properties of an UpdatedWidget.
                         * @memberof google.chat.v1.ActionResponse
                         * @interface IUpdatedWidget
                         * @property {google.chat.v1.ActionResponse.ISelectionItems|null} [suggestions] UpdatedWidget suggestions
                         * @property {string|null} [widget] UpdatedWidget widget
                         */
    
                        /**
                         * Constructs a new UpdatedWidget.
                         * @memberof google.chat.v1.ActionResponse
                         * @classdesc Represents an UpdatedWidget.
                         * @implements IUpdatedWidget
                         * @constructor
                         * @param {google.chat.v1.ActionResponse.IUpdatedWidget=} [properties] Properties to set
                         */
                        function UpdatedWidget(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpdatedWidget suggestions.
                         * @member {google.chat.v1.ActionResponse.ISelectionItems|null|undefined} suggestions
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @instance
                         */
                        UpdatedWidget.prototype.suggestions = null;
    
                        /**
                         * UpdatedWidget widget.
                         * @member {string} widget
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @instance
                         */
                        UpdatedWidget.prototype.widget = "";
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * UpdatedWidget updatedWidget.
                         * @member {"suggestions"|undefined} updatedWidget
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @instance
                         */
                        Object.defineProperty(UpdatedWidget.prototype, "updatedWidget", {
                            get: $util.oneOfGetter($oneOfFields = ["suggestions"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new UpdatedWidget instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @static
                         * @param {google.chat.v1.ActionResponse.IUpdatedWidget=} [properties] Properties to set
                         * @returns {google.chat.v1.ActionResponse.UpdatedWidget} UpdatedWidget instance
                         */
                        UpdatedWidget.create = function create(properties) {
                            return new UpdatedWidget(properties);
                        };
    
                        /**
                         * Encodes the specified UpdatedWidget message. Does not implicitly {@link google.chat.v1.ActionResponse.UpdatedWidget.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @static
                         * @param {google.chat.v1.ActionResponse.IUpdatedWidget} message UpdatedWidget message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdatedWidget.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.suggestions != null && Object.hasOwnProperty.call(message, "suggestions"))
                                $root.google.chat.v1.ActionResponse.SelectionItems.encode(message.suggestions, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.widget != null && Object.hasOwnProperty.call(message, "widget"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.widget);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpdatedWidget message, length delimited. Does not implicitly {@link google.chat.v1.ActionResponse.UpdatedWidget.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @static
                         * @param {google.chat.v1.ActionResponse.IUpdatedWidget} message UpdatedWidget message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpdatedWidget.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpdatedWidget message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.ActionResponse.UpdatedWidget} UpdatedWidget
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdatedWidget.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ActionResponse.UpdatedWidget();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.suggestions = $root.google.chat.v1.ActionResponse.SelectionItems.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.widget = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpdatedWidget message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.ActionResponse.UpdatedWidget} UpdatedWidget
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpdatedWidget.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpdatedWidget message.
                         * @function verify
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpdatedWidget.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.suggestions != null && message.hasOwnProperty("suggestions")) {
                                properties.updatedWidget = 1;
                                {
                                    var error = $root.google.chat.v1.ActionResponse.SelectionItems.verify(message.suggestions);
                                    if (error)
                                        return "suggestions." + error;
                                }
                            }
                            if (message.widget != null && message.hasOwnProperty("widget"))
                                if (!$util.isString(message.widget))
                                    return "widget: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an UpdatedWidget message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.ActionResponse.UpdatedWidget} UpdatedWidget
                         */
                        UpdatedWidget.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.ActionResponse.UpdatedWidget)
                                return object;
                            var message = new $root.google.chat.v1.ActionResponse.UpdatedWidget();
                            if (object.suggestions != null) {
                                if (typeof object.suggestions !== "object")
                                    throw TypeError(".google.chat.v1.ActionResponse.UpdatedWidget.suggestions: object expected");
                                message.suggestions = $root.google.chat.v1.ActionResponse.SelectionItems.fromObject(object.suggestions);
                            }
                            if (object.widget != null)
                                message.widget = String(object.widget);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpdatedWidget message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @static
                         * @param {google.chat.v1.ActionResponse.UpdatedWidget} message UpdatedWidget
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpdatedWidget.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.widget = "";
                            if (message.suggestions != null && message.hasOwnProperty("suggestions")) {
                                object.suggestions = $root.google.chat.v1.ActionResponse.SelectionItems.toObject(message.suggestions, options);
                                if (options.oneofs)
                                    object.updatedWidget = "suggestions";
                            }
                            if (message.widget != null && message.hasOwnProperty("widget"))
                                object.widget = message.widget;
                            return object;
                        };
    
                        /**
                         * Converts this UpdatedWidget to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpdatedWidget.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for UpdatedWidget
                         * @function getTypeUrl
                         * @memberof google.chat.v1.ActionResponse.UpdatedWidget
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        UpdatedWidget.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.ActionResponse.UpdatedWidget";
                        };
    
                        return UpdatedWidget;
                    })();
    
                    return ActionResponse;
                })();
    
                v1.AccessoryWidget = (function() {
    
                    /**
                     * Properties of an AccessoryWidget.
                     * @memberof google.chat.v1
                     * @interface IAccessoryWidget
                     * @property {google.apps.card.v1.IButtonList|null} [buttonList] AccessoryWidget buttonList
                     */
    
                    /**
                     * Constructs a new AccessoryWidget.
                     * @memberof google.chat.v1
                     * @classdesc Represents an AccessoryWidget.
                     * @implements IAccessoryWidget
                     * @constructor
                     * @param {google.chat.v1.IAccessoryWidget=} [properties] Properties to set
                     */
                    function AccessoryWidget(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AccessoryWidget buttonList.
                     * @member {google.apps.card.v1.IButtonList|null|undefined} buttonList
                     * @memberof google.chat.v1.AccessoryWidget
                     * @instance
                     */
                    AccessoryWidget.prototype.buttonList = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * AccessoryWidget action.
                     * @member {"buttonList"|undefined} action
                     * @memberof google.chat.v1.AccessoryWidget
                     * @instance
                     */
                    Object.defineProperty(AccessoryWidget.prototype, "action", {
                        get: $util.oneOfGetter($oneOfFields = ["buttonList"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new AccessoryWidget instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.AccessoryWidget
                     * @static
                     * @param {google.chat.v1.IAccessoryWidget=} [properties] Properties to set
                     * @returns {google.chat.v1.AccessoryWidget} AccessoryWidget instance
                     */
                    AccessoryWidget.create = function create(properties) {
                        return new AccessoryWidget(properties);
                    };
    
                    /**
                     * Encodes the specified AccessoryWidget message. Does not implicitly {@link google.chat.v1.AccessoryWidget.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.AccessoryWidget
                     * @static
                     * @param {google.chat.v1.IAccessoryWidget} message AccessoryWidget message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccessoryWidget.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.buttonList != null && Object.hasOwnProperty.call(message, "buttonList"))
                            $root.google.apps.card.v1.ButtonList.encode(message.buttonList, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AccessoryWidget message, length delimited. Does not implicitly {@link google.chat.v1.AccessoryWidget.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.AccessoryWidget
                     * @static
                     * @param {google.chat.v1.IAccessoryWidget} message AccessoryWidget message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccessoryWidget.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AccessoryWidget message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.AccessoryWidget
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.AccessoryWidget} AccessoryWidget
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccessoryWidget.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.AccessoryWidget();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.buttonList = $root.google.apps.card.v1.ButtonList.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AccessoryWidget message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.AccessoryWidget
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.AccessoryWidget} AccessoryWidget
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccessoryWidget.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AccessoryWidget message.
                     * @function verify
                     * @memberof google.chat.v1.AccessoryWidget
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AccessoryWidget.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.buttonList != null && message.hasOwnProperty("buttonList")) {
                            properties.action = 1;
                            {
                                var error = $root.google.apps.card.v1.ButtonList.verify(message.buttonList);
                                if (error)
                                    return "buttonList." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AccessoryWidget message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.AccessoryWidget
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.AccessoryWidget} AccessoryWidget
                     */
                    AccessoryWidget.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.AccessoryWidget)
                            return object;
                        var message = new $root.google.chat.v1.AccessoryWidget();
                        if (object.buttonList != null) {
                            if (typeof object.buttonList !== "object")
                                throw TypeError(".google.chat.v1.AccessoryWidget.buttonList: object expected");
                            message.buttonList = $root.google.apps.card.v1.ButtonList.fromObject(object.buttonList);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AccessoryWidget message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.AccessoryWidget
                     * @static
                     * @param {google.chat.v1.AccessoryWidget} message AccessoryWidget
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AccessoryWidget.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.buttonList != null && message.hasOwnProperty("buttonList")) {
                            object.buttonList = $root.google.apps.card.v1.ButtonList.toObject(message.buttonList, options);
                            if (options.oneofs)
                                object.action = "buttonList";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this AccessoryWidget to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.AccessoryWidget
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AccessoryWidget.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AccessoryWidget
                     * @function getTypeUrl
                     * @memberof google.chat.v1.AccessoryWidget
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AccessoryWidget.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.AccessoryWidget";
                    };
    
                    return AccessoryWidget;
                })();
    
                v1.GetMessageRequest = (function() {
    
                    /**
                     * Properties of a GetMessageRequest.
                     * @memberof google.chat.v1
                     * @interface IGetMessageRequest
                     * @property {string|null} [name] GetMessageRequest name
                     */
    
                    /**
                     * Constructs a new GetMessageRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a GetMessageRequest.
                     * @implements IGetMessageRequest
                     * @constructor
                     * @param {google.chat.v1.IGetMessageRequest=} [properties] Properties to set
                     */
                    function GetMessageRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetMessageRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.GetMessageRequest
                     * @instance
                     */
                    GetMessageRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetMessageRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.GetMessageRequest
                     * @static
                     * @param {google.chat.v1.IGetMessageRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.GetMessageRequest} GetMessageRequest instance
                     */
                    GetMessageRequest.create = function create(properties) {
                        return new GetMessageRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetMessageRequest message. Does not implicitly {@link google.chat.v1.GetMessageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.GetMessageRequest
                     * @static
                     * @param {google.chat.v1.IGetMessageRequest} message GetMessageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetMessageRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetMessageRequest message, length delimited. Does not implicitly {@link google.chat.v1.GetMessageRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.GetMessageRequest
                     * @static
                     * @param {google.chat.v1.IGetMessageRequest} message GetMessageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetMessageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetMessageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.GetMessageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.GetMessageRequest} GetMessageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetMessageRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.GetMessageRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetMessageRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.GetMessageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.GetMessageRequest} GetMessageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetMessageRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetMessageRequest message.
                     * @function verify
                     * @memberof google.chat.v1.GetMessageRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetMessageRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetMessageRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.GetMessageRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.GetMessageRequest} GetMessageRequest
                     */
                    GetMessageRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.GetMessageRequest)
                            return object;
                        var message = new $root.google.chat.v1.GetMessageRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetMessageRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.GetMessageRequest
                     * @static
                     * @param {google.chat.v1.GetMessageRequest} message GetMessageRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetMessageRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetMessageRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.GetMessageRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetMessageRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetMessageRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.GetMessageRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetMessageRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.GetMessageRequest";
                    };
    
                    return GetMessageRequest;
                })();
    
                v1.DeleteMessageRequest = (function() {
    
                    /**
                     * Properties of a DeleteMessageRequest.
                     * @memberof google.chat.v1
                     * @interface IDeleteMessageRequest
                     * @property {string|null} [name] DeleteMessageRequest name
                     * @property {boolean|null} [force] DeleteMessageRequest force
                     */
    
                    /**
                     * Constructs a new DeleteMessageRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a DeleteMessageRequest.
                     * @implements IDeleteMessageRequest
                     * @constructor
                     * @param {google.chat.v1.IDeleteMessageRequest=} [properties] Properties to set
                     */
                    function DeleteMessageRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteMessageRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @instance
                     */
                    DeleteMessageRequest.prototype.name = "";
    
                    /**
                     * DeleteMessageRequest force.
                     * @member {boolean} force
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @instance
                     */
                    DeleteMessageRequest.prototype.force = false;
    
                    /**
                     * Creates a new DeleteMessageRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @static
                     * @param {google.chat.v1.IDeleteMessageRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.DeleteMessageRequest} DeleteMessageRequest instance
                     */
                    DeleteMessageRequest.create = function create(properties) {
                        return new DeleteMessageRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteMessageRequest message. Does not implicitly {@link google.chat.v1.DeleteMessageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @static
                     * @param {google.chat.v1.IDeleteMessageRequest} message DeleteMessageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteMessageRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.force != null && Object.hasOwnProperty.call(message, "force"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.force);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteMessageRequest message, length delimited. Does not implicitly {@link google.chat.v1.DeleteMessageRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @static
                     * @param {google.chat.v1.IDeleteMessageRequest} message DeleteMessageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteMessageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteMessageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.DeleteMessageRequest} DeleteMessageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteMessageRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.DeleteMessageRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.force = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteMessageRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.DeleteMessageRequest} DeleteMessageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteMessageRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteMessageRequest message.
                     * @function verify
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteMessageRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.force != null && message.hasOwnProperty("force"))
                            if (typeof message.force !== "boolean")
                                return "force: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteMessageRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.DeleteMessageRequest} DeleteMessageRequest
                     */
                    DeleteMessageRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.DeleteMessageRequest)
                            return object;
                        var message = new $root.google.chat.v1.DeleteMessageRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.force != null)
                            message.force = Boolean(object.force);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteMessageRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @static
                     * @param {google.chat.v1.DeleteMessageRequest} message DeleteMessageRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteMessageRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.force = false;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.force != null && message.hasOwnProperty("force"))
                            object.force = message.force;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteMessageRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteMessageRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DeleteMessageRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.DeleteMessageRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DeleteMessageRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.DeleteMessageRequest";
                    };
    
                    return DeleteMessageRequest;
                })();
    
                v1.UpdateMessageRequest = (function() {
    
                    /**
                     * Properties of an UpdateMessageRequest.
                     * @memberof google.chat.v1
                     * @interface IUpdateMessageRequest
                     * @property {google.chat.v1.IMessage|null} [message] UpdateMessageRequest message
                     * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateMessageRequest updateMask
                     * @property {boolean|null} [allowMissing] UpdateMessageRequest allowMissing
                     */
    
                    /**
                     * Constructs a new UpdateMessageRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents an UpdateMessageRequest.
                     * @implements IUpdateMessageRequest
                     * @constructor
                     * @param {google.chat.v1.IUpdateMessageRequest=} [properties] Properties to set
                     */
                    function UpdateMessageRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateMessageRequest message.
                     * @member {google.chat.v1.IMessage|null|undefined} message
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @instance
                     */
                    UpdateMessageRequest.prototype.message = null;
    
                    /**
                     * UpdateMessageRequest updateMask.
                     * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @instance
                     */
                    UpdateMessageRequest.prototype.updateMask = null;
    
                    /**
                     * UpdateMessageRequest allowMissing.
                     * @member {boolean} allowMissing
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @instance
                     */
                    UpdateMessageRequest.prototype.allowMissing = false;
    
                    /**
                     * Creates a new UpdateMessageRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @static
                     * @param {google.chat.v1.IUpdateMessageRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.UpdateMessageRequest} UpdateMessageRequest instance
                     */
                    UpdateMessageRequest.create = function create(properties) {
                        return new UpdateMessageRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateMessageRequest message. Does not implicitly {@link google.chat.v1.UpdateMessageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @static
                     * @param {google.chat.v1.IUpdateMessageRequest} message UpdateMessageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateMessageRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                            $root.google.chat.v1.Message.encode(message.message, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                            $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.allowMissing != null && Object.hasOwnProperty.call(message, "allowMissing"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.allowMissing);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateMessageRequest message, length delimited. Does not implicitly {@link google.chat.v1.UpdateMessageRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @static
                     * @param {google.chat.v1.IUpdateMessageRequest} message UpdateMessageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateMessageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateMessageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.UpdateMessageRequest} UpdateMessageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateMessageRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.UpdateMessageRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.message = $root.google.chat.v1.Message.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.allowMissing = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateMessageRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.UpdateMessageRequest} UpdateMessageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateMessageRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateMessageRequest message.
                     * @function verify
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateMessageRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.message != null && message.hasOwnProperty("message")) {
                            var error = $root.google.chat.v1.Message.verify(message.message);
                            if (error)
                                return "message." + error;
                        }
                        if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                            if (error)
                                return "updateMask." + error;
                        }
                        if (message.allowMissing != null && message.hasOwnProperty("allowMissing"))
                            if (typeof message.allowMissing !== "boolean")
                                return "allowMissing: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates an UpdateMessageRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.UpdateMessageRequest} UpdateMessageRequest
                     */
                    UpdateMessageRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.UpdateMessageRequest)
                            return object;
                        var message = new $root.google.chat.v1.UpdateMessageRequest();
                        if (object.message != null) {
                            if (typeof object.message !== "object")
                                throw TypeError(".google.chat.v1.UpdateMessageRequest.message: object expected");
                            message.message = $root.google.chat.v1.Message.fromObject(object.message);
                        }
                        if (object.updateMask != null) {
                            if (typeof object.updateMask !== "object")
                                throw TypeError(".google.chat.v1.UpdateMessageRequest.updateMask: object expected");
                            message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                        }
                        if (object.allowMissing != null)
                            message.allowMissing = Boolean(object.allowMissing);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateMessageRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @static
                     * @param {google.chat.v1.UpdateMessageRequest} message UpdateMessageRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateMessageRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.message = null;
                            object.updateMask = null;
                            object.allowMissing = false;
                        }
                        if (message.message != null && message.hasOwnProperty("message"))
                            object.message = $root.google.chat.v1.Message.toObject(message.message, options);
                        if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                            object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                        if (message.allowMissing != null && message.hasOwnProperty("allowMissing"))
                            object.allowMissing = message.allowMissing;
                        return object;
                    };
    
                    /**
                     * Converts this UpdateMessageRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateMessageRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for UpdateMessageRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.UpdateMessageRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    UpdateMessageRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.UpdateMessageRequest";
                    };
    
                    return UpdateMessageRequest;
                })();
    
                v1.CreateMessageRequest = (function() {
    
                    /**
                     * Properties of a CreateMessageRequest.
                     * @memberof google.chat.v1
                     * @interface ICreateMessageRequest
                     * @property {string|null} [parent] CreateMessageRequest parent
                     * @property {google.chat.v1.IMessage|null} [message] CreateMessageRequest message
                     * @property {string|null} [threadKey] CreateMessageRequest threadKey
                     * @property {string|null} [requestId] CreateMessageRequest requestId
                     * @property {google.chat.v1.CreateMessageRequest.MessageReplyOption|null} [messageReplyOption] CreateMessageRequest messageReplyOption
                     * @property {string|null} [messageId] CreateMessageRequest messageId
                     */
    
                    /**
                     * Constructs a new CreateMessageRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a CreateMessageRequest.
                     * @implements ICreateMessageRequest
                     * @constructor
                     * @param {google.chat.v1.ICreateMessageRequest=} [properties] Properties to set
                     */
                    function CreateMessageRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateMessageRequest parent.
                     * @member {string} parent
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @instance
                     */
                    CreateMessageRequest.prototype.parent = "";
    
                    /**
                     * CreateMessageRequest message.
                     * @member {google.chat.v1.IMessage|null|undefined} message
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @instance
                     */
                    CreateMessageRequest.prototype.message = null;
    
                    /**
                     * CreateMessageRequest threadKey.
                     * @member {string} threadKey
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @instance
                     */
                    CreateMessageRequest.prototype.threadKey = "";
    
                    /**
                     * CreateMessageRequest requestId.
                     * @member {string} requestId
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @instance
                     */
                    CreateMessageRequest.prototype.requestId = "";
    
                    /**
                     * CreateMessageRequest messageReplyOption.
                     * @member {google.chat.v1.CreateMessageRequest.MessageReplyOption} messageReplyOption
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @instance
                     */
                    CreateMessageRequest.prototype.messageReplyOption = 0;
    
                    /**
                     * CreateMessageRequest messageId.
                     * @member {string} messageId
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @instance
                     */
                    CreateMessageRequest.prototype.messageId = "";
    
                    /**
                     * Creates a new CreateMessageRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @static
                     * @param {google.chat.v1.ICreateMessageRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.CreateMessageRequest} CreateMessageRequest instance
                     */
                    CreateMessageRequest.create = function create(properties) {
                        return new CreateMessageRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateMessageRequest message. Does not implicitly {@link google.chat.v1.CreateMessageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @static
                     * @param {google.chat.v1.ICreateMessageRequest} message CreateMessageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateMessageRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                            $root.google.chat.v1.Message.encode(message.message, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.threadKey != null && Object.hasOwnProperty.call(message, "threadKey"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.threadKey);
                        if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.requestId);
                        if (message.messageReplyOption != null && Object.hasOwnProperty.call(message, "messageReplyOption"))
                            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.messageReplyOption);
                        if (message.messageId != null && Object.hasOwnProperty.call(message, "messageId"))
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.messageId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateMessageRequest message, length delimited. Does not implicitly {@link google.chat.v1.CreateMessageRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @static
                     * @param {google.chat.v1.ICreateMessageRequest} message CreateMessageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateMessageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateMessageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.CreateMessageRequest} CreateMessageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateMessageRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.CreateMessageRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parent = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.message = $root.google.chat.v1.Message.decode(reader, reader.uint32());
                                    break;
                                }
                            case 6: {
                                    message.threadKey = reader.string();
                                    break;
                                }
                            case 7: {
                                    message.requestId = reader.string();
                                    break;
                                }
                            case 8: {
                                    message.messageReplyOption = reader.int32();
                                    break;
                                }
                            case 9: {
                                    message.messageId = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateMessageRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.CreateMessageRequest} CreateMessageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateMessageRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateMessageRequest message.
                     * @function verify
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateMessageRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.message != null && message.hasOwnProperty("message")) {
                            var error = $root.google.chat.v1.Message.verify(message.message);
                            if (error)
                                return "message." + error;
                        }
                        if (message.threadKey != null && message.hasOwnProperty("threadKey"))
                            if (!$util.isString(message.threadKey))
                                return "threadKey: string expected";
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            if (!$util.isString(message.requestId))
                                return "requestId: string expected";
                        if (message.messageReplyOption != null && message.hasOwnProperty("messageReplyOption"))
                            switch (message.messageReplyOption) {
                            default:
                                return "messageReplyOption: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.messageId != null && message.hasOwnProperty("messageId"))
                            if (!$util.isString(message.messageId))
                                return "messageId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CreateMessageRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.CreateMessageRequest} CreateMessageRequest
                     */
                    CreateMessageRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.CreateMessageRequest)
                            return object;
                        var message = new $root.google.chat.v1.CreateMessageRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.message != null) {
                            if (typeof object.message !== "object")
                                throw TypeError(".google.chat.v1.CreateMessageRequest.message: object expected");
                            message.message = $root.google.chat.v1.Message.fromObject(object.message);
                        }
                        if (object.threadKey != null)
                            message.threadKey = String(object.threadKey);
                        if (object.requestId != null)
                            message.requestId = String(object.requestId);
                        switch (object.messageReplyOption) {
                        default:
                            if (typeof object.messageReplyOption === "number") {
                                message.messageReplyOption = object.messageReplyOption;
                                break;
                            }
                            break;
                        case "MESSAGE_REPLY_OPTION_UNSPECIFIED":
                        case 0:
                            message.messageReplyOption = 0;
                            break;
                        case "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD":
                        case 1:
                            message.messageReplyOption = 1;
                            break;
                        case "REPLY_MESSAGE_OR_FAIL":
                        case 2:
                            message.messageReplyOption = 2;
                            break;
                        }
                        if (object.messageId != null)
                            message.messageId = String(object.messageId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateMessageRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @static
                     * @param {google.chat.v1.CreateMessageRequest} message CreateMessageRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateMessageRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.message = null;
                            object.threadKey = "";
                            object.requestId = "";
                            object.messageReplyOption = options.enums === String ? "MESSAGE_REPLY_OPTION_UNSPECIFIED" : 0;
                            object.messageId = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.message != null && message.hasOwnProperty("message"))
                            object.message = $root.google.chat.v1.Message.toObject(message.message, options);
                        if (message.threadKey != null && message.hasOwnProperty("threadKey"))
                            object.threadKey = message.threadKey;
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            object.requestId = message.requestId;
                        if (message.messageReplyOption != null && message.hasOwnProperty("messageReplyOption"))
                            object.messageReplyOption = options.enums === String ? $root.google.chat.v1.CreateMessageRequest.MessageReplyOption[message.messageReplyOption] === undefined ? message.messageReplyOption : $root.google.chat.v1.CreateMessageRequest.MessageReplyOption[message.messageReplyOption] : message.messageReplyOption;
                        if (message.messageId != null && message.hasOwnProperty("messageId"))
                            object.messageId = message.messageId;
                        return object;
                    };
    
                    /**
                     * Converts this CreateMessageRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateMessageRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CreateMessageRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.CreateMessageRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CreateMessageRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.CreateMessageRequest";
                    };
    
                    /**
                     * MessageReplyOption enum.
                     * @name google.chat.v1.CreateMessageRequest.MessageReplyOption
                     * @enum {number}
                     * @property {number} MESSAGE_REPLY_OPTION_UNSPECIFIED=0 MESSAGE_REPLY_OPTION_UNSPECIFIED value
                     * @property {number} REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD=1 REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD value
                     * @property {number} REPLY_MESSAGE_OR_FAIL=2 REPLY_MESSAGE_OR_FAIL value
                     */
                    CreateMessageRequest.MessageReplyOption = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "MESSAGE_REPLY_OPTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD"] = 1;
                        values[valuesById[2] = "REPLY_MESSAGE_OR_FAIL"] = 2;
                        return values;
                    })();
    
                    return CreateMessageRequest;
                })();
    
                v1.ListMessagesRequest = (function() {
    
                    /**
                     * Properties of a ListMessagesRequest.
                     * @memberof google.chat.v1
                     * @interface IListMessagesRequest
                     * @property {string|null} [parent] ListMessagesRequest parent
                     * @property {number|null} [pageSize] ListMessagesRequest pageSize
                     * @property {string|null} [pageToken] ListMessagesRequest pageToken
                     * @property {string|null} [filter] ListMessagesRequest filter
                     * @property {string|null} [orderBy] ListMessagesRequest orderBy
                     * @property {boolean|null} [showDeleted] ListMessagesRequest showDeleted
                     */
    
                    /**
                     * Constructs a new ListMessagesRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ListMessagesRequest.
                     * @implements IListMessagesRequest
                     * @constructor
                     * @param {google.chat.v1.IListMessagesRequest=} [properties] Properties to set
                     */
                    function ListMessagesRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListMessagesRequest parent.
                     * @member {string} parent
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @instance
                     */
                    ListMessagesRequest.prototype.parent = "";
    
                    /**
                     * ListMessagesRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @instance
                     */
                    ListMessagesRequest.prototype.pageSize = 0;
    
                    /**
                     * ListMessagesRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @instance
                     */
                    ListMessagesRequest.prototype.pageToken = "";
    
                    /**
                     * ListMessagesRequest filter.
                     * @member {string} filter
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @instance
                     */
                    ListMessagesRequest.prototype.filter = "";
    
                    /**
                     * ListMessagesRequest orderBy.
                     * @member {string} orderBy
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @instance
                     */
                    ListMessagesRequest.prototype.orderBy = "";
    
                    /**
                     * ListMessagesRequest showDeleted.
                     * @member {boolean} showDeleted
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @instance
                     */
                    ListMessagesRequest.prototype.showDeleted = false;
    
                    /**
                     * Creates a new ListMessagesRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @static
                     * @param {google.chat.v1.IListMessagesRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.ListMessagesRequest} ListMessagesRequest instance
                     */
                    ListMessagesRequest.create = function create(properties) {
                        return new ListMessagesRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListMessagesRequest message. Does not implicitly {@link google.chat.v1.ListMessagesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @static
                     * @param {google.chat.v1.IListMessagesRequest} message ListMessagesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListMessagesRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.filter);
                        if (message.orderBy != null && Object.hasOwnProperty.call(message, "orderBy"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.orderBy);
                        if (message.showDeleted != null && Object.hasOwnProperty.call(message, "showDeleted"))
                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.showDeleted);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListMessagesRequest message, length delimited. Does not implicitly {@link google.chat.v1.ListMessagesRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @static
                     * @param {google.chat.v1.IListMessagesRequest} message ListMessagesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListMessagesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListMessagesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ListMessagesRequest} ListMessagesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListMessagesRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ListMessagesRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parent = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.pageSize = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.pageToken = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.filter = reader.string();
                                    break;
                                }
                            case 5: {
                                    message.orderBy = reader.string();
                                    break;
                                }
                            case 6: {
                                    message.showDeleted = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListMessagesRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ListMessagesRequest} ListMessagesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListMessagesRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListMessagesRequest message.
                     * @function verify
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListMessagesRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            if (!$util.isString(message.filter))
                                return "filter: string expected";
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            if (!$util.isString(message.orderBy))
                                return "orderBy: string expected";
                        if (message.showDeleted != null && message.hasOwnProperty("showDeleted"))
                            if (typeof message.showDeleted !== "boolean")
                                return "showDeleted: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListMessagesRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ListMessagesRequest} ListMessagesRequest
                     */
                    ListMessagesRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ListMessagesRequest)
                            return object;
                        var message = new $root.google.chat.v1.ListMessagesRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        if (object.filter != null)
                            message.filter = String(object.filter);
                        if (object.orderBy != null)
                            message.orderBy = String(object.orderBy);
                        if (object.showDeleted != null)
                            message.showDeleted = Boolean(object.showDeleted);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListMessagesRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @static
                     * @param {google.chat.v1.ListMessagesRequest} message ListMessagesRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListMessagesRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                            object.filter = "";
                            object.orderBy = "";
                            object.showDeleted = false;
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            object.filter = message.filter;
                        if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                            object.orderBy = message.orderBy;
                        if (message.showDeleted != null && message.hasOwnProperty("showDeleted"))
                            object.showDeleted = message.showDeleted;
                        return object;
                    };
    
                    /**
                     * Converts this ListMessagesRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListMessagesRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ListMessagesRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ListMessagesRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ListMessagesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ListMessagesRequest";
                    };
    
                    return ListMessagesRequest;
                })();
    
                v1.ListMessagesResponse = (function() {
    
                    /**
                     * Properties of a ListMessagesResponse.
                     * @memberof google.chat.v1
                     * @interface IListMessagesResponse
                     * @property {Array.<google.chat.v1.IMessage>|null} [messages] ListMessagesResponse messages
                     * @property {string|null} [nextPageToken] ListMessagesResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListMessagesResponse.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ListMessagesResponse.
                     * @implements IListMessagesResponse
                     * @constructor
                     * @param {google.chat.v1.IListMessagesResponse=} [properties] Properties to set
                     */
                    function ListMessagesResponse(properties) {
                        this.messages = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListMessagesResponse messages.
                     * @member {Array.<google.chat.v1.IMessage>} messages
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @instance
                     */
                    ListMessagesResponse.prototype.messages = $util.emptyArray;
    
                    /**
                     * ListMessagesResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @instance
                     */
                    ListMessagesResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListMessagesResponse instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @static
                     * @param {google.chat.v1.IListMessagesResponse=} [properties] Properties to set
                     * @returns {google.chat.v1.ListMessagesResponse} ListMessagesResponse instance
                     */
                    ListMessagesResponse.create = function create(properties) {
                        return new ListMessagesResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListMessagesResponse message. Does not implicitly {@link google.chat.v1.ListMessagesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @static
                     * @param {google.chat.v1.IListMessagesResponse} message ListMessagesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListMessagesResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.messages != null && message.messages.length)
                            for (var i = 0; i < message.messages.length; ++i)
                                $root.google.chat.v1.Message.encode(message.messages[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListMessagesResponse message, length delimited. Does not implicitly {@link google.chat.v1.ListMessagesResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @static
                     * @param {google.chat.v1.IListMessagesResponse} message ListMessagesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListMessagesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListMessagesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ListMessagesResponse} ListMessagesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListMessagesResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ListMessagesResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.messages && message.messages.length))
                                        message.messages = [];
                                    message.messages.push($root.google.chat.v1.Message.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 2: {
                                    message.nextPageToken = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListMessagesResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ListMessagesResponse} ListMessagesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListMessagesResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListMessagesResponse message.
                     * @function verify
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListMessagesResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.messages != null && message.hasOwnProperty("messages")) {
                            if (!Array.isArray(message.messages))
                                return "messages: array expected";
                            for (var i = 0; i < message.messages.length; ++i) {
                                var error = $root.google.chat.v1.Message.verify(message.messages[i]);
                                if (error)
                                    return "messages." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListMessagesResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ListMessagesResponse} ListMessagesResponse
                     */
                    ListMessagesResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ListMessagesResponse)
                            return object;
                        var message = new $root.google.chat.v1.ListMessagesResponse();
                        if (object.messages) {
                            if (!Array.isArray(object.messages))
                                throw TypeError(".google.chat.v1.ListMessagesResponse.messages: array expected");
                            message.messages = [];
                            for (var i = 0; i < object.messages.length; ++i) {
                                if (typeof object.messages[i] !== "object")
                                    throw TypeError(".google.chat.v1.ListMessagesResponse.messages: object expected");
                                message.messages[i] = $root.google.chat.v1.Message.fromObject(object.messages[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListMessagesResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @static
                     * @param {google.chat.v1.ListMessagesResponse} message ListMessagesResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListMessagesResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.messages = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.messages && message.messages.length) {
                            object.messages = [];
                            for (var j = 0; j < message.messages.length; ++j)
                                object.messages[j] = $root.google.chat.v1.Message.toObject(message.messages[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListMessagesResponse to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListMessagesResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ListMessagesResponse
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ListMessagesResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ListMessagesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ListMessagesResponse";
                    };
    
                    return ListMessagesResponse;
                })();
    
                v1.DialogAction = (function() {
    
                    /**
                     * Properties of a DialogAction.
                     * @memberof google.chat.v1
                     * @interface IDialogAction
                     * @property {google.chat.v1.IDialog|null} [dialog] DialogAction dialog
                     * @property {google.chat.v1.IActionStatus|null} [actionStatus] DialogAction actionStatus
                     */
    
                    /**
                     * Constructs a new DialogAction.
                     * @memberof google.chat.v1
                     * @classdesc Represents a DialogAction.
                     * @implements IDialogAction
                     * @constructor
                     * @param {google.chat.v1.IDialogAction=} [properties] Properties to set
                     */
                    function DialogAction(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DialogAction dialog.
                     * @member {google.chat.v1.IDialog|null|undefined} dialog
                     * @memberof google.chat.v1.DialogAction
                     * @instance
                     */
                    DialogAction.prototype.dialog = null;
    
                    /**
                     * DialogAction actionStatus.
                     * @member {google.chat.v1.IActionStatus|null|undefined} actionStatus
                     * @memberof google.chat.v1.DialogAction
                     * @instance
                     */
                    DialogAction.prototype.actionStatus = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * DialogAction action.
                     * @member {"dialog"|undefined} action
                     * @memberof google.chat.v1.DialogAction
                     * @instance
                     */
                    Object.defineProperty(DialogAction.prototype, "action", {
                        get: $util.oneOfGetter($oneOfFields = ["dialog"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new DialogAction instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.DialogAction
                     * @static
                     * @param {google.chat.v1.IDialogAction=} [properties] Properties to set
                     * @returns {google.chat.v1.DialogAction} DialogAction instance
                     */
                    DialogAction.create = function create(properties) {
                        return new DialogAction(properties);
                    };
    
                    /**
                     * Encodes the specified DialogAction message. Does not implicitly {@link google.chat.v1.DialogAction.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.DialogAction
                     * @static
                     * @param {google.chat.v1.IDialogAction} message DialogAction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DialogAction.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.dialog != null && Object.hasOwnProperty.call(message, "dialog"))
                            $root.google.chat.v1.Dialog.encode(message.dialog, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.actionStatus != null && Object.hasOwnProperty.call(message, "actionStatus"))
                            $root.google.chat.v1.ActionStatus.encode(message.actionStatus, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DialogAction message, length delimited. Does not implicitly {@link google.chat.v1.DialogAction.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.DialogAction
                     * @static
                     * @param {google.chat.v1.IDialogAction} message DialogAction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DialogAction.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DialogAction message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.DialogAction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.DialogAction} DialogAction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DialogAction.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.DialogAction();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.dialog = $root.google.chat.v1.Dialog.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.actionStatus = $root.google.chat.v1.ActionStatus.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DialogAction message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.DialogAction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.DialogAction} DialogAction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DialogAction.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DialogAction message.
                     * @function verify
                     * @memberof google.chat.v1.DialogAction
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DialogAction.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.dialog != null && message.hasOwnProperty("dialog")) {
                            properties.action = 1;
                            {
                                var error = $root.google.chat.v1.Dialog.verify(message.dialog);
                                if (error)
                                    return "dialog." + error;
                            }
                        }
                        if (message.actionStatus != null && message.hasOwnProperty("actionStatus")) {
                            var error = $root.google.chat.v1.ActionStatus.verify(message.actionStatus);
                            if (error)
                                return "actionStatus." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DialogAction message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.DialogAction
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.DialogAction} DialogAction
                     */
                    DialogAction.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.DialogAction)
                            return object;
                        var message = new $root.google.chat.v1.DialogAction();
                        if (object.dialog != null) {
                            if (typeof object.dialog !== "object")
                                throw TypeError(".google.chat.v1.DialogAction.dialog: object expected");
                            message.dialog = $root.google.chat.v1.Dialog.fromObject(object.dialog);
                        }
                        if (object.actionStatus != null) {
                            if (typeof object.actionStatus !== "object")
                                throw TypeError(".google.chat.v1.DialogAction.actionStatus: object expected");
                            message.actionStatus = $root.google.chat.v1.ActionStatus.fromObject(object.actionStatus);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DialogAction message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.DialogAction
                     * @static
                     * @param {google.chat.v1.DialogAction} message DialogAction
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DialogAction.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.actionStatus = null;
                        if (message.dialog != null && message.hasOwnProperty("dialog")) {
                            object.dialog = $root.google.chat.v1.Dialog.toObject(message.dialog, options);
                            if (options.oneofs)
                                object.action = "dialog";
                        }
                        if (message.actionStatus != null && message.hasOwnProperty("actionStatus"))
                            object.actionStatus = $root.google.chat.v1.ActionStatus.toObject(message.actionStatus, options);
                        return object;
                    };
    
                    /**
                     * Converts this DialogAction to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.DialogAction
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DialogAction.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DialogAction
                     * @function getTypeUrl
                     * @memberof google.chat.v1.DialogAction
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DialogAction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.DialogAction";
                    };
    
                    return DialogAction;
                })();
    
                v1.Dialog = (function() {
    
                    /**
                     * Properties of a Dialog.
                     * @memberof google.chat.v1
                     * @interface IDialog
                     * @property {google.apps.card.v1.ICard|null} [body] Dialog body
                     */
    
                    /**
                     * Constructs a new Dialog.
                     * @memberof google.chat.v1
                     * @classdesc Represents a Dialog.
                     * @implements IDialog
                     * @constructor
                     * @param {google.chat.v1.IDialog=} [properties] Properties to set
                     */
                    function Dialog(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Dialog body.
                     * @member {google.apps.card.v1.ICard|null|undefined} body
                     * @memberof google.chat.v1.Dialog
                     * @instance
                     */
                    Dialog.prototype.body = null;
    
                    /**
                     * Creates a new Dialog instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.Dialog
                     * @static
                     * @param {google.chat.v1.IDialog=} [properties] Properties to set
                     * @returns {google.chat.v1.Dialog} Dialog instance
                     */
                    Dialog.create = function create(properties) {
                        return new Dialog(properties);
                    };
    
                    /**
                     * Encodes the specified Dialog message. Does not implicitly {@link google.chat.v1.Dialog.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.Dialog
                     * @static
                     * @param {google.chat.v1.IDialog} message Dialog message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Dialog.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                            $root.google.apps.card.v1.Card.encode(message.body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Dialog message, length delimited. Does not implicitly {@link google.chat.v1.Dialog.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.Dialog
                     * @static
                     * @param {google.chat.v1.IDialog} message Dialog message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Dialog.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Dialog message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.Dialog
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.Dialog} Dialog
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Dialog.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Dialog();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.body = $root.google.apps.card.v1.Card.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Dialog message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.Dialog
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.Dialog} Dialog
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Dialog.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Dialog message.
                     * @function verify
                     * @memberof google.chat.v1.Dialog
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Dialog.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.body != null && message.hasOwnProperty("body")) {
                            var error = $root.google.apps.card.v1.Card.verify(message.body);
                            if (error)
                                return "body." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Dialog message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.Dialog
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.Dialog} Dialog
                     */
                    Dialog.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.Dialog)
                            return object;
                        var message = new $root.google.chat.v1.Dialog();
                        if (object.body != null) {
                            if (typeof object.body !== "object")
                                throw TypeError(".google.chat.v1.Dialog.body: object expected");
                            message.body = $root.google.apps.card.v1.Card.fromObject(object.body);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Dialog message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.Dialog
                     * @static
                     * @param {google.chat.v1.Dialog} message Dialog
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Dialog.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.body = null;
                        if (message.body != null && message.hasOwnProperty("body"))
                            object.body = $root.google.apps.card.v1.Card.toObject(message.body, options);
                        return object;
                    };
    
                    /**
                     * Converts this Dialog to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.Dialog
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Dialog.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Dialog
                     * @function getTypeUrl
                     * @memberof google.chat.v1.Dialog
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Dialog.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.Dialog";
                    };
    
                    return Dialog;
                })();
    
                v1.CardWithId = (function() {
    
                    /**
                     * Properties of a CardWithId.
                     * @memberof google.chat.v1
                     * @interface ICardWithId
                     * @property {string|null} [cardId] CardWithId cardId
                     * @property {google.apps.card.v1.ICard|null} [card] CardWithId card
                     */
    
                    /**
                     * Constructs a new CardWithId.
                     * @memberof google.chat.v1
                     * @classdesc Represents a CardWithId.
                     * @implements ICardWithId
                     * @constructor
                     * @param {google.chat.v1.ICardWithId=} [properties] Properties to set
                     */
                    function CardWithId(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CardWithId cardId.
                     * @member {string} cardId
                     * @memberof google.chat.v1.CardWithId
                     * @instance
                     */
                    CardWithId.prototype.cardId = "";
    
                    /**
                     * CardWithId card.
                     * @member {google.apps.card.v1.ICard|null|undefined} card
                     * @memberof google.chat.v1.CardWithId
                     * @instance
                     */
                    CardWithId.prototype.card = null;
    
                    /**
                     * Creates a new CardWithId instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.CardWithId
                     * @static
                     * @param {google.chat.v1.ICardWithId=} [properties] Properties to set
                     * @returns {google.chat.v1.CardWithId} CardWithId instance
                     */
                    CardWithId.create = function create(properties) {
                        return new CardWithId(properties);
                    };
    
                    /**
                     * Encodes the specified CardWithId message. Does not implicitly {@link google.chat.v1.CardWithId.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.CardWithId
                     * @static
                     * @param {google.chat.v1.ICardWithId} message CardWithId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CardWithId.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cardId != null && Object.hasOwnProperty.call(message, "cardId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cardId);
                        if (message.card != null && Object.hasOwnProperty.call(message, "card"))
                            $root.google.apps.card.v1.Card.encode(message.card, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CardWithId message, length delimited. Does not implicitly {@link google.chat.v1.CardWithId.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.CardWithId
                     * @static
                     * @param {google.chat.v1.ICardWithId} message CardWithId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CardWithId.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CardWithId message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.CardWithId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.CardWithId} CardWithId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CardWithId.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.CardWithId();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.cardId = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.card = $root.google.apps.card.v1.Card.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CardWithId message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.CardWithId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.CardWithId} CardWithId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CardWithId.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CardWithId message.
                     * @function verify
                     * @memberof google.chat.v1.CardWithId
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CardWithId.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cardId != null && message.hasOwnProperty("cardId"))
                            if (!$util.isString(message.cardId))
                                return "cardId: string expected";
                        if (message.card != null && message.hasOwnProperty("card")) {
                            var error = $root.google.apps.card.v1.Card.verify(message.card);
                            if (error)
                                return "card." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CardWithId message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.CardWithId
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.CardWithId} CardWithId
                     */
                    CardWithId.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.CardWithId)
                            return object;
                        var message = new $root.google.chat.v1.CardWithId();
                        if (object.cardId != null)
                            message.cardId = String(object.cardId);
                        if (object.card != null) {
                            if (typeof object.card !== "object")
                                throw TypeError(".google.chat.v1.CardWithId.card: object expected");
                            message.card = $root.google.apps.card.v1.Card.fromObject(object.card);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CardWithId message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.CardWithId
                     * @static
                     * @param {google.chat.v1.CardWithId} message CardWithId
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CardWithId.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.cardId = "";
                            object.card = null;
                        }
                        if (message.cardId != null && message.hasOwnProperty("cardId"))
                            object.cardId = message.cardId;
                        if (message.card != null && message.hasOwnProperty("card"))
                            object.card = $root.google.apps.card.v1.Card.toObject(message.card, options);
                        return object;
                    };
    
                    /**
                     * Converts this CardWithId to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.CardWithId
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CardWithId.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CardWithId
                     * @function getTypeUrl
                     * @memberof google.chat.v1.CardWithId
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CardWithId.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.CardWithId";
                    };
    
                    return CardWithId;
                })();
    
                v1.ContextualAddOnMarkup = (function() {
    
                    /**
                     * Properties of a ContextualAddOnMarkup.
                     * @memberof google.chat.v1
                     * @interface IContextualAddOnMarkup
                     */
    
                    /**
                     * Constructs a new ContextualAddOnMarkup.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ContextualAddOnMarkup.
                     * @implements IContextualAddOnMarkup
                     * @constructor
                     * @param {google.chat.v1.IContextualAddOnMarkup=} [properties] Properties to set
                     */
                    function ContextualAddOnMarkup(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new ContextualAddOnMarkup instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ContextualAddOnMarkup
                     * @static
                     * @param {google.chat.v1.IContextualAddOnMarkup=} [properties] Properties to set
                     * @returns {google.chat.v1.ContextualAddOnMarkup} ContextualAddOnMarkup instance
                     */
                    ContextualAddOnMarkup.create = function create(properties) {
                        return new ContextualAddOnMarkup(properties);
                    };
    
                    /**
                     * Encodes the specified ContextualAddOnMarkup message. Does not implicitly {@link google.chat.v1.ContextualAddOnMarkup.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ContextualAddOnMarkup
                     * @static
                     * @param {google.chat.v1.IContextualAddOnMarkup} message ContextualAddOnMarkup message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ContextualAddOnMarkup.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ContextualAddOnMarkup message, length delimited. Does not implicitly {@link google.chat.v1.ContextualAddOnMarkup.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ContextualAddOnMarkup
                     * @static
                     * @param {google.chat.v1.IContextualAddOnMarkup} message ContextualAddOnMarkup message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ContextualAddOnMarkup.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ContextualAddOnMarkup message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ContextualAddOnMarkup
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ContextualAddOnMarkup} ContextualAddOnMarkup
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ContextualAddOnMarkup.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ContextualAddOnMarkup();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ContextualAddOnMarkup message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ContextualAddOnMarkup
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ContextualAddOnMarkup} ContextualAddOnMarkup
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ContextualAddOnMarkup.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ContextualAddOnMarkup message.
                     * @function verify
                     * @memberof google.chat.v1.ContextualAddOnMarkup
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ContextualAddOnMarkup.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a ContextualAddOnMarkup message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ContextualAddOnMarkup
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ContextualAddOnMarkup} ContextualAddOnMarkup
                     */
                    ContextualAddOnMarkup.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ContextualAddOnMarkup)
                            return object;
                        return new $root.google.chat.v1.ContextualAddOnMarkup();
                    };
    
                    /**
                     * Creates a plain object from a ContextualAddOnMarkup message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ContextualAddOnMarkup
                     * @static
                     * @param {google.chat.v1.ContextualAddOnMarkup} message ContextualAddOnMarkup
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ContextualAddOnMarkup.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this ContextualAddOnMarkup to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ContextualAddOnMarkup
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ContextualAddOnMarkup.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ContextualAddOnMarkup
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ContextualAddOnMarkup
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ContextualAddOnMarkup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ContextualAddOnMarkup";
                    };
    
                    ContextualAddOnMarkup.Card = (function() {
    
                        /**
                         * Properties of a Card.
                         * @memberof google.chat.v1.ContextualAddOnMarkup
                         * @interface ICard
                         * @property {google.chat.v1.ContextualAddOnMarkup.Card.ICardHeader|null} [header] Card header
                         * @property {Array.<google.chat.v1.ContextualAddOnMarkup.Card.ISection>|null} [sections] Card sections
                         * @property {Array.<google.chat.v1.ContextualAddOnMarkup.Card.ICardAction>|null} [cardActions] Card cardActions
                         * @property {string|null} [name] Card name
                         */
    
                        /**
                         * Constructs a new Card.
                         * @memberof google.chat.v1.ContextualAddOnMarkup
                         * @classdesc Represents a Card.
                         * @implements ICard
                         * @constructor
                         * @param {google.chat.v1.ContextualAddOnMarkup.ICard=} [properties] Properties to set
                         */
                        function Card(properties) {
                            this.sections = [];
                            this.cardActions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Card header.
                         * @member {google.chat.v1.ContextualAddOnMarkup.Card.ICardHeader|null|undefined} header
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @instance
                         */
                        Card.prototype.header = null;
    
                        /**
                         * Card sections.
                         * @member {Array.<google.chat.v1.ContextualAddOnMarkup.Card.ISection>} sections
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @instance
                         */
                        Card.prototype.sections = $util.emptyArray;
    
                        /**
                         * Card cardActions.
                         * @member {Array.<google.chat.v1.ContextualAddOnMarkup.Card.ICardAction>} cardActions
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @instance
                         */
                        Card.prototype.cardActions = $util.emptyArray;
    
                        /**
                         * Card name.
                         * @member {string} name
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @instance
                         */
                        Card.prototype.name = "";
    
                        /**
                         * Creates a new Card instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @static
                         * @param {google.chat.v1.ContextualAddOnMarkup.ICard=} [properties] Properties to set
                         * @returns {google.chat.v1.ContextualAddOnMarkup.Card} Card instance
                         */
                        Card.create = function create(properties) {
                            return new Card(properties);
                        };
    
                        /**
                         * Encodes the specified Card message. Does not implicitly {@link google.chat.v1.ContextualAddOnMarkup.Card.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @static
                         * @param {google.chat.v1.ContextualAddOnMarkup.ICard} message Card message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Card.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                                $root.google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.sections != null && message.sections.length)
                                for (var i = 0; i < message.sections.length; ++i)
                                    $root.google.chat.v1.ContextualAddOnMarkup.Card.Section.encode(message.sections[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.cardActions != null && message.cardActions.length)
                                for (var i = 0; i < message.cardActions.length; ++i)
                                    $root.google.chat.v1.ContextualAddOnMarkup.Card.CardAction.encode(message.cardActions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Card message, length delimited. Does not implicitly {@link google.chat.v1.ContextualAddOnMarkup.Card.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @static
                         * @param {google.chat.v1.ContextualAddOnMarkup.ICard} message Card message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Card.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Card message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.ContextualAddOnMarkup.Card} Card
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Card.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ContextualAddOnMarkup.Card();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.header = $root.google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.sections && message.sections.length))
                                            message.sections = [];
                                        message.sections.push($root.google.chat.v1.ContextualAddOnMarkup.Card.Section.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.cardActions && message.cardActions.length))
                                            message.cardActions = [];
                                        message.cardActions.push($root.google.chat.v1.ContextualAddOnMarkup.Card.CardAction.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Card message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.ContextualAddOnMarkup.Card} Card
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Card.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Card message.
                         * @function verify
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Card.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.header != null && message.hasOwnProperty("header")) {
                                var error = $root.google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.verify(message.header);
                                if (error)
                                    return "header." + error;
                            }
                            if (message.sections != null && message.hasOwnProperty("sections")) {
                                if (!Array.isArray(message.sections))
                                    return "sections: array expected";
                                for (var i = 0; i < message.sections.length; ++i) {
                                    var error = $root.google.chat.v1.ContextualAddOnMarkup.Card.Section.verify(message.sections[i]);
                                    if (error)
                                        return "sections." + error;
                                }
                            }
                            if (message.cardActions != null && message.hasOwnProperty("cardActions")) {
                                if (!Array.isArray(message.cardActions))
                                    return "cardActions: array expected";
                                for (var i = 0; i < message.cardActions.length; ++i) {
                                    var error = $root.google.chat.v1.ContextualAddOnMarkup.Card.CardAction.verify(message.cardActions[i]);
                                    if (error)
                                        return "cardActions." + error;
                                }
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Card message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.ContextualAddOnMarkup.Card} Card
                         */
                        Card.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.ContextualAddOnMarkup.Card)
                                return object;
                            var message = new $root.google.chat.v1.ContextualAddOnMarkup.Card();
                            if (object.header != null) {
                                if (typeof object.header !== "object")
                                    throw TypeError(".google.chat.v1.ContextualAddOnMarkup.Card.header: object expected");
                                message.header = $root.google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.fromObject(object.header);
                            }
                            if (object.sections) {
                                if (!Array.isArray(object.sections))
                                    throw TypeError(".google.chat.v1.ContextualAddOnMarkup.Card.sections: array expected");
                                message.sections = [];
                                for (var i = 0; i < object.sections.length; ++i) {
                                    if (typeof object.sections[i] !== "object")
                                        throw TypeError(".google.chat.v1.ContextualAddOnMarkup.Card.sections: object expected");
                                    message.sections[i] = $root.google.chat.v1.ContextualAddOnMarkup.Card.Section.fromObject(object.sections[i]);
                                }
                            }
                            if (object.cardActions) {
                                if (!Array.isArray(object.cardActions))
                                    throw TypeError(".google.chat.v1.ContextualAddOnMarkup.Card.cardActions: array expected");
                                message.cardActions = [];
                                for (var i = 0; i < object.cardActions.length; ++i) {
                                    if (typeof object.cardActions[i] !== "object")
                                        throw TypeError(".google.chat.v1.ContextualAddOnMarkup.Card.cardActions: object expected");
                                    message.cardActions[i] = $root.google.chat.v1.ContextualAddOnMarkup.Card.CardAction.fromObject(object.cardActions[i]);
                                }
                            }
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Card message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @static
                         * @param {google.chat.v1.ContextualAddOnMarkup.Card} message Card
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Card.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.sections = [];
                                object.cardActions = [];
                            }
                            if (options.defaults) {
                                object.header = null;
                                object.name = "";
                            }
                            if (message.header != null && message.hasOwnProperty("header"))
                                object.header = $root.google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.toObject(message.header, options);
                            if (message.sections && message.sections.length) {
                                object.sections = [];
                                for (var j = 0; j < message.sections.length; ++j)
                                    object.sections[j] = $root.google.chat.v1.ContextualAddOnMarkup.Card.Section.toObject(message.sections[j], options);
                            }
                            if (message.cardActions && message.cardActions.length) {
                                object.cardActions = [];
                                for (var j = 0; j < message.cardActions.length; ++j)
                                    object.cardActions[j] = $root.google.chat.v1.ContextualAddOnMarkup.Card.CardAction.toObject(message.cardActions[j], options);
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this Card to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Card.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Card
                         * @function getTypeUrl
                         * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Card.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.ContextualAddOnMarkup.Card";
                        };
    
                        Card.CardHeader = (function() {
    
                            /**
                             * Properties of a CardHeader.
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                             * @interface ICardHeader
                             * @property {string|null} [title] CardHeader title
                             * @property {string|null} [subtitle] CardHeader subtitle
                             * @property {google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.ImageStyle|null} [imageStyle] CardHeader imageStyle
                             * @property {string|null} [imageUrl] CardHeader imageUrl
                             */
    
                            /**
                             * Constructs a new CardHeader.
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                             * @classdesc Represents a CardHeader.
                             * @implements ICardHeader
                             * @constructor
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ICardHeader=} [properties] Properties to set
                             */
                            function CardHeader(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CardHeader title.
                             * @member {string} title
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @instance
                             */
                            CardHeader.prototype.title = "";
    
                            /**
                             * CardHeader subtitle.
                             * @member {string} subtitle
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @instance
                             */
                            CardHeader.prototype.subtitle = "";
    
                            /**
                             * CardHeader imageStyle.
                             * @member {google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.ImageStyle} imageStyle
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @instance
                             */
                            CardHeader.prototype.imageStyle = 0;
    
                            /**
                             * CardHeader imageUrl.
                             * @member {string} imageUrl
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @instance
                             */
                            CardHeader.prototype.imageUrl = "";
    
                            /**
                             * Creates a new CardHeader instance using the specified properties.
                             * @function create
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ICardHeader=} [properties] Properties to set
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.CardHeader} CardHeader instance
                             */
                            CardHeader.create = function create(properties) {
                                return new CardHeader(properties);
                            };
    
                            /**
                             * Encodes the specified CardHeader message. Does not implicitly {@link google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.verify|verify} messages.
                             * @function encode
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ICardHeader} message CardHeader message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardHeader.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                                if (message.subtitle != null && Object.hasOwnProperty.call(message, "subtitle"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.subtitle);
                                if (message.imageStyle != null && Object.hasOwnProperty.call(message, "imageStyle"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.imageStyle);
                                if (message.imageUrl != null && Object.hasOwnProperty.call(message, "imageUrl"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.imageUrl);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CardHeader message, length delimited. Does not implicitly {@link google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ICardHeader} message CardHeader message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardHeader.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CardHeader message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.CardHeader} CardHeader
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardHeader.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ContextualAddOnMarkup.Card.CardHeader();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.title = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.subtitle = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.imageStyle = reader.int32();
                                            break;
                                        }
                                    case 4: {
                                            message.imageUrl = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CardHeader message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.CardHeader} CardHeader
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardHeader.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CardHeader message.
                             * @function verify
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CardHeader.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.title != null && message.hasOwnProperty("title"))
                                    if (!$util.isString(message.title))
                                        return "title: string expected";
                                if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                                    if (!$util.isString(message.subtitle))
                                        return "subtitle: string expected";
                                if (message.imageStyle != null && message.hasOwnProperty("imageStyle"))
                                    switch (message.imageStyle) {
                                    default:
                                        return "imageStyle: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.imageUrl != null && message.hasOwnProperty("imageUrl"))
                                    if (!$util.isString(message.imageUrl))
                                        return "imageUrl: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a CardHeader message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.CardHeader} CardHeader
                             */
                            CardHeader.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.chat.v1.ContextualAddOnMarkup.Card.CardHeader)
                                    return object;
                                var message = new $root.google.chat.v1.ContextualAddOnMarkup.Card.CardHeader();
                                if (object.title != null)
                                    message.title = String(object.title);
                                if (object.subtitle != null)
                                    message.subtitle = String(object.subtitle);
                                switch (object.imageStyle) {
                                default:
                                    if (typeof object.imageStyle === "number") {
                                        message.imageStyle = object.imageStyle;
                                        break;
                                    }
                                    break;
                                case "IMAGE_STYLE_UNSPECIFIED":
                                case 0:
                                    message.imageStyle = 0;
                                    break;
                                case "IMAGE":
                                case 1:
                                    message.imageStyle = 1;
                                    break;
                                case "AVATAR":
                                case 2:
                                    message.imageStyle = 2;
                                    break;
                                }
                                if (object.imageUrl != null)
                                    message.imageUrl = String(object.imageUrl);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CardHeader message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.CardHeader} message CardHeader
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CardHeader.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.title = "";
                                    object.subtitle = "";
                                    object.imageStyle = options.enums === String ? "IMAGE_STYLE_UNSPECIFIED" : 0;
                                    object.imageUrl = "";
                                }
                                if (message.title != null && message.hasOwnProperty("title"))
                                    object.title = message.title;
                                if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                                    object.subtitle = message.subtitle;
                                if (message.imageStyle != null && message.hasOwnProperty("imageStyle"))
                                    object.imageStyle = options.enums === String ? $root.google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.ImageStyle[message.imageStyle] === undefined ? message.imageStyle : $root.google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.ImageStyle[message.imageStyle] : message.imageStyle;
                                if (message.imageUrl != null && message.hasOwnProperty("imageUrl"))
                                    object.imageUrl = message.imageUrl;
                                return object;
                            };
    
                            /**
                             * Converts this CardHeader to JSON.
                             * @function toJSON
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CardHeader.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for CardHeader
                             * @function getTypeUrl
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardHeader
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            CardHeader.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.chat.v1.ContextualAddOnMarkup.Card.CardHeader";
                            };
    
                            /**
                             * ImageStyle enum.
                             * @name google.chat.v1.ContextualAddOnMarkup.Card.CardHeader.ImageStyle
                             * @enum {number}
                             * @property {number} IMAGE_STYLE_UNSPECIFIED=0 IMAGE_STYLE_UNSPECIFIED value
                             * @property {number} IMAGE=1 IMAGE value
                             * @property {number} AVATAR=2 AVATAR value
                             */
                            CardHeader.ImageStyle = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "IMAGE_STYLE_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "IMAGE"] = 1;
                                values[valuesById[2] = "AVATAR"] = 2;
                                return values;
                            })();
    
                            return CardHeader;
                        })();
    
                        Card.Section = (function() {
    
                            /**
                             * Properties of a Section.
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                             * @interface ISection
                             * @property {string|null} [header] Section header
                             * @property {Array.<google.chat.v1.IWidgetMarkup>|null} [widgets] Section widgets
                             */
    
                            /**
                             * Constructs a new Section.
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                             * @classdesc Represents a Section.
                             * @implements ISection
                             * @constructor
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ISection=} [properties] Properties to set
                             */
                            function Section(properties) {
                                this.widgets = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Section header.
                             * @member {string} header
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @instance
                             */
                            Section.prototype.header = "";
    
                            /**
                             * Section widgets.
                             * @member {Array.<google.chat.v1.IWidgetMarkup>} widgets
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @instance
                             */
                            Section.prototype.widgets = $util.emptyArray;
    
                            /**
                             * Creates a new Section instance using the specified properties.
                             * @function create
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ISection=} [properties] Properties to set
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.Section} Section instance
                             */
                            Section.create = function create(properties) {
                                return new Section(properties);
                            };
    
                            /**
                             * Encodes the specified Section message. Does not implicitly {@link google.chat.v1.ContextualAddOnMarkup.Card.Section.verify|verify} messages.
                             * @function encode
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ISection} message Section message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Section.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.header);
                                if (message.widgets != null && message.widgets.length)
                                    for (var i = 0; i < message.widgets.length; ++i)
                                        $root.google.chat.v1.WidgetMarkup.encode(message.widgets[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Section message, length delimited. Does not implicitly {@link google.chat.v1.ContextualAddOnMarkup.Card.Section.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ISection} message Section message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Section.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Section message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.Section} Section
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Section.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ContextualAddOnMarkup.Card.Section();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.header = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.widgets && message.widgets.length))
                                                message.widgets = [];
                                            message.widgets.push($root.google.chat.v1.WidgetMarkup.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Section message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.Section} Section
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Section.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Section message.
                             * @function verify
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Section.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.header != null && message.hasOwnProperty("header"))
                                    if (!$util.isString(message.header))
                                        return "header: string expected";
                                if (message.widgets != null && message.hasOwnProperty("widgets")) {
                                    if (!Array.isArray(message.widgets))
                                        return "widgets: array expected";
                                    for (var i = 0; i < message.widgets.length; ++i) {
                                        var error = $root.google.chat.v1.WidgetMarkup.verify(message.widgets[i]);
                                        if (error)
                                            return "widgets." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Section message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.Section} Section
                             */
                            Section.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.chat.v1.ContextualAddOnMarkup.Card.Section)
                                    return object;
                                var message = new $root.google.chat.v1.ContextualAddOnMarkup.Card.Section();
                                if (object.header != null)
                                    message.header = String(object.header);
                                if (object.widgets) {
                                    if (!Array.isArray(object.widgets))
                                        throw TypeError(".google.chat.v1.ContextualAddOnMarkup.Card.Section.widgets: array expected");
                                    message.widgets = [];
                                    for (var i = 0; i < object.widgets.length; ++i) {
                                        if (typeof object.widgets[i] !== "object")
                                            throw TypeError(".google.chat.v1.ContextualAddOnMarkup.Card.Section.widgets: object expected");
                                        message.widgets[i] = $root.google.chat.v1.WidgetMarkup.fromObject(object.widgets[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Section message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.Section} message Section
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Section.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.widgets = [];
                                if (options.defaults)
                                    object.header = "";
                                if (message.header != null && message.hasOwnProperty("header"))
                                    object.header = message.header;
                                if (message.widgets && message.widgets.length) {
                                    object.widgets = [];
                                    for (var j = 0; j < message.widgets.length; ++j)
                                        object.widgets[j] = $root.google.chat.v1.WidgetMarkup.toObject(message.widgets[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Section to JSON.
                             * @function toJSON
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Section.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Section
                             * @function getTypeUrl
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.Section
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Section.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.chat.v1.ContextualAddOnMarkup.Card.Section";
                            };
    
                            return Section;
                        })();
    
                        Card.CardAction = (function() {
    
                            /**
                             * Properties of a CardAction.
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                             * @interface ICardAction
                             * @property {string|null} [actionLabel] CardAction actionLabel
                             * @property {google.chat.v1.WidgetMarkup.IOnClick|null} [onClick] CardAction onClick
                             */
    
                            /**
                             * Constructs a new CardAction.
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card
                             * @classdesc Represents a CardAction.
                             * @implements ICardAction
                             * @constructor
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ICardAction=} [properties] Properties to set
                             */
                            function CardAction(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CardAction actionLabel.
                             * @member {string} actionLabel
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @instance
                             */
                            CardAction.prototype.actionLabel = "";
    
                            /**
                             * CardAction onClick.
                             * @member {google.chat.v1.WidgetMarkup.IOnClick|null|undefined} onClick
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @instance
                             */
                            CardAction.prototype.onClick = null;
    
                            /**
                             * Creates a new CardAction instance using the specified properties.
                             * @function create
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ICardAction=} [properties] Properties to set
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.CardAction} CardAction instance
                             */
                            CardAction.create = function create(properties) {
                                return new CardAction(properties);
                            };
    
                            /**
                             * Encodes the specified CardAction message. Does not implicitly {@link google.chat.v1.ContextualAddOnMarkup.Card.CardAction.verify|verify} messages.
                             * @function encode
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ICardAction} message CardAction message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardAction.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.actionLabel != null && Object.hasOwnProperty.call(message, "actionLabel"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.actionLabel);
                                if (message.onClick != null && Object.hasOwnProperty.call(message, "onClick"))
                                    $root.google.chat.v1.WidgetMarkup.OnClick.encode(message.onClick, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CardAction message, length delimited. Does not implicitly {@link google.chat.v1.ContextualAddOnMarkup.Card.CardAction.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.ICardAction} message CardAction message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CardAction.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CardAction message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.CardAction} CardAction
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardAction.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ContextualAddOnMarkup.Card.CardAction();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.actionLabel = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CardAction message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.CardAction} CardAction
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CardAction.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CardAction message.
                             * @function verify
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CardAction.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.actionLabel != null && message.hasOwnProperty("actionLabel"))
                                    if (!$util.isString(message.actionLabel))
                                        return "actionLabel: string expected";
                                if (message.onClick != null && message.hasOwnProperty("onClick")) {
                                    var error = $root.google.chat.v1.WidgetMarkup.OnClick.verify(message.onClick);
                                    if (error)
                                        return "onClick." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CardAction message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.chat.v1.ContextualAddOnMarkup.Card.CardAction} CardAction
                             */
                            CardAction.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.chat.v1.ContextualAddOnMarkup.Card.CardAction)
                                    return object;
                                var message = new $root.google.chat.v1.ContextualAddOnMarkup.Card.CardAction();
                                if (object.actionLabel != null)
                                    message.actionLabel = String(object.actionLabel);
                                if (object.onClick != null) {
                                    if (typeof object.onClick !== "object")
                                        throw TypeError(".google.chat.v1.ContextualAddOnMarkup.Card.CardAction.onClick: object expected");
                                    message.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.fromObject(object.onClick);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CardAction message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @static
                             * @param {google.chat.v1.ContextualAddOnMarkup.Card.CardAction} message CardAction
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CardAction.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.actionLabel = "";
                                    object.onClick = null;
                                }
                                if (message.actionLabel != null && message.hasOwnProperty("actionLabel"))
                                    object.actionLabel = message.actionLabel;
                                if (message.onClick != null && message.hasOwnProperty("onClick"))
                                    object.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.toObject(message.onClick, options);
                                return object;
                            };
    
                            /**
                             * Converts this CardAction to JSON.
                             * @function toJSON
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CardAction.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for CardAction
                             * @function getTypeUrl
                             * @memberof google.chat.v1.ContextualAddOnMarkup.Card.CardAction
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            CardAction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.chat.v1.ContextualAddOnMarkup.Card.CardAction";
                            };
    
                            return CardAction;
                        })();
    
                        return Card;
                    })();
    
                    return ContextualAddOnMarkup;
                })();
    
                v1.WidgetMarkup = (function() {
    
                    /**
                     * Properties of a WidgetMarkup.
                     * @memberof google.chat.v1
                     * @interface IWidgetMarkup
                     * @property {google.chat.v1.WidgetMarkup.ITextParagraph|null} [textParagraph] WidgetMarkup textParagraph
                     * @property {google.chat.v1.WidgetMarkup.IImage|null} [image] WidgetMarkup image
                     * @property {google.chat.v1.WidgetMarkup.IKeyValue|null} [keyValue] WidgetMarkup keyValue
                     * @property {Array.<google.chat.v1.WidgetMarkup.IButton>|null} [buttons] WidgetMarkup buttons
                     */
    
                    /**
                     * Constructs a new WidgetMarkup.
                     * @memberof google.chat.v1
                     * @classdesc Represents a WidgetMarkup.
                     * @implements IWidgetMarkup
                     * @constructor
                     * @param {google.chat.v1.IWidgetMarkup=} [properties] Properties to set
                     */
                    function WidgetMarkup(properties) {
                        this.buttons = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * WidgetMarkup textParagraph.
                     * @member {google.chat.v1.WidgetMarkup.ITextParagraph|null|undefined} textParagraph
                     * @memberof google.chat.v1.WidgetMarkup
                     * @instance
                     */
                    WidgetMarkup.prototype.textParagraph = null;
    
                    /**
                     * WidgetMarkup image.
                     * @member {google.chat.v1.WidgetMarkup.IImage|null|undefined} image
                     * @memberof google.chat.v1.WidgetMarkup
                     * @instance
                     */
                    WidgetMarkup.prototype.image = null;
    
                    /**
                     * WidgetMarkup keyValue.
                     * @member {google.chat.v1.WidgetMarkup.IKeyValue|null|undefined} keyValue
                     * @memberof google.chat.v1.WidgetMarkup
                     * @instance
                     */
                    WidgetMarkup.prototype.keyValue = null;
    
                    /**
                     * WidgetMarkup buttons.
                     * @member {Array.<google.chat.v1.WidgetMarkup.IButton>} buttons
                     * @memberof google.chat.v1.WidgetMarkup
                     * @instance
                     */
                    WidgetMarkup.prototype.buttons = $util.emptyArray;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * WidgetMarkup data.
                     * @member {"textParagraph"|"image"|"keyValue"|undefined} data
                     * @memberof google.chat.v1.WidgetMarkup
                     * @instance
                     */
                    Object.defineProperty(WidgetMarkup.prototype, "data", {
                        get: $util.oneOfGetter($oneOfFields = ["textParagraph", "image", "keyValue"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new WidgetMarkup instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.WidgetMarkup
                     * @static
                     * @param {google.chat.v1.IWidgetMarkup=} [properties] Properties to set
                     * @returns {google.chat.v1.WidgetMarkup} WidgetMarkup instance
                     */
                    WidgetMarkup.create = function create(properties) {
                        return new WidgetMarkup(properties);
                    };
    
                    /**
                     * Encodes the specified WidgetMarkup message. Does not implicitly {@link google.chat.v1.WidgetMarkup.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.WidgetMarkup
                     * @static
                     * @param {google.chat.v1.IWidgetMarkup} message WidgetMarkup message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WidgetMarkup.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.textParagraph != null && Object.hasOwnProperty.call(message, "textParagraph"))
                            $root.google.chat.v1.WidgetMarkup.TextParagraph.encode(message.textParagraph, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                            $root.google.chat.v1.WidgetMarkup.Image.encode(message.image, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.keyValue != null && Object.hasOwnProperty.call(message, "keyValue"))
                            $root.google.chat.v1.WidgetMarkup.KeyValue.encode(message.keyValue, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.buttons != null && message.buttons.length)
                            for (var i = 0; i < message.buttons.length; ++i)
                                $root.google.chat.v1.WidgetMarkup.Button.encode(message.buttons[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified WidgetMarkup message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.WidgetMarkup
                     * @static
                     * @param {google.chat.v1.IWidgetMarkup} message WidgetMarkup message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WidgetMarkup.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a WidgetMarkup message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.WidgetMarkup
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.WidgetMarkup} WidgetMarkup
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WidgetMarkup.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.textParagraph = $root.google.chat.v1.WidgetMarkup.TextParagraph.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.image = $root.google.chat.v1.WidgetMarkup.Image.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.keyValue = $root.google.chat.v1.WidgetMarkup.KeyValue.decode(reader, reader.uint32());
                                    break;
                                }
                            case 6: {
                                    if (!(message.buttons && message.buttons.length))
                                        message.buttons = [];
                                    message.buttons.push($root.google.chat.v1.WidgetMarkup.Button.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a WidgetMarkup message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.WidgetMarkup
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.WidgetMarkup} WidgetMarkup
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WidgetMarkup.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a WidgetMarkup message.
                     * @function verify
                     * @memberof google.chat.v1.WidgetMarkup
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WidgetMarkup.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.textParagraph != null && message.hasOwnProperty("textParagraph")) {
                            properties.data = 1;
                            {
                                var error = $root.google.chat.v1.WidgetMarkup.TextParagraph.verify(message.textParagraph);
                                if (error)
                                    return "textParagraph." + error;
                            }
                        }
                        if (message.image != null && message.hasOwnProperty("image")) {
                            if (properties.data === 1)
                                return "data: multiple values";
                            properties.data = 1;
                            {
                                var error = $root.google.chat.v1.WidgetMarkup.Image.verify(message.image);
                                if (error)
                                    return "image." + error;
                            }
                        }
                        if (message.keyValue != null && message.hasOwnProperty("keyValue")) {
                            if (properties.data === 1)
                                return "data: multiple values";
                            properties.data = 1;
                            {
                                var error = $root.google.chat.v1.WidgetMarkup.KeyValue.verify(message.keyValue);
                                if (error)
                                    return "keyValue." + error;
                            }
                        }
                        if (message.buttons != null && message.hasOwnProperty("buttons")) {
                            if (!Array.isArray(message.buttons))
                                return "buttons: array expected";
                            for (var i = 0; i < message.buttons.length; ++i) {
                                var error = $root.google.chat.v1.WidgetMarkup.Button.verify(message.buttons[i]);
                                if (error)
                                    return "buttons." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a WidgetMarkup message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.WidgetMarkup
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.WidgetMarkup} WidgetMarkup
                     */
                    WidgetMarkup.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.WidgetMarkup)
                            return object;
                        var message = new $root.google.chat.v1.WidgetMarkup();
                        if (object.textParagraph != null) {
                            if (typeof object.textParagraph !== "object")
                                throw TypeError(".google.chat.v1.WidgetMarkup.textParagraph: object expected");
                            message.textParagraph = $root.google.chat.v1.WidgetMarkup.TextParagraph.fromObject(object.textParagraph);
                        }
                        if (object.image != null) {
                            if (typeof object.image !== "object")
                                throw TypeError(".google.chat.v1.WidgetMarkup.image: object expected");
                            message.image = $root.google.chat.v1.WidgetMarkup.Image.fromObject(object.image);
                        }
                        if (object.keyValue != null) {
                            if (typeof object.keyValue !== "object")
                                throw TypeError(".google.chat.v1.WidgetMarkup.keyValue: object expected");
                            message.keyValue = $root.google.chat.v1.WidgetMarkup.KeyValue.fromObject(object.keyValue);
                        }
                        if (object.buttons) {
                            if (!Array.isArray(object.buttons))
                                throw TypeError(".google.chat.v1.WidgetMarkup.buttons: array expected");
                            message.buttons = [];
                            for (var i = 0; i < object.buttons.length; ++i) {
                                if (typeof object.buttons[i] !== "object")
                                    throw TypeError(".google.chat.v1.WidgetMarkup.buttons: object expected");
                                message.buttons[i] = $root.google.chat.v1.WidgetMarkup.Button.fromObject(object.buttons[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a WidgetMarkup message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.WidgetMarkup
                     * @static
                     * @param {google.chat.v1.WidgetMarkup} message WidgetMarkup
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WidgetMarkup.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.buttons = [];
                        if (message.textParagraph != null && message.hasOwnProperty("textParagraph")) {
                            object.textParagraph = $root.google.chat.v1.WidgetMarkup.TextParagraph.toObject(message.textParagraph, options);
                            if (options.oneofs)
                                object.data = "textParagraph";
                        }
                        if (message.image != null && message.hasOwnProperty("image")) {
                            object.image = $root.google.chat.v1.WidgetMarkup.Image.toObject(message.image, options);
                            if (options.oneofs)
                                object.data = "image";
                        }
                        if (message.keyValue != null && message.hasOwnProperty("keyValue")) {
                            object.keyValue = $root.google.chat.v1.WidgetMarkup.KeyValue.toObject(message.keyValue, options);
                            if (options.oneofs)
                                object.data = "keyValue";
                        }
                        if (message.buttons && message.buttons.length) {
                            object.buttons = [];
                            for (var j = 0; j < message.buttons.length; ++j)
                                object.buttons[j] = $root.google.chat.v1.WidgetMarkup.Button.toObject(message.buttons[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this WidgetMarkup to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.WidgetMarkup
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WidgetMarkup.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for WidgetMarkup
                     * @function getTypeUrl
                     * @memberof google.chat.v1.WidgetMarkup
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    WidgetMarkup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.WidgetMarkup";
                    };
    
                    WidgetMarkup.TextParagraph = (function() {
    
                        /**
                         * Properties of a TextParagraph.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @interface ITextParagraph
                         * @property {string|null} [text] TextParagraph text
                         */
    
                        /**
                         * Constructs a new TextParagraph.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @classdesc Represents a TextParagraph.
                         * @implements ITextParagraph
                         * @constructor
                         * @param {google.chat.v1.WidgetMarkup.ITextParagraph=} [properties] Properties to set
                         */
                        function TextParagraph(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextParagraph text.
                         * @member {string} text
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @instance
                         */
                        TextParagraph.prototype.text = "";
    
                        /**
                         * Creates a new TextParagraph instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.ITextParagraph=} [properties] Properties to set
                         * @returns {google.chat.v1.WidgetMarkup.TextParagraph} TextParagraph instance
                         */
                        TextParagraph.create = function create(properties) {
                            return new TextParagraph(properties);
                        };
    
                        /**
                         * Encodes the specified TextParagraph message. Does not implicitly {@link google.chat.v1.WidgetMarkup.TextParagraph.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.ITextParagraph} message TextParagraph message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextParagraph.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextParagraph message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.TextParagraph.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.ITextParagraph} message TextParagraph message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextParagraph.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextParagraph message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.WidgetMarkup.TextParagraph} TextParagraph
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextParagraph.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup.TextParagraph();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextParagraph message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.WidgetMarkup.TextParagraph} TextParagraph
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextParagraph.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextParagraph message.
                         * @function verify
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextParagraph.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a TextParagraph message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.WidgetMarkup.TextParagraph} TextParagraph
                         */
                        TextParagraph.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.WidgetMarkup.TextParagraph)
                                return object;
                            var message = new $root.google.chat.v1.WidgetMarkup.TextParagraph();
                            if (object.text != null)
                                message.text = String(object.text);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextParagraph message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.TextParagraph} message TextParagraph
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextParagraph.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.text = "";
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            return object;
                        };
    
                        /**
                         * Converts this TextParagraph to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextParagraph.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextParagraph
                         * @function getTypeUrl
                         * @memberof google.chat.v1.WidgetMarkup.TextParagraph
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextParagraph.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.WidgetMarkup.TextParagraph";
                        };
    
                        return TextParagraph;
                    })();
    
                    /**
                     * Icon enum.
                     * @name google.chat.v1.WidgetMarkup.Icon
                     * @enum {number}
                     * @property {number} ICON_UNSPECIFIED=0 ICON_UNSPECIFIED value
                     * @property {number} AIRPLANE=1 AIRPLANE value
                     * @property {number} BOOKMARK=26 BOOKMARK value
                     * @property {number} BUS=25 BUS value
                     * @property {number} CAR=9 CAR value
                     * @property {number} CLOCK=2 CLOCK value
                     * @property {number} CONFIRMATION_NUMBER_ICON=12 CONFIRMATION_NUMBER_ICON value
                     * @property {number} DOLLAR=14 DOLLAR value
                     * @property {number} DESCRIPTION=27 DESCRIPTION value
                     * @property {number} EMAIL=10 EMAIL value
                     * @property {number} EVENT_PERFORMER=20 EVENT_PERFORMER value
                     * @property {number} EVENT_SEAT=21 EVENT_SEAT value
                     * @property {number} FLIGHT_ARRIVAL=16 FLIGHT_ARRIVAL value
                     * @property {number} FLIGHT_DEPARTURE=15 FLIGHT_DEPARTURE value
                     * @property {number} HOTEL=6 HOTEL value
                     * @property {number} HOTEL_ROOM_TYPE=17 HOTEL_ROOM_TYPE value
                     * @property {number} INVITE=19 INVITE value
                     * @property {number} MAP_PIN=3 MAP_PIN value
                     * @property {number} MEMBERSHIP=24 MEMBERSHIP value
                     * @property {number} MULTIPLE_PEOPLE=18 MULTIPLE_PEOPLE value
                     * @property {number} OFFER=30 OFFER value
                     * @property {number} PERSON=11 PERSON value
                     * @property {number} PHONE=13 PHONE value
                     * @property {number} RESTAURANT_ICON=7 RESTAURANT_ICON value
                     * @property {number} SHOPPING_CART=8 SHOPPING_CART value
                     * @property {number} STAR=5 STAR value
                     * @property {number} STORE=22 STORE value
                     * @property {number} TICKET=4 TICKET value
                     * @property {number} TRAIN=23 TRAIN value
                     * @property {number} VIDEO_CAMERA=28 VIDEO_CAMERA value
                     * @property {number} VIDEO_PLAY=29 VIDEO_PLAY value
                     */
                    WidgetMarkup.Icon = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ICON_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "AIRPLANE"] = 1;
                        values[valuesById[26] = "BOOKMARK"] = 26;
                        values[valuesById[25] = "BUS"] = 25;
                        values[valuesById[9] = "CAR"] = 9;
                        values[valuesById[2] = "CLOCK"] = 2;
                        values[valuesById[12] = "CONFIRMATION_NUMBER_ICON"] = 12;
                        values[valuesById[14] = "DOLLAR"] = 14;
                        values[valuesById[27] = "DESCRIPTION"] = 27;
                        values[valuesById[10] = "EMAIL"] = 10;
                        values[valuesById[20] = "EVENT_PERFORMER"] = 20;
                        values[valuesById[21] = "EVENT_SEAT"] = 21;
                        values[valuesById[16] = "FLIGHT_ARRIVAL"] = 16;
                        values[valuesById[15] = "FLIGHT_DEPARTURE"] = 15;
                        values[valuesById[6] = "HOTEL"] = 6;
                        values[valuesById[17] = "HOTEL_ROOM_TYPE"] = 17;
                        values[valuesById[19] = "INVITE"] = 19;
                        values[valuesById[3] = "MAP_PIN"] = 3;
                        values[valuesById[24] = "MEMBERSHIP"] = 24;
                        values[valuesById[18] = "MULTIPLE_PEOPLE"] = 18;
                        values[valuesById[30] = "OFFER"] = 30;
                        values[valuesById[11] = "PERSON"] = 11;
                        values[valuesById[13] = "PHONE"] = 13;
                        values[valuesById[7] = "RESTAURANT_ICON"] = 7;
                        values[valuesById[8] = "SHOPPING_CART"] = 8;
                        values[valuesById[5] = "STAR"] = 5;
                        values[valuesById[22] = "STORE"] = 22;
                        values[valuesById[4] = "TICKET"] = 4;
                        values[valuesById[23] = "TRAIN"] = 23;
                        values[valuesById[28] = "VIDEO_CAMERA"] = 28;
                        values[valuesById[29] = "VIDEO_PLAY"] = 29;
                        return values;
                    })();
    
                    WidgetMarkup.Button = (function() {
    
                        /**
                         * Properties of a Button.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @interface IButton
                         * @property {google.chat.v1.WidgetMarkup.ITextButton|null} [textButton] Button textButton
                         * @property {google.chat.v1.WidgetMarkup.IImageButton|null} [imageButton] Button imageButton
                         */
    
                        /**
                         * Constructs a new Button.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @classdesc Represents a Button.
                         * @implements IButton
                         * @constructor
                         * @param {google.chat.v1.WidgetMarkup.IButton=} [properties] Properties to set
                         */
                        function Button(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Button textButton.
                         * @member {google.chat.v1.WidgetMarkup.ITextButton|null|undefined} textButton
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @instance
                         */
                        Button.prototype.textButton = null;
    
                        /**
                         * Button imageButton.
                         * @member {google.chat.v1.WidgetMarkup.IImageButton|null|undefined} imageButton
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @instance
                         */
                        Button.prototype.imageButton = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Button type.
                         * @member {"textButton"|"imageButton"|undefined} type
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @instance
                         */
                        Object.defineProperty(Button.prototype, "type", {
                            get: $util.oneOfGetter($oneOfFields = ["textButton", "imageButton"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Button instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IButton=} [properties] Properties to set
                         * @returns {google.chat.v1.WidgetMarkup.Button} Button instance
                         */
                        Button.create = function create(properties) {
                            return new Button(properties);
                        };
    
                        /**
                         * Encodes the specified Button message. Does not implicitly {@link google.chat.v1.WidgetMarkup.Button.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IButton} message Button message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Button.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.textButton != null && Object.hasOwnProperty.call(message, "textButton"))
                                $root.google.chat.v1.WidgetMarkup.TextButton.encode(message.textButton, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.imageButton != null && Object.hasOwnProperty.call(message, "imageButton"))
                                $root.google.chat.v1.WidgetMarkup.ImageButton.encode(message.imageButton, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Button message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.Button.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IButton} message Button message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Button.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Button message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.WidgetMarkup.Button} Button
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Button.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup.Button();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.textButton = $root.google.chat.v1.WidgetMarkup.TextButton.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.imageButton = $root.google.chat.v1.WidgetMarkup.ImageButton.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Button message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.WidgetMarkup.Button} Button
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Button.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Button message.
                         * @function verify
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Button.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.textButton != null && message.hasOwnProperty("textButton")) {
                                properties.type = 1;
                                {
                                    var error = $root.google.chat.v1.WidgetMarkup.TextButton.verify(message.textButton);
                                    if (error)
                                        return "textButton." + error;
                                }
                            }
                            if (message.imageButton != null && message.hasOwnProperty("imageButton")) {
                                if (properties.type === 1)
                                    return "type: multiple values";
                                properties.type = 1;
                                {
                                    var error = $root.google.chat.v1.WidgetMarkup.ImageButton.verify(message.imageButton);
                                    if (error)
                                        return "imageButton." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Button message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.WidgetMarkup.Button} Button
                         */
                        Button.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.WidgetMarkup.Button)
                                return object;
                            var message = new $root.google.chat.v1.WidgetMarkup.Button();
                            if (object.textButton != null) {
                                if (typeof object.textButton !== "object")
                                    throw TypeError(".google.chat.v1.WidgetMarkup.Button.textButton: object expected");
                                message.textButton = $root.google.chat.v1.WidgetMarkup.TextButton.fromObject(object.textButton);
                            }
                            if (object.imageButton != null) {
                                if (typeof object.imageButton !== "object")
                                    throw TypeError(".google.chat.v1.WidgetMarkup.Button.imageButton: object expected");
                                message.imageButton = $root.google.chat.v1.WidgetMarkup.ImageButton.fromObject(object.imageButton);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Button message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.Button} message Button
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Button.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.textButton != null && message.hasOwnProperty("textButton")) {
                                object.textButton = $root.google.chat.v1.WidgetMarkup.TextButton.toObject(message.textButton, options);
                                if (options.oneofs)
                                    object.type = "textButton";
                            }
                            if (message.imageButton != null && message.hasOwnProperty("imageButton")) {
                                object.imageButton = $root.google.chat.v1.WidgetMarkup.ImageButton.toObject(message.imageButton, options);
                                if (options.oneofs)
                                    object.type = "imageButton";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Button to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Button.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Button
                         * @function getTypeUrl
                         * @memberof google.chat.v1.WidgetMarkup.Button
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Button.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.WidgetMarkup.Button";
                        };
    
                        return Button;
                    })();
    
                    WidgetMarkup.TextButton = (function() {
    
                        /**
                         * Properties of a TextButton.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @interface ITextButton
                         * @property {string|null} [text] TextButton text
                         * @property {google.chat.v1.WidgetMarkup.IOnClick|null} [onClick] TextButton onClick
                         */
    
                        /**
                         * Constructs a new TextButton.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @classdesc Represents a TextButton.
                         * @implements ITextButton
                         * @constructor
                         * @param {google.chat.v1.WidgetMarkup.ITextButton=} [properties] Properties to set
                         */
                        function TextButton(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextButton text.
                         * @member {string} text
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @instance
                         */
                        TextButton.prototype.text = "";
    
                        /**
                         * TextButton onClick.
                         * @member {google.chat.v1.WidgetMarkup.IOnClick|null|undefined} onClick
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @instance
                         */
                        TextButton.prototype.onClick = null;
    
                        /**
                         * Creates a new TextButton instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.ITextButton=} [properties] Properties to set
                         * @returns {google.chat.v1.WidgetMarkup.TextButton} TextButton instance
                         */
                        TextButton.create = function create(properties) {
                            return new TextButton(properties);
                        };
    
                        /**
                         * Encodes the specified TextButton message. Does not implicitly {@link google.chat.v1.WidgetMarkup.TextButton.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.ITextButton} message TextButton message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextButton.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.onClick != null && Object.hasOwnProperty.call(message, "onClick"))
                                $root.google.chat.v1.WidgetMarkup.OnClick.encode(message.onClick, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextButton message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.TextButton.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.ITextButton} message TextButton message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextButton.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextButton message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.WidgetMarkup.TextButton} TextButton
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextButton.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup.TextButton();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextButton message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.WidgetMarkup.TextButton} TextButton
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextButton.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextButton message.
                         * @function verify
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextButton.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.onClick != null && message.hasOwnProperty("onClick")) {
                                var error = $root.google.chat.v1.WidgetMarkup.OnClick.verify(message.onClick);
                                if (error)
                                    return "onClick." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TextButton message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.WidgetMarkup.TextButton} TextButton
                         */
                        TextButton.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.WidgetMarkup.TextButton)
                                return object;
                            var message = new $root.google.chat.v1.WidgetMarkup.TextButton();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.onClick != null) {
                                if (typeof object.onClick !== "object")
                                    throw TypeError(".google.chat.v1.WidgetMarkup.TextButton.onClick: object expected");
                                message.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.fromObject(object.onClick);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextButton message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.TextButton} message TextButton
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextButton.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.text = "";
                                object.onClick = null;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.onClick != null && message.hasOwnProperty("onClick"))
                                object.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.toObject(message.onClick, options);
                            return object;
                        };
    
                        /**
                         * Converts this TextButton to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextButton.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextButton
                         * @function getTypeUrl
                         * @memberof google.chat.v1.WidgetMarkup.TextButton
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.WidgetMarkup.TextButton";
                        };
    
                        return TextButton;
                    })();
    
                    WidgetMarkup.KeyValue = (function() {
    
                        /**
                         * Properties of a KeyValue.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @interface IKeyValue
                         * @property {google.chat.v1.WidgetMarkup.Icon|null} [icon] KeyValue icon
                         * @property {string|null} [iconUrl] KeyValue iconUrl
                         * @property {string|null} [topLabel] KeyValue topLabel
                         * @property {string|null} [content] KeyValue content
                         * @property {boolean|null} [contentMultiline] KeyValue contentMultiline
                         * @property {string|null} [bottomLabel] KeyValue bottomLabel
                         * @property {google.chat.v1.WidgetMarkup.IOnClick|null} [onClick] KeyValue onClick
                         * @property {google.chat.v1.WidgetMarkup.IButton|null} [button] KeyValue button
                         */
    
                        /**
                         * Constructs a new KeyValue.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @classdesc Represents a KeyValue.
                         * @implements IKeyValue
                         * @constructor
                         * @param {google.chat.v1.WidgetMarkup.IKeyValue=} [properties] Properties to set
                         */
                        function KeyValue(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * KeyValue icon.
                         * @member {google.chat.v1.WidgetMarkup.Icon|null|undefined} icon
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         */
                        KeyValue.prototype.icon = null;
    
                        /**
                         * KeyValue iconUrl.
                         * @member {string|null|undefined} iconUrl
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         */
                        KeyValue.prototype.iconUrl = null;
    
                        /**
                         * KeyValue topLabel.
                         * @member {string} topLabel
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         */
                        KeyValue.prototype.topLabel = "";
    
                        /**
                         * KeyValue content.
                         * @member {string} content
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         */
                        KeyValue.prototype.content = "";
    
                        /**
                         * KeyValue contentMultiline.
                         * @member {boolean} contentMultiline
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         */
                        KeyValue.prototype.contentMultiline = false;
    
                        /**
                         * KeyValue bottomLabel.
                         * @member {string} bottomLabel
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         */
                        KeyValue.prototype.bottomLabel = "";
    
                        /**
                         * KeyValue onClick.
                         * @member {google.chat.v1.WidgetMarkup.IOnClick|null|undefined} onClick
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         */
                        KeyValue.prototype.onClick = null;
    
                        /**
                         * KeyValue button.
                         * @member {google.chat.v1.WidgetMarkup.IButton|null|undefined} button
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         */
                        KeyValue.prototype.button = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * KeyValue icons.
                         * @member {"icon"|"iconUrl"|undefined} icons
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         */
                        Object.defineProperty(KeyValue.prototype, "icons", {
                            get: $util.oneOfGetter($oneOfFields = ["icon", "iconUrl"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * KeyValue control.
                         * @member {"button"|undefined} control
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         */
                        Object.defineProperty(KeyValue.prototype, "control", {
                            get: $util.oneOfGetter($oneOfFields = ["button"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new KeyValue instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IKeyValue=} [properties] Properties to set
                         * @returns {google.chat.v1.WidgetMarkup.KeyValue} KeyValue instance
                         */
                        KeyValue.create = function create(properties) {
                            return new KeyValue(properties);
                        };
    
                        /**
                         * Encodes the specified KeyValue message. Does not implicitly {@link google.chat.v1.WidgetMarkup.KeyValue.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IKeyValue} message KeyValue message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        KeyValue.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.icon);
                            if (message.iconUrl != null && Object.hasOwnProperty.call(message, "iconUrl"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.iconUrl);
                            if (message.topLabel != null && Object.hasOwnProperty.call(message, "topLabel"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.topLabel);
                            if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.content);
                            if (message.bottomLabel != null && Object.hasOwnProperty.call(message, "bottomLabel"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.bottomLabel);
                            if (message.onClick != null && Object.hasOwnProperty.call(message, "onClick"))
                                $root.google.chat.v1.WidgetMarkup.OnClick.encode(message.onClick, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.button != null && Object.hasOwnProperty.call(message, "button"))
                                $root.google.chat.v1.WidgetMarkup.Button.encode(message.button, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.contentMultiline != null && Object.hasOwnProperty.call(message, "contentMultiline"))
                                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.contentMultiline);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified KeyValue message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.KeyValue.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IKeyValue} message KeyValue message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        KeyValue.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a KeyValue message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.WidgetMarkup.KeyValue} KeyValue
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        KeyValue.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup.KeyValue();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.icon = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.iconUrl = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.topLabel = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.content = reader.string();
                                        break;
                                    }
                                case 9: {
                                        message.contentMultiline = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.bottomLabel = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 7: {
                                        message.button = $root.google.chat.v1.WidgetMarkup.Button.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a KeyValue message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.WidgetMarkup.KeyValue} KeyValue
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        KeyValue.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a KeyValue message.
                         * @function verify
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        KeyValue.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.icon != null && message.hasOwnProperty("icon")) {
                                properties.icons = 1;
                                switch (message.icon) {
                                default:
                                    return "icon: enum value expected";
                                case 0:
                                case 1:
                                case 26:
                                case 25:
                                case 9:
                                case 2:
                                case 12:
                                case 14:
                                case 27:
                                case 10:
                                case 20:
                                case 21:
                                case 16:
                                case 15:
                                case 6:
                                case 17:
                                case 19:
                                case 3:
                                case 24:
                                case 18:
                                case 30:
                                case 11:
                                case 13:
                                case 7:
                                case 8:
                                case 5:
                                case 22:
                                case 4:
                                case 23:
                                case 28:
                                case 29:
                                    break;
                                }
                            }
                            if (message.iconUrl != null && message.hasOwnProperty("iconUrl")) {
                                if (properties.icons === 1)
                                    return "icons: multiple values";
                                properties.icons = 1;
                                if (!$util.isString(message.iconUrl))
                                    return "iconUrl: string expected";
                            }
                            if (message.topLabel != null && message.hasOwnProperty("topLabel"))
                                if (!$util.isString(message.topLabel))
                                    return "topLabel: string expected";
                            if (message.content != null && message.hasOwnProperty("content"))
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            if (message.contentMultiline != null && message.hasOwnProperty("contentMultiline"))
                                if (typeof message.contentMultiline !== "boolean")
                                    return "contentMultiline: boolean expected";
                            if (message.bottomLabel != null && message.hasOwnProperty("bottomLabel"))
                                if (!$util.isString(message.bottomLabel))
                                    return "bottomLabel: string expected";
                            if (message.onClick != null && message.hasOwnProperty("onClick")) {
                                var error = $root.google.chat.v1.WidgetMarkup.OnClick.verify(message.onClick);
                                if (error)
                                    return "onClick." + error;
                            }
                            if (message.button != null && message.hasOwnProperty("button")) {
                                properties.control = 1;
                                {
                                    var error = $root.google.chat.v1.WidgetMarkup.Button.verify(message.button);
                                    if (error)
                                        return "button." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.WidgetMarkup.KeyValue} KeyValue
                         */
                        KeyValue.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.WidgetMarkup.KeyValue)
                                return object;
                            var message = new $root.google.chat.v1.WidgetMarkup.KeyValue();
                            switch (object.icon) {
                            default:
                                if (typeof object.icon === "number") {
                                    message.icon = object.icon;
                                    break;
                                }
                                break;
                            case "ICON_UNSPECIFIED":
                            case 0:
                                message.icon = 0;
                                break;
                            case "AIRPLANE":
                            case 1:
                                message.icon = 1;
                                break;
                            case "BOOKMARK":
                            case 26:
                                message.icon = 26;
                                break;
                            case "BUS":
                            case 25:
                                message.icon = 25;
                                break;
                            case "CAR":
                            case 9:
                                message.icon = 9;
                                break;
                            case "CLOCK":
                            case 2:
                                message.icon = 2;
                                break;
                            case "CONFIRMATION_NUMBER_ICON":
                            case 12:
                                message.icon = 12;
                                break;
                            case "DOLLAR":
                            case 14:
                                message.icon = 14;
                                break;
                            case "DESCRIPTION":
                            case 27:
                                message.icon = 27;
                                break;
                            case "EMAIL":
                            case 10:
                                message.icon = 10;
                                break;
                            case "EVENT_PERFORMER":
                            case 20:
                                message.icon = 20;
                                break;
                            case "EVENT_SEAT":
                            case 21:
                                message.icon = 21;
                                break;
                            case "FLIGHT_ARRIVAL":
                            case 16:
                                message.icon = 16;
                                break;
                            case "FLIGHT_DEPARTURE":
                            case 15:
                                message.icon = 15;
                                break;
                            case "HOTEL":
                            case 6:
                                message.icon = 6;
                                break;
                            case "HOTEL_ROOM_TYPE":
                            case 17:
                                message.icon = 17;
                                break;
                            case "INVITE":
                            case 19:
                                message.icon = 19;
                                break;
                            case "MAP_PIN":
                            case 3:
                                message.icon = 3;
                                break;
                            case "MEMBERSHIP":
                            case 24:
                                message.icon = 24;
                                break;
                            case "MULTIPLE_PEOPLE":
                            case 18:
                                message.icon = 18;
                                break;
                            case "OFFER":
                            case 30:
                                message.icon = 30;
                                break;
                            case "PERSON":
                            case 11:
                                message.icon = 11;
                                break;
                            case "PHONE":
                            case 13:
                                message.icon = 13;
                                break;
                            case "RESTAURANT_ICON":
                            case 7:
                                message.icon = 7;
                                break;
                            case "SHOPPING_CART":
                            case 8:
                                message.icon = 8;
                                break;
                            case "STAR":
                            case 5:
                                message.icon = 5;
                                break;
                            case "STORE":
                            case 22:
                                message.icon = 22;
                                break;
                            case "TICKET":
                            case 4:
                                message.icon = 4;
                                break;
                            case "TRAIN":
                            case 23:
                                message.icon = 23;
                                break;
                            case "VIDEO_CAMERA":
                            case 28:
                                message.icon = 28;
                                break;
                            case "VIDEO_PLAY":
                            case 29:
                                message.icon = 29;
                                break;
                            }
                            if (object.iconUrl != null)
                                message.iconUrl = String(object.iconUrl);
                            if (object.topLabel != null)
                                message.topLabel = String(object.topLabel);
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.contentMultiline != null)
                                message.contentMultiline = Boolean(object.contentMultiline);
                            if (object.bottomLabel != null)
                                message.bottomLabel = String(object.bottomLabel);
                            if (object.onClick != null) {
                                if (typeof object.onClick !== "object")
                                    throw TypeError(".google.chat.v1.WidgetMarkup.KeyValue.onClick: object expected");
                                message.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.fromObject(object.onClick);
                            }
                            if (object.button != null) {
                                if (typeof object.button !== "object")
                                    throw TypeError(".google.chat.v1.WidgetMarkup.KeyValue.button: object expected");
                                message.button = $root.google.chat.v1.WidgetMarkup.Button.fromObject(object.button);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a KeyValue message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.KeyValue} message KeyValue
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        KeyValue.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.topLabel = "";
                                object.content = "";
                                object.bottomLabel = "";
                                object.onClick = null;
                                object.contentMultiline = false;
                            }
                            if (message.icon != null && message.hasOwnProperty("icon")) {
                                object.icon = options.enums === String ? $root.google.chat.v1.WidgetMarkup.Icon[message.icon] === undefined ? message.icon : $root.google.chat.v1.WidgetMarkup.Icon[message.icon] : message.icon;
                                if (options.oneofs)
                                    object.icons = "icon";
                            }
                            if (message.iconUrl != null && message.hasOwnProperty("iconUrl")) {
                                object.iconUrl = message.iconUrl;
                                if (options.oneofs)
                                    object.icons = "iconUrl";
                            }
                            if (message.topLabel != null && message.hasOwnProperty("topLabel"))
                                object.topLabel = message.topLabel;
                            if (message.content != null && message.hasOwnProperty("content"))
                                object.content = message.content;
                            if (message.bottomLabel != null && message.hasOwnProperty("bottomLabel"))
                                object.bottomLabel = message.bottomLabel;
                            if (message.onClick != null && message.hasOwnProperty("onClick"))
                                object.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.toObject(message.onClick, options);
                            if (message.button != null && message.hasOwnProperty("button")) {
                                object.button = $root.google.chat.v1.WidgetMarkup.Button.toObject(message.button, options);
                                if (options.oneofs)
                                    object.control = "button";
                            }
                            if (message.contentMultiline != null && message.hasOwnProperty("contentMultiline"))
                                object.contentMultiline = message.contentMultiline;
                            return object;
                        };
    
                        /**
                         * Converts this KeyValue to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        KeyValue.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for KeyValue
                         * @function getTypeUrl
                         * @memberof google.chat.v1.WidgetMarkup.KeyValue
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        KeyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.WidgetMarkup.KeyValue";
                        };
    
                        return KeyValue;
                    })();
    
                    WidgetMarkup.Image = (function() {
    
                        /**
                         * Properties of an Image.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @interface IImage
                         * @property {string|null} [imageUrl] Image imageUrl
                         * @property {google.chat.v1.WidgetMarkup.IOnClick|null} [onClick] Image onClick
                         * @property {number|null} [aspectRatio] Image aspectRatio
                         */
    
                        /**
                         * Constructs a new Image.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @classdesc Represents an Image.
                         * @implements IImage
                         * @constructor
                         * @param {google.chat.v1.WidgetMarkup.IImage=} [properties] Properties to set
                         */
                        function Image(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Image imageUrl.
                         * @member {string} imageUrl
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @instance
                         */
                        Image.prototype.imageUrl = "";
    
                        /**
                         * Image onClick.
                         * @member {google.chat.v1.WidgetMarkup.IOnClick|null|undefined} onClick
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @instance
                         */
                        Image.prototype.onClick = null;
    
                        /**
                         * Image aspectRatio.
                         * @member {number} aspectRatio
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @instance
                         */
                        Image.prototype.aspectRatio = 0;
    
                        /**
                         * Creates a new Image instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IImage=} [properties] Properties to set
                         * @returns {google.chat.v1.WidgetMarkup.Image} Image instance
                         */
                        Image.create = function create(properties) {
                            return new Image(properties);
                        };
    
                        /**
                         * Encodes the specified Image message. Does not implicitly {@link google.chat.v1.WidgetMarkup.Image.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IImage} message Image message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Image.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.imageUrl != null && Object.hasOwnProperty.call(message, "imageUrl"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.imageUrl);
                            if (message.onClick != null && Object.hasOwnProperty.call(message, "onClick"))
                                $root.google.chat.v1.WidgetMarkup.OnClick.encode(message.onClick, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.aspectRatio != null && Object.hasOwnProperty.call(message, "aspectRatio"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.aspectRatio);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Image message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.Image.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IImage} message Image message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Image.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Image message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.WidgetMarkup.Image} Image
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Image.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup.Image();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.imageUrl = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.aspectRatio = reader.double();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Image message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.WidgetMarkup.Image} Image
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Image.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Image message.
                         * @function verify
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Image.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.imageUrl != null && message.hasOwnProperty("imageUrl"))
                                if (!$util.isString(message.imageUrl))
                                    return "imageUrl: string expected";
                            if (message.onClick != null && message.hasOwnProperty("onClick")) {
                                var error = $root.google.chat.v1.WidgetMarkup.OnClick.verify(message.onClick);
                                if (error)
                                    return "onClick." + error;
                            }
                            if (message.aspectRatio != null && message.hasOwnProperty("aspectRatio"))
                                if (typeof message.aspectRatio !== "number")
                                    return "aspectRatio: number expected";
                            return null;
                        };
    
                        /**
                         * Creates an Image message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.WidgetMarkup.Image} Image
                         */
                        Image.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.WidgetMarkup.Image)
                                return object;
                            var message = new $root.google.chat.v1.WidgetMarkup.Image();
                            if (object.imageUrl != null)
                                message.imageUrl = String(object.imageUrl);
                            if (object.onClick != null) {
                                if (typeof object.onClick !== "object")
                                    throw TypeError(".google.chat.v1.WidgetMarkup.Image.onClick: object expected");
                                message.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.fromObject(object.onClick);
                            }
                            if (object.aspectRatio != null)
                                message.aspectRatio = Number(object.aspectRatio);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Image message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.Image} message Image
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Image.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.imageUrl = "";
                                object.onClick = null;
                                object.aspectRatio = 0;
                            }
                            if (message.imageUrl != null && message.hasOwnProperty("imageUrl"))
                                object.imageUrl = message.imageUrl;
                            if (message.onClick != null && message.hasOwnProperty("onClick"))
                                object.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.toObject(message.onClick, options);
                            if (message.aspectRatio != null && message.hasOwnProperty("aspectRatio"))
                                object.aspectRatio = options.json && !isFinite(message.aspectRatio) ? String(message.aspectRatio) : message.aspectRatio;
                            return object;
                        };
    
                        /**
                         * Converts this Image to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Image.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Image
                         * @function getTypeUrl
                         * @memberof google.chat.v1.WidgetMarkup.Image
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Image.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.WidgetMarkup.Image";
                        };
    
                        return Image;
                    })();
    
                    WidgetMarkup.ImageButton = (function() {
    
                        /**
                         * Properties of an ImageButton.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @interface IImageButton
                         * @property {google.chat.v1.WidgetMarkup.Icon|null} [icon] ImageButton icon
                         * @property {string|null} [iconUrl] ImageButton iconUrl
                         * @property {google.chat.v1.WidgetMarkup.IOnClick|null} [onClick] ImageButton onClick
                         * @property {string|null} [name] ImageButton name
                         */
    
                        /**
                         * Constructs a new ImageButton.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @classdesc Represents an ImageButton.
                         * @implements IImageButton
                         * @constructor
                         * @param {google.chat.v1.WidgetMarkup.IImageButton=} [properties] Properties to set
                         */
                        function ImageButton(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ImageButton icon.
                         * @member {google.chat.v1.WidgetMarkup.Icon|null|undefined} icon
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @instance
                         */
                        ImageButton.prototype.icon = null;
    
                        /**
                         * ImageButton iconUrl.
                         * @member {string|null|undefined} iconUrl
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @instance
                         */
                        ImageButton.prototype.iconUrl = null;
    
                        /**
                         * ImageButton onClick.
                         * @member {google.chat.v1.WidgetMarkup.IOnClick|null|undefined} onClick
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @instance
                         */
                        ImageButton.prototype.onClick = null;
    
                        /**
                         * ImageButton name.
                         * @member {string} name
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @instance
                         */
                        ImageButton.prototype.name = "";
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * ImageButton icons.
                         * @member {"icon"|"iconUrl"|undefined} icons
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @instance
                         */
                        Object.defineProperty(ImageButton.prototype, "icons", {
                            get: $util.oneOfGetter($oneOfFields = ["icon", "iconUrl"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new ImageButton instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IImageButton=} [properties] Properties to set
                         * @returns {google.chat.v1.WidgetMarkup.ImageButton} ImageButton instance
                         */
                        ImageButton.create = function create(properties) {
                            return new ImageButton(properties);
                        };
    
                        /**
                         * Encodes the specified ImageButton message. Does not implicitly {@link google.chat.v1.WidgetMarkup.ImageButton.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IImageButton} message ImageButton message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ImageButton.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.icon);
                            if (message.onClick != null && Object.hasOwnProperty.call(message, "onClick"))
                                $root.google.chat.v1.WidgetMarkup.OnClick.encode(message.onClick, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.iconUrl != null && Object.hasOwnProperty.call(message, "iconUrl"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.iconUrl);
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ImageButton message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.ImageButton.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IImageButton} message ImageButton message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ImageButton.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ImageButton message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.WidgetMarkup.ImageButton} ImageButton
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ImageButton.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup.ImageButton();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.icon = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.iconUrl = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ImageButton message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.WidgetMarkup.ImageButton} ImageButton
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ImageButton.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ImageButton message.
                         * @function verify
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ImageButton.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.icon != null && message.hasOwnProperty("icon")) {
                                properties.icons = 1;
                                switch (message.icon) {
                                default:
                                    return "icon: enum value expected";
                                case 0:
                                case 1:
                                case 26:
                                case 25:
                                case 9:
                                case 2:
                                case 12:
                                case 14:
                                case 27:
                                case 10:
                                case 20:
                                case 21:
                                case 16:
                                case 15:
                                case 6:
                                case 17:
                                case 19:
                                case 3:
                                case 24:
                                case 18:
                                case 30:
                                case 11:
                                case 13:
                                case 7:
                                case 8:
                                case 5:
                                case 22:
                                case 4:
                                case 23:
                                case 28:
                                case 29:
                                    break;
                                }
                            }
                            if (message.iconUrl != null && message.hasOwnProperty("iconUrl")) {
                                if (properties.icons === 1)
                                    return "icons: multiple values";
                                properties.icons = 1;
                                if (!$util.isString(message.iconUrl))
                                    return "iconUrl: string expected";
                            }
                            if (message.onClick != null && message.hasOwnProperty("onClick")) {
                                var error = $root.google.chat.v1.WidgetMarkup.OnClick.verify(message.onClick);
                                if (error)
                                    return "onClick." + error;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ImageButton message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.WidgetMarkup.ImageButton} ImageButton
                         */
                        ImageButton.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.WidgetMarkup.ImageButton)
                                return object;
                            var message = new $root.google.chat.v1.WidgetMarkup.ImageButton();
                            switch (object.icon) {
                            default:
                                if (typeof object.icon === "number") {
                                    message.icon = object.icon;
                                    break;
                                }
                                break;
                            case "ICON_UNSPECIFIED":
                            case 0:
                                message.icon = 0;
                                break;
                            case "AIRPLANE":
                            case 1:
                                message.icon = 1;
                                break;
                            case "BOOKMARK":
                            case 26:
                                message.icon = 26;
                                break;
                            case "BUS":
                            case 25:
                                message.icon = 25;
                                break;
                            case "CAR":
                            case 9:
                                message.icon = 9;
                                break;
                            case "CLOCK":
                            case 2:
                                message.icon = 2;
                                break;
                            case "CONFIRMATION_NUMBER_ICON":
                            case 12:
                                message.icon = 12;
                                break;
                            case "DOLLAR":
                            case 14:
                                message.icon = 14;
                                break;
                            case "DESCRIPTION":
                            case 27:
                                message.icon = 27;
                                break;
                            case "EMAIL":
                            case 10:
                                message.icon = 10;
                                break;
                            case "EVENT_PERFORMER":
                            case 20:
                                message.icon = 20;
                                break;
                            case "EVENT_SEAT":
                            case 21:
                                message.icon = 21;
                                break;
                            case "FLIGHT_ARRIVAL":
                            case 16:
                                message.icon = 16;
                                break;
                            case "FLIGHT_DEPARTURE":
                            case 15:
                                message.icon = 15;
                                break;
                            case "HOTEL":
                            case 6:
                                message.icon = 6;
                                break;
                            case "HOTEL_ROOM_TYPE":
                            case 17:
                                message.icon = 17;
                                break;
                            case "INVITE":
                            case 19:
                                message.icon = 19;
                                break;
                            case "MAP_PIN":
                            case 3:
                                message.icon = 3;
                                break;
                            case "MEMBERSHIP":
                            case 24:
                                message.icon = 24;
                                break;
                            case "MULTIPLE_PEOPLE":
                            case 18:
                                message.icon = 18;
                                break;
                            case "OFFER":
                            case 30:
                                message.icon = 30;
                                break;
                            case "PERSON":
                            case 11:
                                message.icon = 11;
                                break;
                            case "PHONE":
                            case 13:
                                message.icon = 13;
                                break;
                            case "RESTAURANT_ICON":
                            case 7:
                                message.icon = 7;
                                break;
                            case "SHOPPING_CART":
                            case 8:
                                message.icon = 8;
                                break;
                            case "STAR":
                            case 5:
                                message.icon = 5;
                                break;
                            case "STORE":
                            case 22:
                                message.icon = 22;
                                break;
                            case "TICKET":
                            case 4:
                                message.icon = 4;
                                break;
                            case "TRAIN":
                            case 23:
                                message.icon = 23;
                                break;
                            case "VIDEO_CAMERA":
                            case 28:
                                message.icon = 28;
                                break;
                            case "VIDEO_PLAY":
                            case 29:
                                message.icon = 29;
                                break;
                            }
                            if (object.iconUrl != null)
                                message.iconUrl = String(object.iconUrl);
                            if (object.onClick != null) {
                                if (typeof object.onClick !== "object")
                                    throw TypeError(".google.chat.v1.WidgetMarkup.ImageButton.onClick: object expected");
                                message.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.fromObject(object.onClick);
                            }
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ImageButton message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.ImageButton} message ImageButton
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ImageButton.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.onClick = null;
                                object.name = "";
                            }
                            if (message.icon != null && message.hasOwnProperty("icon")) {
                                object.icon = options.enums === String ? $root.google.chat.v1.WidgetMarkup.Icon[message.icon] === undefined ? message.icon : $root.google.chat.v1.WidgetMarkup.Icon[message.icon] : message.icon;
                                if (options.oneofs)
                                    object.icons = "icon";
                            }
                            if (message.onClick != null && message.hasOwnProperty("onClick"))
                                object.onClick = $root.google.chat.v1.WidgetMarkup.OnClick.toObject(message.onClick, options);
                            if (message.iconUrl != null && message.hasOwnProperty("iconUrl")) {
                                object.iconUrl = message.iconUrl;
                                if (options.oneofs)
                                    object.icons = "iconUrl";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this ImageButton to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ImageButton.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ImageButton
                         * @function getTypeUrl
                         * @memberof google.chat.v1.WidgetMarkup.ImageButton
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ImageButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.WidgetMarkup.ImageButton";
                        };
    
                        return ImageButton;
                    })();
    
                    WidgetMarkup.OnClick = (function() {
    
                        /**
                         * Properties of an OnClick.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @interface IOnClick
                         * @property {google.chat.v1.WidgetMarkup.IFormAction|null} [action] OnClick action
                         * @property {google.chat.v1.WidgetMarkup.IOpenLink|null} [openLink] OnClick openLink
                         */
    
                        /**
                         * Constructs a new OnClick.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @classdesc Represents an OnClick.
                         * @implements IOnClick
                         * @constructor
                         * @param {google.chat.v1.WidgetMarkup.IOnClick=} [properties] Properties to set
                         */
                        function OnClick(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * OnClick action.
                         * @member {google.chat.v1.WidgetMarkup.IFormAction|null|undefined} action
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @instance
                         */
                        OnClick.prototype.action = null;
    
                        /**
                         * OnClick openLink.
                         * @member {google.chat.v1.WidgetMarkup.IOpenLink|null|undefined} openLink
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @instance
                         */
                        OnClick.prototype.openLink = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * OnClick data.
                         * @member {"action"|"openLink"|undefined} data
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @instance
                         */
                        Object.defineProperty(OnClick.prototype, "data", {
                            get: $util.oneOfGetter($oneOfFields = ["action", "openLink"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new OnClick instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IOnClick=} [properties] Properties to set
                         * @returns {google.chat.v1.WidgetMarkup.OnClick} OnClick instance
                         */
                        OnClick.create = function create(properties) {
                            return new OnClick(properties);
                        };
    
                        /**
                         * Encodes the specified OnClick message. Does not implicitly {@link google.chat.v1.WidgetMarkup.OnClick.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IOnClick} message OnClick message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OnClick.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                                $root.google.chat.v1.WidgetMarkup.FormAction.encode(message.action, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.openLink != null && Object.hasOwnProperty.call(message, "openLink"))
                                $root.google.chat.v1.WidgetMarkup.OpenLink.encode(message.openLink, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified OnClick message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.OnClick.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IOnClick} message OnClick message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OnClick.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an OnClick message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.WidgetMarkup.OnClick} OnClick
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OnClick.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup.OnClick();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.action = $root.google.chat.v1.WidgetMarkup.FormAction.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.openLink = $root.google.chat.v1.WidgetMarkup.OpenLink.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an OnClick message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.WidgetMarkup.OnClick} OnClick
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OnClick.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an OnClick message.
                         * @function verify
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        OnClick.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.action != null && message.hasOwnProperty("action")) {
                                properties.data = 1;
                                {
                                    var error = $root.google.chat.v1.WidgetMarkup.FormAction.verify(message.action);
                                    if (error)
                                        return "action." + error;
                                }
                            }
                            if (message.openLink != null && message.hasOwnProperty("openLink")) {
                                if (properties.data === 1)
                                    return "data: multiple values";
                                properties.data = 1;
                                {
                                    var error = $root.google.chat.v1.WidgetMarkup.OpenLink.verify(message.openLink);
                                    if (error)
                                        return "openLink." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an OnClick message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.WidgetMarkup.OnClick} OnClick
                         */
                        OnClick.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.WidgetMarkup.OnClick)
                                return object;
                            var message = new $root.google.chat.v1.WidgetMarkup.OnClick();
                            if (object.action != null) {
                                if (typeof object.action !== "object")
                                    throw TypeError(".google.chat.v1.WidgetMarkup.OnClick.action: object expected");
                                message.action = $root.google.chat.v1.WidgetMarkup.FormAction.fromObject(object.action);
                            }
                            if (object.openLink != null) {
                                if (typeof object.openLink !== "object")
                                    throw TypeError(".google.chat.v1.WidgetMarkup.OnClick.openLink: object expected");
                                message.openLink = $root.google.chat.v1.WidgetMarkup.OpenLink.fromObject(object.openLink);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an OnClick message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.OnClick} message OnClick
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        OnClick.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.action != null && message.hasOwnProperty("action")) {
                                object.action = $root.google.chat.v1.WidgetMarkup.FormAction.toObject(message.action, options);
                                if (options.oneofs)
                                    object.data = "action";
                            }
                            if (message.openLink != null && message.hasOwnProperty("openLink")) {
                                object.openLink = $root.google.chat.v1.WidgetMarkup.OpenLink.toObject(message.openLink, options);
                                if (options.oneofs)
                                    object.data = "openLink";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this OnClick to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        OnClick.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for OnClick
                         * @function getTypeUrl
                         * @memberof google.chat.v1.WidgetMarkup.OnClick
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        OnClick.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.WidgetMarkup.OnClick";
                        };
    
                        return OnClick;
                    })();
    
                    WidgetMarkup.OpenLink = (function() {
    
                        /**
                         * Properties of an OpenLink.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @interface IOpenLink
                         * @property {string|null} [url] OpenLink url
                         */
    
                        /**
                         * Constructs a new OpenLink.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @classdesc Represents an OpenLink.
                         * @implements IOpenLink
                         * @constructor
                         * @param {google.chat.v1.WidgetMarkup.IOpenLink=} [properties] Properties to set
                         */
                        function OpenLink(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * OpenLink url.
                         * @member {string} url
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @instance
                         */
                        OpenLink.prototype.url = "";
    
                        /**
                         * Creates a new OpenLink instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IOpenLink=} [properties] Properties to set
                         * @returns {google.chat.v1.WidgetMarkup.OpenLink} OpenLink instance
                         */
                        OpenLink.create = function create(properties) {
                            return new OpenLink(properties);
                        };
    
                        /**
                         * Encodes the specified OpenLink message. Does not implicitly {@link google.chat.v1.WidgetMarkup.OpenLink.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IOpenLink} message OpenLink message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OpenLink.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified OpenLink message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.OpenLink.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IOpenLink} message OpenLink message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OpenLink.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an OpenLink message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.WidgetMarkup.OpenLink} OpenLink
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OpenLink.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup.OpenLink();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.url = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an OpenLink message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.WidgetMarkup.OpenLink} OpenLink
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OpenLink.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an OpenLink message.
                         * @function verify
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        OpenLink.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.url != null && message.hasOwnProperty("url"))
                                if (!$util.isString(message.url))
                                    return "url: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an OpenLink message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.WidgetMarkup.OpenLink} OpenLink
                         */
                        OpenLink.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.WidgetMarkup.OpenLink)
                                return object;
                            var message = new $root.google.chat.v1.WidgetMarkup.OpenLink();
                            if (object.url != null)
                                message.url = String(object.url);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an OpenLink message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.OpenLink} message OpenLink
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        OpenLink.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.url = "";
                            if (message.url != null && message.hasOwnProperty("url"))
                                object.url = message.url;
                            return object;
                        };
    
                        /**
                         * Converts this OpenLink to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        OpenLink.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for OpenLink
                         * @function getTypeUrl
                         * @memberof google.chat.v1.WidgetMarkup.OpenLink
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        OpenLink.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.WidgetMarkup.OpenLink";
                        };
    
                        return OpenLink;
                    })();
    
                    WidgetMarkup.FormAction = (function() {
    
                        /**
                         * Properties of a FormAction.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @interface IFormAction
                         * @property {string|null} [actionMethodName] FormAction actionMethodName
                         * @property {Array.<google.chat.v1.WidgetMarkup.FormAction.IActionParameter>|null} [parameters] FormAction parameters
                         */
    
                        /**
                         * Constructs a new FormAction.
                         * @memberof google.chat.v1.WidgetMarkup
                         * @classdesc Represents a FormAction.
                         * @implements IFormAction
                         * @constructor
                         * @param {google.chat.v1.WidgetMarkup.IFormAction=} [properties] Properties to set
                         */
                        function FormAction(properties) {
                            this.parameters = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FormAction actionMethodName.
                         * @member {string} actionMethodName
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @instance
                         */
                        FormAction.prototype.actionMethodName = "";
    
                        /**
                         * FormAction parameters.
                         * @member {Array.<google.chat.v1.WidgetMarkup.FormAction.IActionParameter>} parameters
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @instance
                         */
                        FormAction.prototype.parameters = $util.emptyArray;
    
                        /**
                         * Creates a new FormAction instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IFormAction=} [properties] Properties to set
                         * @returns {google.chat.v1.WidgetMarkup.FormAction} FormAction instance
                         */
                        FormAction.create = function create(properties) {
                            return new FormAction(properties);
                        };
    
                        /**
                         * Encodes the specified FormAction message. Does not implicitly {@link google.chat.v1.WidgetMarkup.FormAction.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IFormAction} message FormAction message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FormAction.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.actionMethodName != null && Object.hasOwnProperty.call(message, "actionMethodName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.actionMethodName);
                            if (message.parameters != null && message.parameters.length)
                                for (var i = 0; i < message.parameters.length; ++i)
                                    $root.google.chat.v1.WidgetMarkup.FormAction.ActionParameter.encode(message.parameters[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FormAction message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.FormAction.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.IFormAction} message FormAction message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FormAction.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FormAction message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.WidgetMarkup.FormAction} FormAction
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FormAction.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup.FormAction();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.actionMethodName = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.parameters && message.parameters.length))
                                            message.parameters = [];
                                        message.parameters.push($root.google.chat.v1.WidgetMarkup.FormAction.ActionParameter.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FormAction message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.WidgetMarkup.FormAction} FormAction
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FormAction.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FormAction message.
                         * @function verify
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FormAction.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.actionMethodName != null && message.hasOwnProperty("actionMethodName"))
                                if (!$util.isString(message.actionMethodName))
                                    return "actionMethodName: string expected";
                            if (message.parameters != null && message.hasOwnProperty("parameters")) {
                                if (!Array.isArray(message.parameters))
                                    return "parameters: array expected";
                                for (var i = 0; i < message.parameters.length; ++i) {
                                    var error = $root.google.chat.v1.WidgetMarkup.FormAction.ActionParameter.verify(message.parameters[i]);
                                    if (error)
                                        return "parameters." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a FormAction message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.WidgetMarkup.FormAction} FormAction
                         */
                        FormAction.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.WidgetMarkup.FormAction)
                                return object;
                            var message = new $root.google.chat.v1.WidgetMarkup.FormAction();
                            if (object.actionMethodName != null)
                                message.actionMethodName = String(object.actionMethodName);
                            if (object.parameters) {
                                if (!Array.isArray(object.parameters))
                                    throw TypeError(".google.chat.v1.WidgetMarkup.FormAction.parameters: array expected");
                                message.parameters = [];
                                for (var i = 0; i < object.parameters.length; ++i) {
                                    if (typeof object.parameters[i] !== "object")
                                        throw TypeError(".google.chat.v1.WidgetMarkup.FormAction.parameters: object expected");
                                    message.parameters[i] = $root.google.chat.v1.WidgetMarkup.FormAction.ActionParameter.fromObject(object.parameters[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FormAction message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @static
                         * @param {google.chat.v1.WidgetMarkup.FormAction} message FormAction
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FormAction.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.parameters = [];
                            if (options.defaults)
                                object.actionMethodName = "";
                            if (message.actionMethodName != null && message.hasOwnProperty("actionMethodName"))
                                object.actionMethodName = message.actionMethodName;
                            if (message.parameters && message.parameters.length) {
                                object.parameters = [];
                                for (var j = 0; j < message.parameters.length; ++j)
                                    object.parameters[j] = $root.google.chat.v1.WidgetMarkup.FormAction.ActionParameter.toObject(message.parameters[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this FormAction to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FormAction.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FormAction
                         * @function getTypeUrl
                         * @memberof google.chat.v1.WidgetMarkup.FormAction
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FormAction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.WidgetMarkup.FormAction";
                        };
    
                        FormAction.ActionParameter = (function() {
    
                            /**
                             * Properties of an ActionParameter.
                             * @memberof google.chat.v1.WidgetMarkup.FormAction
                             * @interface IActionParameter
                             * @property {string|null} [key] ActionParameter key
                             * @property {string|null} [value] ActionParameter value
                             */
    
                            /**
                             * Constructs a new ActionParameter.
                             * @memberof google.chat.v1.WidgetMarkup.FormAction
                             * @classdesc Represents an ActionParameter.
                             * @implements IActionParameter
                             * @constructor
                             * @param {google.chat.v1.WidgetMarkup.FormAction.IActionParameter=} [properties] Properties to set
                             */
                            function ActionParameter(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ActionParameter key.
                             * @member {string} key
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @instance
                             */
                            ActionParameter.prototype.key = "";
    
                            /**
                             * ActionParameter value.
                             * @member {string} value
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @instance
                             */
                            ActionParameter.prototype.value = "";
    
                            /**
                             * Creates a new ActionParameter instance using the specified properties.
                             * @function create
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @static
                             * @param {google.chat.v1.WidgetMarkup.FormAction.IActionParameter=} [properties] Properties to set
                             * @returns {google.chat.v1.WidgetMarkup.FormAction.ActionParameter} ActionParameter instance
                             */
                            ActionParameter.create = function create(properties) {
                                return new ActionParameter(properties);
                            };
    
                            /**
                             * Encodes the specified ActionParameter message. Does not implicitly {@link google.chat.v1.WidgetMarkup.FormAction.ActionParameter.verify|verify} messages.
                             * @function encode
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @static
                             * @param {google.chat.v1.WidgetMarkup.FormAction.IActionParameter} message ActionParameter message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ActionParameter.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ActionParameter message, length delimited. Does not implicitly {@link google.chat.v1.WidgetMarkup.FormAction.ActionParameter.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @static
                             * @param {google.chat.v1.WidgetMarkup.FormAction.IActionParameter} message ActionParameter message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ActionParameter.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ActionParameter message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.chat.v1.WidgetMarkup.FormAction.ActionParameter} ActionParameter
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ActionParameter.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.WidgetMarkup.FormAction.ActionParameter();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.key = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.value = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ActionParameter message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.chat.v1.WidgetMarkup.FormAction.ActionParameter} ActionParameter
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ActionParameter.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ActionParameter message.
                             * @function verify
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ActionParameter.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.key != null && message.hasOwnProperty("key"))
                                    if (!$util.isString(message.key))
                                        return "key: string expected";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    if (!$util.isString(message.value))
                                        return "value: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an ActionParameter message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.chat.v1.WidgetMarkup.FormAction.ActionParameter} ActionParameter
                             */
                            ActionParameter.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.chat.v1.WidgetMarkup.FormAction.ActionParameter)
                                    return object;
                                var message = new $root.google.chat.v1.WidgetMarkup.FormAction.ActionParameter();
                                if (object.key != null)
                                    message.key = String(object.key);
                                if (object.value != null)
                                    message.value = String(object.value);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ActionParameter message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @static
                             * @param {google.chat.v1.WidgetMarkup.FormAction.ActionParameter} message ActionParameter
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ActionParameter.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.key = "";
                                    object.value = "";
                                }
                                if (message.key != null && message.hasOwnProperty("key"))
                                    object.key = message.key;
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = message.value;
                                return object;
                            };
    
                            /**
                             * Converts this ActionParameter to JSON.
                             * @function toJSON
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ActionParameter.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ActionParameter
                             * @function getTypeUrl
                             * @memberof google.chat.v1.WidgetMarkup.FormAction.ActionParameter
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ActionParameter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.chat.v1.WidgetMarkup.FormAction.ActionParameter";
                            };
    
                            return ActionParameter;
                        })();
    
                        return FormAction;
                    })();
    
                    return WidgetMarkup;
                })();
    
                v1.DeletionMetadata = (function() {
    
                    /**
                     * Properties of a DeletionMetadata.
                     * @memberof google.chat.v1
                     * @interface IDeletionMetadata
                     * @property {google.chat.v1.DeletionMetadata.DeletionType|null} [deletionType] DeletionMetadata deletionType
                     */
    
                    /**
                     * Constructs a new DeletionMetadata.
                     * @memberof google.chat.v1
                     * @classdesc Represents a DeletionMetadata.
                     * @implements IDeletionMetadata
                     * @constructor
                     * @param {google.chat.v1.IDeletionMetadata=} [properties] Properties to set
                     */
                    function DeletionMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeletionMetadata deletionType.
                     * @member {google.chat.v1.DeletionMetadata.DeletionType} deletionType
                     * @memberof google.chat.v1.DeletionMetadata
                     * @instance
                     */
                    DeletionMetadata.prototype.deletionType = 0;
    
                    /**
                     * Creates a new DeletionMetadata instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.DeletionMetadata
                     * @static
                     * @param {google.chat.v1.IDeletionMetadata=} [properties] Properties to set
                     * @returns {google.chat.v1.DeletionMetadata} DeletionMetadata instance
                     */
                    DeletionMetadata.create = function create(properties) {
                        return new DeletionMetadata(properties);
                    };
    
                    /**
                     * Encodes the specified DeletionMetadata message. Does not implicitly {@link google.chat.v1.DeletionMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.DeletionMetadata
                     * @static
                     * @param {google.chat.v1.IDeletionMetadata} message DeletionMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeletionMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.deletionType != null && Object.hasOwnProperty.call(message, "deletionType"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.deletionType);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeletionMetadata message, length delimited. Does not implicitly {@link google.chat.v1.DeletionMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.DeletionMetadata
                     * @static
                     * @param {google.chat.v1.IDeletionMetadata} message DeletionMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeletionMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeletionMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.DeletionMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.DeletionMetadata} DeletionMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeletionMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.DeletionMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.deletionType = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeletionMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.DeletionMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.DeletionMetadata} DeletionMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeletionMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeletionMetadata message.
                     * @function verify
                     * @memberof google.chat.v1.DeletionMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeletionMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.deletionType != null && message.hasOwnProperty("deletionType"))
                            switch (message.deletionType) {
                            default:
                                return "deletionType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a DeletionMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.DeletionMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.DeletionMetadata} DeletionMetadata
                     */
                    DeletionMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.DeletionMetadata)
                            return object;
                        var message = new $root.google.chat.v1.DeletionMetadata();
                        switch (object.deletionType) {
                        default:
                            if (typeof object.deletionType === "number") {
                                message.deletionType = object.deletionType;
                                break;
                            }
                            break;
                        case "DELETION_TYPE_UNSPECIFIED":
                        case 0:
                            message.deletionType = 0;
                            break;
                        case "CREATOR":
                        case 1:
                            message.deletionType = 1;
                            break;
                        case "SPACE_OWNER":
                        case 2:
                            message.deletionType = 2;
                            break;
                        case "ADMIN":
                        case 3:
                            message.deletionType = 3;
                            break;
                        case "APP_MESSAGE_EXPIRY":
                        case 4:
                            message.deletionType = 4;
                            break;
                        case "CREATOR_VIA_APP":
                        case 5:
                            message.deletionType = 5;
                            break;
                        case "SPACE_OWNER_VIA_APP":
                        case 6:
                            message.deletionType = 6;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeletionMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.DeletionMetadata
                     * @static
                     * @param {google.chat.v1.DeletionMetadata} message DeletionMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeletionMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.deletionType = options.enums === String ? "DELETION_TYPE_UNSPECIFIED" : 0;
                        if (message.deletionType != null && message.hasOwnProperty("deletionType"))
                            object.deletionType = options.enums === String ? $root.google.chat.v1.DeletionMetadata.DeletionType[message.deletionType] === undefined ? message.deletionType : $root.google.chat.v1.DeletionMetadata.DeletionType[message.deletionType] : message.deletionType;
                        return object;
                    };
    
                    /**
                     * Converts this DeletionMetadata to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.DeletionMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeletionMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DeletionMetadata
                     * @function getTypeUrl
                     * @memberof google.chat.v1.DeletionMetadata
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DeletionMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.DeletionMetadata";
                    };
    
                    /**
                     * DeletionType enum.
                     * @name google.chat.v1.DeletionMetadata.DeletionType
                     * @enum {number}
                     * @property {number} DELETION_TYPE_UNSPECIFIED=0 DELETION_TYPE_UNSPECIFIED value
                     * @property {number} CREATOR=1 CREATOR value
                     * @property {number} SPACE_OWNER=2 SPACE_OWNER value
                     * @property {number} ADMIN=3 ADMIN value
                     * @property {number} APP_MESSAGE_EXPIRY=4 APP_MESSAGE_EXPIRY value
                     * @property {number} CREATOR_VIA_APP=5 CREATOR_VIA_APP value
                     * @property {number} SPACE_OWNER_VIA_APP=6 SPACE_OWNER_VIA_APP value
                     */
                    DeletionMetadata.DeletionType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "DELETION_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "CREATOR"] = 1;
                        values[valuesById[2] = "SPACE_OWNER"] = 2;
                        values[valuesById[3] = "ADMIN"] = 3;
                        values[valuesById[4] = "APP_MESSAGE_EXPIRY"] = 4;
                        values[valuesById[5] = "CREATOR_VIA_APP"] = 5;
                        values[valuesById[6] = "SPACE_OWNER_VIA_APP"] = 6;
                        return values;
                    })();
    
                    return DeletionMetadata;
                })();
    
                v1.MatchedUrl = (function() {
    
                    /**
                     * Properties of a MatchedUrl.
                     * @memberof google.chat.v1
                     * @interface IMatchedUrl
                     * @property {string|null} [url] MatchedUrl url
                     */
    
                    /**
                     * Constructs a new MatchedUrl.
                     * @memberof google.chat.v1
                     * @classdesc Represents a MatchedUrl.
                     * @implements IMatchedUrl
                     * @constructor
                     * @param {google.chat.v1.IMatchedUrl=} [properties] Properties to set
                     */
                    function MatchedUrl(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MatchedUrl url.
                     * @member {string} url
                     * @memberof google.chat.v1.MatchedUrl
                     * @instance
                     */
                    MatchedUrl.prototype.url = "";
    
                    /**
                     * Creates a new MatchedUrl instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.MatchedUrl
                     * @static
                     * @param {google.chat.v1.IMatchedUrl=} [properties] Properties to set
                     * @returns {google.chat.v1.MatchedUrl} MatchedUrl instance
                     */
                    MatchedUrl.create = function create(properties) {
                        return new MatchedUrl(properties);
                    };
    
                    /**
                     * Encodes the specified MatchedUrl message. Does not implicitly {@link google.chat.v1.MatchedUrl.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.MatchedUrl
                     * @static
                     * @param {google.chat.v1.IMatchedUrl} message MatchedUrl message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MatchedUrl.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MatchedUrl message, length delimited. Does not implicitly {@link google.chat.v1.MatchedUrl.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.MatchedUrl
                     * @static
                     * @param {google.chat.v1.IMatchedUrl} message MatchedUrl message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MatchedUrl.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MatchedUrl message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.MatchedUrl
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.MatchedUrl} MatchedUrl
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MatchedUrl.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.MatchedUrl();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2: {
                                    message.url = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MatchedUrl message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.MatchedUrl
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.MatchedUrl} MatchedUrl
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MatchedUrl.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MatchedUrl message.
                     * @function verify
                     * @memberof google.chat.v1.MatchedUrl
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MatchedUrl.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.url != null && message.hasOwnProperty("url"))
                            if (!$util.isString(message.url))
                                return "url: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a MatchedUrl message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.MatchedUrl
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.MatchedUrl} MatchedUrl
                     */
                    MatchedUrl.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.MatchedUrl)
                            return object;
                        var message = new $root.google.chat.v1.MatchedUrl();
                        if (object.url != null)
                            message.url = String(object.url);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MatchedUrl message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.MatchedUrl
                     * @static
                     * @param {google.chat.v1.MatchedUrl} message MatchedUrl
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MatchedUrl.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.url = "";
                        if (message.url != null && message.hasOwnProperty("url"))
                            object.url = message.url;
                        return object;
                    };
    
                    /**
                     * Converts this MatchedUrl to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.MatchedUrl
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MatchedUrl.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for MatchedUrl
                     * @function getTypeUrl
                     * @memberof google.chat.v1.MatchedUrl
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    MatchedUrl.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.MatchedUrl";
                    };
    
                    return MatchedUrl;
                })();
    
                v1.Reaction = (function() {
    
                    /**
                     * Properties of a Reaction.
                     * @memberof google.chat.v1
                     * @interface IReaction
                     * @property {string|null} [name] Reaction name
                     * @property {google.chat.v1.IUser|null} [user] Reaction user
                     * @property {google.chat.v1.IEmoji|null} [emoji] Reaction emoji
                     */
    
                    /**
                     * Constructs a new Reaction.
                     * @memberof google.chat.v1
                     * @classdesc Represents a Reaction.
                     * @implements IReaction
                     * @constructor
                     * @param {google.chat.v1.IReaction=} [properties] Properties to set
                     */
                    function Reaction(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Reaction name.
                     * @member {string} name
                     * @memberof google.chat.v1.Reaction
                     * @instance
                     */
                    Reaction.prototype.name = "";
    
                    /**
                     * Reaction user.
                     * @member {google.chat.v1.IUser|null|undefined} user
                     * @memberof google.chat.v1.Reaction
                     * @instance
                     */
                    Reaction.prototype.user = null;
    
                    /**
                     * Reaction emoji.
                     * @member {google.chat.v1.IEmoji|null|undefined} emoji
                     * @memberof google.chat.v1.Reaction
                     * @instance
                     */
                    Reaction.prototype.emoji = null;
    
                    /**
                     * Creates a new Reaction instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.Reaction
                     * @static
                     * @param {google.chat.v1.IReaction=} [properties] Properties to set
                     * @returns {google.chat.v1.Reaction} Reaction instance
                     */
                    Reaction.create = function create(properties) {
                        return new Reaction(properties);
                    };
    
                    /**
                     * Encodes the specified Reaction message. Does not implicitly {@link google.chat.v1.Reaction.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.Reaction
                     * @static
                     * @param {google.chat.v1.IReaction} message Reaction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Reaction.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                            $root.google.chat.v1.User.encode(message.user, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.emoji != null && Object.hasOwnProperty.call(message, "emoji"))
                            $root.google.chat.v1.Emoji.encode(message.emoji, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Reaction message, length delimited. Does not implicitly {@link google.chat.v1.Reaction.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.Reaction
                     * @static
                     * @param {google.chat.v1.IReaction} message Reaction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Reaction.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Reaction message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.Reaction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.Reaction} Reaction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Reaction.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Reaction();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.user = $root.google.chat.v1.User.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.emoji = $root.google.chat.v1.Emoji.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Reaction message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.Reaction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.Reaction} Reaction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Reaction.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Reaction message.
                     * @function verify
                     * @memberof google.chat.v1.Reaction
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Reaction.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.user != null && message.hasOwnProperty("user")) {
                            var error = $root.google.chat.v1.User.verify(message.user);
                            if (error)
                                return "user." + error;
                        }
                        if (message.emoji != null && message.hasOwnProperty("emoji")) {
                            var error = $root.google.chat.v1.Emoji.verify(message.emoji);
                            if (error)
                                return "emoji." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Reaction message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.Reaction
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.Reaction} Reaction
                     */
                    Reaction.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.Reaction)
                            return object;
                        var message = new $root.google.chat.v1.Reaction();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.user != null) {
                            if (typeof object.user !== "object")
                                throw TypeError(".google.chat.v1.Reaction.user: object expected");
                            message.user = $root.google.chat.v1.User.fromObject(object.user);
                        }
                        if (object.emoji != null) {
                            if (typeof object.emoji !== "object")
                                throw TypeError(".google.chat.v1.Reaction.emoji: object expected");
                            message.emoji = $root.google.chat.v1.Emoji.fromObject(object.emoji);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Reaction message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.Reaction
                     * @static
                     * @param {google.chat.v1.Reaction} message Reaction
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Reaction.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.user = null;
                            object.emoji = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.user != null && message.hasOwnProperty("user"))
                            object.user = $root.google.chat.v1.User.toObject(message.user, options);
                        if (message.emoji != null && message.hasOwnProperty("emoji"))
                            object.emoji = $root.google.chat.v1.Emoji.toObject(message.emoji, options);
                        return object;
                    };
    
                    /**
                     * Converts this Reaction to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.Reaction
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Reaction.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Reaction
                     * @function getTypeUrl
                     * @memberof google.chat.v1.Reaction
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Reaction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.Reaction";
                    };
    
                    return Reaction;
                })();
    
                v1.Emoji = (function() {
    
                    /**
                     * Properties of an Emoji.
                     * @memberof google.chat.v1
                     * @interface IEmoji
                     * @property {string|null} [unicode] Emoji unicode
                     * @property {google.chat.v1.ICustomEmoji|null} [customEmoji] Emoji customEmoji
                     */
    
                    /**
                     * Constructs a new Emoji.
                     * @memberof google.chat.v1
                     * @classdesc Represents an Emoji.
                     * @implements IEmoji
                     * @constructor
                     * @param {google.chat.v1.IEmoji=} [properties] Properties to set
                     */
                    function Emoji(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Emoji unicode.
                     * @member {string|null|undefined} unicode
                     * @memberof google.chat.v1.Emoji
                     * @instance
                     */
                    Emoji.prototype.unicode = null;
    
                    /**
                     * Emoji customEmoji.
                     * @member {google.chat.v1.ICustomEmoji|null|undefined} customEmoji
                     * @memberof google.chat.v1.Emoji
                     * @instance
                     */
                    Emoji.prototype.customEmoji = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Emoji content.
                     * @member {"unicode"|"customEmoji"|undefined} content
                     * @memberof google.chat.v1.Emoji
                     * @instance
                     */
                    Object.defineProperty(Emoji.prototype, "content", {
                        get: $util.oneOfGetter($oneOfFields = ["unicode", "customEmoji"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Emoji instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.Emoji
                     * @static
                     * @param {google.chat.v1.IEmoji=} [properties] Properties to set
                     * @returns {google.chat.v1.Emoji} Emoji instance
                     */
                    Emoji.create = function create(properties) {
                        return new Emoji(properties);
                    };
    
                    /**
                     * Encodes the specified Emoji message. Does not implicitly {@link google.chat.v1.Emoji.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.Emoji
                     * @static
                     * @param {google.chat.v1.IEmoji} message Emoji message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Emoji.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.unicode != null && Object.hasOwnProperty.call(message, "unicode"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.unicode);
                        if (message.customEmoji != null && Object.hasOwnProperty.call(message, "customEmoji"))
                            $root.google.chat.v1.CustomEmoji.encode(message.customEmoji, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Emoji message, length delimited. Does not implicitly {@link google.chat.v1.Emoji.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.Emoji
                     * @static
                     * @param {google.chat.v1.IEmoji} message Emoji message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Emoji.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Emoji message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.Emoji
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.Emoji} Emoji
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Emoji.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Emoji();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.unicode = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.customEmoji = $root.google.chat.v1.CustomEmoji.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Emoji message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.Emoji
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.Emoji} Emoji
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Emoji.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Emoji message.
                     * @function verify
                     * @memberof google.chat.v1.Emoji
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Emoji.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.unicode != null && message.hasOwnProperty("unicode")) {
                            properties.content = 1;
                            if (!$util.isString(message.unicode))
                                return "unicode: string expected";
                        }
                        if (message.customEmoji != null && message.hasOwnProperty("customEmoji")) {
                            if (properties.content === 1)
                                return "content: multiple values";
                            properties.content = 1;
                            {
                                var error = $root.google.chat.v1.CustomEmoji.verify(message.customEmoji);
                                if (error)
                                    return "customEmoji." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Emoji message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.Emoji
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.Emoji} Emoji
                     */
                    Emoji.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.Emoji)
                            return object;
                        var message = new $root.google.chat.v1.Emoji();
                        if (object.unicode != null)
                            message.unicode = String(object.unicode);
                        if (object.customEmoji != null) {
                            if (typeof object.customEmoji !== "object")
                                throw TypeError(".google.chat.v1.Emoji.customEmoji: object expected");
                            message.customEmoji = $root.google.chat.v1.CustomEmoji.fromObject(object.customEmoji);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Emoji message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.Emoji
                     * @static
                     * @param {google.chat.v1.Emoji} message Emoji
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Emoji.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.unicode != null && message.hasOwnProperty("unicode")) {
                            object.unicode = message.unicode;
                            if (options.oneofs)
                                object.content = "unicode";
                        }
                        if (message.customEmoji != null && message.hasOwnProperty("customEmoji")) {
                            object.customEmoji = $root.google.chat.v1.CustomEmoji.toObject(message.customEmoji, options);
                            if (options.oneofs)
                                object.content = "customEmoji";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Emoji to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.Emoji
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Emoji.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Emoji
                     * @function getTypeUrl
                     * @memberof google.chat.v1.Emoji
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Emoji.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.Emoji";
                    };
    
                    return Emoji;
                })();
    
                v1.CustomEmoji = (function() {
    
                    /**
                     * Properties of a CustomEmoji.
                     * @memberof google.chat.v1
                     * @interface ICustomEmoji
                     * @property {string|null} [uid] CustomEmoji uid
                     */
    
                    /**
                     * Constructs a new CustomEmoji.
                     * @memberof google.chat.v1
                     * @classdesc Represents a CustomEmoji.
                     * @implements ICustomEmoji
                     * @constructor
                     * @param {google.chat.v1.ICustomEmoji=} [properties] Properties to set
                     */
                    function CustomEmoji(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CustomEmoji uid.
                     * @member {string} uid
                     * @memberof google.chat.v1.CustomEmoji
                     * @instance
                     */
                    CustomEmoji.prototype.uid = "";
    
                    /**
                     * Creates a new CustomEmoji instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.CustomEmoji
                     * @static
                     * @param {google.chat.v1.ICustomEmoji=} [properties] Properties to set
                     * @returns {google.chat.v1.CustomEmoji} CustomEmoji instance
                     */
                    CustomEmoji.create = function create(properties) {
                        return new CustomEmoji(properties);
                    };
    
                    /**
                     * Encodes the specified CustomEmoji message. Does not implicitly {@link google.chat.v1.CustomEmoji.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.CustomEmoji
                     * @static
                     * @param {google.chat.v1.ICustomEmoji} message CustomEmoji message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CustomEmoji.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uid);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CustomEmoji message, length delimited. Does not implicitly {@link google.chat.v1.CustomEmoji.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.CustomEmoji
                     * @static
                     * @param {google.chat.v1.ICustomEmoji} message CustomEmoji message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CustomEmoji.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CustomEmoji message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.CustomEmoji
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.CustomEmoji} CustomEmoji
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CustomEmoji.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.CustomEmoji();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.uid = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CustomEmoji message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.CustomEmoji
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.CustomEmoji} CustomEmoji
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CustomEmoji.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CustomEmoji message.
                     * @function verify
                     * @memberof google.chat.v1.CustomEmoji
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CustomEmoji.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.uid != null && message.hasOwnProperty("uid"))
                            if (!$util.isString(message.uid))
                                return "uid: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CustomEmoji message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.CustomEmoji
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.CustomEmoji} CustomEmoji
                     */
                    CustomEmoji.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.CustomEmoji)
                            return object;
                        var message = new $root.google.chat.v1.CustomEmoji();
                        if (object.uid != null)
                            message.uid = String(object.uid);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CustomEmoji message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.CustomEmoji
                     * @static
                     * @param {google.chat.v1.CustomEmoji} message CustomEmoji
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CustomEmoji.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.uid = "";
                        if (message.uid != null && message.hasOwnProperty("uid"))
                            object.uid = message.uid;
                        return object;
                    };
    
                    /**
                     * Converts this CustomEmoji to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.CustomEmoji
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CustomEmoji.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CustomEmoji
                     * @function getTypeUrl
                     * @memberof google.chat.v1.CustomEmoji
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CustomEmoji.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.CustomEmoji";
                    };
    
                    return CustomEmoji;
                })();
    
                v1.EmojiReactionSummary = (function() {
    
                    /**
                     * Properties of an EmojiReactionSummary.
                     * @memberof google.chat.v1
                     * @interface IEmojiReactionSummary
                     * @property {google.chat.v1.IEmoji|null} [emoji] EmojiReactionSummary emoji
                     * @property {number|null} [reactionCount] EmojiReactionSummary reactionCount
                     */
    
                    /**
                     * Constructs a new EmojiReactionSummary.
                     * @memberof google.chat.v1
                     * @classdesc Represents an EmojiReactionSummary.
                     * @implements IEmojiReactionSummary
                     * @constructor
                     * @param {google.chat.v1.IEmojiReactionSummary=} [properties] Properties to set
                     */
                    function EmojiReactionSummary(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EmojiReactionSummary emoji.
                     * @member {google.chat.v1.IEmoji|null|undefined} emoji
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @instance
                     */
                    EmojiReactionSummary.prototype.emoji = null;
    
                    /**
                     * EmojiReactionSummary reactionCount.
                     * @member {number|null|undefined} reactionCount
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @instance
                     */
                    EmojiReactionSummary.prototype.reactionCount = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * EmojiReactionSummary _reactionCount.
                     * @member {"reactionCount"|undefined} _reactionCount
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @instance
                     */
                    Object.defineProperty(EmojiReactionSummary.prototype, "_reactionCount", {
                        get: $util.oneOfGetter($oneOfFields = ["reactionCount"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new EmojiReactionSummary instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @static
                     * @param {google.chat.v1.IEmojiReactionSummary=} [properties] Properties to set
                     * @returns {google.chat.v1.EmojiReactionSummary} EmojiReactionSummary instance
                     */
                    EmojiReactionSummary.create = function create(properties) {
                        return new EmojiReactionSummary(properties);
                    };
    
                    /**
                     * Encodes the specified EmojiReactionSummary message. Does not implicitly {@link google.chat.v1.EmojiReactionSummary.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @static
                     * @param {google.chat.v1.IEmojiReactionSummary} message EmojiReactionSummary message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EmojiReactionSummary.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.emoji != null && Object.hasOwnProperty.call(message, "emoji"))
                            $root.google.chat.v1.Emoji.encode(message.emoji, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.reactionCount != null && Object.hasOwnProperty.call(message, "reactionCount"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reactionCount);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EmojiReactionSummary message, length delimited. Does not implicitly {@link google.chat.v1.EmojiReactionSummary.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @static
                     * @param {google.chat.v1.IEmojiReactionSummary} message EmojiReactionSummary message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EmojiReactionSummary.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EmojiReactionSummary message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.EmojiReactionSummary} EmojiReactionSummary
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EmojiReactionSummary.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.EmojiReactionSummary();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.emoji = $root.google.chat.v1.Emoji.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.reactionCount = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EmojiReactionSummary message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.EmojiReactionSummary} EmojiReactionSummary
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EmojiReactionSummary.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EmojiReactionSummary message.
                     * @function verify
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EmojiReactionSummary.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.emoji != null && message.hasOwnProperty("emoji")) {
                            var error = $root.google.chat.v1.Emoji.verify(message.emoji);
                            if (error)
                                return "emoji." + error;
                        }
                        if (message.reactionCount != null && message.hasOwnProperty("reactionCount")) {
                            properties._reactionCount = 1;
                            if (!$util.isInteger(message.reactionCount))
                                return "reactionCount: integer expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates an EmojiReactionSummary message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.EmojiReactionSummary} EmojiReactionSummary
                     */
                    EmojiReactionSummary.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.EmojiReactionSummary)
                            return object;
                        var message = new $root.google.chat.v1.EmojiReactionSummary();
                        if (object.emoji != null) {
                            if (typeof object.emoji !== "object")
                                throw TypeError(".google.chat.v1.EmojiReactionSummary.emoji: object expected");
                            message.emoji = $root.google.chat.v1.Emoji.fromObject(object.emoji);
                        }
                        if (object.reactionCount != null)
                            message.reactionCount = object.reactionCount | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EmojiReactionSummary message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @static
                     * @param {google.chat.v1.EmojiReactionSummary} message EmojiReactionSummary
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EmojiReactionSummary.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.emoji = null;
                        if (message.emoji != null && message.hasOwnProperty("emoji"))
                            object.emoji = $root.google.chat.v1.Emoji.toObject(message.emoji, options);
                        if (message.reactionCount != null && message.hasOwnProperty("reactionCount")) {
                            object.reactionCount = message.reactionCount;
                            if (options.oneofs)
                                object._reactionCount = "reactionCount";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this EmojiReactionSummary to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EmojiReactionSummary.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EmojiReactionSummary
                     * @function getTypeUrl
                     * @memberof google.chat.v1.EmojiReactionSummary
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EmojiReactionSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.EmojiReactionSummary";
                    };
    
                    return EmojiReactionSummary;
                })();
    
                v1.CreateReactionRequest = (function() {
    
                    /**
                     * Properties of a CreateReactionRequest.
                     * @memberof google.chat.v1
                     * @interface ICreateReactionRequest
                     * @property {string|null} [parent] CreateReactionRequest parent
                     * @property {google.chat.v1.IReaction|null} [reaction] CreateReactionRequest reaction
                     */
    
                    /**
                     * Constructs a new CreateReactionRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a CreateReactionRequest.
                     * @implements ICreateReactionRequest
                     * @constructor
                     * @param {google.chat.v1.ICreateReactionRequest=} [properties] Properties to set
                     */
                    function CreateReactionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateReactionRequest parent.
                     * @member {string} parent
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @instance
                     */
                    CreateReactionRequest.prototype.parent = "";
    
                    /**
                     * CreateReactionRequest reaction.
                     * @member {google.chat.v1.IReaction|null|undefined} reaction
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @instance
                     */
                    CreateReactionRequest.prototype.reaction = null;
    
                    /**
                     * Creates a new CreateReactionRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @static
                     * @param {google.chat.v1.ICreateReactionRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.CreateReactionRequest} CreateReactionRequest instance
                     */
                    CreateReactionRequest.create = function create(properties) {
                        return new CreateReactionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateReactionRequest message. Does not implicitly {@link google.chat.v1.CreateReactionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @static
                     * @param {google.chat.v1.ICreateReactionRequest} message CreateReactionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateReactionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.reaction != null && Object.hasOwnProperty.call(message, "reaction"))
                            $root.google.chat.v1.Reaction.encode(message.reaction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateReactionRequest message, length delimited. Does not implicitly {@link google.chat.v1.CreateReactionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @static
                     * @param {google.chat.v1.ICreateReactionRequest} message CreateReactionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateReactionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateReactionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.CreateReactionRequest} CreateReactionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateReactionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.CreateReactionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parent = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.reaction = $root.google.chat.v1.Reaction.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateReactionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.CreateReactionRequest} CreateReactionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateReactionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateReactionRequest message.
                     * @function verify
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateReactionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.reaction != null && message.hasOwnProperty("reaction")) {
                            var error = $root.google.chat.v1.Reaction.verify(message.reaction);
                            if (error)
                                return "reaction." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CreateReactionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.CreateReactionRequest} CreateReactionRequest
                     */
                    CreateReactionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.CreateReactionRequest)
                            return object;
                        var message = new $root.google.chat.v1.CreateReactionRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.reaction != null) {
                            if (typeof object.reaction !== "object")
                                throw TypeError(".google.chat.v1.CreateReactionRequest.reaction: object expected");
                            message.reaction = $root.google.chat.v1.Reaction.fromObject(object.reaction);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateReactionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @static
                     * @param {google.chat.v1.CreateReactionRequest} message CreateReactionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateReactionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.reaction = null;
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.reaction != null && message.hasOwnProperty("reaction"))
                            object.reaction = $root.google.chat.v1.Reaction.toObject(message.reaction, options);
                        return object;
                    };
    
                    /**
                     * Converts this CreateReactionRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateReactionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CreateReactionRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.CreateReactionRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CreateReactionRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.CreateReactionRequest";
                    };
    
                    return CreateReactionRequest;
                })();
    
                v1.ListReactionsRequest = (function() {
    
                    /**
                     * Properties of a ListReactionsRequest.
                     * @memberof google.chat.v1
                     * @interface IListReactionsRequest
                     * @property {string|null} [parent] ListReactionsRequest parent
                     * @property {number|null} [pageSize] ListReactionsRequest pageSize
                     * @property {string|null} [pageToken] ListReactionsRequest pageToken
                     * @property {string|null} [filter] ListReactionsRequest filter
                     */
    
                    /**
                     * Constructs a new ListReactionsRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ListReactionsRequest.
                     * @implements IListReactionsRequest
                     * @constructor
                     * @param {google.chat.v1.IListReactionsRequest=} [properties] Properties to set
                     */
                    function ListReactionsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListReactionsRequest parent.
                     * @member {string} parent
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @instance
                     */
                    ListReactionsRequest.prototype.parent = "";
    
                    /**
                     * ListReactionsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @instance
                     */
                    ListReactionsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListReactionsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @instance
                     */
                    ListReactionsRequest.prototype.pageToken = "";
    
                    /**
                     * ListReactionsRequest filter.
                     * @member {string} filter
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @instance
                     */
                    ListReactionsRequest.prototype.filter = "";
    
                    /**
                     * Creates a new ListReactionsRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @static
                     * @param {google.chat.v1.IListReactionsRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.ListReactionsRequest} ListReactionsRequest instance
                     */
                    ListReactionsRequest.create = function create(properties) {
                        return new ListReactionsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListReactionsRequest message. Does not implicitly {@link google.chat.v1.ListReactionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @static
                     * @param {google.chat.v1.IListReactionsRequest} message ListReactionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListReactionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.filter);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListReactionsRequest message, length delimited. Does not implicitly {@link google.chat.v1.ListReactionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @static
                     * @param {google.chat.v1.IListReactionsRequest} message ListReactionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListReactionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListReactionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ListReactionsRequest} ListReactionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListReactionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ListReactionsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parent = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.pageSize = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.pageToken = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.filter = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListReactionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ListReactionsRequest} ListReactionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListReactionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListReactionsRequest message.
                     * @function verify
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListReactionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            if (!$util.isString(message.filter))
                                return "filter: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListReactionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ListReactionsRequest} ListReactionsRequest
                     */
                    ListReactionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ListReactionsRequest)
                            return object;
                        var message = new $root.google.chat.v1.ListReactionsRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        if (object.filter != null)
                            message.filter = String(object.filter);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListReactionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @static
                     * @param {google.chat.v1.ListReactionsRequest} message ListReactionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListReactionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                            object.filter = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            object.filter = message.filter;
                        return object;
                    };
    
                    /**
                     * Converts this ListReactionsRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListReactionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ListReactionsRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ListReactionsRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ListReactionsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ListReactionsRequest";
                    };
    
                    return ListReactionsRequest;
                })();
    
                v1.ListReactionsResponse = (function() {
    
                    /**
                     * Properties of a ListReactionsResponse.
                     * @memberof google.chat.v1
                     * @interface IListReactionsResponse
                     * @property {Array.<google.chat.v1.IReaction>|null} [reactions] ListReactionsResponse reactions
                     * @property {string|null} [nextPageToken] ListReactionsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListReactionsResponse.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ListReactionsResponse.
                     * @implements IListReactionsResponse
                     * @constructor
                     * @param {google.chat.v1.IListReactionsResponse=} [properties] Properties to set
                     */
                    function ListReactionsResponse(properties) {
                        this.reactions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListReactionsResponse reactions.
                     * @member {Array.<google.chat.v1.IReaction>} reactions
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @instance
                     */
                    ListReactionsResponse.prototype.reactions = $util.emptyArray;
    
                    /**
                     * ListReactionsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @instance
                     */
                    ListReactionsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListReactionsResponse instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @static
                     * @param {google.chat.v1.IListReactionsResponse=} [properties] Properties to set
                     * @returns {google.chat.v1.ListReactionsResponse} ListReactionsResponse instance
                     */
                    ListReactionsResponse.create = function create(properties) {
                        return new ListReactionsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListReactionsResponse message. Does not implicitly {@link google.chat.v1.ListReactionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @static
                     * @param {google.chat.v1.IListReactionsResponse} message ListReactionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListReactionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.reactions != null && message.reactions.length)
                            for (var i = 0; i < message.reactions.length; ++i)
                                $root.google.chat.v1.Reaction.encode(message.reactions[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListReactionsResponse message, length delimited. Does not implicitly {@link google.chat.v1.ListReactionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @static
                     * @param {google.chat.v1.IListReactionsResponse} message ListReactionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListReactionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListReactionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ListReactionsResponse} ListReactionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListReactionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ListReactionsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.reactions && message.reactions.length))
                                        message.reactions = [];
                                    message.reactions.push($root.google.chat.v1.Reaction.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 2: {
                                    message.nextPageToken = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListReactionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ListReactionsResponse} ListReactionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListReactionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListReactionsResponse message.
                     * @function verify
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListReactionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.reactions != null && message.hasOwnProperty("reactions")) {
                            if (!Array.isArray(message.reactions))
                                return "reactions: array expected";
                            for (var i = 0; i < message.reactions.length; ++i) {
                                var error = $root.google.chat.v1.Reaction.verify(message.reactions[i]);
                                if (error)
                                    return "reactions." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListReactionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ListReactionsResponse} ListReactionsResponse
                     */
                    ListReactionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ListReactionsResponse)
                            return object;
                        var message = new $root.google.chat.v1.ListReactionsResponse();
                        if (object.reactions) {
                            if (!Array.isArray(object.reactions))
                                throw TypeError(".google.chat.v1.ListReactionsResponse.reactions: array expected");
                            message.reactions = [];
                            for (var i = 0; i < object.reactions.length; ++i) {
                                if (typeof object.reactions[i] !== "object")
                                    throw TypeError(".google.chat.v1.ListReactionsResponse.reactions: object expected");
                                message.reactions[i] = $root.google.chat.v1.Reaction.fromObject(object.reactions[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListReactionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @static
                     * @param {google.chat.v1.ListReactionsResponse} message ListReactionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListReactionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.reactions = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.reactions && message.reactions.length) {
                            object.reactions = [];
                            for (var j = 0; j < message.reactions.length; ++j)
                                object.reactions[j] = $root.google.chat.v1.Reaction.toObject(message.reactions[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListReactionsResponse to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListReactionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ListReactionsResponse
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ListReactionsResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ListReactionsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ListReactionsResponse";
                    };
    
                    return ListReactionsResponse;
                })();
    
                v1.DeleteReactionRequest = (function() {
    
                    /**
                     * Properties of a DeleteReactionRequest.
                     * @memberof google.chat.v1
                     * @interface IDeleteReactionRequest
                     * @property {string|null} [name] DeleteReactionRequest name
                     */
    
                    /**
                     * Constructs a new DeleteReactionRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a DeleteReactionRequest.
                     * @implements IDeleteReactionRequest
                     * @constructor
                     * @param {google.chat.v1.IDeleteReactionRequest=} [properties] Properties to set
                     */
                    function DeleteReactionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteReactionRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @instance
                     */
                    DeleteReactionRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteReactionRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @static
                     * @param {google.chat.v1.IDeleteReactionRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.DeleteReactionRequest} DeleteReactionRequest instance
                     */
                    DeleteReactionRequest.create = function create(properties) {
                        return new DeleteReactionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteReactionRequest message. Does not implicitly {@link google.chat.v1.DeleteReactionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @static
                     * @param {google.chat.v1.IDeleteReactionRequest} message DeleteReactionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteReactionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteReactionRequest message, length delimited. Does not implicitly {@link google.chat.v1.DeleteReactionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @static
                     * @param {google.chat.v1.IDeleteReactionRequest} message DeleteReactionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteReactionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteReactionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.DeleteReactionRequest} DeleteReactionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteReactionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.DeleteReactionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteReactionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.DeleteReactionRequest} DeleteReactionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteReactionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteReactionRequest message.
                     * @function verify
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteReactionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteReactionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.DeleteReactionRequest} DeleteReactionRequest
                     */
                    DeleteReactionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.DeleteReactionRequest)
                            return object;
                        var message = new $root.google.chat.v1.DeleteReactionRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteReactionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @static
                     * @param {google.chat.v1.DeleteReactionRequest} message DeleteReactionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteReactionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteReactionRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteReactionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DeleteReactionRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.DeleteReactionRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DeleteReactionRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.DeleteReactionRequest";
                    };
    
                    return DeleteReactionRequest;
                })();
    
                v1.SlashCommand = (function() {
    
                    /**
                     * Properties of a SlashCommand.
                     * @memberof google.chat.v1
                     * @interface ISlashCommand
                     * @property {number|Long|null} [commandId] SlashCommand commandId
                     */
    
                    /**
                     * Constructs a new SlashCommand.
                     * @memberof google.chat.v1
                     * @classdesc Represents a SlashCommand.
                     * @implements ISlashCommand
                     * @constructor
                     * @param {google.chat.v1.ISlashCommand=} [properties] Properties to set
                     */
                    function SlashCommand(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SlashCommand commandId.
                     * @member {number|Long} commandId
                     * @memberof google.chat.v1.SlashCommand
                     * @instance
                     */
                    SlashCommand.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new SlashCommand instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.SlashCommand
                     * @static
                     * @param {google.chat.v1.ISlashCommand=} [properties] Properties to set
                     * @returns {google.chat.v1.SlashCommand} SlashCommand instance
                     */
                    SlashCommand.create = function create(properties) {
                        return new SlashCommand(properties);
                    };
    
                    /**
                     * Encodes the specified SlashCommand message. Does not implicitly {@link google.chat.v1.SlashCommand.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.SlashCommand
                     * @static
                     * @param {google.chat.v1.ISlashCommand} message SlashCommand message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlashCommand.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.commandId != null && Object.hasOwnProperty.call(message, "commandId"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SlashCommand message, length delimited. Does not implicitly {@link google.chat.v1.SlashCommand.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.SlashCommand
                     * @static
                     * @param {google.chat.v1.ISlashCommand} message SlashCommand message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SlashCommand.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SlashCommand message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.SlashCommand
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.SlashCommand} SlashCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlashCommand.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.SlashCommand();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.commandId = reader.int64();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SlashCommand message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.SlashCommand
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.SlashCommand} SlashCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SlashCommand.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SlashCommand message.
                     * @function verify
                     * @memberof google.chat.v1.SlashCommand
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SlashCommand.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.commandId != null && message.hasOwnProperty("commandId"))
                            if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                                return "commandId: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a SlashCommand message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.SlashCommand
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.SlashCommand} SlashCommand
                     */
                    SlashCommand.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.SlashCommand)
                            return object;
                        var message = new $root.google.chat.v1.SlashCommand();
                        if (object.commandId != null)
                            if ($util.Long)
                                (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                            else if (typeof object.commandId === "string")
                                message.commandId = parseInt(object.commandId, 10);
                            else if (typeof object.commandId === "number")
                                message.commandId = object.commandId;
                            else if (typeof object.commandId === "object")
                                message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SlashCommand message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.SlashCommand
                     * @static
                     * @param {google.chat.v1.SlashCommand} message SlashCommand
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SlashCommand.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.commandId = options.longs === String ? "0" : 0;
                        if (message.commandId != null && message.hasOwnProperty("commandId"))
                            if (typeof message.commandId === "number")
                                object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                            else
                                object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                        return object;
                    };
    
                    /**
                     * Converts this SlashCommand to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.SlashCommand
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SlashCommand.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SlashCommand
                     * @function getTypeUrl
                     * @memberof google.chat.v1.SlashCommand
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SlashCommand.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.SlashCommand";
                    };
    
                    return SlashCommand;
                })();
    
                v1.Space = (function() {
    
                    /**
                     * Properties of a Space.
                     * @memberof google.chat.v1
                     * @interface ISpace
                     * @property {string|null} [name] Space name
                     * @property {google.chat.v1.Space.Type|null} [type] Space type
                     * @property {google.chat.v1.Space.SpaceType|null} [spaceType] Space spaceType
                     * @property {boolean|null} [singleUserBotDm] Space singleUserBotDm
                     * @property {boolean|null} [threaded] Space threaded
                     * @property {string|null} [displayName] Space displayName
                     * @property {boolean|null} [externalUserAllowed] Space externalUserAllowed
                     * @property {google.chat.v1.Space.SpaceThreadingState|null} [spaceThreadingState] Space spaceThreadingState
                     * @property {google.chat.v1.Space.ISpaceDetails|null} [spaceDetails] Space spaceDetails
                     * @property {google.chat.v1.HistoryState|null} [spaceHistoryState] Space spaceHistoryState
                     * @property {boolean|null} [importMode] Space importMode
                     * @property {google.protobuf.ITimestamp|null} [createTime] Space createTime
                     * @property {boolean|null} [adminInstalled] Space adminInstalled
                     */
    
                    /**
                     * Constructs a new Space.
                     * @memberof google.chat.v1
                     * @classdesc Represents a Space.
                     * @implements ISpace
                     * @constructor
                     * @param {google.chat.v1.ISpace=} [properties] Properties to set
                     */
                    function Space(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Space name.
                     * @member {string} name
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.name = "";
    
                    /**
                     * Space type.
                     * @member {google.chat.v1.Space.Type} type
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.type = 0;
    
                    /**
                     * Space spaceType.
                     * @member {google.chat.v1.Space.SpaceType} spaceType
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.spaceType = 0;
    
                    /**
                     * Space singleUserBotDm.
                     * @member {boolean} singleUserBotDm
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.singleUserBotDm = false;
    
                    /**
                     * Space threaded.
                     * @member {boolean} threaded
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.threaded = false;
    
                    /**
                     * Space displayName.
                     * @member {string} displayName
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.displayName = "";
    
                    /**
                     * Space externalUserAllowed.
                     * @member {boolean} externalUserAllowed
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.externalUserAllowed = false;
    
                    /**
                     * Space spaceThreadingState.
                     * @member {google.chat.v1.Space.SpaceThreadingState} spaceThreadingState
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.spaceThreadingState = 0;
    
                    /**
                     * Space spaceDetails.
                     * @member {google.chat.v1.Space.ISpaceDetails|null|undefined} spaceDetails
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.spaceDetails = null;
    
                    /**
                     * Space spaceHistoryState.
                     * @member {google.chat.v1.HistoryState} spaceHistoryState
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.spaceHistoryState = 0;
    
                    /**
                     * Space importMode.
                     * @member {boolean} importMode
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.importMode = false;
    
                    /**
                     * Space createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.createTime = null;
    
                    /**
                     * Space adminInstalled.
                     * @member {boolean} adminInstalled
                     * @memberof google.chat.v1.Space
                     * @instance
                     */
                    Space.prototype.adminInstalled = false;
    
                    /**
                     * Creates a new Space instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.Space
                     * @static
                     * @param {google.chat.v1.ISpace=} [properties] Properties to set
                     * @returns {google.chat.v1.Space} Space instance
                     */
                    Space.create = function create(properties) {
                        return new Space(properties);
                    };
    
                    /**
                     * Encodes the specified Space message. Does not implicitly {@link google.chat.v1.Space.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.Space
                     * @static
                     * @param {google.chat.v1.ISpace} message Space message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Space.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                        if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.displayName);
                        if (message.singleUserBotDm != null && Object.hasOwnProperty.call(message, "singleUserBotDm"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.singleUserBotDm);
                        if (message.threaded != null && Object.hasOwnProperty.call(message, "threaded"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.threaded);
                        if (message.externalUserAllowed != null && Object.hasOwnProperty.call(message, "externalUserAllowed"))
                            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.externalUserAllowed);
                        if (message.spaceThreadingState != null && Object.hasOwnProperty.call(message, "spaceThreadingState"))
                            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.spaceThreadingState);
                        if (message.spaceType != null && Object.hasOwnProperty.call(message, "spaceType"))
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.spaceType);
                        if (message.spaceDetails != null && Object.hasOwnProperty.call(message, "spaceDetails"))
                            $root.google.chat.v1.Space.SpaceDetails.encode(message.spaceDetails, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.spaceHistoryState != null && Object.hasOwnProperty.call(message, "spaceHistoryState"))
                            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.spaceHistoryState);
                        if (message.importMode != null && Object.hasOwnProperty.call(message, "importMode"))
                            writer.uint32(/* id 16, wireType 0 =*/128).bool(message.importMode);
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                        if (message.adminInstalled != null && Object.hasOwnProperty.call(message, "adminInstalled"))
                            writer.uint32(/* id 19, wireType 0 =*/152).bool(message.adminInstalled);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Space message, length delimited. Does not implicitly {@link google.chat.v1.Space.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.Space
                     * @static
                     * @param {google.chat.v1.ISpace} message Space message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Space.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Space message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.Space
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.Space} Space
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Space.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Space();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.type = reader.int32();
                                    break;
                                }
                            case 10: {
                                    message.spaceType = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.singleUserBotDm = reader.bool();
                                    break;
                                }
                            case 5: {
                                    message.threaded = reader.bool();
                                    break;
                                }
                            case 3: {
                                    message.displayName = reader.string();
                                    break;
                                }
                            case 8: {
                                    message.externalUserAllowed = reader.bool();
                                    break;
                                }
                            case 9: {
                                    message.spaceThreadingState = reader.int32();
                                    break;
                                }
                            case 11: {
                                    message.spaceDetails = $root.google.chat.v1.Space.SpaceDetails.decode(reader, reader.uint32());
                                    break;
                                }
                            case 13: {
                                    message.spaceHistoryState = reader.int32();
                                    break;
                                }
                            case 16: {
                                    message.importMode = reader.bool();
                                    break;
                                }
                            case 17: {
                                    message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 19: {
                                    message.adminInstalled = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Space message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.Space
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.Space} Space
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Space.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Space message.
                     * @function verify
                     * @memberof google.chat.v1.Space
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Space.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.spaceType != null && message.hasOwnProperty("spaceType"))
                            switch (message.spaceType) {
                            default:
                                return "spaceType: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.singleUserBotDm != null && message.hasOwnProperty("singleUserBotDm"))
                            if (typeof message.singleUserBotDm !== "boolean")
                                return "singleUserBotDm: boolean expected";
                        if (message.threaded != null && message.hasOwnProperty("threaded"))
                            if (typeof message.threaded !== "boolean")
                                return "threaded: boolean expected";
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            if (!$util.isString(message.displayName))
                                return "displayName: string expected";
                        if (message.externalUserAllowed != null && message.hasOwnProperty("externalUserAllowed"))
                            if (typeof message.externalUserAllowed !== "boolean")
                                return "externalUserAllowed: boolean expected";
                        if (message.spaceThreadingState != null && message.hasOwnProperty("spaceThreadingState"))
                            switch (message.spaceThreadingState) {
                            default:
                                return "spaceThreadingState: enum value expected";
                            case 0:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.spaceDetails != null && message.hasOwnProperty("spaceDetails")) {
                            var error = $root.google.chat.v1.Space.SpaceDetails.verify(message.spaceDetails);
                            if (error)
                                return "spaceDetails." + error;
                        }
                        if (message.spaceHistoryState != null && message.hasOwnProperty("spaceHistoryState"))
                            switch (message.spaceHistoryState) {
                            default:
                                return "spaceHistoryState: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.importMode != null && message.hasOwnProperty("importMode"))
                            if (typeof message.importMode !== "boolean")
                                return "importMode: boolean expected";
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.adminInstalled != null && message.hasOwnProperty("adminInstalled"))
                            if (typeof message.adminInstalled !== "boolean")
                                return "adminInstalled: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a Space message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.Space
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.Space} Space
                     */
                    Space.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.Space)
                            return object;
                        var message = new $root.google.chat.v1.Space();
                        if (object.name != null)
                            message.name = String(object.name);
                        switch (object.type) {
                        default:
                            if (typeof object.type === "number") {
                                message.type = object.type;
                                break;
                            }
                            break;
                        case "TYPE_UNSPECIFIED":
                        case 0:
                            message.type = 0;
                            break;
                        case "ROOM":
                        case 1:
                            message.type = 1;
                            break;
                        case "DM":
                        case 2:
                            message.type = 2;
                            break;
                        }
                        switch (object.spaceType) {
                        default:
                            if (typeof object.spaceType === "number") {
                                message.spaceType = object.spaceType;
                                break;
                            }
                            break;
                        case "SPACE_TYPE_UNSPECIFIED":
                        case 0:
                            message.spaceType = 0;
                            break;
                        case "SPACE":
                        case 1:
                            message.spaceType = 1;
                            break;
                        case "GROUP_CHAT":
                        case 2:
                            message.spaceType = 2;
                            break;
                        case "DIRECT_MESSAGE":
                        case 3:
                            message.spaceType = 3;
                            break;
                        }
                        if (object.singleUserBotDm != null)
                            message.singleUserBotDm = Boolean(object.singleUserBotDm);
                        if (object.threaded != null)
                            message.threaded = Boolean(object.threaded);
                        if (object.displayName != null)
                            message.displayName = String(object.displayName);
                        if (object.externalUserAllowed != null)
                            message.externalUserAllowed = Boolean(object.externalUserAllowed);
                        switch (object.spaceThreadingState) {
                        default:
                            if (typeof object.spaceThreadingState === "number") {
                                message.spaceThreadingState = object.spaceThreadingState;
                                break;
                            }
                            break;
                        case "SPACE_THREADING_STATE_UNSPECIFIED":
                        case 0:
                            message.spaceThreadingState = 0;
                            break;
                        case "THREADED_MESSAGES":
                        case 2:
                            message.spaceThreadingState = 2;
                            break;
                        case "GROUPED_MESSAGES":
                        case 3:
                            message.spaceThreadingState = 3;
                            break;
                        case "UNTHREADED_MESSAGES":
                        case 4:
                            message.spaceThreadingState = 4;
                            break;
                        }
                        if (object.spaceDetails != null) {
                            if (typeof object.spaceDetails !== "object")
                                throw TypeError(".google.chat.v1.Space.spaceDetails: object expected");
                            message.spaceDetails = $root.google.chat.v1.Space.SpaceDetails.fromObject(object.spaceDetails);
                        }
                        switch (object.spaceHistoryState) {
                        default:
                            if (typeof object.spaceHistoryState === "number") {
                                message.spaceHistoryState = object.spaceHistoryState;
                                break;
                            }
                            break;
                        case "HISTORY_STATE_UNSPECIFIED":
                        case 0:
                            message.spaceHistoryState = 0;
                            break;
                        case "HISTORY_OFF":
                        case 1:
                            message.spaceHistoryState = 1;
                            break;
                        case "HISTORY_ON":
                        case 2:
                            message.spaceHistoryState = 2;
                            break;
                        }
                        if (object.importMode != null)
                            message.importMode = Boolean(object.importMode);
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".google.chat.v1.Space.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.adminInstalled != null)
                            message.adminInstalled = Boolean(object.adminInstalled);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Space message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.Space
                     * @static
                     * @param {google.chat.v1.Space} message Space
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Space.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                            object.displayName = "";
                            object.singleUserBotDm = false;
                            object.threaded = false;
                            object.externalUserAllowed = false;
                            object.spaceThreadingState = options.enums === String ? "SPACE_THREADING_STATE_UNSPECIFIED" : 0;
                            object.spaceType = options.enums === String ? "SPACE_TYPE_UNSPECIFIED" : 0;
                            object.spaceDetails = null;
                            object.spaceHistoryState = options.enums === String ? "HISTORY_STATE_UNSPECIFIED" : 0;
                            object.importMode = false;
                            object.createTime = null;
                            object.adminInstalled = false;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.google.chat.v1.Space.Type[message.type] === undefined ? message.type : $root.google.chat.v1.Space.Type[message.type] : message.type;
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            object.displayName = message.displayName;
                        if (message.singleUserBotDm != null && message.hasOwnProperty("singleUserBotDm"))
                            object.singleUserBotDm = message.singleUserBotDm;
                        if (message.threaded != null && message.hasOwnProperty("threaded"))
                            object.threaded = message.threaded;
                        if (message.externalUserAllowed != null && message.hasOwnProperty("externalUserAllowed"))
                            object.externalUserAllowed = message.externalUserAllowed;
                        if (message.spaceThreadingState != null && message.hasOwnProperty("spaceThreadingState"))
                            object.spaceThreadingState = options.enums === String ? $root.google.chat.v1.Space.SpaceThreadingState[message.spaceThreadingState] === undefined ? message.spaceThreadingState : $root.google.chat.v1.Space.SpaceThreadingState[message.spaceThreadingState] : message.spaceThreadingState;
                        if (message.spaceType != null && message.hasOwnProperty("spaceType"))
                            object.spaceType = options.enums === String ? $root.google.chat.v1.Space.SpaceType[message.spaceType] === undefined ? message.spaceType : $root.google.chat.v1.Space.SpaceType[message.spaceType] : message.spaceType;
                        if (message.spaceDetails != null && message.hasOwnProperty("spaceDetails"))
                            object.spaceDetails = $root.google.chat.v1.Space.SpaceDetails.toObject(message.spaceDetails, options);
                        if (message.spaceHistoryState != null && message.hasOwnProperty("spaceHistoryState"))
                            object.spaceHistoryState = options.enums === String ? $root.google.chat.v1.HistoryState[message.spaceHistoryState] === undefined ? message.spaceHistoryState : $root.google.chat.v1.HistoryState[message.spaceHistoryState] : message.spaceHistoryState;
                        if (message.importMode != null && message.hasOwnProperty("importMode"))
                            object.importMode = message.importMode;
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.adminInstalled != null && message.hasOwnProperty("adminInstalled"))
                            object.adminInstalled = message.adminInstalled;
                        return object;
                    };
    
                    /**
                     * Converts this Space to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.Space
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Space.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Space
                     * @function getTypeUrl
                     * @memberof google.chat.v1.Space
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Space.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.Space";
                    };
    
                    /**
                     * Type enum.
                     * @name google.chat.v1.Space.Type
                     * @enum {number}
                     * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                     * @property {number} ROOM=1 ROOM value
                     * @property {number} DM=2 DM value
                     */
                    Space.Type = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ROOM"] = 1;
                        values[valuesById[2] = "DM"] = 2;
                        return values;
                    })();
    
                    /**
                     * SpaceType enum.
                     * @name google.chat.v1.Space.SpaceType
                     * @enum {number}
                     * @property {number} SPACE_TYPE_UNSPECIFIED=0 SPACE_TYPE_UNSPECIFIED value
                     * @property {number} SPACE=1 SPACE value
                     * @property {number} GROUP_CHAT=2 GROUP_CHAT value
                     * @property {number} DIRECT_MESSAGE=3 DIRECT_MESSAGE value
                     */
                    Space.SpaceType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "SPACE_TYPE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SPACE"] = 1;
                        values[valuesById[2] = "GROUP_CHAT"] = 2;
                        values[valuesById[3] = "DIRECT_MESSAGE"] = 3;
                        return values;
                    })();
    
                    /**
                     * SpaceThreadingState enum.
                     * @name google.chat.v1.Space.SpaceThreadingState
                     * @enum {number}
                     * @property {number} SPACE_THREADING_STATE_UNSPECIFIED=0 SPACE_THREADING_STATE_UNSPECIFIED value
                     * @property {number} THREADED_MESSAGES=2 THREADED_MESSAGES value
                     * @property {number} GROUPED_MESSAGES=3 GROUPED_MESSAGES value
                     * @property {number} UNTHREADED_MESSAGES=4 UNTHREADED_MESSAGES value
                     */
                    Space.SpaceThreadingState = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "SPACE_THREADING_STATE_UNSPECIFIED"] = 0;
                        values[valuesById[2] = "THREADED_MESSAGES"] = 2;
                        values[valuesById[3] = "GROUPED_MESSAGES"] = 3;
                        values[valuesById[4] = "UNTHREADED_MESSAGES"] = 4;
                        return values;
                    })();
    
                    Space.SpaceDetails = (function() {
    
                        /**
                         * Properties of a SpaceDetails.
                         * @memberof google.chat.v1.Space
                         * @interface ISpaceDetails
                         * @property {string|null} [description] SpaceDetails description
                         * @property {string|null} [guidelines] SpaceDetails guidelines
                         */
    
                        /**
                         * Constructs a new SpaceDetails.
                         * @memberof google.chat.v1.Space
                         * @classdesc Represents a SpaceDetails.
                         * @implements ISpaceDetails
                         * @constructor
                         * @param {google.chat.v1.Space.ISpaceDetails=} [properties] Properties to set
                         */
                        function SpaceDetails(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpaceDetails description.
                         * @member {string} description
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @instance
                         */
                        SpaceDetails.prototype.description = "";
    
                        /**
                         * SpaceDetails guidelines.
                         * @member {string} guidelines
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @instance
                         */
                        SpaceDetails.prototype.guidelines = "";
    
                        /**
                         * Creates a new SpaceDetails instance using the specified properties.
                         * @function create
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @static
                         * @param {google.chat.v1.Space.ISpaceDetails=} [properties] Properties to set
                         * @returns {google.chat.v1.Space.SpaceDetails} SpaceDetails instance
                         */
                        SpaceDetails.create = function create(properties) {
                            return new SpaceDetails(properties);
                        };
    
                        /**
                         * Encodes the specified SpaceDetails message. Does not implicitly {@link google.chat.v1.Space.SpaceDetails.verify|verify} messages.
                         * @function encode
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @static
                         * @param {google.chat.v1.Space.ISpaceDetails} message SpaceDetails message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpaceDetails.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.description);
                            if (message.guidelines != null && Object.hasOwnProperty.call(message, "guidelines"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.guidelines);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpaceDetails message, length delimited. Does not implicitly {@link google.chat.v1.Space.SpaceDetails.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @static
                         * @param {google.chat.v1.Space.ISpaceDetails} message SpaceDetails message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpaceDetails.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpaceDetails message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.chat.v1.Space.SpaceDetails} SpaceDetails
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpaceDetails.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.Space.SpaceDetails();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.guidelines = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpaceDetails message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.chat.v1.Space.SpaceDetails} SpaceDetails
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpaceDetails.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpaceDetails message.
                         * @function verify
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpaceDetails.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.guidelines != null && message.hasOwnProperty("guidelines"))
                                if (!$util.isString(message.guidelines))
                                    return "guidelines: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a SpaceDetails message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.chat.v1.Space.SpaceDetails} SpaceDetails
                         */
                        SpaceDetails.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.chat.v1.Space.SpaceDetails)
                                return object;
                            var message = new $root.google.chat.v1.Space.SpaceDetails();
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.guidelines != null)
                                message.guidelines = String(object.guidelines);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpaceDetails message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @static
                         * @param {google.chat.v1.Space.SpaceDetails} message SpaceDetails
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpaceDetails.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.description = "";
                                object.guidelines = "";
                            }
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.guidelines != null && message.hasOwnProperty("guidelines"))
                                object.guidelines = message.guidelines;
                            return object;
                        };
    
                        /**
                         * Converts this SpaceDetails to JSON.
                         * @function toJSON
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpaceDetails.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpaceDetails
                         * @function getTypeUrl
                         * @memberof google.chat.v1.Space.SpaceDetails
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpaceDetails.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.chat.v1.Space.SpaceDetails";
                        };
    
                        return SpaceDetails;
                    })();
    
                    return Space;
                })();
    
                v1.CreateSpaceRequest = (function() {
    
                    /**
                     * Properties of a CreateSpaceRequest.
                     * @memberof google.chat.v1
                     * @interface ICreateSpaceRequest
                     * @property {google.chat.v1.ISpace|null} [space] CreateSpaceRequest space
                     * @property {string|null} [requestId] CreateSpaceRequest requestId
                     */
    
                    /**
                     * Constructs a new CreateSpaceRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a CreateSpaceRequest.
                     * @implements ICreateSpaceRequest
                     * @constructor
                     * @param {google.chat.v1.ICreateSpaceRequest=} [properties] Properties to set
                     */
                    function CreateSpaceRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateSpaceRequest space.
                     * @member {google.chat.v1.ISpace|null|undefined} space
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @instance
                     */
                    CreateSpaceRequest.prototype.space = null;
    
                    /**
                     * CreateSpaceRequest requestId.
                     * @member {string} requestId
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @instance
                     */
                    CreateSpaceRequest.prototype.requestId = "";
    
                    /**
                     * Creates a new CreateSpaceRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @static
                     * @param {google.chat.v1.ICreateSpaceRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.CreateSpaceRequest} CreateSpaceRequest instance
                     */
                    CreateSpaceRequest.create = function create(properties) {
                        return new CreateSpaceRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateSpaceRequest message. Does not implicitly {@link google.chat.v1.CreateSpaceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @static
                     * @param {google.chat.v1.ICreateSpaceRequest} message CreateSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateSpaceRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.space != null && Object.hasOwnProperty.call(message, "space"))
                            $root.google.chat.v1.Space.encode(message.space, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.requestId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateSpaceRequest message, length delimited. Does not implicitly {@link google.chat.v1.CreateSpaceRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @static
                     * @param {google.chat.v1.ICreateSpaceRequest} message CreateSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateSpaceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateSpaceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.CreateSpaceRequest} CreateSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateSpaceRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.CreateSpaceRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.space = $root.google.chat.v1.Space.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.requestId = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateSpaceRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.CreateSpaceRequest} CreateSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateSpaceRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateSpaceRequest message.
                     * @function verify
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateSpaceRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.space != null && message.hasOwnProperty("space")) {
                            var error = $root.google.chat.v1.Space.verify(message.space);
                            if (error)
                                return "space." + error;
                        }
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            if (!$util.isString(message.requestId))
                                return "requestId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CreateSpaceRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.CreateSpaceRequest} CreateSpaceRequest
                     */
                    CreateSpaceRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.CreateSpaceRequest)
                            return object;
                        var message = new $root.google.chat.v1.CreateSpaceRequest();
                        if (object.space != null) {
                            if (typeof object.space !== "object")
                                throw TypeError(".google.chat.v1.CreateSpaceRequest.space: object expected");
                            message.space = $root.google.chat.v1.Space.fromObject(object.space);
                        }
                        if (object.requestId != null)
                            message.requestId = String(object.requestId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateSpaceRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @static
                     * @param {google.chat.v1.CreateSpaceRequest} message CreateSpaceRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateSpaceRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.space = null;
                            object.requestId = "";
                        }
                        if (message.space != null && message.hasOwnProperty("space"))
                            object.space = $root.google.chat.v1.Space.toObject(message.space, options);
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            object.requestId = message.requestId;
                        return object;
                    };
    
                    /**
                     * Converts this CreateSpaceRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateSpaceRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CreateSpaceRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.CreateSpaceRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CreateSpaceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.CreateSpaceRequest";
                    };
    
                    return CreateSpaceRequest;
                })();
    
                v1.ListSpacesRequest = (function() {
    
                    /**
                     * Properties of a ListSpacesRequest.
                     * @memberof google.chat.v1
                     * @interface IListSpacesRequest
                     * @property {number|null} [pageSize] ListSpacesRequest pageSize
                     * @property {string|null} [pageToken] ListSpacesRequest pageToken
                     * @property {string|null} [filter] ListSpacesRequest filter
                     */
    
                    /**
                     * Constructs a new ListSpacesRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ListSpacesRequest.
                     * @implements IListSpacesRequest
                     * @constructor
                     * @param {google.chat.v1.IListSpacesRequest=} [properties] Properties to set
                     */
                    function ListSpacesRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListSpacesRequest pageSize.
                     * @member {number} pageSize
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @instance
                     */
                    ListSpacesRequest.prototype.pageSize = 0;
    
                    /**
                     * ListSpacesRequest pageToken.
                     * @member {string} pageToken
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @instance
                     */
                    ListSpacesRequest.prototype.pageToken = "";
    
                    /**
                     * ListSpacesRequest filter.
                     * @member {string} filter
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @instance
                     */
                    ListSpacesRequest.prototype.filter = "";
    
                    /**
                     * Creates a new ListSpacesRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @static
                     * @param {google.chat.v1.IListSpacesRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.ListSpacesRequest} ListSpacesRequest instance
                     */
                    ListSpacesRequest.create = function create(properties) {
                        return new ListSpacesRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListSpacesRequest message. Does not implicitly {@link google.chat.v1.ListSpacesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @static
                     * @param {google.chat.v1.IListSpacesRequest} message ListSpacesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSpacesRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageToken);
                        if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.filter);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListSpacesRequest message, length delimited. Does not implicitly {@link google.chat.v1.ListSpacesRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @static
                     * @param {google.chat.v1.IListSpacesRequest} message ListSpacesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSpacesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListSpacesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ListSpacesRequest} ListSpacesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSpacesRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ListSpacesRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.pageSize = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.pageToken = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.filter = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListSpacesRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ListSpacesRequest} ListSpacesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSpacesRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListSpacesRequest message.
                     * @function verify
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListSpacesRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            if (!$util.isString(message.filter))
                                return "filter: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListSpacesRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ListSpacesRequest} ListSpacesRequest
                     */
                    ListSpacesRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ListSpacesRequest)
                            return object;
                        var message = new $root.google.chat.v1.ListSpacesRequest();
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        if (object.filter != null)
                            message.filter = String(object.filter);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListSpacesRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @static
                     * @param {google.chat.v1.ListSpacesRequest} message ListSpacesRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListSpacesRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.pageSize = 0;
                            object.pageToken = "";
                            object.filter = "";
                        }
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            object.filter = message.filter;
                        return object;
                    };
    
                    /**
                     * Converts this ListSpacesRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListSpacesRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ListSpacesRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ListSpacesRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ListSpacesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ListSpacesRequest";
                    };
    
                    return ListSpacesRequest;
                })();
    
                v1.ListSpacesResponse = (function() {
    
                    /**
                     * Properties of a ListSpacesResponse.
                     * @memberof google.chat.v1
                     * @interface IListSpacesResponse
                     * @property {Array.<google.chat.v1.ISpace>|null} [spaces] ListSpacesResponse spaces
                     * @property {string|null} [nextPageToken] ListSpacesResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListSpacesResponse.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ListSpacesResponse.
                     * @implements IListSpacesResponse
                     * @constructor
                     * @param {google.chat.v1.IListSpacesResponse=} [properties] Properties to set
                     */
                    function ListSpacesResponse(properties) {
                        this.spaces = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListSpacesResponse spaces.
                     * @member {Array.<google.chat.v1.ISpace>} spaces
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @instance
                     */
                    ListSpacesResponse.prototype.spaces = $util.emptyArray;
    
                    /**
                     * ListSpacesResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @instance
                     */
                    ListSpacesResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListSpacesResponse instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @static
                     * @param {google.chat.v1.IListSpacesResponse=} [properties] Properties to set
                     * @returns {google.chat.v1.ListSpacesResponse} ListSpacesResponse instance
                     */
                    ListSpacesResponse.create = function create(properties) {
                        return new ListSpacesResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListSpacesResponse message. Does not implicitly {@link google.chat.v1.ListSpacesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @static
                     * @param {google.chat.v1.IListSpacesResponse} message ListSpacesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSpacesResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.spaces != null && message.spaces.length)
                            for (var i = 0; i < message.spaces.length; ++i)
                                $root.google.chat.v1.Space.encode(message.spaces[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListSpacesResponse message, length delimited. Does not implicitly {@link google.chat.v1.ListSpacesResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @static
                     * @param {google.chat.v1.IListSpacesResponse} message ListSpacesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSpacesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListSpacesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ListSpacesResponse} ListSpacesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSpacesResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ListSpacesResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.spaces && message.spaces.length))
                                        message.spaces = [];
                                    message.spaces.push($root.google.chat.v1.Space.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 2: {
                                    message.nextPageToken = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListSpacesResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ListSpacesResponse} ListSpacesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSpacesResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListSpacesResponse message.
                     * @function verify
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListSpacesResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.spaces != null && message.hasOwnProperty("spaces")) {
                            if (!Array.isArray(message.spaces))
                                return "spaces: array expected";
                            for (var i = 0; i < message.spaces.length; ++i) {
                                var error = $root.google.chat.v1.Space.verify(message.spaces[i]);
                                if (error)
                                    return "spaces." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListSpacesResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ListSpacesResponse} ListSpacesResponse
                     */
                    ListSpacesResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ListSpacesResponse)
                            return object;
                        var message = new $root.google.chat.v1.ListSpacesResponse();
                        if (object.spaces) {
                            if (!Array.isArray(object.spaces))
                                throw TypeError(".google.chat.v1.ListSpacesResponse.spaces: array expected");
                            message.spaces = [];
                            for (var i = 0; i < object.spaces.length; ++i) {
                                if (typeof object.spaces[i] !== "object")
                                    throw TypeError(".google.chat.v1.ListSpacesResponse.spaces: object expected");
                                message.spaces[i] = $root.google.chat.v1.Space.fromObject(object.spaces[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListSpacesResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @static
                     * @param {google.chat.v1.ListSpacesResponse} message ListSpacesResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListSpacesResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.spaces = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.spaces && message.spaces.length) {
                            object.spaces = [];
                            for (var j = 0; j < message.spaces.length; ++j)
                                object.spaces[j] = $root.google.chat.v1.Space.toObject(message.spaces[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListSpacesResponse to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListSpacesResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ListSpacesResponse
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ListSpacesResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ListSpacesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ListSpacesResponse";
                    };
    
                    return ListSpacesResponse;
                })();
    
                v1.GetSpaceRequest = (function() {
    
                    /**
                     * Properties of a GetSpaceRequest.
                     * @memberof google.chat.v1
                     * @interface IGetSpaceRequest
                     * @property {string|null} [name] GetSpaceRequest name
                     */
    
                    /**
                     * Constructs a new GetSpaceRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a GetSpaceRequest.
                     * @implements IGetSpaceRequest
                     * @constructor
                     * @param {google.chat.v1.IGetSpaceRequest=} [properties] Properties to set
                     */
                    function GetSpaceRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetSpaceRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @instance
                     */
                    GetSpaceRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetSpaceRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @static
                     * @param {google.chat.v1.IGetSpaceRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.GetSpaceRequest} GetSpaceRequest instance
                     */
                    GetSpaceRequest.create = function create(properties) {
                        return new GetSpaceRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetSpaceRequest message. Does not implicitly {@link google.chat.v1.GetSpaceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @static
                     * @param {google.chat.v1.IGetSpaceRequest} message GetSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSpaceRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetSpaceRequest message, length delimited. Does not implicitly {@link google.chat.v1.GetSpaceRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @static
                     * @param {google.chat.v1.IGetSpaceRequest} message GetSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSpaceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetSpaceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.GetSpaceRequest} GetSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSpaceRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.GetSpaceRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetSpaceRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.GetSpaceRequest} GetSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSpaceRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetSpaceRequest message.
                     * @function verify
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetSpaceRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetSpaceRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.GetSpaceRequest} GetSpaceRequest
                     */
                    GetSpaceRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.GetSpaceRequest)
                            return object;
                        var message = new $root.google.chat.v1.GetSpaceRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetSpaceRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @static
                     * @param {google.chat.v1.GetSpaceRequest} message GetSpaceRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetSpaceRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetSpaceRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetSpaceRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetSpaceRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.GetSpaceRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetSpaceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.GetSpaceRequest";
                    };
    
                    return GetSpaceRequest;
                })();
    
                v1.FindDirectMessageRequest = (function() {
    
                    /**
                     * Properties of a FindDirectMessageRequest.
                     * @memberof google.chat.v1
                     * @interface IFindDirectMessageRequest
                     * @property {string|null} [name] FindDirectMessageRequest name
                     */
    
                    /**
                     * Constructs a new FindDirectMessageRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a FindDirectMessageRequest.
                     * @implements IFindDirectMessageRequest
                     * @constructor
                     * @param {google.chat.v1.IFindDirectMessageRequest=} [properties] Properties to set
                     */
                    function FindDirectMessageRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FindDirectMessageRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @instance
                     */
                    FindDirectMessageRequest.prototype.name = "";
    
                    /**
                     * Creates a new FindDirectMessageRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @static
                     * @param {google.chat.v1.IFindDirectMessageRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.FindDirectMessageRequest} FindDirectMessageRequest instance
                     */
                    FindDirectMessageRequest.create = function create(properties) {
                        return new FindDirectMessageRequest(properties);
                    };
    
                    /**
                     * Encodes the specified FindDirectMessageRequest message. Does not implicitly {@link google.chat.v1.FindDirectMessageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @static
                     * @param {google.chat.v1.IFindDirectMessageRequest} message FindDirectMessageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FindDirectMessageRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FindDirectMessageRequest message, length delimited. Does not implicitly {@link google.chat.v1.FindDirectMessageRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @static
                     * @param {google.chat.v1.IFindDirectMessageRequest} message FindDirectMessageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FindDirectMessageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FindDirectMessageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.FindDirectMessageRequest} FindDirectMessageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FindDirectMessageRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.FindDirectMessageRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FindDirectMessageRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.FindDirectMessageRequest} FindDirectMessageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FindDirectMessageRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FindDirectMessageRequest message.
                     * @function verify
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FindDirectMessageRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a FindDirectMessageRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.FindDirectMessageRequest} FindDirectMessageRequest
                     */
                    FindDirectMessageRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.FindDirectMessageRequest)
                            return object;
                        var message = new $root.google.chat.v1.FindDirectMessageRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FindDirectMessageRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @static
                     * @param {google.chat.v1.FindDirectMessageRequest} message FindDirectMessageRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FindDirectMessageRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this FindDirectMessageRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FindDirectMessageRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for FindDirectMessageRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.FindDirectMessageRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    FindDirectMessageRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.FindDirectMessageRequest";
                    };
    
                    return FindDirectMessageRequest;
                })();
    
                v1.UpdateSpaceRequest = (function() {
    
                    /**
                     * Properties of an UpdateSpaceRequest.
                     * @memberof google.chat.v1
                     * @interface IUpdateSpaceRequest
                     * @property {google.chat.v1.ISpace|null} [space] UpdateSpaceRequest space
                     * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateSpaceRequest updateMask
                     */
    
                    /**
                     * Constructs a new UpdateSpaceRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents an UpdateSpaceRequest.
                     * @implements IUpdateSpaceRequest
                     * @constructor
                     * @param {google.chat.v1.IUpdateSpaceRequest=} [properties] Properties to set
                     */
                    function UpdateSpaceRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateSpaceRequest space.
                     * @member {google.chat.v1.ISpace|null|undefined} space
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @instance
                     */
                    UpdateSpaceRequest.prototype.space = null;
    
                    /**
                     * UpdateSpaceRequest updateMask.
                     * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @instance
                     */
                    UpdateSpaceRequest.prototype.updateMask = null;
    
                    /**
                     * Creates a new UpdateSpaceRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @static
                     * @param {google.chat.v1.IUpdateSpaceRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.UpdateSpaceRequest} UpdateSpaceRequest instance
                     */
                    UpdateSpaceRequest.create = function create(properties) {
                        return new UpdateSpaceRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateSpaceRequest message. Does not implicitly {@link google.chat.v1.UpdateSpaceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @static
                     * @param {google.chat.v1.IUpdateSpaceRequest} message UpdateSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateSpaceRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.space != null && Object.hasOwnProperty.call(message, "space"))
                            $root.google.chat.v1.Space.encode(message.space, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                            $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateSpaceRequest message, length delimited. Does not implicitly {@link google.chat.v1.UpdateSpaceRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @static
                     * @param {google.chat.v1.IUpdateSpaceRequest} message UpdateSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateSpaceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateSpaceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.UpdateSpaceRequest} UpdateSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateSpaceRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.UpdateSpaceRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.space = $root.google.chat.v1.Space.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateSpaceRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.UpdateSpaceRequest} UpdateSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateSpaceRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateSpaceRequest message.
                     * @function verify
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateSpaceRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.space != null && message.hasOwnProperty("space")) {
                            var error = $root.google.chat.v1.Space.verify(message.space);
                            if (error)
                                return "space." + error;
                        }
                        if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                            if (error)
                                return "updateMask." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdateSpaceRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.UpdateSpaceRequest} UpdateSpaceRequest
                     */
                    UpdateSpaceRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.UpdateSpaceRequest)
                            return object;
                        var message = new $root.google.chat.v1.UpdateSpaceRequest();
                        if (object.space != null) {
                            if (typeof object.space !== "object")
                                throw TypeError(".google.chat.v1.UpdateSpaceRequest.space: object expected");
                            message.space = $root.google.chat.v1.Space.fromObject(object.space);
                        }
                        if (object.updateMask != null) {
                            if (typeof object.updateMask !== "object")
                                throw TypeError(".google.chat.v1.UpdateSpaceRequest.updateMask: object expected");
                            message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateSpaceRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @static
                     * @param {google.chat.v1.UpdateSpaceRequest} message UpdateSpaceRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateSpaceRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.space = null;
                            object.updateMask = null;
                        }
                        if (message.space != null && message.hasOwnProperty("space"))
                            object.space = $root.google.chat.v1.Space.toObject(message.space, options);
                        if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                            object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                        return object;
                    };
    
                    /**
                     * Converts this UpdateSpaceRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateSpaceRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for UpdateSpaceRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.UpdateSpaceRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    UpdateSpaceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.UpdateSpaceRequest";
                    };
    
                    return UpdateSpaceRequest;
                })();
    
                v1.DeleteSpaceRequest = (function() {
    
                    /**
                     * Properties of a DeleteSpaceRequest.
                     * @memberof google.chat.v1
                     * @interface IDeleteSpaceRequest
                     * @property {string|null} [name] DeleteSpaceRequest name
                     */
    
                    /**
                     * Constructs a new DeleteSpaceRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a DeleteSpaceRequest.
                     * @implements IDeleteSpaceRequest
                     * @constructor
                     * @param {google.chat.v1.IDeleteSpaceRequest=} [properties] Properties to set
                     */
                    function DeleteSpaceRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteSpaceRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @instance
                     */
                    DeleteSpaceRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteSpaceRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @static
                     * @param {google.chat.v1.IDeleteSpaceRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.DeleteSpaceRequest} DeleteSpaceRequest instance
                     */
                    DeleteSpaceRequest.create = function create(properties) {
                        return new DeleteSpaceRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteSpaceRequest message. Does not implicitly {@link google.chat.v1.DeleteSpaceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @static
                     * @param {google.chat.v1.IDeleteSpaceRequest} message DeleteSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteSpaceRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteSpaceRequest message, length delimited. Does not implicitly {@link google.chat.v1.DeleteSpaceRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @static
                     * @param {google.chat.v1.IDeleteSpaceRequest} message DeleteSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteSpaceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteSpaceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.DeleteSpaceRequest} DeleteSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteSpaceRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.DeleteSpaceRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteSpaceRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.DeleteSpaceRequest} DeleteSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteSpaceRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteSpaceRequest message.
                     * @function verify
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteSpaceRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteSpaceRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.DeleteSpaceRequest} DeleteSpaceRequest
                     */
                    DeleteSpaceRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.DeleteSpaceRequest)
                            return object;
                        var message = new $root.google.chat.v1.DeleteSpaceRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteSpaceRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @static
                     * @param {google.chat.v1.DeleteSpaceRequest} message DeleteSpaceRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteSpaceRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteSpaceRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteSpaceRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for DeleteSpaceRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.DeleteSpaceRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    DeleteSpaceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.DeleteSpaceRequest";
                    };
    
                    return DeleteSpaceRequest;
                })();
    
                v1.CompleteImportSpaceRequest = (function() {
    
                    /**
                     * Properties of a CompleteImportSpaceRequest.
                     * @memberof google.chat.v1
                     * @interface ICompleteImportSpaceRequest
                     * @property {string|null} [name] CompleteImportSpaceRequest name
                     */
    
                    /**
                     * Constructs a new CompleteImportSpaceRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a CompleteImportSpaceRequest.
                     * @implements ICompleteImportSpaceRequest
                     * @constructor
                     * @param {google.chat.v1.ICompleteImportSpaceRequest=} [properties] Properties to set
                     */
                    function CompleteImportSpaceRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CompleteImportSpaceRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @instance
                     */
                    CompleteImportSpaceRequest.prototype.name = "";
    
                    /**
                     * Creates a new CompleteImportSpaceRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @static
                     * @param {google.chat.v1.ICompleteImportSpaceRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.CompleteImportSpaceRequest} CompleteImportSpaceRequest instance
                     */
                    CompleteImportSpaceRequest.create = function create(properties) {
                        return new CompleteImportSpaceRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CompleteImportSpaceRequest message. Does not implicitly {@link google.chat.v1.CompleteImportSpaceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @static
                     * @param {google.chat.v1.ICompleteImportSpaceRequest} message CompleteImportSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CompleteImportSpaceRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CompleteImportSpaceRequest message, length delimited. Does not implicitly {@link google.chat.v1.CompleteImportSpaceRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @static
                     * @param {google.chat.v1.ICompleteImportSpaceRequest} message CompleteImportSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CompleteImportSpaceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CompleteImportSpaceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.CompleteImportSpaceRequest} CompleteImportSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CompleteImportSpaceRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.CompleteImportSpaceRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CompleteImportSpaceRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.CompleteImportSpaceRequest} CompleteImportSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CompleteImportSpaceRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CompleteImportSpaceRequest message.
                     * @function verify
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CompleteImportSpaceRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CompleteImportSpaceRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.CompleteImportSpaceRequest} CompleteImportSpaceRequest
                     */
                    CompleteImportSpaceRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.CompleteImportSpaceRequest)
                            return object;
                        var message = new $root.google.chat.v1.CompleteImportSpaceRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CompleteImportSpaceRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @static
                     * @param {google.chat.v1.CompleteImportSpaceRequest} message CompleteImportSpaceRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CompleteImportSpaceRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this CompleteImportSpaceRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CompleteImportSpaceRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CompleteImportSpaceRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.CompleteImportSpaceRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CompleteImportSpaceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.CompleteImportSpaceRequest";
                    };
    
                    return CompleteImportSpaceRequest;
                })();
    
                v1.CompleteImportSpaceResponse = (function() {
    
                    /**
                     * Properties of a CompleteImportSpaceResponse.
                     * @memberof google.chat.v1
                     * @interface ICompleteImportSpaceResponse
                     * @property {google.chat.v1.ISpace|null} [space] CompleteImportSpaceResponse space
                     */
    
                    /**
                     * Constructs a new CompleteImportSpaceResponse.
                     * @memberof google.chat.v1
                     * @classdesc Represents a CompleteImportSpaceResponse.
                     * @implements ICompleteImportSpaceResponse
                     * @constructor
                     * @param {google.chat.v1.ICompleteImportSpaceResponse=} [properties] Properties to set
                     */
                    function CompleteImportSpaceResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CompleteImportSpaceResponse space.
                     * @member {google.chat.v1.ISpace|null|undefined} space
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @instance
                     */
                    CompleteImportSpaceResponse.prototype.space = null;
    
                    /**
                     * Creates a new CompleteImportSpaceResponse instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @static
                     * @param {google.chat.v1.ICompleteImportSpaceResponse=} [properties] Properties to set
                     * @returns {google.chat.v1.CompleteImportSpaceResponse} CompleteImportSpaceResponse instance
                     */
                    CompleteImportSpaceResponse.create = function create(properties) {
                        return new CompleteImportSpaceResponse(properties);
                    };
    
                    /**
                     * Encodes the specified CompleteImportSpaceResponse message. Does not implicitly {@link google.chat.v1.CompleteImportSpaceResponse.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @static
                     * @param {google.chat.v1.ICompleteImportSpaceResponse} message CompleteImportSpaceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CompleteImportSpaceResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.space != null && Object.hasOwnProperty.call(message, "space"))
                            $root.google.chat.v1.Space.encode(message.space, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CompleteImportSpaceResponse message, length delimited. Does not implicitly {@link google.chat.v1.CompleteImportSpaceResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @static
                     * @param {google.chat.v1.ICompleteImportSpaceResponse} message CompleteImportSpaceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CompleteImportSpaceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CompleteImportSpaceResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.CompleteImportSpaceResponse} CompleteImportSpaceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CompleteImportSpaceResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.CompleteImportSpaceResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.space = $root.google.chat.v1.Space.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CompleteImportSpaceResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.CompleteImportSpaceResponse} CompleteImportSpaceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CompleteImportSpaceResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CompleteImportSpaceResponse message.
                     * @function verify
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CompleteImportSpaceResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.space != null && message.hasOwnProperty("space")) {
                            var error = $root.google.chat.v1.Space.verify(message.space);
                            if (error)
                                return "space." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CompleteImportSpaceResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.CompleteImportSpaceResponse} CompleteImportSpaceResponse
                     */
                    CompleteImportSpaceResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.CompleteImportSpaceResponse)
                            return object;
                        var message = new $root.google.chat.v1.CompleteImportSpaceResponse();
                        if (object.space != null) {
                            if (typeof object.space !== "object")
                                throw TypeError(".google.chat.v1.CompleteImportSpaceResponse.space: object expected");
                            message.space = $root.google.chat.v1.Space.fromObject(object.space);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CompleteImportSpaceResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @static
                     * @param {google.chat.v1.CompleteImportSpaceResponse} message CompleteImportSpaceResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CompleteImportSpaceResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.space = null;
                        if (message.space != null && message.hasOwnProperty("space"))
                            object.space = $root.google.chat.v1.Space.toObject(message.space, options);
                        return object;
                    };
    
                    /**
                     * Converts this CompleteImportSpaceResponse to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CompleteImportSpaceResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CompleteImportSpaceResponse
                     * @function getTypeUrl
                     * @memberof google.chat.v1.CompleteImportSpaceResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CompleteImportSpaceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.CompleteImportSpaceResponse";
                    };
    
                    return CompleteImportSpaceResponse;
                })();
    
                /**
                 * HistoryState enum.
                 * @name google.chat.v1.HistoryState
                 * @enum {number}
                 * @property {number} HISTORY_STATE_UNSPECIFIED=0 HISTORY_STATE_UNSPECIFIED value
                 * @property {number} HISTORY_OFF=1 HISTORY_OFF value
                 * @property {number} HISTORY_ON=2 HISTORY_ON value
                 */
                v1.HistoryState = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_STATE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "HISTORY_OFF"] = 1;
                    values[valuesById[2] = "HISTORY_ON"] = 2;
                    return values;
                })();
    
                v1.SpaceReadState = (function() {
    
                    /**
                     * Properties of a SpaceReadState.
                     * @memberof google.chat.v1
                     * @interface ISpaceReadState
                     * @property {string|null} [name] SpaceReadState name
                     * @property {google.protobuf.ITimestamp|null} [lastReadTime] SpaceReadState lastReadTime
                     */
    
                    /**
                     * Constructs a new SpaceReadState.
                     * @memberof google.chat.v1
                     * @classdesc Represents a SpaceReadState.
                     * @implements ISpaceReadState
                     * @constructor
                     * @param {google.chat.v1.ISpaceReadState=} [properties] Properties to set
                     */
                    function SpaceReadState(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SpaceReadState name.
                     * @member {string} name
                     * @memberof google.chat.v1.SpaceReadState
                     * @instance
                     */
                    SpaceReadState.prototype.name = "";
    
                    /**
                     * SpaceReadState lastReadTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} lastReadTime
                     * @memberof google.chat.v1.SpaceReadState
                     * @instance
                     */
                    SpaceReadState.prototype.lastReadTime = null;
    
                    /**
                     * Creates a new SpaceReadState instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.SpaceReadState
                     * @static
                     * @param {google.chat.v1.ISpaceReadState=} [properties] Properties to set
                     * @returns {google.chat.v1.SpaceReadState} SpaceReadState instance
                     */
                    SpaceReadState.create = function create(properties) {
                        return new SpaceReadState(properties);
                    };
    
                    /**
                     * Encodes the specified SpaceReadState message. Does not implicitly {@link google.chat.v1.SpaceReadState.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.SpaceReadState
                     * @static
                     * @param {google.chat.v1.ISpaceReadState} message SpaceReadState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SpaceReadState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.lastReadTime != null && Object.hasOwnProperty.call(message, "lastReadTime"))
                            $root.google.protobuf.Timestamp.encode(message.lastReadTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SpaceReadState message, length delimited. Does not implicitly {@link google.chat.v1.SpaceReadState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.SpaceReadState
                     * @static
                     * @param {google.chat.v1.ISpaceReadState} message SpaceReadState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SpaceReadState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SpaceReadState message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.SpaceReadState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.SpaceReadState} SpaceReadState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SpaceReadState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.SpaceReadState();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.lastReadTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SpaceReadState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.SpaceReadState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.SpaceReadState} SpaceReadState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SpaceReadState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SpaceReadState message.
                     * @function verify
                     * @memberof google.chat.v1.SpaceReadState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SpaceReadState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.lastReadTime != null && message.hasOwnProperty("lastReadTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.lastReadTime);
                            if (error)
                                return "lastReadTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SpaceReadState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.SpaceReadState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.SpaceReadState} SpaceReadState
                     */
                    SpaceReadState.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.SpaceReadState)
                            return object;
                        var message = new $root.google.chat.v1.SpaceReadState();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.lastReadTime != null) {
                            if (typeof object.lastReadTime !== "object")
                                throw TypeError(".google.chat.v1.SpaceReadState.lastReadTime: object expected");
                            message.lastReadTime = $root.google.protobuf.Timestamp.fromObject(object.lastReadTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SpaceReadState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.SpaceReadState
                     * @static
                     * @param {google.chat.v1.SpaceReadState} message SpaceReadState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SpaceReadState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.lastReadTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.lastReadTime != null && message.hasOwnProperty("lastReadTime"))
                            object.lastReadTime = $root.google.protobuf.Timestamp.toObject(message.lastReadTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this SpaceReadState to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.SpaceReadState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SpaceReadState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SpaceReadState
                     * @function getTypeUrl
                     * @memberof google.chat.v1.SpaceReadState
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SpaceReadState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.SpaceReadState";
                    };
    
                    return SpaceReadState;
                })();
    
                v1.GetSpaceReadStateRequest = (function() {
    
                    /**
                     * Properties of a GetSpaceReadStateRequest.
                     * @memberof google.chat.v1
                     * @interface IGetSpaceReadStateRequest
                     * @property {string|null} [name] GetSpaceReadStateRequest name
                     */
    
                    /**
                     * Constructs a new GetSpaceReadStateRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a GetSpaceReadStateRequest.
                     * @implements IGetSpaceReadStateRequest
                     * @constructor
                     * @param {google.chat.v1.IGetSpaceReadStateRequest=} [properties] Properties to set
                     */
                    function GetSpaceReadStateRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetSpaceReadStateRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @instance
                     */
                    GetSpaceReadStateRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetSpaceReadStateRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @static
                     * @param {google.chat.v1.IGetSpaceReadStateRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.GetSpaceReadStateRequest} GetSpaceReadStateRequest instance
                     */
                    GetSpaceReadStateRequest.create = function create(properties) {
                        return new GetSpaceReadStateRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetSpaceReadStateRequest message. Does not implicitly {@link google.chat.v1.GetSpaceReadStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @static
                     * @param {google.chat.v1.IGetSpaceReadStateRequest} message GetSpaceReadStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSpaceReadStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetSpaceReadStateRequest message, length delimited. Does not implicitly {@link google.chat.v1.GetSpaceReadStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @static
                     * @param {google.chat.v1.IGetSpaceReadStateRequest} message GetSpaceReadStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSpaceReadStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetSpaceReadStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.GetSpaceReadStateRequest} GetSpaceReadStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSpaceReadStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.GetSpaceReadStateRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetSpaceReadStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.GetSpaceReadStateRequest} GetSpaceReadStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSpaceReadStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetSpaceReadStateRequest message.
                     * @function verify
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetSpaceReadStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetSpaceReadStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.GetSpaceReadStateRequest} GetSpaceReadStateRequest
                     */
                    GetSpaceReadStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.GetSpaceReadStateRequest)
                            return object;
                        var message = new $root.google.chat.v1.GetSpaceReadStateRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetSpaceReadStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @static
                     * @param {google.chat.v1.GetSpaceReadStateRequest} message GetSpaceReadStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetSpaceReadStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetSpaceReadStateRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetSpaceReadStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetSpaceReadStateRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.GetSpaceReadStateRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetSpaceReadStateRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.GetSpaceReadStateRequest";
                    };
    
                    return GetSpaceReadStateRequest;
                })();
    
                v1.UpdateSpaceReadStateRequest = (function() {
    
                    /**
                     * Properties of an UpdateSpaceReadStateRequest.
                     * @memberof google.chat.v1
                     * @interface IUpdateSpaceReadStateRequest
                     * @property {google.chat.v1.ISpaceReadState|null} [spaceReadState] UpdateSpaceReadStateRequest spaceReadState
                     * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateSpaceReadStateRequest updateMask
                     */
    
                    /**
                     * Constructs a new UpdateSpaceReadStateRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents an UpdateSpaceReadStateRequest.
                     * @implements IUpdateSpaceReadStateRequest
                     * @constructor
                     * @param {google.chat.v1.IUpdateSpaceReadStateRequest=} [properties] Properties to set
                     */
                    function UpdateSpaceReadStateRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateSpaceReadStateRequest spaceReadState.
                     * @member {google.chat.v1.ISpaceReadState|null|undefined} spaceReadState
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @instance
                     */
                    UpdateSpaceReadStateRequest.prototype.spaceReadState = null;
    
                    /**
                     * UpdateSpaceReadStateRequest updateMask.
                     * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @instance
                     */
                    UpdateSpaceReadStateRequest.prototype.updateMask = null;
    
                    /**
                     * Creates a new UpdateSpaceReadStateRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @static
                     * @param {google.chat.v1.IUpdateSpaceReadStateRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.UpdateSpaceReadStateRequest} UpdateSpaceReadStateRequest instance
                     */
                    UpdateSpaceReadStateRequest.create = function create(properties) {
                        return new UpdateSpaceReadStateRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateSpaceReadStateRequest message. Does not implicitly {@link google.chat.v1.UpdateSpaceReadStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @static
                     * @param {google.chat.v1.IUpdateSpaceReadStateRequest} message UpdateSpaceReadStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateSpaceReadStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.spaceReadState != null && Object.hasOwnProperty.call(message, "spaceReadState"))
                            $root.google.chat.v1.SpaceReadState.encode(message.spaceReadState, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                            $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateSpaceReadStateRequest message, length delimited. Does not implicitly {@link google.chat.v1.UpdateSpaceReadStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @static
                     * @param {google.chat.v1.IUpdateSpaceReadStateRequest} message UpdateSpaceReadStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateSpaceReadStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateSpaceReadStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.UpdateSpaceReadStateRequest} UpdateSpaceReadStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateSpaceReadStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.UpdateSpaceReadStateRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.spaceReadState = $root.google.chat.v1.SpaceReadState.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateSpaceReadStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.UpdateSpaceReadStateRequest} UpdateSpaceReadStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateSpaceReadStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateSpaceReadStateRequest message.
                     * @function verify
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateSpaceReadStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.spaceReadState != null && message.hasOwnProperty("spaceReadState")) {
                            var error = $root.google.chat.v1.SpaceReadState.verify(message.spaceReadState);
                            if (error)
                                return "spaceReadState." + error;
                        }
                        if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                            if (error)
                                return "updateMask." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdateSpaceReadStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.UpdateSpaceReadStateRequest} UpdateSpaceReadStateRequest
                     */
                    UpdateSpaceReadStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.UpdateSpaceReadStateRequest)
                            return object;
                        var message = new $root.google.chat.v1.UpdateSpaceReadStateRequest();
                        if (object.spaceReadState != null) {
                            if (typeof object.spaceReadState !== "object")
                                throw TypeError(".google.chat.v1.UpdateSpaceReadStateRequest.spaceReadState: object expected");
                            message.spaceReadState = $root.google.chat.v1.SpaceReadState.fromObject(object.spaceReadState);
                        }
                        if (object.updateMask != null) {
                            if (typeof object.updateMask !== "object")
                                throw TypeError(".google.chat.v1.UpdateSpaceReadStateRequest.updateMask: object expected");
                            message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateSpaceReadStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @static
                     * @param {google.chat.v1.UpdateSpaceReadStateRequest} message UpdateSpaceReadStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateSpaceReadStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.spaceReadState = null;
                            object.updateMask = null;
                        }
                        if (message.spaceReadState != null && message.hasOwnProperty("spaceReadState"))
                            object.spaceReadState = $root.google.chat.v1.SpaceReadState.toObject(message.spaceReadState, options);
                        if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                            object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                        return object;
                    };
    
                    /**
                     * Converts this UpdateSpaceReadStateRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateSpaceReadStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for UpdateSpaceReadStateRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.UpdateSpaceReadStateRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    UpdateSpaceReadStateRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.UpdateSpaceReadStateRequest";
                    };
    
                    return UpdateSpaceReadStateRequest;
                })();
    
                v1.SetUpSpaceRequest = (function() {
    
                    /**
                     * Properties of a SetUpSpaceRequest.
                     * @memberof google.chat.v1
                     * @interface ISetUpSpaceRequest
                     * @property {google.chat.v1.ISpace|null} [space] SetUpSpaceRequest space
                     * @property {string|null} [requestId] SetUpSpaceRequest requestId
                     * @property {Array.<google.chat.v1.IMembership>|null} [memberships] SetUpSpaceRequest memberships
                     */
    
                    /**
                     * Constructs a new SetUpSpaceRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a SetUpSpaceRequest.
                     * @implements ISetUpSpaceRequest
                     * @constructor
                     * @param {google.chat.v1.ISetUpSpaceRequest=} [properties] Properties to set
                     */
                    function SetUpSpaceRequest(properties) {
                        this.memberships = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SetUpSpaceRequest space.
                     * @member {google.chat.v1.ISpace|null|undefined} space
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @instance
                     */
                    SetUpSpaceRequest.prototype.space = null;
    
                    /**
                     * SetUpSpaceRequest requestId.
                     * @member {string} requestId
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @instance
                     */
                    SetUpSpaceRequest.prototype.requestId = "";
    
                    /**
                     * SetUpSpaceRequest memberships.
                     * @member {Array.<google.chat.v1.IMembership>} memberships
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @instance
                     */
                    SetUpSpaceRequest.prototype.memberships = $util.emptyArray;
    
                    /**
                     * Creates a new SetUpSpaceRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @static
                     * @param {google.chat.v1.ISetUpSpaceRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.SetUpSpaceRequest} SetUpSpaceRequest instance
                     */
                    SetUpSpaceRequest.create = function create(properties) {
                        return new SetUpSpaceRequest(properties);
                    };
    
                    /**
                     * Encodes the specified SetUpSpaceRequest message. Does not implicitly {@link google.chat.v1.SetUpSpaceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @static
                     * @param {google.chat.v1.ISetUpSpaceRequest} message SetUpSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetUpSpaceRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.space != null && Object.hasOwnProperty.call(message, "space"))
                            $root.google.chat.v1.Space.encode(message.space, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.requestId);
                        if (message.memberships != null && message.memberships.length)
                            for (var i = 0; i < message.memberships.length; ++i)
                                $root.google.chat.v1.Membership.encode(message.memberships[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SetUpSpaceRequest message, length delimited. Does not implicitly {@link google.chat.v1.SetUpSpaceRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @static
                     * @param {google.chat.v1.ISetUpSpaceRequest} message SetUpSpaceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetUpSpaceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SetUpSpaceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.SetUpSpaceRequest} SetUpSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetUpSpaceRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.SetUpSpaceRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.space = $root.google.chat.v1.Space.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.requestId = reader.string();
                                    break;
                                }
                            case 4: {
                                    if (!(message.memberships && message.memberships.length))
                                        message.memberships = [];
                                    message.memberships.push($root.google.chat.v1.Membership.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SetUpSpaceRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.SetUpSpaceRequest} SetUpSpaceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetUpSpaceRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SetUpSpaceRequest message.
                     * @function verify
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SetUpSpaceRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.space != null && message.hasOwnProperty("space")) {
                            var error = $root.google.chat.v1.Space.verify(message.space);
                            if (error)
                                return "space." + error;
                        }
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            if (!$util.isString(message.requestId))
                                return "requestId: string expected";
                        if (message.memberships != null && message.hasOwnProperty("memberships")) {
                            if (!Array.isArray(message.memberships))
                                return "memberships: array expected";
                            for (var i = 0; i < message.memberships.length; ++i) {
                                var error = $root.google.chat.v1.Membership.verify(message.memberships[i]);
                                if (error)
                                    return "memberships." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SetUpSpaceRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.SetUpSpaceRequest} SetUpSpaceRequest
                     */
                    SetUpSpaceRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.SetUpSpaceRequest)
                            return object;
                        var message = new $root.google.chat.v1.SetUpSpaceRequest();
                        if (object.space != null) {
                            if (typeof object.space !== "object")
                                throw TypeError(".google.chat.v1.SetUpSpaceRequest.space: object expected");
                            message.space = $root.google.chat.v1.Space.fromObject(object.space);
                        }
                        if (object.requestId != null)
                            message.requestId = String(object.requestId);
                        if (object.memberships) {
                            if (!Array.isArray(object.memberships))
                                throw TypeError(".google.chat.v1.SetUpSpaceRequest.memberships: array expected");
                            message.memberships = [];
                            for (var i = 0; i < object.memberships.length; ++i) {
                                if (typeof object.memberships[i] !== "object")
                                    throw TypeError(".google.chat.v1.SetUpSpaceRequest.memberships: object expected");
                                message.memberships[i] = $root.google.chat.v1.Membership.fromObject(object.memberships[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SetUpSpaceRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @static
                     * @param {google.chat.v1.SetUpSpaceRequest} message SetUpSpaceRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SetUpSpaceRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.memberships = [];
                        if (options.defaults) {
                            object.space = null;
                            object.requestId = "";
                        }
                        if (message.space != null && message.hasOwnProperty("space"))
                            object.space = $root.google.chat.v1.Space.toObject(message.space, options);
                        if (message.requestId != null && message.hasOwnProperty("requestId"))
                            object.requestId = message.requestId;
                        if (message.memberships && message.memberships.length) {
                            object.memberships = [];
                            for (var j = 0; j < message.memberships.length; ++j)
                                object.memberships[j] = $root.google.chat.v1.Membership.toObject(message.memberships[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this SetUpSpaceRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SetUpSpaceRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SetUpSpaceRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.SetUpSpaceRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SetUpSpaceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.SetUpSpaceRequest";
                    };
    
                    return SetUpSpaceRequest;
                })();
    
                v1.ThreadReadState = (function() {
    
                    /**
                     * Properties of a ThreadReadState.
                     * @memberof google.chat.v1
                     * @interface IThreadReadState
                     * @property {string|null} [name] ThreadReadState name
                     * @property {google.protobuf.ITimestamp|null} [lastReadTime] ThreadReadState lastReadTime
                     */
    
                    /**
                     * Constructs a new ThreadReadState.
                     * @memberof google.chat.v1
                     * @classdesc Represents a ThreadReadState.
                     * @implements IThreadReadState
                     * @constructor
                     * @param {google.chat.v1.IThreadReadState=} [properties] Properties to set
                     */
                    function ThreadReadState(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ThreadReadState name.
                     * @member {string} name
                     * @memberof google.chat.v1.ThreadReadState
                     * @instance
                     */
                    ThreadReadState.prototype.name = "";
    
                    /**
                     * ThreadReadState lastReadTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} lastReadTime
                     * @memberof google.chat.v1.ThreadReadState
                     * @instance
                     */
                    ThreadReadState.prototype.lastReadTime = null;
    
                    /**
                     * Creates a new ThreadReadState instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.ThreadReadState
                     * @static
                     * @param {google.chat.v1.IThreadReadState=} [properties] Properties to set
                     * @returns {google.chat.v1.ThreadReadState} ThreadReadState instance
                     */
                    ThreadReadState.create = function create(properties) {
                        return new ThreadReadState(properties);
                    };
    
                    /**
                     * Encodes the specified ThreadReadState message. Does not implicitly {@link google.chat.v1.ThreadReadState.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.ThreadReadState
                     * @static
                     * @param {google.chat.v1.IThreadReadState} message ThreadReadState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ThreadReadState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.lastReadTime != null && Object.hasOwnProperty.call(message, "lastReadTime"))
                            $root.google.protobuf.Timestamp.encode(message.lastReadTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ThreadReadState message, length delimited. Does not implicitly {@link google.chat.v1.ThreadReadState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.ThreadReadState
                     * @static
                     * @param {google.chat.v1.IThreadReadState} message ThreadReadState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ThreadReadState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ThreadReadState message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.ThreadReadState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.ThreadReadState} ThreadReadState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ThreadReadState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.ThreadReadState();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.lastReadTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ThreadReadState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.ThreadReadState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.ThreadReadState} ThreadReadState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ThreadReadState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ThreadReadState message.
                     * @function verify
                     * @memberof google.chat.v1.ThreadReadState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ThreadReadState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.lastReadTime != null && message.hasOwnProperty("lastReadTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.lastReadTime);
                            if (error)
                                return "lastReadTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ThreadReadState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.ThreadReadState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.ThreadReadState} ThreadReadState
                     */
                    ThreadReadState.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.ThreadReadState)
                            return object;
                        var message = new $root.google.chat.v1.ThreadReadState();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.lastReadTime != null) {
                            if (typeof object.lastReadTime !== "object")
                                throw TypeError(".google.chat.v1.ThreadReadState.lastReadTime: object expected");
                            message.lastReadTime = $root.google.protobuf.Timestamp.fromObject(object.lastReadTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ThreadReadState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.ThreadReadState
                     * @static
                     * @param {google.chat.v1.ThreadReadState} message ThreadReadState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ThreadReadState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.lastReadTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.lastReadTime != null && message.hasOwnProperty("lastReadTime"))
                            object.lastReadTime = $root.google.protobuf.Timestamp.toObject(message.lastReadTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this ThreadReadState to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.ThreadReadState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ThreadReadState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ThreadReadState
                     * @function getTypeUrl
                     * @memberof google.chat.v1.ThreadReadState
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ThreadReadState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.ThreadReadState";
                    };
    
                    return ThreadReadState;
                })();
    
                v1.GetThreadReadStateRequest = (function() {
    
                    /**
                     * Properties of a GetThreadReadStateRequest.
                     * @memberof google.chat.v1
                     * @interface IGetThreadReadStateRequest
                     * @property {string|null} [name] GetThreadReadStateRequest name
                     */
    
                    /**
                     * Constructs a new GetThreadReadStateRequest.
                     * @memberof google.chat.v1
                     * @classdesc Represents a GetThreadReadStateRequest.
                     * @implements IGetThreadReadStateRequest
                     * @constructor
                     * @param {google.chat.v1.IGetThreadReadStateRequest=} [properties] Properties to set
                     */
                    function GetThreadReadStateRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetThreadReadStateRequest name.
                     * @member {string} name
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @instance
                     */
                    GetThreadReadStateRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetThreadReadStateRequest instance using the specified properties.
                     * @function create
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @static
                     * @param {google.chat.v1.IGetThreadReadStateRequest=} [properties] Properties to set
                     * @returns {google.chat.v1.GetThreadReadStateRequest} GetThreadReadStateRequest instance
                     */
                    GetThreadReadStateRequest.create = function create(properties) {
                        return new GetThreadReadStateRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetThreadReadStateRequest message. Does not implicitly {@link google.chat.v1.GetThreadReadStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @static
                     * @param {google.chat.v1.IGetThreadReadStateRequest} message GetThreadReadStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetThreadReadStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetThreadReadStateRequest message, length delimited. Does not implicitly {@link google.chat.v1.GetThreadReadStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @static
                     * @param {google.chat.v1.IGetThreadReadStateRequest} message GetThreadReadStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetThreadReadStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetThreadReadStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.chat.v1.GetThreadReadStateRequest} GetThreadReadStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetThreadReadStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.chat.v1.GetThreadReadStateRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.name = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetThreadReadStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.chat.v1.GetThreadReadStateRequest} GetThreadReadStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetThreadReadStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetThreadReadStateRequest message.
                     * @function verify
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetThreadReadStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetThreadReadStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.chat.v1.GetThreadReadStateRequest} GetThreadReadStateRequest
                     */
                    GetThreadReadStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.chat.v1.GetThreadReadStateRequest)
                            return object;
                        var message = new $root.google.chat.v1.GetThreadReadStateRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetThreadReadStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @static
                     * @param {google.chat.v1.GetThreadReadStateRequest} message GetThreadReadStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetThreadReadStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetThreadReadStateRequest to JSON.
                     * @function toJSON
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetThreadReadStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetThreadReadStateRequest
                     * @function getTypeUrl
                     * @memberof google.chat.v1.GetThreadReadStateRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetThreadReadStateRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.chat.v1.GetThreadReadStateRequest";
                    };
    
                    return GetThreadReadStateRequest;
                })();
    
                return v1;
            })();
    
            return chat;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            /**
             * Code enum.
             * @name google.rpc.Code
             * @enum {number}
             * @property {number} OK=0 OK value
             * @property {number} CANCELLED=1 CANCELLED value
             * @property {number} UNKNOWN=2 UNKNOWN value
             * @property {number} INVALID_ARGUMENT=3 INVALID_ARGUMENT value
             * @property {number} DEADLINE_EXCEEDED=4 DEADLINE_EXCEEDED value
             * @property {number} NOT_FOUND=5 NOT_FOUND value
             * @property {number} ALREADY_EXISTS=6 ALREADY_EXISTS value
             * @property {number} PERMISSION_DENIED=7 PERMISSION_DENIED value
             * @property {number} UNAUTHENTICATED=16 UNAUTHENTICATED value
             * @property {number} RESOURCE_EXHAUSTED=8 RESOURCE_EXHAUSTED value
             * @property {number} FAILED_PRECONDITION=9 FAILED_PRECONDITION value
             * @property {number} ABORTED=10 ABORTED value
             * @property {number} OUT_OF_RANGE=11 OUT_OF_RANGE value
             * @property {number} UNIMPLEMENTED=12 UNIMPLEMENTED value
             * @property {number} INTERNAL=13 INTERNAL value
             * @property {number} UNAVAILABLE=14 UNAVAILABLE value
             * @property {number} DATA_LOSS=15 DATA_LOSS value
             */
            rpc.Code = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "OK"] = 0;
                values[valuesById[1] = "CANCELLED"] = 1;
                values[valuesById[2] = "UNKNOWN"] = 2;
                values[valuesById[3] = "INVALID_ARGUMENT"] = 3;
                values[valuesById[4] = "DEADLINE_EXCEEDED"] = 4;
                values[valuesById[5] = "NOT_FOUND"] = 5;
                values[valuesById[6] = "ALREADY_EXISTS"] = 6;
                values[valuesById[7] = "PERMISSION_DENIED"] = 7;
                values[valuesById[16] = "UNAUTHENTICATED"] = 16;
                values[valuesById[8] = "RESOURCE_EXHAUSTED"] = 8;
                values[valuesById[9] = "FAILED_PRECONDITION"] = 9;
                values[valuesById[10] = "ABORTED"] = 10;
                values[valuesById[11] = "OUT_OF_RANGE"] = 11;
                values[valuesById[12] = "UNIMPLEMENTED"] = 12;
                values[valuesById[13] = "INTERNAL"] = 13;
                values[valuesById[14] = "UNAVAILABLE"] = 14;
                values[valuesById[15] = "DATA_LOSS"] = 15;
                return values;
            })();
    
            return rpc;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.ResourceDescriptor = (function() {
    
                /**
                 * Properties of a ResourceDescriptor.
                 * @memberof google.api
                 * @interface IResourceDescriptor
                 * @property {string|null} [type] ResourceDescriptor type
                 * @property {Array.<string>|null} [pattern] ResourceDescriptor pattern
                 * @property {string|null} [nameField] ResourceDescriptor nameField
                 * @property {google.api.ResourceDescriptor.History|null} [history] ResourceDescriptor history
                 * @property {string|null} [plural] ResourceDescriptor plural
                 * @property {string|null} [singular] ResourceDescriptor singular
                 * @property {Array.<google.api.ResourceDescriptor.Style>|null} [style] ResourceDescriptor style
                 */
    
                /**
                 * Constructs a new ResourceDescriptor.
                 * @memberof google.api
                 * @classdesc Represents a ResourceDescriptor.
                 * @implements IResourceDescriptor
                 * @constructor
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 */
                function ResourceDescriptor(properties) {
                    this.pattern = [];
                    this.style = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceDescriptor type.
                 * @member {string} type
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.type = "";
    
                /**
                 * ResourceDescriptor pattern.
                 * @member {Array.<string>} pattern
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.pattern = $util.emptyArray;
    
                /**
                 * ResourceDescriptor nameField.
                 * @member {string} nameField
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.nameField = "";
    
                /**
                 * ResourceDescriptor history.
                 * @member {google.api.ResourceDescriptor.History} history
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.history = 0;
    
                /**
                 * ResourceDescriptor plural.
                 * @member {string} plural
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.plural = "";
    
                /**
                 * ResourceDescriptor singular.
                 * @member {string} singular
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.singular = "";
    
                /**
                 * ResourceDescriptor style.
                 * @member {Array.<google.api.ResourceDescriptor.Style>} style
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.style = $util.emptyArray;
    
                /**
                 * Creates a new ResourceDescriptor instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor instance
                 */
                ResourceDescriptor.create = function create(properties) {
                    return new ResourceDescriptor(properties);
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.pattern != null && message.pattern.length)
                        for (var i = 0; i < message.pattern.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pattern[i]);
                    if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nameField);
                    if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.history);
                    if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.plural);
                    if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singular);
                    if (message.style != null && message.style.length) {
                        writer.uint32(/* id 10, wireType 2 =*/82).fork();
                        for (var i = 0; i < message.style.length; ++i)
                            writer.int32(message.style[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message, length delimited. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.pattern && message.pattern.length))
                                    message.pattern = [];
                                message.pattern.push(reader.string());
                                break;
                            }
                        case 3: {
                                message.nameField = reader.string();
                                break;
                            }
                        case 4: {
                                message.history = reader.int32();
                                break;
                            }
                        case 5: {
                                message.plural = reader.string();
                                break;
                            }
                        case 6: {
                                message.singular = reader.string();
                                break;
                            }
                        case 10: {
                                if (!(message.style && message.style.length))
                                    message.style = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.style.push(reader.int32());
                                } else
                                    message.style.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceDescriptor message.
                 * @function verify
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern")) {
                        if (!Array.isArray(message.pattern))
                            return "pattern: array expected";
                        for (var i = 0; i < message.pattern.length; ++i)
                            if (!$util.isString(message.pattern[i]))
                                return "pattern: string[] expected";
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        if (!$util.isString(message.nameField))
                            return "nameField: string expected";
                    if (message.history != null && message.hasOwnProperty("history"))
                        switch (message.history) {
                        default:
                            return "history: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        if (!$util.isString(message.plural))
                            return "plural: string expected";
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        if (!$util.isString(message.singular))
                            return "singular: string expected";
                    if (message.style != null && message.hasOwnProperty("style")) {
                        if (!Array.isArray(message.style))
                            return "style: array expected";
                        for (var i = 0; i < message.style.length; ++i)
                            switch (message.style[i]) {
                            default:
                                return "style: enum value[] expected";
                            case 0:
                            case 1:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResourceDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 */
                ResourceDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceDescriptor)
                        return object;
                    var message = new $root.google.api.ResourceDescriptor();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.pattern) {
                        if (!Array.isArray(object.pattern))
                            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                        message.pattern = [];
                        for (var i = 0; i < object.pattern.length; ++i)
                            message.pattern[i] = String(object.pattern[i]);
                    }
                    if (object.nameField != null)
                        message.nameField = String(object.nameField);
                    switch (object.history) {
                    default:
                        if (typeof object.history === "number") {
                            message.history = object.history;
                            break;
                        }
                        break;
                    case "HISTORY_UNSPECIFIED":
                    case 0:
                        message.history = 0;
                        break;
                    case "ORIGINALLY_SINGLE_PATTERN":
                    case 1:
                        message.history = 1;
                        break;
                    case "FUTURE_MULTI_PATTERN":
                    case 2:
                        message.history = 2;
                        break;
                    }
                    if (object.plural != null)
                        message.plural = String(object.plural);
                    if (object.singular != null)
                        message.singular = String(object.singular);
                    if (object.style) {
                        if (!Array.isArray(object.style))
                            throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                        message.style = [];
                        for (var i = 0; i < object.style.length; ++i)
                            switch (object.style[i]) {
                            default:
                                if (typeof object.style[i] === "number") {
                                    message.style[i] = object.style[i];
                                    break;
                                }
                            case "STYLE_UNSPECIFIED":
                            case 0:
                                message.style[i] = 0;
                                break;
                            case "DECLARATIVE_FRIENDLY":
                            case 1:
                                message.style[i] = 1;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.ResourceDescriptor} message ResourceDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.pattern = [];
                        object.style = [];
                    }
                    if (options.defaults) {
                        object.type = "";
                        object.nameField = "";
                        object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                        object.plural = "";
                        object.singular = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.pattern && message.pattern.length) {
                        object.pattern = [];
                        for (var j = 0; j < message.pattern.length; ++j)
                            object.pattern[j] = message.pattern[j];
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        object.nameField = message.nameField;
                    if (message.history != null && message.hasOwnProperty("history"))
                        object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] === undefined ? message.history : $root.google.api.ResourceDescriptor.History[message.history] : message.history;
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        object.plural = message.plural;
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        object.singular = message.singular;
                    if (message.style && message.style.length) {
                        object.style = [];
                        for (var j = 0; j < message.style.length; ++j)
                            object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] === undefined ? message.style[j] : $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ResourceDescriptor to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ResourceDescriptor
                 * @function getTypeUrl
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ResourceDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ResourceDescriptor";
                };
    
                /**
                 * History enum.
                 * @name google.api.ResourceDescriptor.History
                 * @enum {number}
                 * @property {number} HISTORY_UNSPECIFIED=0 HISTORY_UNSPECIFIED value
                 * @property {number} ORIGINALLY_SINGLE_PATTERN=1 ORIGINALLY_SINGLE_PATTERN value
                 * @property {number} FUTURE_MULTI_PATTERN=2 FUTURE_MULTI_PATTERN value
                 */
                ResourceDescriptor.History = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
                    values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
                    return values;
                })();
    
                /**
                 * Style enum.
                 * @name google.api.ResourceDescriptor.Style
                 * @enum {number}
                 * @property {number} STYLE_UNSPECIFIED=0 STYLE_UNSPECIFIED value
                 * @property {number} DECLARATIVE_FRIENDLY=1 DECLARATIVE_FRIENDLY value
                 */
                ResourceDescriptor.Style = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STYLE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = 1;
                    return values;
                })();
    
                return ResourceDescriptor;
            })();
    
            api.ResourceReference = (function() {
    
                /**
                 * Properties of a ResourceReference.
                 * @memberof google.api
                 * @interface IResourceReference
                 * @property {string|null} [type] ResourceReference type
                 * @property {string|null} [childType] ResourceReference childType
                 */
    
                /**
                 * Constructs a new ResourceReference.
                 * @memberof google.api
                 * @classdesc Represents a ResourceReference.
                 * @implements IResourceReference
                 * @constructor
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 */
                function ResourceReference(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceReference type.
                 * @member {string} type
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.type = "";
    
                /**
                 * ResourceReference childType.
                 * @member {string} childType
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.childType = "";
    
                /**
                 * Creates a new ResourceReference instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 * @returns {google.api.ResourceReference} ResourceReference instance
                 */
                ResourceReference.create = function create(properties) {
                    return new ResourceReference(properties);
                };
    
                /**
                 * Encodes the specified ResourceReference message. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.childType);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceReference message, length delimited. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                message.childType = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceReference message.
                 * @function verify
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        if (!$util.isString(message.childType))
                            return "childType: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceReference} ResourceReference
                 */
                ResourceReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceReference)
                        return object;
                    var message = new $root.google.api.ResourceReference();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.childType != null)
                        message.childType = String(object.childType);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.ResourceReference} message ResourceReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.childType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        object.childType = message.childType;
                    return object;
                };
    
                /**
                 * Converts this ResourceReference to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ResourceReference
                 * @function getTypeUrl
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ResourceReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ResourceReference";
                };
    
                return ResourceReference;
            })();
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             * @property {number} NON_EMPTY_DEFAULT=7 NON_EMPTY_DEFAULT value
             * @property {number} IDENTIFIER=8 IDENTIFIER value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
                values[valuesById[8] = "IDENTIFIER"] = 8;
                return values;
            })();
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.rules && message.rules.length))
                                    message.rules = [];
                                message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.fullyDecodeReservedExpansion = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Http
                 * @function getTypeUrl
                 * @memberof google.api.Http
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Http";
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.get = reader.string();
                                break;
                            }
                        case 3: {
                                message.put = reader.string();
                                break;
                            }
                        case 4: {
                                message.post = reader.string();
                                break;
                            }
                        case 5: {
                                message["delete"] = reader.string();
                                break;
                            }
                        case 6: {
                                message.patch = reader.string();
                                break;
                            }
                        case 8: {
                                message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.body = reader.string();
                                break;
                            }
                        case 12: {
                                message.responseBody = reader.string();
                                break;
                            }
                        case 11: {
                                if (!(message.additionalBindings && message.additionalBindings.length))
                                    message.additionalBindings = [];
                                message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for HttpRule
                 * @function getTypeUrl
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.HttpRule";
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.kind = reader.string();
                                break;
                            }
                        case 2: {
                                message.path = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CustomHttpPattern
                 * @function getTypeUrl
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CustomHttpPattern";
                };
    
                return CustomHttpPattern;
            })();
    
            api.CommonLanguageSettings = (function() {
    
                /**
                 * Properties of a CommonLanguageSettings.
                 * @memberof google.api
                 * @interface ICommonLanguageSettings
                 * @property {string|null} [referenceDocsUri] CommonLanguageSettings referenceDocsUri
                 * @property {Array.<google.api.ClientLibraryDestination>|null} [destinations] CommonLanguageSettings destinations
                 */
    
                /**
                 * Constructs a new CommonLanguageSettings.
                 * @memberof google.api
                 * @classdesc Represents a CommonLanguageSettings.
                 * @implements ICommonLanguageSettings
                 * @constructor
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 */
                function CommonLanguageSettings(properties) {
                    this.destinations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CommonLanguageSettings referenceDocsUri.
                 * @member {string} referenceDocsUri
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.referenceDocsUri = "";
    
                /**
                 * CommonLanguageSettings destinations.
                 * @member {Array.<google.api.ClientLibraryDestination>} destinations
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.destinations = $util.emptyArray;
    
                /**
                 * Creates a new CommonLanguageSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings instance
                 */
                CommonLanguageSettings.create = function create(properties) {
                    return new CommonLanguageSettings(properties);
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.referenceDocsUri != null && Object.hasOwnProperty.call(message, "referenceDocsUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.referenceDocsUri);
                    if (message.destinations != null && message.destinations.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.destinations.length; ++i)
                            writer.int32(message.destinations[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message, length delimited. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CommonLanguageSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.referenceDocsUri = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.destinations && message.destinations.length))
                                    message.destinations = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.destinations.push(reader.int32());
                                } else
                                    message.destinations.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CommonLanguageSettings message.
                 * @function verify
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommonLanguageSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        if (!$util.isString(message.referenceDocsUri))
                            return "referenceDocsUri: string expected";
                    if (message.destinations != null && message.hasOwnProperty("destinations")) {
                        if (!Array.isArray(message.destinations))
                            return "destinations: array expected";
                        for (var i = 0; i < message.destinations.length; ++i)
                            switch (message.destinations[i]) {
                            default:
                                return "destinations: enum value[] expected";
                            case 0:
                            case 10:
                            case 20:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a CommonLanguageSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 */
                CommonLanguageSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CommonLanguageSettings)
                        return object;
                    var message = new $root.google.api.CommonLanguageSettings();
                    if (object.referenceDocsUri != null)
                        message.referenceDocsUri = String(object.referenceDocsUri);
                    if (object.destinations) {
                        if (!Array.isArray(object.destinations))
                            throw TypeError(".google.api.CommonLanguageSettings.destinations: array expected");
                        message.destinations = [];
                        for (var i = 0; i < object.destinations.length; ++i)
                            switch (object.destinations[i]) {
                            default:
                                if (typeof object.destinations[i] === "number") {
                                    message.destinations[i] = object.destinations[i];
                                    break;
                                }
                            case "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":
                            case 0:
                                message.destinations[i] = 0;
                                break;
                            case "GITHUB":
                            case 10:
                                message.destinations[i] = 10;
                                break;
                            case "PACKAGE_MANAGER":
                            case 20:
                                message.destinations[i] = 20;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CommonLanguageSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.CommonLanguageSettings} message CommonLanguageSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommonLanguageSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.destinations = [];
                    if (options.defaults)
                        object.referenceDocsUri = "";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        object.referenceDocsUri = message.referenceDocsUri;
                    if (message.destinations && message.destinations.length) {
                        object.destinations = [];
                        for (var j = 0; j < message.destinations.length; ++j)
                            object.destinations[j] = options.enums === String ? $root.google.api.ClientLibraryDestination[message.destinations[j]] === undefined ? message.destinations[j] : $root.google.api.ClientLibraryDestination[message.destinations[j]] : message.destinations[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this CommonLanguageSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommonLanguageSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CommonLanguageSettings
                 * @function getTypeUrl
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CommonLanguageSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CommonLanguageSettings";
                };
    
                return CommonLanguageSettings;
            })();
    
            api.ClientLibrarySettings = (function() {
    
                /**
                 * Properties of a ClientLibrarySettings.
                 * @memberof google.api
                 * @interface IClientLibrarySettings
                 * @property {string|null} [version] ClientLibrarySettings version
                 * @property {google.api.LaunchStage|null} [launchStage] ClientLibrarySettings launchStage
                 * @property {boolean|null} [restNumericEnums] ClientLibrarySettings restNumericEnums
                 * @property {google.api.IJavaSettings|null} [javaSettings] ClientLibrarySettings javaSettings
                 * @property {google.api.ICppSettings|null} [cppSettings] ClientLibrarySettings cppSettings
                 * @property {google.api.IPhpSettings|null} [phpSettings] ClientLibrarySettings phpSettings
                 * @property {google.api.IPythonSettings|null} [pythonSettings] ClientLibrarySettings pythonSettings
                 * @property {google.api.INodeSettings|null} [nodeSettings] ClientLibrarySettings nodeSettings
                 * @property {google.api.IDotnetSettings|null} [dotnetSettings] ClientLibrarySettings dotnetSettings
                 * @property {google.api.IRubySettings|null} [rubySettings] ClientLibrarySettings rubySettings
                 * @property {google.api.IGoSettings|null} [goSettings] ClientLibrarySettings goSettings
                 */
    
                /**
                 * Constructs a new ClientLibrarySettings.
                 * @memberof google.api
                 * @classdesc Represents a ClientLibrarySettings.
                 * @implements IClientLibrarySettings
                 * @constructor
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 */
                function ClientLibrarySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ClientLibrarySettings version.
                 * @member {string} version
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.version = "";
    
                /**
                 * ClientLibrarySettings launchStage.
                 * @member {google.api.LaunchStage} launchStage
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.launchStage = 0;
    
                /**
                 * ClientLibrarySettings restNumericEnums.
                 * @member {boolean} restNumericEnums
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.restNumericEnums = false;
    
                /**
                 * ClientLibrarySettings javaSettings.
                 * @member {google.api.IJavaSettings|null|undefined} javaSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.javaSettings = null;
    
                /**
                 * ClientLibrarySettings cppSettings.
                 * @member {google.api.ICppSettings|null|undefined} cppSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.cppSettings = null;
    
                /**
                 * ClientLibrarySettings phpSettings.
                 * @member {google.api.IPhpSettings|null|undefined} phpSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.phpSettings = null;
    
                /**
                 * ClientLibrarySettings pythonSettings.
                 * @member {google.api.IPythonSettings|null|undefined} pythonSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.pythonSettings = null;
    
                /**
                 * ClientLibrarySettings nodeSettings.
                 * @member {google.api.INodeSettings|null|undefined} nodeSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.nodeSettings = null;
    
                /**
                 * ClientLibrarySettings dotnetSettings.
                 * @member {google.api.IDotnetSettings|null|undefined} dotnetSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.dotnetSettings = null;
    
                /**
                 * ClientLibrarySettings rubySettings.
                 * @member {google.api.IRubySettings|null|undefined} rubySettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.rubySettings = null;
    
                /**
                 * ClientLibrarySettings goSettings.
                 * @member {google.api.IGoSettings|null|undefined} goSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.goSettings = null;
    
                /**
                 * Creates a new ClientLibrarySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings instance
                 */
                ClientLibrarySettings.create = function create(properties) {
                    return new ClientLibrarySettings(properties);
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);
                    if (message.launchStage != null && Object.hasOwnProperty.call(message, "launchStage"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.launchStage);
                    if (message.restNumericEnums != null && Object.hasOwnProperty.call(message, "restNumericEnums"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.restNumericEnums);
                    if (message.javaSettings != null && Object.hasOwnProperty.call(message, "javaSettings"))
                        $root.google.api.JavaSettings.encode(message.javaSettings, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                    if (message.cppSettings != null && Object.hasOwnProperty.call(message, "cppSettings"))
                        $root.google.api.CppSettings.encode(message.cppSettings, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                    if (message.phpSettings != null && Object.hasOwnProperty.call(message, "phpSettings"))
                        $root.google.api.PhpSettings.encode(message.phpSettings, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                    if (message.pythonSettings != null && Object.hasOwnProperty.call(message, "pythonSettings"))
                        $root.google.api.PythonSettings.encode(message.pythonSettings, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                    if (message.nodeSettings != null && Object.hasOwnProperty.call(message, "nodeSettings"))
                        $root.google.api.NodeSettings.encode(message.nodeSettings, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
                    if (message.dotnetSettings != null && Object.hasOwnProperty.call(message, "dotnetSettings"))
                        $root.google.api.DotnetSettings.encode(message.dotnetSettings, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                    if (message.rubySettings != null && Object.hasOwnProperty.call(message, "rubySettings"))
                        $root.google.api.RubySettings.encode(message.rubySettings, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
                    if (message.goSettings != null && Object.hasOwnProperty.call(message, "goSettings"))
                        $root.google.api.GoSettings.encode(message.goSettings, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message, length delimited. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ClientLibrarySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.version = reader.string();
                                break;
                            }
                        case 2: {
                                message.launchStage = reader.int32();
                                break;
                            }
                        case 3: {
                                message.restNumericEnums = reader.bool();
                                break;
                            }
                        case 21: {
                                message.javaSettings = $root.google.api.JavaSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 22: {
                                message.cppSettings = $root.google.api.CppSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 23: {
                                message.phpSettings = $root.google.api.PhpSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 24: {
                                message.pythonSettings = $root.google.api.PythonSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 25: {
                                message.nodeSettings = $root.google.api.NodeSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 26: {
                                message.dotnetSettings = $root.google.api.DotnetSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 27: {
                                message.rubySettings = $root.google.api.RubySettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 28: {
                                message.goSettings = $root.google.api.GoSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ClientLibrarySettings message.
                 * @function verify
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ClientLibrarySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        switch (message.launchStage) {
                        default:
                            return "launchStage: enum value expected";
                        case 0:
                        case 6:
                        case 7:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        if (typeof message.restNumericEnums !== "boolean")
                            return "restNumericEnums: boolean expected";
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings")) {
                        var error = $root.google.api.JavaSettings.verify(message.javaSettings);
                        if (error)
                            return "javaSettings." + error;
                    }
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings")) {
                        var error = $root.google.api.CppSettings.verify(message.cppSettings);
                        if (error)
                            return "cppSettings." + error;
                    }
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings")) {
                        var error = $root.google.api.PhpSettings.verify(message.phpSettings);
                        if (error)
                            return "phpSettings." + error;
                    }
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings")) {
                        var error = $root.google.api.PythonSettings.verify(message.pythonSettings);
                        if (error)
                            return "pythonSettings." + error;
                    }
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings")) {
                        var error = $root.google.api.NodeSettings.verify(message.nodeSettings);
                        if (error)
                            return "nodeSettings." + error;
                    }
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings")) {
                        var error = $root.google.api.DotnetSettings.verify(message.dotnetSettings);
                        if (error)
                            return "dotnetSettings." + error;
                    }
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings")) {
                        var error = $root.google.api.RubySettings.verify(message.rubySettings);
                        if (error)
                            return "rubySettings." + error;
                    }
                    if (message.goSettings != null && message.hasOwnProperty("goSettings")) {
                        var error = $root.google.api.GoSettings.verify(message.goSettings);
                        if (error)
                            return "goSettings." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ClientLibrarySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 */
                ClientLibrarySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ClientLibrarySettings)
                        return object;
                    var message = new $root.google.api.ClientLibrarySettings();
                    if (object.version != null)
                        message.version = String(object.version);
                    switch (object.launchStage) {
                    default:
                        if (typeof object.launchStage === "number") {
                            message.launchStage = object.launchStage;
                            break;
                        }
                        break;
                    case "LAUNCH_STAGE_UNSPECIFIED":
                    case 0:
                        message.launchStage = 0;
                        break;
                    case "UNIMPLEMENTED":
                    case 6:
                        message.launchStage = 6;
                        break;
                    case "PRELAUNCH":
                    case 7:
                        message.launchStage = 7;
                        break;
                    case "EARLY_ACCESS":
                    case 1:
                        message.launchStage = 1;
                        break;
                    case "ALPHA":
                    case 2:
                        message.launchStage = 2;
                        break;
                    case "BETA":
                    case 3:
                        message.launchStage = 3;
                        break;
                    case "GA":
                    case 4:
                        message.launchStage = 4;
                        break;
                    case "DEPRECATED":
                    case 5:
                        message.launchStage = 5;
                        break;
                    }
                    if (object.restNumericEnums != null)
                        message.restNumericEnums = Boolean(object.restNumericEnums);
                    if (object.javaSettings != null) {
                        if (typeof object.javaSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.javaSettings: object expected");
                        message.javaSettings = $root.google.api.JavaSettings.fromObject(object.javaSettings);
                    }
                    if (object.cppSettings != null) {
                        if (typeof object.cppSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.cppSettings: object expected");
                        message.cppSettings = $root.google.api.CppSettings.fromObject(object.cppSettings);
                    }
                    if (object.phpSettings != null) {
                        if (typeof object.phpSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.phpSettings: object expected");
                        message.phpSettings = $root.google.api.PhpSettings.fromObject(object.phpSettings);
                    }
                    if (object.pythonSettings != null) {
                        if (typeof object.pythonSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.pythonSettings: object expected");
                        message.pythonSettings = $root.google.api.PythonSettings.fromObject(object.pythonSettings);
                    }
                    if (object.nodeSettings != null) {
                        if (typeof object.nodeSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.nodeSettings: object expected");
                        message.nodeSettings = $root.google.api.NodeSettings.fromObject(object.nodeSettings);
                    }
                    if (object.dotnetSettings != null) {
                        if (typeof object.dotnetSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.dotnetSettings: object expected");
                        message.dotnetSettings = $root.google.api.DotnetSettings.fromObject(object.dotnetSettings);
                    }
                    if (object.rubySettings != null) {
                        if (typeof object.rubySettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.rubySettings: object expected");
                        message.rubySettings = $root.google.api.RubySettings.fromObject(object.rubySettings);
                    }
                    if (object.goSettings != null) {
                        if (typeof object.goSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.goSettings: object expected");
                        message.goSettings = $root.google.api.GoSettings.fromObject(object.goSettings);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ClientLibrarySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.ClientLibrarySettings} message ClientLibrarySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ClientLibrarySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.version = "";
                        object.launchStage = options.enums === String ? "LAUNCH_STAGE_UNSPECIFIED" : 0;
                        object.restNumericEnums = false;
                        object.javaSettings = null;
                        object.cppSettings = null;
                        object.phpSettings = null;
                        object.pythonSettings = null;
                        object.nodeSettings = null;
                        object.dotnetSettings = null;
                        object.rubySettings = null;
                        object.goSettings = null;
                    }
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        object.launchStage = options.enums === String ? $root.google.api.LaunchStage[message.launchStage] === undefined ? message.launchStage : $root.google.api.LaunchStage[message.launchStage] : message.launchStage;
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        object.restNumericEnums = message.restNumericEnums;
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings"))
                        object.javaSettings = $root.google.api.JavaSettings.toObject(message.javaSettings, options);
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings"))
                        object.cppSettings = $root.google.api.CppSettings.toObject(message.cppSettings, options);
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings"))
                        object.phpSettings = $root.google.api.PhpSettings.toObject(message.phpSettings, options);
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings"))
                        object.pythonSettings = $root.google.api.PythonSettings.toObject(message.pythonSettings, options);
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings"))
                        object.nodeSettings = $root.google.api.NodeSettings.toObject(message.nodeSettings, options);
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings"))
                        object.dotnetSettings = $root.google.api.DotnetSettings.toObject(message.dotnetSettings, options);
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings"))
                        object.rubySettings = $root.google.api.RubySettings.toObject(message.rubySettings, options);
                    if (message.goSettings != null && message.hasOwnProperty("goSettings"))
                        object.goSettings = $root.google.api.GoSettings.toObject(message.goSettings, options);
                    return object;
                };
    
                /**
                 * Converts this ClientLibrarySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ClientLibrarySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ClientLibrarySettings
                 * @function getTypeUrl
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ClientLibrarySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ClientLibrarySettings";
                };
    
                return ClientLibrarySettings;
            })();
    
            api.Publishing = (function() {
    
                /**
                 * Properties of a Publishing.
                 * @memberof google.api
                 * @interface IPublishing
                 * @property {Array.<google.api.IMethodSettings>|null} [methodSettings] Publishing methodSettings
                 * @property {string|null} [newIssueUri] Publishing newIssueUri
                 * @property {string|null} [documentationUri] Publishing documentationUri
                 * @property {string|null} [apiShortName] Publishing apiShortName
                 * @property {string|null} [githubLabel] Publishing githubLabel
                 * @property {Array.<string>|null} [codeownerGithubTeams] Publishing codeownerGithubTeams
                 * @property {string|null} [docTagPrefix] Publishing docTagPrefix
                 * @property {google.api.ClientLibraryOrganization|null} [organization] Publishing organization
                 * @property {Array.<google.api.IClientLibrarySettings>|null} [librarySettings] Publishing librarySettings
                 * @property {string|null} [protoReferenceDocumentationUri] Publishing protoReferenceDocumentationUri
                 */
    
                /**
                 * Constructs a new Publishing.
                 * @memberof google.api
                 * @classdesc Represents a Publishing.
                 * @implements IPublishing
                 * @constructor
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 */
                function Publishing(properties) {
                    this.methodSettings = [];
                    this.codeownerGithubTeams = [];
                    this.librarySettings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Publishing methodSettings.
                 * @member {Array.<google.api.IMethodSettings>} methodSettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.methodSettings = $util.emptyArray;
    
                /**
                 * Publishing newIssueUri.
                 * @member {string} newIssueUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.newIssueUri = "";
    
                /**
                 * Publishing documentationUri.
                 * @member {string} documentationUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.documentationUri = "";
    
                /**
                 * Publishing apiShortName.
                 * @member {string} apiShortName
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.apiShortName = "";
    
                /**
                 * Publishing githubLabel.
                 * @member {string} githubLabel
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.githubLabel = "";
    
                /**
                 * Publishing codeownerGithubTeams.
                 * @member {Array.<string>} codeownerGithubTeams
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.codeownerGithubTeams = $util.emptyArray;
    
                /**
                 * Publishing docTagPrefix.
                 * @member {string} docTagPrefix
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.docTagPrefix = "";
    
                /**
                 * Publishing organization.
                 * @member {google.api.ClientLibraryOrganization} organization
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.organization = 0;
    
                /**
                 * Publishing librarySettings.
                 * @member {Array.<google.api.IClientLibrarySettings>} librarySettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.librarySettings = $util.emptyArray;
    
                /**
                 * Publishing protoReferenceDocumentationUri.
                 * @member {string} protoReferenceDocumentationUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.protoReferenceDocumentationUri = "";
    
                /**
                 * Creates a new Publishing instance using the specified properties.
                 * @function create
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 * @returns {google.api.Publishing} Publishing instance
                 */
                Publishing.create = function create(properties) {
                    return new Publishing(properties);
                };
    
                /**
                 * Encodes the specified Publishing message. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.methodSettings != null && message.methodSettings.length)
                        for (var i = 0; i < message.methodSettings.length; ++i)
                            $root.google.api.MethodSettings.encode(message.methodSettings[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.newIssueUri != null && Object.hasOwnProperty.call(message, "newIssueUri"))
                        writer.uint32(/* id 101, wireType 2 =*/810).string(message.newIssueUri);
                    if (message.documentationUri != null && Object.hasOwnProperty.call(message, "documentationUri"))
                        writer.uint32(/* id 102, wireType 2 =*/818).string(message.documentationUri);
                    if (message.apiShortName != null && Object.hasOwnProperty.call(message, "apiShortName"))
                        writer.uint32(/* id 103, wireType 2 =*/826).string(message.apiShortName);
                    if (message.githubLabel != null && Object.hasOwnProperty.call(message, "githubLabel"))
                        writer.uint32(/* id 104, wireType 2 =*/834).string(message.githubLabel);
                    if (message.codeownerGithubTeams != null && message.codeownerGithubTeams.length)
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            writer.uint32(/* id 105, wireType 2 =*/842).string(message.codeownerGithubTeams[i]);
                    if (message.docTagPrefix != null && Object.hasOwnProperty.call(message, "docTagPrefix"))
                        writer.uint32(/* id 106, wireType 2 =*/850).string(message.docTagPrefix);
                    if (message.organization != null && Object.hasOwnProperty.call(message, "organization"))
                        writer.uint32(/* id 107, wireType 0 =*/856).int32(message.organization);
                    if (message.librarySettings != null && message.librarySettings.length)
                        for (var i = 0; i < message.librarySettings.length; ++i)
                            $root.google.api.ClientLibrarySettings.encode(message.librarySettings[i], writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();
                    if (message.protoReferenceDocumentationUri != null && Object.hasOwnProperty.call(message, "protoReferenceDocumentationUri"))
                        writer.uint32(/* id 110, wireType 2 =*/882).string(message.protoReferenceDocumentationUri);
                    return writer;
                };
    
                /**
                 * Encodes the specified Publishing message, length delimited. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Publishing();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.methodSettings && message.methodSettings.length))
                                    message.methodSettings = [];
                                message.methodSettings.push($root.google.api.MethodSettings.decode(reader, reader.uint32()));
                                break;
                            }
                        case 101: {
                                message.newIssueUri = reader.string();
                                break;
                            }
                        case 102: {
                                message.documentationUri = reader.string();
                                break;
                            }
                        case 103: {
                                message.apiShortName = reader.string();
                                break;
                            }
                        case 104: {
                                message.githubLabel = reader.string();
                                break;
                            }
                        case 105: {
                                if (!(message.codeownerGithubTeams && message.codeownerGithubTeams.length))
                                    message.codeownerGithubTeams = [];
                                message.codeownerGithubTeams.push(reader.string());
                                break;
                            }
                        case 106: {
                                message.docTagPrefix = reader.string();
                                break;
                            }
                        case 107: {
                                message.organization = reader.int32();
                                break;
                            }
                        case 109: {
                                if (!(message.librarySettings && message.librarySettings.length))
                                    message.librarySettings = [];
                                message.librarySettings.push($root.google.api.ClientLibrarySettings.decode(reader, reader.uint32()));
                                break;
                            }
                        case 110: {
                                message.protoReferenceDocumentationUri = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Publishing message.
                 * @function verify
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Publishing.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.methodSettings != null && message.hasOwnProperty("methodSettings")) {
                        if (!Array.isArray(message.methodSettings))
                            return "methodSettings: array expected";
                        for (var i = 0; i < message.methodSettings.length; ++i) {
                            var error = $root.google.api.MethodSettings.verify(message.methodSettings[i]);
                            if (error)
                                return "methodSettings." + error;
                        }
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        if (!$util.isString(message.newIssueUri))
                            return "newIssueUri: string expected";
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        if (!$util.isString(message.documentationUri))
                            return "documentationUri: string expected";
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        if (!$util.isString(message.apiShortName))
                            return "apiShortName: string expected";
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        if (!$util.isString(message.githubLabel))
                            return "githubLabel: string expected";
                    if (message.codeownerGithubTeams != null && message.hasOwnProperty("codeownerGithubTeams")) {
                        if (!Array.isArray(message.codeownerGithubTeams))
                            return "codeownerGithubTeams: array expected";
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            if (!$util.isString(message.codeownerGithubTeams[i]))
                                return "codeownerGithubTeams: string[] expected";
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        if (!$util.isString(message.docTagPrefix))
                            return "docTagPrefix: string expected";
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        switch (message.organization) {
                        default:
                            return "organization: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            break;
                        }
                    if (message.librarySettings != null && message.hasOwnProperty("librarySettings")) {
                        if (!Array.isArray(message.librarySettings))
                            return "librarySettings: array expected";
                        for (var i = 0; i < message.librarySettings.length; ++i) {
                            var error = $root.google.api.ClientLibrarySettings.verify(message.librarySettings[i]);
                            if (error)
                                return "librarySettings." + error;
                        }
                    }
                    if (message.protoReferenceDocumentationUri != null && message.hasOwnProperty("protoReferenceDocumentationUri"))
                        if (!$util.isString(message.protoReferenceDocumentationUri))
                            return "protoReferenceDocumentationUri: string expected";
                    return null;
                };
    
                /**
                 * Creates a Publishing message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Publishing} Publishing
                 */
                Publishing.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Publishing)
                        return object;
                    var message = new $root.google.api.Publishing();
                    if (object.methodSettings) {
                        if (!Array.isArray(object.methodSettings))
                            throw TypeError(".google.api.Publishing.methodSettings: array expected");
                        message.methodSettings = [];
                        for (var i = 0; i < object.methodSettings.length; ++i) {
                            if (typeof object.methodSettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.methodSettings: object expected");
                            message.methodSettings[i] = $root.google.api.MethodSettings.fromObject(object.methodSettings[i]);
                        }
                    }
                    if (object.newIssueUri != null)
                        message.newIssueUri = String(object.newIssueUri);
                    if (object.documentationUri != null)
                        message.documentationUri = String(object.documentationUri);
                    if (object.apiShortName != null)
                        message.apiShortName = String(object.apiShortName);
                    if (object.githubLabel != null)
                        message.githubLabel = String(object.githubLabel);
                    if (object.codeownerGithubTeams) {
                        if (!Array.isArray(object.codeownerGithubTeams))
                            throw TypeError(".google.api.Publishing.codeownerGithubTeams: array expected");
                        message.codeownerGithubTeams = [];
                        for (var i = 0; i < object.codeownerGithubTeams.length; ++i)
                            message.codeownerGithubTeams[i] = String(object.codeownerGithubTeams[i]);
                    }
                    if (object.docTagPrefix != null)
                        message.docTagPrefix = String(object.docTagPrefix);
                    switch (object.organization) {
                    default:
                        if (typeof object.organization === "number") {
                            message.organization = object.organization;
                            break;
                        }
                        break;
                    case "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":
                    case 0:
                        message.organization = 0;
                        break;
                    case "CLOUD":
                    case 1:
                        message.organization = 1;
                        break;
                    case "ADS":
                    case 2:
                        message.organization = 2;
                        break;
                    case "PHOTOS":
                    case 3:
                        message.organization = 3;
                        break;
                    case "STREET_VIEW":
                    case 4:
                        message.organization = 4;
                        break;
                    case "SHOPPING":
                    case 5:
                        message.organization = 5;
                        break;
                    case "GEO":
                    case 6:
                        message.organization = 6;
                        break;
                    case "GENERATIVE_AI":
                    case 7:
                        message.organization = 7;
                        break;
                    }
                    if (object.librarySettings) {
                        if (!Array.isArray(object.librarySettings))
                            throw TypeError(".google.api.Publishing.librarySettings: array expected");
                        message.librarySettings = [];
                        for (var i = 0; i < object.librarySettings.length; ++i) {
                            if (typeof object.librarySettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.librarySettings: object expected");
                            message.librarySettings[i] = $root.google.api.ClientLibrarySettings.fromObject(object.librarySettings[i]);
                        }
                    }
                    if (object.protoReferenceDocumentationUri != null)
                        message.protoReferenceDocumentationUri = String(object.protoReferenceDocumentationUri);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Publishing message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.Publishing} message Publishing
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Publishing.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.methodSettings = [];
                        object.codeownerGithubTeams = [];
                        object.librarySettings = [];
                    }
                    if (options.defaults) {
                        object.newIssueUri = "";
                        object.documentationUri = "";
                        object.apiShortName = "";
                        object.githubLabel = "";
                        object.docTagPrefix = "";
                        object.organization = options.enums === String ? "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED" : 0;
                        object.protoReferenceDocumentationUri = "";
                    }
                    if (message.methodSettings && message.methodSettings.length) {
                        object.methodSettings = [];
                        for (var j = 0; j < message.methodSettings.length; ++j)
                            object.methodSettings[j] = $root.google.api.MethodSettings.toObject(message.methodSettings[j], options);
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        object.newIssueUri = message.newIssueUri;
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        object.documentationUri = message.documentationUri;
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        object.apiShortName = message.apiShortName;
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        object.githubLabel = message.githubLabel;
                    if (message.codeownerGithubTeams && message.codeownerGithubTeams.length) {
                        object.codeownerGithubTeams = [];
                        for (var j = 0; j < message.codeownerGithubTeams.length; ++j)
                            object.codeownerGithubTeams[j] = message.codeownerGithubTeams[j];
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        object.docTagPrefix = message.docTagPrefix;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = options.enums === String ? $root.google.api.ClientLibraryOrganization[message.organization] === undefined ? message.organization : $root.google.api.ClientLibraryOrganization[message.organization] : message.organization;
                    if (message.librarySettings && message.librarySettings.length) {
                        object.librarySettings = [];
                        for (var j = 0; j < message.librarySettings.length; ++j)
                            object.librarySettings[j] = $root.google.api.ClientLibrarySettings.toObject(message.librarySettings[j], options);
                    }
                    if (message.protoReferenceDocumentationUri != null && message.hasOwnProperty("protoReferenceDocumentationUri"))
                        object.protoReferenceDocumentationUri = message.protoReferenceDocumentationUri;
                    return object;
                };
    
                /**
                 * Converts this Publishing to JSON.
                 * @function toJSON
                 * @memberof google.api.Publishing
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Publishing.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Publishing
                 * @function getTypeUrl
                 * @memberof google.api.Publishing
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Publishing.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Publishing";
                };
    
                return Publishing;
            })();
    
            api.JavaSettings = (function() {
    
                /**
                 * Properties of a JavaSettings.
                 * @memberof google.api
                 * @interface IJavaSettings
                 * @property {string|null} [libraryPackage] JavaSettings libraryPackage
                 * @property {Object.<string,string>|null} [serviceClassNames] JavaSettings serviceClassNames
                 * @property {google.api.ICommonLanguageSettings|null} [common] JavaSettings common
                 */
    
                /**
                 * Constructs a new JavaSettings.
                 * @memberof google.api
                 * @classdesc Represents a JavaSettings.
                 * @implements IJavaSettings
                 * @constructor
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 */
                function JavaSettings(properties) {
                    this.serviceClassNames = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * JavaSettings libraryPackage.
                 * @member {string} libraryPackage
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.libraryPackage = "";
    
                /**
                 * JavaSettings serviceClassNames.
                 * @member {Object.<string,string>} serviceClassNames
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.serviceClassNames = $util.emptyObject;
    
                /**
                 * JavaSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.common = null;
    
                /**
                 * Creates a new JavaSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 * @returns {google.api.JavaSettings} JavaSettings instance
                 */
                JavaSettings.create = function create(properties) {
                    return new JavaSettings(properties);
                };
    
                /**
                 * Encodes the specified JavaSettings message. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.libraryPackage != null && Object.hasOwnProperty.call(message, "libraryPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.libraryPackage);
                    if (message.serviceClassNames != null && Object.hasOwnProperty.call(message, "serviceClassNames"))
                        for (var keys = Object.keys(message.serviceClassNames), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.serviceClassNames[keys[i]]).ldelim();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified JavaSettings message, length delimited. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.JavaSettings(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.libraryPackage = reader.string();
                                break;
                            }
                        case 2: {
                                if (message.serviceClassNames === $util.emptyObject)
                                    message.serviceClassNames = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.serviceClassNames[key] = value;
                                break;
                            }
                        case 3: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a JavaSettings message.
                 * @function verify
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                JavaSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        if (!$util.isString(message.libraryPackage))
                            return "libraryPackage: string expected";
                    if (message.serviceClassNames != null && message.hasOwnProperty("serviceClassNames")) {
                        if (!$util.isObject(message.serviceClassNames))
                            return "serviceClassNames: object expected";
                        var key = Object.keys(message.serviceClassNames);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.serviceClassNames[key[i]]))
                                return "serviceClassNames: string{k:string} expected";
                    }
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a JavaSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.JavaSettings} JavaSettings
                 */
                JavaSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.JavaSettings)
                        return object;
                    var message = new $root.google.api.JavaSettings();
                    if (object.libraryPackage != null)
                        message.libraryPackage = String(object.libraryPackage);
                    if (object.serviceClassNames) {
                        if (typeof object.serviceClassNames !== "object")
                            throw TypeError(".google.api.JavaSettings.serviceClassNames: object expected");
                        message.serviceClassNames = {};
                        for (var keys = Object.keys(object.serviceClassNames), i = 0; i < keys.length; ++i)
                            message.serviceClassNames[keys[i]] = String(object.serviceClassNames[keys[i]]);
                    }
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.JavaSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a JavaSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.JavaSettings} message JavaSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                JavaSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.serviceClassNames = {};
                    if (options.defaults) {
                        object.libraryPackage = "";
                        object.common = null;
                    }
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        object.libraryPackage = message.libraryPackage;
                    var keys2;
                    if (message.serviceClassNames && (keys2 = Object.keys(message.serviceClassNames)).length) {
                        object.serviceClassNames = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.serviceClassNames[keys2[j]] = message.serviceClassNames[keys2[j]];
                    }
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this JavaSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.JavaSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                JavaSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for JavaSettings
                 * @function getTypeUrl
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                JavaSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.JavaSettings";
                };
    
                return JavaSettings;
            })();
    
            api.CppSettings = (function() {
    
                /**
                 * Properties of a CppSettings.
                 * @memberof google.api
                 * @interface ICppSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] CppSettings common
                 */
    
                /**
                 * Constructs a new CppSettings.
                 * @memberof google.api
                 * @classdesc Represents a CppSettings.
                 * @implements ICppSettings
                 * @constructor
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 */
                function CppSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CppSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.CppSettings
                 * @instance
                 */
                CppSettings.prototype.common = null;
    
                /**
                 * Creates a new CppSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 * @returns {google.api.CppSettings} CppSettings instance
                 */
                CppSettings.create = function create(properties) {
                    return new CppSettings(properties);
                };
    
                /**
                 * Encodes the specified CppSettings message. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CppSettings message, length delimited. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CppSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CppSettings message.
                 * @function verify
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CppSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CppSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CppSettings} CppSettings
                 */
                CppSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CppSettings)
                        return object;
                    var message = new $root.google.api.CppSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.CppSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CppSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.CppSettings} message CppSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CppSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this CppSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CppSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CppSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CppSettings
                 * @function getTypeUrl
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CppSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CppSettings";
                };
    
                return CppSettings;
            })();
    
            api.PhpSettings = (function() {
    
                /**
                 * Properties of a PhpSettings.
                 * @memberof google.api
                 * @interface IPhpSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PhpSettings common
                 */
    
                /**
                 * Constructs a new PhpSettings.
                 * @memberof google.api
                 * @classdesc Represents a PhpSettings.
                 * @implements IPhpSettings
                 * @constructor
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 */
                function PhpSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PhpSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PhpSettings
                 * @instance
                 */
                PhpSettings.prototype.common = null;
    
                /**
                 * Creates a new PhpSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 * @returns {google.api.PhpSettings} PhpSettings instance
                 */
                PhpSettings.create = function create(properties) {
                    return new PhpSettings(properties);
                };
    
                /**
                 * Encodes the specified PhpSettings message. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PhpSettings message, length delimited. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PhpSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PhpSettings message.
                 * @function verify
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PhpSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PhpSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PhpSettings} PhpSettings
                 */
                PhpSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PhpSettings)
                        return object;
                    var message = new $root.google.api.PhpSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PhpSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PhpSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.PhpSettings} message PhpSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PhpSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PhpSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PhpSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PhpSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PhpSettings
                 * @function getTypeUrl
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PhpSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PhpSettings";
                };
    
                return PhpSettings;
            })();
    
            api.PythonSettings = (function() {
    
                /**
                 * Properties of a PythonSettings.
                 * @memberof google.api
                 * @interface IPythonSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PythonSettings common
                 */
    
                /**
                 * Constructs a new PythonSettings.
                 * @memberof google.api
                 * @classdesc Represents a PythonSettings.
                 * @implements IPythonSettings
                 * @constructor
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 */
                function PythonSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PythonSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PythonSettings
                 * @instance
                 */
                PythonSettings.prototype.common = null;
    
                /**
                 * Creates a new PythonSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 * @returns {google.api.PythonSettings} PythonSettings instance
                 */
                PythonSettings.create = function create(properties) {
                    return new PythonSettings(properties);
                };
    
                /**
                 * Encodes the specified PythonSettings message. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PythonSettings message, length delimited. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PythonSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PythonSettings message.
                 * @function verify
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PythonSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PythonSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PythonSettings} PythonSettings
                 */
                PythonSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PythonSettings)
                        return object;
                    var message = new $root.google.api.PythonSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PythonSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PythonSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.PythonSettings} message PythonSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PythonSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PythonSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PythonSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PythonSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PythonSettings
                 * @function getTypeUrl
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PythonSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PythonSettings";
                };
    
                return PythonSettings;
            })();
    
            api.NodeSettings = (function() {
    
                /**
                 * Properties of a NodeSettings.
                 * @memberof google.api
                 * @interface INodeSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] NodeSettings common
                 */
    
                /**
                 * Constructs a new NodeSettings.
                 * @memberof google.api
                 * @classdesc Represents a NodeSettings.
                 * @implements INodeSettings
                 * @constructor
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 */
                function NodeSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * NodeSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.NodeSettings
                 * @instance
                 */
                NodeSettings.prototype.common = null;
    
                /**
                 * Creates a new NodeSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 * @returns {google.api.NodeSettings} NodeSettings instance
                 */
                NodeSettings.create = function create(properties) {
                    return new NodeSettings(properties);
                };
    
                /**
                 * Encodes the specified NodeSettings message. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified NodeSettings message, length delimited. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.NodeSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a NodeSettings message.
                 * @function verify
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NodeSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a NodeSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.NodeSettings} NodeSettings
                 */
                NodeSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.NodeSettings)
                        return object;
                    var message = new $root.google.api.NodeSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.NodeSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a NodeSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.NodeSettings} message NodeSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NodeSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this NodeSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.NodeSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NodeSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for NodeSettings
                 * @function getTypeUrl
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NodeSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.NodeSettings";
                };
    
                return NodeSettings;
            })();
    
            api.DotnetSettings = (function() {
    
                /**
                 * Properties of a DotnetSettings.
                 * @memberof google.api
                 * @interface IDotnetSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] DotnetSettings common
                 * @property {Object.<string,string>|null} [renamedServices] DotnetSettings renamedServices
                 * @property {Object.<string,string>|null} [renamedResources] DotnetSettings renamedResources
                 * @property {Array.<string>|null} [ignoredResources] DotnetSettings ignoredResources
                 * @property {Array.<string>|null} [forcedNamespaceAliases] DotnetSettings forcedNamespaceAliases
                 * @property {Array.<string>|null} [handwrittenSignatures] DotnetSettings handwrittenSignatures
                 */
    
                /**
                 * Constructs a new DotnetSettings.
                 * @memberof google.api
                 * @classdesc Represents a DotnetSettings.
                 * @implements IDotnetSettings
                 * @constructor
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 */
                function DotnetSettings(properties) {
                    this.renamedServices = {};
                    this.renamedResources = {};
                    this.ignoredResources = [];
                    this.forcedNamespaceAliases = [];
                    this.handwrittenSignatures = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DotnetSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.common = null;
    
                /**
                 * DotnetSettings renamedServices.
                 * @member {Object.<string,string>} renamedServices
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.renamedServices = $util.emptyObject;
    
                /**
                 * DotnetSettings renamedResources.
                 * @member {Object.<string,string>} renamedResources
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.renamedResources = $util.emptyObject;
    
                /**
                 * DotnetSettings ignoredResources.
                 * @member {Array.<string>} ignoredResources
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.ignoredResources = $util.emptyArray;
    
                /**
                 * DotnetSettings forcedNamespaceAliases.
                 * @member {Array.<string>} forcedNamespaceAliases
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.forcedNamespaceAliases = $util.emptyArray;
    
                /**
                 * DotnetSettings handwrittenSignatures.
                 * @member {Array.<string>} handwrittenSignatures
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.handwrittenSignatures = $util.emptyArray;
    
                /**
                 * Creates a new DotnetSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 * @returns {google.api.DotnetSettings} DotnetSettings instance
                 */
                DotnetSettings.create = function create(properties) {
                    return new DotnetSettings(properties);
                };
    
                /**
                 * Encodes the specified DotnetSettings message. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.renamedServices != null && Object.hasOwnProperty.call(message, "renamedServices"))
                        for (var keys = Object.keys(message.renamedServices), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.renamedServices[keys[i]]).ldelim();
                    if (message.renamedResources != null && Object.hasOwnProperty.call(message, "renamedResources"))
                        for (var keys = Object.keys(message.renamedResources), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.renamedResources[keys[i]]).ldelim();
                    if (message.ignoredResources != null && message.ignoredResources.length)
                        for (var i = 0; i < message.ignoredResources.length; ++i)
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.ignoredResources[i]);
                    if (message.forcedNamespaceAliases != null && message.forcedNamespaceAliases.length)
                        for (var i = 0; i < message.forcedNamespaceAliases.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.forcedNamespaceAliases[i]);
                    if (message.handwrittenSignatures != null && message.handwrittenSignatures.length)
                        for (var i = 0; i < message.handwrittenSignatures.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.handwrittenSignatures[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DotnetSettings message, length delimited. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.DotnetSettings(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                if (message.renamedServices === $util.emptyObject)
                                    message.renamedServices = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.renamedServices[key] = value;
                                break;
                            }
                        case 3: {
                                if (message.renamedResources === $util.emptyObject)
                                    message.renamedResources = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.renamedResources[key] = value;
                                break;
                            }
                        case 4: {
                                if (!(message.ignoredResources && message.ignoredResources.length))
                                    message.ignoredResources = [];
                                message.ignoredResources.push(reader.string());
                                break;
                            }
                        case 5: {
                                if (!(message.forcedNamespaceAliases && message.forcedNamespaceAliases.length))
                                    message.forcedNamespaceAliases = [];
                                message.forcedNamespaceAliases.push(reader.string());
                                break;
                            }
                        case 6: {
                                if (!(message.handwrittenSignatures && message.handwrittenSignatures.length))
                                    message.handwrittenSignatures = [];
                                message.handwrittenSignatures.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DotnetSettings message.
                 * @function verify
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DotnetSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    if (message.renamedServices != null && message.hasOwnProperty("renamedServices")) {
                        if (!$util.isObject(message.renamedServices))
                            return "renamedServices: object expected";
                        var key = Object.keys(message.renamedServices);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.renamedServices[key[i]]))
                                return "renamedServices: string{k:string} expected";
                    }
                    if (message.renamedResources != null && message.hasOwnProperty("renamedResources")) {
                        if (!$util.isObject(message.renamedResources))
                            return "renamedResources: object expected";
                        var key = Object.keys(message.renamedResources);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.renamedResources[key[i]]))
                                return "renamedResources: string{k:string} expected";
                    }
                    if (message.ignoredResources != null && message.hasOwnProperty("ignoredResources")) {
                        if (!Array.isArray(message.ignoredResources))
                            return "ignoredResources: array expected";
                        for (var i = 0; i < message.ignoredResources.length; ++i)
                            if (!$util.isString(message.ignoredResources[i]))
                                return "ignoredResources: string[] expected";
                    }
                    if (message.forcedNamespaceAliases != null && message.hasOwnProperty("forcedNamespaceAliases")) {
                        if (!Array.isArray(message.forcedNamespaceAliases))
                            return "forcedNamespaceAliases: array expected";
                        for (var i = 0; i < message.forcedNamespaceAliases.length; ++i)
                            if (!$util.isString(message.forcedNamespaceAliases[i]))
                                return "forcedNamespaceAliases: string[] expected";
                    }
                    if (message.handwrittenSignatures != null && message.hasOwnProperty("handwrittenSignatures")) {
                        if (!Array.isArray(message.handwrittenSignatures))
                            return "handwrittenSignatures: array expected";
                        for (var i = 0; i < message.handwrittenSignatures.length; ++i)
                            if (!$util.isString(message.handwrittenSignatures[i]))
                                return "handwrittenSignatures: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DotnetSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 */
                DotnetSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.DotnetSettings)
                        return object;
                    var message = new $root.google.api.DotnetSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.DotnetSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    if (object.renamedServices) {
                        if (typeof object.renamedServices !== "object")
                            throw TypeError(".google.api.DotnetSettings.renamedServices: object expected");
                        message.renamedServices = {};
                        for (var keys = Object.keys(object.renamedServices), i = 0; i < keys.length; ++i)
                            message.renamedServices[keys[i]] = String(object.renamedServices[keys[i]]);
                    }
                    if (object.renamedResources) {
                        if (typeof object.renamedResources !== "object")
                            throw TypeError(".google.api.DotnetSettings.renamedResources: object expected");
                        message.renamedResources = {};
                        for (var keys = Object.keys(object.renamedResources), i = 0; i < keys.length; ++i)
                            message.renamedResources[keys[i]] = String(object.renamedResources[keys[i]]);
                    }
                    if (object.ignoredResources) {
                        if (!Array.isArray(object.ignoredResources))
                            throw TypeError(".google.api.DotnetSettings.ignoredResources: array expected");
                        message.ignoredResources = [];
                        for (var i = 0; i < object.ignoredResources.length; ++i)
                            message.ignoredResources[i] = String(object.ignoredResources[i]);
                    }
                    if (object.forcedNamespaceAliases) {
                        if (!Array.isArray(object.forcedNamespaceAliases))
                            throw TypeError(".google.api.DotnetSettings.forcedNamespaceAliases: array expected");
                        message.forcedNamespaceAliases = [];
                        for (var i = 0; i < object.forcedNamespaceAliases.length; ++i)
                            message.forcedNamespaceAliases[i] = String(object.forcedNamespaceAliases[i]);
                    }
                    if (object.handwrittenSignatures) {
                        if (!Array.isArray(object.handwrittenSignatures))
                            throw TypeError(".google.api.DotnetSettings.handwrittenSignatures: array expected");
                        message.handwrittenSignatures = [];
                        for (var i = 0; i < object.handwrittenSignatures.length; ++i)
                            message.handwrittenSignatures[i] = String(object.handwrittenSignatures[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DotnetSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.DotnetSettings} message DotnetSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DotnetSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.ignoredResources = [];
                        object.forcedNamespaceAliases = [];
                        object.handwrittenSignatures = [];
                    }
                    if (options.objects || options.defaults) {
                        object.renamedServices = {};
                        object.renamedResources = {};
                    }
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    var keys2;
                    if (message.renamedServices && (keys2 = Object.keys(message.renamedServices)).length) {
                        object.renamedServices = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.renamedServices[keys2[j]] = message.renamedServices[keys2[j]];
                    }
                    if (message.renamedResources && (keys2 = Object.keys(message.renamedResources)).length) {
                        object.renamedResources = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.renamedResources[keys2[j]] = message.renamedResources[keys2[j]];
                    }
                    if (message.ignoredResources && message.ignoredResources.length) {
                        object.ignoredResources = [];
                        for (var j = 0; j < message.ignoredResources.length; ++j)
                            object.ignoredResources[j] = message.ignoredResources[j];
                    }
                    if (message.forcedNamespaceAliases && message.forcedNamespaceAliases.length) {
                        object.forcedNamespaceAliases = [];
                        for (var j = 0; j < message.forcedNamespaceAliases.length; ++j)
                            object.forcedNamespaceAliases[j] = message.forcedNamespaceAliases[j];
                    }
                    if (message.handwrittenSignatures && message.handwrittenSignatures.length) {
                        object.handwrittenSignatures = [];
                        for (var j = 0; j < message.handwrittenSignatures.length; ++j)
                            object.handwrittenSignatures[j] = message.handwrittenSignatures[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DotnetSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.DotnetSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DotnetSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DotnetSettings
                 * @function getTypeUrl
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DotnetSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.DotnetSettings";
                };
    
                return DotnetSettings;
            })();
    
            api.RubySettings = (function() {
    
                /**
                 * Properties of a RubySettings.
                 * @memberof google.api
                 * @interface IRubySettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] RubySettings common
                 */
    
                /**
                 * Constructs a new RubySettings.
                 * @memberof google.api
                 * @classdesc Represents a RubySettings.
                 * @implements IRubySettings
                 * @constructor
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 */
                function RubySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RubySettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.RubySettings
                 * @instance
                 */
                RubySettings.prototype.common = null;
    
                /**
                 * Creates a new RubySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 * @returns {google.api.RubySettings} RubySettings instance
                 */
                RubySettings.create = function create(properties) {
                    return new RubySettings(properties);
                };
    
                /**
                 * Encodes the specified RubySettings message. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RubySettings message, length delimited. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.RubySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RubySettings message.
                 * @function verify
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RubySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a RubySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.RubySettings} RubySettings
                 */
                RubySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.RubySettings)
                        return object;
                    var message = new $root.google.api.RubySettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.RubySettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RubySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.RubySettings} message RubySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RubySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this RubySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.RubySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RubySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for RubySettings
                 * @function getTypeUrl
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RubySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.RubySettings";
                };
    
                return RubySettings;
            })();
    
            api.GoSettings = (function() {
    
                /**
                 * Properties of a GoSettings.
                 * @memberof google.api
                 * @interface IGoSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] GoSettings common
                 */
    
                /**
                 * Constructs a new GoSettings.
                 * @memberof google.api
                 * @classdesc Represents a GoSettings.
                 * @implements IGoSettings
                 * @constructor
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 */
                function GoSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GoSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.GoSettings
                 * @instance
                 */
                GoSettings.prototype.common = null;
    
                /**
                 * Creates a new GoSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 * @returns {google.api.GoSettings} GoSettings instance
                 */
                GoSettings.create = function create(properties) {
                    return new GoSettings(properties);
                };
    
                /**
                 * Encodes the specified GoSettings message. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GoSettings message, length delimited. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.GoSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GoSettings message.
                 * @function verify
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GoSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a GoSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.GoSettings} GoSettings
                 */
                GoSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.GoSettings)
                        return object;
                    var message = new $root.google.api.GoSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.GoSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GoSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.GoSettings} message GoSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GoSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this GoSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.GoSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GoSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GoSettings
                 * @function getTypeUrl
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GoSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.GoSettings";
                };
    
                return GoSettings;
            })();
    
            api.MethodSettings = (function() {
    
                /**
                 * Properties of a MethodSettings.
                 * @memberof google.api
                 * @interface IMethodSettings
                 * @property {string|null} [selector] MethodSettings selector
                 * @property {google.api.MethodSettings.ILongRunning|null} [longRunning] MethodSettings longRunning
                 * @property {Array.<string>|null} [autoPopulatedFields] MethodSettings autoPopulatedFields
                 */
    
                /**
                 * Constructs a new MethodSettings.
                 * @memberof google.api
                 * @classdesc Represents a MethodSettings.
                 * @implements IMethodSettings
                 * @constructor
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 */
                function MethodSettings(properties) {
                    this.autoPopulatedFields = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodSettings selector.
                 * @member {string} selector
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.selector = "";
    
                /**
                 * MethodSettings longRunning.
                 * @member {google.api.MethodSettings.ILongRunning|null|undefined} longRunning
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.longRunning = null;
    
                /**
                 * MethodSettings autoPopulatedFields.
                 * @member {Array.<string>} autoPopulatedFields
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.autoPopulatedFields = $util.emptyArray;
    
                /**
                 * Creates a new MethodSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 * @returns {google.api.MethodSettings} MethodSettings instance
                 */
                MethodSettings.create = function create(properties) {
                    return new MethodSettings(properties);
                };
    
                /**
                 * Encodes the specified MethodSettings message. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.longRunning != null && Object.hasOwnProperty.call(message, "longRunning"))
                        $root.google.api.MethodSettings.LongRunning.encode(message.longRunning, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.autoPopulatedFields != null && message.autoPopulatedFields.length)
                        for (var i = 0; i < message.autoPopulatedFields.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.autoPopulatedFields[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodSettings message, length delimited. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.longRunning = $root.google.api.MethodSettings.LongRunning.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                if (!(message.autoPopulatedFields && message.autoPopulatedFields.length))
                                    message.autoPopulatedFields = [];
                                message.autoPopulatedFields.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodSettings message.
                 * @function verify
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.longRunning != null && message.hasOwnProperty("longRunning")) {
                        var error = $root.google.api.MethodSettings.LongRunning.verify(message.longRunning);
                        if (error)
                            return "longRunning." + error;
                    }
                    if (message.autoPopulatedFields != null && message.hasOwnProperty("autoPopulatedFields")) {
                        if (!Array.isArray(message.autoPopulatedFields))
                            return "autoPopulatedFields: array expected";
                        for (var i = 0; i < message.autoPopulatedFields.length; ++i)
                            if (!$util.isString(message.autoPopulatedFields[i]))
                                return "autoPopulatedFields: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.MethodSettings} MethodSettings
                 */
                MethodSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.MethodSettings)
                        return object;
                    var message = new $root.google.api.MethodSettings();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.longRunning != null) {
                        if (typeof object.longRunning !== "object")
                            throw TypeError(".google.api.MethodSettings.longRunning: object expected");
                        message.longRunning = $root.google.api.MethodSettings.LongRunning.fromObject(object.longRunning);
                    }
                    if (object.autoPopulatedFields) {
                        if (!Array.isArray(object.autoPopulatedFields))
                            throw TypeError(".google.api.MethodSettings.autoPopulatedFields: array expected");
                        message.autoPopulatedFields = [];
                        for (var i = 0; i < object.autoPopulatedFields.length; ++i)
                            message.autoPopulatedFields[i] = String(object.autoPopulatedFields[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.MethodSettings} message MethodSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.autoPopulatedFields = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.longRunning = null;
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.longRunning != null && message.hasOwnProperty("longRunning"))
                        object.longRunning = $root.google.api.MethodSettings.LongRunning.toObject(message.longRunning, options);
                    if (message.autoPopulatedFields && message.autoPopulatedFields.length) {
                        object.autoPopulatedFields = [];
                        for (var j = 0; j < message.autoPopulatedFields.length; ++j)
                            object.autoPopulatedFields[j] = message.autoPopulatedFields[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this MethodSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.MethodSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodSettings
                 * @function getTypeUrl
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.MethodSettings";
                };
    
                MethodSettings.LongRunning = (function() {
    
                    /**
                     * Properties of a LongRunning.
                     * @memberof google.api.MethodSettings
                     * @interface ILongRunning
                     * @property {google.protobuf.IDuration|null} [initialPollDelay] LongRunning initialPollDelay
                     * @property {number|null} [pollDelayMultiplier] LongRunning pollDelayMultiplier
                     * @property {google.protobuf.IDuration|null} [maxPollDelay] LongRunning maxPollDelay
                     * @property {google.protobuf.IDuration|null} [totalPollTimeout] LongRunning totalPollTimeout
                     */
    
                    /**
                     * Constructs a new LongRunning.
                     * @memberof google.api.MethodSettings
                     * @classdesc Represents a LongRunning.
                     * @implements ILongRunning
                     * @constructor
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     */
                    function LongRunning(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LongRunning initialPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} initialPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.initialPollDelay = null;
    
                    /**
                     * LongRunning pollDelayMultiplier.
                     * @member {number} pollDelayMultiplier
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.pollDelayMultiplier = 0;
    
                    /**
                     * LongRunning maxPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} maxPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.maxPollDelay = null;
    
                    /**
                     * LongRunning totalPollTimeout.
                     * @member {google.protobuf.IDuration|null|undefined} totalPollTimeout
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.totalPollTimeout = null;
    
                    /**
                     * Creates a new LongRunning instance using the specified properties.
                     * @function create
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning instance
                     */
                    LongRunning.create = function create(properties) {
                        return new LongRunning(properties);
                    };
    
                    /**
                     * Encodes the specified LongRunning message. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.initialPollDelay != null && Object.hasOwnProperty.call(message, "initialPollDelay"))
                            $root.google.protobuf.Duration.encode(message.initialPollDelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pollDelayMultiplier != null && Object.hasOwnProperty.call(message, "pollDelayMultiplier"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.pollDelayMultiplier);
                        if (message.maxPollDelay != null && Object.hasOwnProperty.call(message, "maxPollDelay"))
                            $root.google.protobuf.Duration.encode(message.maxPollDelay, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.totalPollTimeout != null && Object.hasOwnProperty.call(message, "totalPollTimeout"))
                            $root.google.protobuf.Duration.encode(message.totalPollTimeout, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LongRunning message, length delimited. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings.LongRunning();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.initialPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.pollDelayMultiplier = reader.float();
                                    break;
                                }
                            case 3: {
                                    message.maxPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.totalPollTimeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LongRunning message.
                     * @function verify
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LongRunning.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.initialPollDelay);
                            if (error)
                                return "initialPollDelay." + error;
                        }
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            if (typeof message.pollDelayMultiplier !== "number")
                                return "pollDelayMultiplier: number expected";
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.maxPollDelay);
                            if (error)
                                return "maxPollDelay." + error;
                        }
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout")) {
                            var error = $root.google.protobuf.Duration.verify(message.totalPollTimeout);
                            if (error)
                                return "totalPollTimeout." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a LongRunning message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     */
                    LongRunning.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.api.MethodSettings.LongRunning)
                            return object;
                        var message = new $root.google.api.MethodSettings.LongRunning();
                        if (object.initialPollDelay != null) {
                            if (typeof object.initialPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.initialPollDelay: object expected");
                            message.initialPollDelay = $root.google.protobuf.Duration.fromObject(object.initialPollDelay);
                        }
                        if (object.pollDelayMultiplier != null)
                            message.pollDelayMultiplier = Number(object.pollDelayMultiplier);
                        if (object.maxPollDelay != null) {
                            if (typeof object.maxPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.maxPollDelay: object expected");
                            message.maxPollDelay = $root.google.protobuf.Duration.fromObject(object.maxPollDelay);
                        }
                        if (object.totalPollTimeout != null) {
                            if (typeof object.totalPollTimeout !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.totalPollTimeout: object expected");
                            message.totalPollTimeout = $root.google.protobuf.Duration.fromObject(object.totalPollTimeout);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LongRunning message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.LongRunning} message LongRunning
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LongRunning.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.initialPollDelay = null;
                            object.pollDelayMultiplier = 0;
                            object.maxPollDelay = null;
                            object.totalPollTimeout = null;
                        }
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay"))
                            object.initialPollDelay = $root.google.protobuf.Duration.toObject(message.initialPollDelay, options);
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            object.pollDelayMultiplier = options.json && !isFinite(message.pollDelayMultiplier) ? String(message.pollDelayMultiplier) : message.pollDelayMultiplier;
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay"))
                            object.maxPollDelay = $root.google.protobuf.Duration.toObject(message.maxPollDelay, options);
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout"))
                            object.totalPollTimeout = $root.google.protobuf.Duration.toObject(message.totalPollTimeout, options);
                        return object;
                    };
    
                    /**
                     * Converts this LongRunning to JSON.
                     * @function toJSON
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LongRunning.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for LongRunning
                     * @function getTypeUrl
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    LongRunning.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.api.MethodSettings.LongRunning";
                    };
    
                    return LongRunning;
                })();
    
                return MethodSettings;
            })();
    
            /**
             * ClientLibraryOrganization enum.
             * @name google.api.ClientLibraryOrganization
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED=0 CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED value
             * @property {number} CLOUD=1 CLOUD value
             * @property {number} ADS=2 ADS value
             * @property {number} PHOTOS=3 PHOTOS value
             * @property {number} STREET_VIEW=4 STREET_VIEW value
             * @property {number} SHOPPING=5 SHOPPING value
             * @property {number} GEO=6 GEO value
             * @property {number} GENERATIVE_AI=7 GENERATIVE_AI value
             */
            api.ClientLibraryOrganization = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CLOUD"] = 1;
                values[valuesById[2] = "ADS"] = 2;
                values[valuesById[3] = "PHOTOS"] = 3;
                values[valuesById[4] = "STREET_VIEW"] = 4;
                values[valuesById[5] = "SHOPPING"] = 5;
                values[valuesById[6] = "GEO"] = 6;
                values[valuesById[7] = "GENERATIVE_AI"] = 7;
                return values;
            })();
    
            /**
             * ClientLibraryDestination enum.
             * @name google.api.ClientLibraryDestination
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_DESTINATION_UNSPECIFIED=0 CLIENT_LIBRARY_DESTINATION_UNSPECIFIED value
             * @property {number} GITHUB=10 GITHUB value
             * @property {number} PACKAGE_MANAGER=20 PACKAGE_MANAGER value
             */
            api.ClientLibraryDestination = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED"] = 0;
                values[valuesById[10] = "GITHUB"] = 10;
                values[valuesById[20] = "PACKAGE_MANAGER"] = 20;
                return values;
            })();
    
            /**
             * LaunchStage enum.
             * @name google.api.LaunchStage
             * @enum {number}
             * @property {number} LAUNCH_STAGE_UNSPECIFIED=0 LAUNCH_STAGE_UNSPECIFIED value
             * @property {number} UNIMPLEMENTED=6 UNIMPLEMENTED value
             * @property {number} PRELAUNCH=7 PRELAUNCH value
             * @property {number} EARLY_ACCESS=1 EARLY_ACCESS value
             * @property {number} ALPHA=2 ALPHA value
             * @property {number} BETA=3 BETA value
             * @property {number} GA=4 GA value
             * @property {number} DEPRECATED=5 DEPRECATED value
             */
            api.LaunchStage = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "LAUNCH_STAGE_UNSPECIFIED"] = 0;
                values[valuesById[6] = "UNIMPLEMENTED"] = 6;
                values[valuesById[7] = "PRELAUNCH"] = 7;
                values[valuesById[1] = "EARLY_ACCESS"] = 1;
                values[valuesById[2] = "ALPHA"] = 2;
                values[valuesById[3] = "BETA"] = 3;
                values[valuesById[4] = "GA"] = 4;
                values[valuesById[5] = "DEPRECATED"] = 5;
                return values;
            })();
    
            return api;
        })();
    
        return google;
    })();

    return $root;
});
