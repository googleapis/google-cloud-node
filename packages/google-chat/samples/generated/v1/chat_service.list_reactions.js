// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START chat_v1_generated_ChatService_ListReactions_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The message users reacted to.
   *  Format: `spaces/{space}/messages/{message}`
   */
  // const parent = 'abc123'
  /**
   *  Optional. The maximum number of reactions returned. The service can return
   *  fewer reactions than this value. If unspecified, the default value is 25.
   *  The maximum value is 200; values above 200 are changed to 200.
   */
  // const pageSize = 1234
  /**
   *  Optional. (If resuming from a previous query.)
   *  A page token received from a previous list reactions call. Provide this
   *  to retrieve the subsequent page.
   *  When paginating, the filter value should match the call that provided the
   *  page token. Passing a different value might lead to unexpected results.
   */
  // const pageToken = 'abc123'
  /**
   *  Optional. A query filter.
   *  You can filter reactions by
   *  emoji (https://developers.google.com/workspace/chat/api/reference/rest/v1/Emoji)
   *  (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
   *  user (https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
   *  (`user.name`).
   *  To filter reactions for multiple emojis or users, join similar fields
   *  with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode =
   *  "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`.
   *  To filter reactions by emoji and user, use the `AND` operator, such as
   *  `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`.
   *  If your query uses both `AND` and `OR`, group them with parentheses.
   *  For example, the following queries are valid:
   *  ```
   *  user.name = "users/{user}"
   *  emoji.unicode = "🙂"
   *  emoji.custom_emoji.uid = "{uid}"
   *  emoji.unicode = "🙂" OR emoji.unicode = "👍"
   *  emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
   *  emoji.unicode = "🙂" AND user.name = "users/{user}"
   *  (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}")
   *  AND user.name = "users/{user}"
   *  ```
   *  The following queries are invalid:
   *  ```
   *  emoji.unicode = "🙂" AND emoji.unicode = "👍"
   *  emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}"
   *  emoji.unicode = "🙂" OR user.name = "users/{user}"
   *  emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR
   *  user.name = "users/{user}"
   *  emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
   *  AND user.name = "users/{user}"
   *  ```
   *  Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *  error.
   */
  // const filter = 'abc123'

  // Imports the Chat library
  const {ChatServiceClient} = require('@google-apps/chat').v1;

  // Instantiates a client
  const chatClient = new ChatServiceClient();

  async function callListReactions() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = chatClient.listReactionsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListReactions();
  // [END chat_v1_generated_ChatService_ListReactions_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
