// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main() {
  // [START chat_v1_generated_ChatService_ListSpaces_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Optional. The maximum number of spaces to return. The service might return
   *  fewer than this value.
   *  If unspecified, at most 100 spaces are returned.
   *  The maximum value is 1000. If you use a value more than 1000, it's
   *  automatically changed to 1000.
   *  Negative values return an `INVALID_ARGUMENT` error.
   */
  // const pageSize = 1234
  /**
   *  Optional. A page token, received from a previous list spaces call.
   *  Provide this parameter to retrieve the subsequent page.
   *  When paginating, the filter value should match the call that provided the
   *  page token. Passing a different value may lead to unexpected results.
   */
  // const pageToken = 'abc123'
  /**
   *  Optional. A query filter.
   *  You can filter spaces by the space type
   *  (`space_type` (https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#spacetype)).
   *  To filter by space type, you must specify valid enum value, such as
   *  `SPACE` or `GROUP_CHAT` (the `space_type` can't be
   *  `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR`
   *  operator.
   *  For example, the following queries are valid:
   *  ```
   *  space_type = "SPACE"
   *  spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
   *  ```
   *  Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *  error.
   */
  // const filter = 'abc123'

  // Imports the Chat library
  const {ChatServiceClient} = require('@google-apps/chat').v1;

  // Instantiates a client
  const chatClient = new ChatServiceClient();

  async function callListSpaces() {
    // Construct request
    const request = {
    };

    // Run request
    const iterable = chatClient.listSpacesAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListSpaces();
  // [END chat_v1_generated_ChatService_ListSpaces_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
