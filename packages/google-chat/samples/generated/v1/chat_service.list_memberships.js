// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START chat_v1_generated_ChatService_ListMemberships_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the space for which to fetch a membership
   *  list.
   *  Format: spaces/{space}
   */
  // const parent = 'abc123'
  /**
   *  Optional. The maximum number of memberships to return. The service might
   *  return fewer than this value.
   *  If unspecified, at most 100 memberships are returned.
   *  The maximum value is 1000. If you use a value more than 1000, it's
   *  automatically changed to 1000.
   *  Negative values return an `INVALID_ARGUMENT` error.
   */
  // const pageSize = 1234
  /**
   *  Optional. A page token, received from a previous call to list memberships.
   *  Provide this parameter to retrieve the subsequent page.
   *  When paginating, all other parameters provided should match the call that
   *  provided the page token. Passing different values to the other parameters
   *  might lead to unexpected results.
   */
  // const pageToken = 'abc123'
  /**
   *  Optional. A query filter.
   *  You can filter memberships by a member's role
   *  (`role` (https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.members#membershiprole))
   *  and type
   *  (`member.type` (https://developers.google.com/workspace/chat/api/reference/rest/v1/User#type)).
   *  To filter by role, set `role` to `ROLE_MEMBER` or `ROLE_MANAGER`.
   *  To filter by type, set `member.type` to `HUMAN` or `BOT`.
   *  To filter by both role and type, use the `AND` operator. To filter by
   *  either role or type, use the `OR` operator.
   *  For example, the following queries are valid:
   *  ```
   *  role = "ROLE_MANAGER" OR role = "ROLE_MEMBER"
   *  member.type = "HUMAN" AND role = "ROLE_MANAGER"
   *  ```
   *  The following queries are invalid:
   *  ```
   *  member.type = "HUMAN" AND member.type = "BOT"
   *  role = "ROLE_MANAGER" AND role = "ROLE_MEMBER"
   *  ```
   *  Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *  error.
   */
  // const filter = 'abc123'
  /**
   *  Optional. When `true`, also returns memberships associated with a
   *  Google Group google.chat.v1.Membership.group_member, in
   *  addition to other types of memberships. If a
   *  filter google.chat.v1.ListMembershipsRequest.filter  is set,
   *  Google Group google.chat.v1.Membership.group_member 
   *  memberships that don't match the filter criteria aren't returned.
   */
  // const showGroups = true
  /**
   *  Optional. When `true`, also returns memberships associated with
   *  invited google.chat.v1.Membership.MembershipState.INVITED  members, in
   *  addition to other types of memberships. If a
   *  filter is set,
   *  invited google.chat.v1.Membership.MembershipState.INVITED  memberships
   *  that don't match the filter criteria aren't returned.
   *  Currently requires user
   *  authentication (https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   */
  // const showInvited = true

  // Imports the Chat library
  const {ChatServiceClient} = require('@google-apps/chat').v1;

  // Instantiates a client
  const chatClient = new ChatServiceClient();

  async function callListMemberships() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = chatClient.listMembershipsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListMemberships();
  // [END chat_v1_generated_ChatService_ListMemberships_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
