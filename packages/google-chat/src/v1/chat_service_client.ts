// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/chat_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './chat_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Enables developers to build Chat apps and
 *  integrations on Google Chat Platform.
 * @class
 * @memberof v1
 */
export class ChatServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  chatServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ChatServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ChatServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ChatServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'chat.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      attachmentPathTemplate: new this._gaxModule.PathTemplate(
        'spaces/{space}/messages/{message}/attachments/{attachment}'
      ),
      membershipPathTemplate: new this._gaxModule.PathTemplate(
        'spaces/{space}/members/{member}'
      ),
      messagePathTemplate: new this._gaxModule.PathTemplate(
        'spaces/{space}/messages/{message}'
      ),
      quotedMessageMetadataPathTemplate: new this._gaxModule.PathTemplate(
        'spaces/{space}/messages/{message}/quotedMessageMetadata/{quoted_message_metadata}'
      ),
      reactionPathTemplate: new this._gaxModule.PathTemplate(
        'spaces/{space}/messages/{message}/reactions/{reaction}'
      ),
      spacePathTemplate: new this._gaxModule.PathTemplate('spaces/{space}'),
      spaceReadStatePathTemplate: new this._gaxModule.PathTemplate(
        'users/{user}/spaces/{space}/spaceReadState'
      ),
      threadPathTemplate: new this._gaxModule.PathTemplate(
        'spaces/{space}/threads/{thread}'
      ),
      threadReadStatePathTemplate: new this._gaxModule.PathTemplate(
        'users/{user}/spaces/{space}/threads/{thread}/threadReadState'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listMessages: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'messages'
      ),
      listMemberships: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'memberships'
      ),
      listSpaces: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'spaces'
      ),
      listReactions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'reactions'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.chat.v1.ChatService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.chatServiceStub) {
      return this.chatServiceStub;
    }

    // Put together the "service stub" for
    // google.chat.v1.ChatService.
    this.chatServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.chat.v1.ChatService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.chat.v1.ChatService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const chatServiceStubMethods = [
      'createMessage',
      'listMessages',
      'listMemberships',
      'getMembership',
      'getMessage',
      'updateMessage',
      'deleteMessage',
      'getAttachment',
      'uploadAttachment',
      'listSpaces',
      'getSpace',
      'createSpace',
      'setUpSpace',
      'updateSpace',
      'deleteSpace',
      'completeImportSpace',
      'findDirectMessage',
      'createMembership',
      'updateMembership',
      'deleteMembership',
      'createReaction',
      'listReactions',
      'deleteReaction',
      'getSpaceReadState',
      'updateSpaceReadState',
      'getThreadReadState',
    ];
    for (const methodName of chatServiceStubMethods) {
      const callPromise = this.chatServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.chatServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'chat.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'chat.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/chat.bot',
      'https://www.googleapis.com/auth/chat.delete',
      'https://www.googleapis.com/auth/chat.import',
      'https://www.googleapis.com/auth/chat.memberships',
      'https://www.googleapis.com/auth/chat.memberships.app',
      'https://www.googleapis.com/auth/chat.memberships.readonly',
      'https://www.googleapis.com/auth/chat.messages',
      'https://www.googleapis.com/auth/chat.messages.create',
      'https://www.googleapis.com/auth/chat.messages.reactions',
      'https://www.googleapis.com/auth/chat.messages.reactions.create',
      'https://www.googleapis.com/auth/chat.messages.reactions.readonly',
      'https://www.googleapis.com/auth/chat.messages.readonly',
      'https://www.googleapis.com/auth/chat.spaces',
      'https://www.googleapis.com/auth/chat.spaces.create',
      'https://www.googleapis.com/auth/chat.spaces.readonly',
      'https://www.googleapis.com/auth/chat.users.readstate',
      'https://www.googleapis.com/auth/chat.users.readstate.readonly',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a message in a Google Chat space. The maximum message size,
   * including text and cards, is 32,000 bytes. For an example, see [Send a
   * message](https://developers.google.com/workspace/chat/create-messages).
   *
   * Calling this method requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize)
   * and supports the following authentication types:
   *
   * - For text messages, user authentication or app authentication are
   * supported.
   * - For card messages, only app authentication is supported. (Only Chat apps
   * can create card messages.)
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the space in which to create a message.
   *
   *   Format: `spaces/{space}`
   * @param {google.chat.v1.Message} request.message
   *   Required. Message body.
   * @param {string} [request.threadKey]
   *   Optional. Deprecated: Use
   *   {@link protos.google.chat.v1.Thread.thread_key|thread.thread_key} instead. ID for the
   *   thread. Supports up to 4000 characters. To start or add to a thread, create
   *   a message and specify a `threadKey` or the
   *   {@link protos.google.chat.v1.Thread.name|thread.name}. For example usage, see [Start or
   *   reply to a message
   *   thread](https://developers.google.com/workspace/chat/create-messages#create-message-thread).
   * @param {string} [request.requestId]
   *   Optional. A unique request ID for this message. Specifying an existing
   *   request ID returns the message created with that ID instead of creating a
   *   new message.
   * @param {google.chat.v1.CreateMessageRequest.MessageReplyOption} [request.messageReplyOption]
   *   Optional. Specifies whether a message starts a thread or replies to one.
   *   Only supported in named spaces.
   * @param {string} [request.messageId]
   *   Optional. A custom ID for a message. Lets Chat apps get, update, or delete
   *   a message without needing to store the system-assigned ID in the message's
   *   resource name (represented in the message `name` field).
   *
   *   The value for this field must meet the following requirements:
   *
   *   * Begins with `client-`. For example, `client-custom-name` is a valid
   *     custom ID, but `custom-name` is not.
   *   * Contains up to 63 characters and only lowercase letters, numbers, and
   *     hyphens.
   *   * Is unique within a space. A Chat app can't use the same custom ID for
   *   different messages.
   *
   *   For details, see [Name a
   *   message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Message|Message}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.create_message.js</caption>
   * region_tag:chat_v1_generated_ChatService_CreateMessage_async
   */
  createMessage(
    request?: protos.google.chat.v1.ICreateMessageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.ICreateMessageRequest | undefined,
      {} | undefined,
    ]
  >;
  createMessage(
    request: protos.google.chat.v1.ICreateMessageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.ICreateMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMessage(
    request: protos.google.chat.v1.ICreateMessageRequest,
    callback: Callback<
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.ICreateMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMessage(
    request?: protos.google.chat.v1.ICreateMessageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IMessage,
          protos.google.chat.v1.ICreateMessageRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.ICreateMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.ICreateMessageRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createMessage(request, options, callback);
  }
  /**
   * Returns details about a membership. For an example, see
   * [Get details about a user's or Google Chat app's
   * membership](https://developers.google.com/workspace/chat/get-members).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the membership to retrieve.
   *
   *   To get the app's own membership [by using user
   *   authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   *   you can optionally use `spaces/{space}/members/app`.
   *
   *   Format: `spaces/{space}/members/{member}` or `spaces/{space}/members/app`
   *
   *   When [authenticated as a
   *   user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   *   you can use the user's email as an alias for `{member}`. For example,
   *   `spaces/{space}/members/example@gmail.com` where `example@gmail.com` is the
   *   email of the Google Chat user.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Membership|Membership}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.get_membership.js</caption>
   * region_tag:chat_v1_generated_ChatService_GetMembership_async
   */
  getMembership(
    request?: protos.google.chat.v1.IGetMembershipRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IGetMembershipRequest | undefined,
      {} | undefined,
    ]
  >;
  getMembership(
    request: protos.google.chat.v1.IGetMembershipRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IGetMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getMembership(
    request: protos.google.chat.v1.IGetMembershipRequest,
    callback: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IGetMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getMembership(
    request?: protos.google.chat.v1.IGetMembershipRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IMembership,
          protos.google.chat.v1.IGetMembershipRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IGetMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IGetMembershipRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getMembership(request, options, callback);
  }
  /**
   * Returns details about a message.
   * For an example, see [Get details about a
   * message](https://developers.google.com/workspace/chat/get-messages).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * Note: Might return a message from a blocked member or space.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the message.
   *
   *   Format: `spaces/{space}/messages/{message}`
   *
   *   If you've set a custom ID for your message, you can use the value from the
   *   `clientAssignedMessageId` field for `{message}`. For details, see [Name a
   *   message]
   *   (https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Message|Message}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.get_message.js</caption>
   * region_tag:chat_v1_generated_ChatService_GetMessage_async
   */
  getMessage(
    request?: protos.google.chat.v1.IGetMessageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.IGetMessageRequest | undefined,
      {} | undefined,
    ]
  >;
  getMessage(
    request: protos.google.chat.v1.IGetMessageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.IGetMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getMessage(
    request: protos.google.chat.v1.IGetMessageRequest,
    callback: Callback<
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.IGetMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getMessage(
    request?: protos.google.chat.v1.IGetMessageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IMessage,
          protos.google.chat.v1.IGetMessageRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.IGetMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.IGetMessageRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getMessage(request, options, callback);
  }
  /**
   * Updates a message. There's a difference between the `patch` and `update`
   * methods. The `patch`
   * method uses a `patch` request while the `update` method uses a `put`
   * request. We recommend using the `patch` method. For an example, see
   * [Update a
   * message](https://developers.google.com/workspace/chat/update-messages).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * When using app authentication, requests can only update messages
   * created by the calling Chat app.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.chat.v1.Message} request.message
   *   Required. Message with fields updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The field paths to update. Separate multiple values with commas
   *   or use `*` to update all field paths.
   *
   *   Currently supported field paths:
   *
   *   - `text`
   *
   *   - `attachment`
   *
   *   - `cards` (Requires [app
   *   authentication](/chat/api/guides/auth/service-accounts).)
   *
   *   - `cards_v2`  (Requires [app
   *   authentication](/chat/api/guides/auth/service-accounts).)
   *
   *   - `accessory_widgets`  (Requires [app
   *   authentication](/chat/api/guides/auth/service-accounts).)
   * @param {boolean} [request.allowMissing]
   *   Optional. If `true` and the message isn't found, a new message is created
   *   and `updateMask` is ignored. The specified message ID must be
   *   [client-assigned](https://developers.google.com/workspace/chat/create-messages#name_a_created_message)
   *   or the request fails.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Message|Message}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.update_message.js</caption>
   * region_tag:chat_v1_generated_ChatService_UpdateMessage_async
   */
  updateMessage(
    request?: protos.google.chat.v1.IUpdateMessageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.IUpdateMessageRequest | undefined,
      {} | undefined,
    ]
  >;
  updateMessage(
    request: protos.google.chat.v1.IUpdateMessageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.IUpdateMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateMessage(
    request: protos.google.chat.v1.IUpdateMessageRequest,
    callback: Callback<
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.IUpdateMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateMessage(
    request?: protos.google.chat.v1.IUpdateMessageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IMessage,
          protos.google.chat.v1.IUpdateMessageRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.IUpdateMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IMessage,
      protos.google.chat.v1.IUpdateMessageRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'message.name': request.message!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateMessage(request, options, callback);
  }
  /**
   * Deletes a message.
   * For an example, see [Delete a
   * message](https://developers.google.com/workspace/chat/delete-messages).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * When using app authentication, requests can only delete messages
   * created by the calling Chat app.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the message.
   *
   *   Format: `spaces/{space}/messages/{message}`
   *
   *   If you've set a custom ID for your message, you can use the value from the
   *   `clientAssignedMessageId` field for `{message}`. For details, see [Name a
   *   message]
   *   (https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
   * @param {boolean} request.force
   *   When `true`, deleting a message also deletes its threaded replies. When
   *   `false`, if a message has threaded replies, deletion fails.
   *
   *   Only applies when [authenticating as a
   *   user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *   Has no effect when [authenticating as a Chat app]
   *   (https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.delete_message.js</caption>
   * region_tag:chat_v1_generated_ChatService_DeleteMessage_async
   */
  deleteMessage(
    request?: protos.google.chat.v1.IDeleteMessageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteMessageRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteMessage(
    request: protos.google.chat.v1.IDeleteMessageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMessage(
    request: protos.google.chat.v1.IDeleteMessageRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMessage(
    request?: protos.google.chat.v1.IDeleteMessageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.chat.v1.IDeleteMessageRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteMessageRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteMessage(request, options, callback);
  }
  /**
   * Gets the metadata of a message attachment. The attachment data is fetched
   * using the [media
   * API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
   * For an example, see
   * [Get metadata about a message
   * attachment](https://developers.google.com/workspace/chat/get-media-attachments).
   * Requires [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the attachment, in the form
   *   `spaces/* /messages/* /attachments/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Attachment|Attachment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.get_attachment.js</caption>
   * region_tag:chat_v1_generated_ChatService_GetAttachment_async
   */
  getAttachment(
    request?: protos.google.chat.v1.IGetAttachmentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IAttachment,
      protos.google.chat.v1.IGetAttachmentRequest | undefined,
      {} | undefined,
    ]
  >;
  getAttachment(
    request: protos.google.chat.v1.IGetAttachmentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IAttachment,
      protos.google.chat.v1.IGetAttachmentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getAttachment(
    request: protos.google.chat.v1.IGetAttachmentRequest,
    callback: Callback<
      protos.google.chat.v1.IAttachment,
      protos.google.chat.v1.IGetAttachmentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getAttachment(
    request?: protos.google.chat.v1.IGetAttachmentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IAttachment,
          protos.google.chat.v1.IGetAttachmentRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IAttachment,
      protos.google.chat.v1.IGetAttachmentRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IAttachment,
      protos.google.chat.v1.IGetAttachmentRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAttachment(request, options, callback);
  }
  /**
   * Uploads an attachment. For an example, see
   * [Upload media as a file
   * attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
   * Requires user
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * You can upload attachments up to 200 MB. Certain file types aren't
   * supported. For details, see [File types blocked by Google
   * Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the Chat space in which the attachment is
   *   uploaded. Format "spaces/{space}".
   * @param {string} request.filename
   *   Required. The filename of the attachment, including the file extension.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.UploadAttachmentResponse|UploadAttachmentResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.upload_attachment.js</caption>
   * region_tag:chat_v1_generated_ChatService_UploadAttachment_async
   */
  uploadAttachment(
    request?: protos.google.chat.v1.IUploadAttachmentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IUploadAttachmentResponse,
      protos.google.chat.v1.IUploadAttachmentRequest | undefined,
      {} | undefined,
    ]
  >;
  uploadAttachment(
    request: protos.google.chat.v1.IUploadAttachmentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IUploadAttachmentResponse,
      protos.google.chat.v1.IUploadAttachmentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  uploadAttachment(
    request: protos.google.chat.v1.IUploadAttachmentRequest,
    callback: Callback<
      protos.google.chat.v1.IUploadAttachmentResponse,
      protos.google.chat.v1.IUploadAttachmentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  uploadAttachment(
    request?: protos.google.chat.v1.IUploadAttachmentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IUploadAttachmentResponse,
          protos.google.chat.v1.IUploadAttachmentRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IUploadAttachmentResponse,
      protos.google.chat.v1.IUploadAttachmentRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IUploadAttachmentResponse,
      protos.google.chat.v1.IUploadAttachmentRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.uploadAttachment(request, options, callback);
  }
  /**
   * Returns details about a space. For an example, see
   * [Get details about a
   * space](https://developers.google.com/workspace/chat/get-spaces).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the space, in the form "spaces/*".
   *
   *   Format: `spaces/{space}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Space|Space}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.get_space.js</caption>
   * region_tag:chat_v1_generated_ChatService_GetSpace_async
   */
  getSpace(
    request?: protos.google.chat.v1.IGetSpaceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IGetSpaceRequest | undefined,
      {} | undefined,
    ]
  >;
  getSpace(
    request: protos.google.chat.v1.IGetSpaceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IGetSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSpace(
    request: protos.google.chat.v1.IGetSpaceRequest,
    callback: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IGetSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSpace(
    request?: protos.google.chat.v1.IGetSpaceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.ISpace,
          protos.google.chat.v1.IGetSpaceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IGetSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IGetSpaceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSpace(request, options, callback);
  }
  /**
   * Creates a named space. Spaces grouped by topics aren't supported. For an
   * example, see [Create a
   * space](https://developers.google.com/workspace/chat/create-spaces).
   *
   *  If you receive the error message `ALREADY_EXISTS` when creating
   *  a space, try a different `displayName`. An existing space within
   *  the Google Workspace organization might already use this display name.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.chat.v1.Space} request.space
   *   Required. The `displayName` and `spaceType` fields must be populated.  Only
   *   `SpaceType.SPACE` is supported.
   *
   *   If you receive the error message `ALREADY_EXISTS` when creating a space,
   *   try a different `displayName`. An existing space within the Google
   *   Workspace organization might already use this display name.
   *
   *   The space `name` is assigned on the server so anything specified in this
   *   field will be ignored.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request.
   *   A random UUID is recommended.
   *   Specifying an existing request ID returns the space created with that ID
   *   instead of creating a new space.
   *   Specifying an existing request ID from the same Chat app with a different
   *   authenticated user returns an error.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Space|Space}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.create_space.js</caption>
   * region_tag:chat_v1_generated_ChatService_CreateSpace_async
   */
  createSpace(
    request?: protos.google.chat.v1.ICreateSpaceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.ICreateSpaceRequest | undefined,
      {} | undefined,
    ]
  >;
  createSpace(
    request: protos.google.chat.v1.ICreateSpaceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.ICreateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSpace(
    request: protos.google.chat.v1.ICreateSpaceRequest,
    callback: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.ICreateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSpace(
    request?: protos.google.chat.v1.ICreateSpaceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.ISpace,
          protos.google.chat.v1.ICreateSpaceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.ICreateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.ICreateSpaceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createSpace(request, options, callback);
  }
  /**
   * Creates a space and adds specified users to it. The calling user is
   * automatically added to the space, and shouldn't be specified as a
   * membership in the request. For an example, see
   * [Set up a space with initial
   * members](https://developers.google.com/workspace/chat/set-up-spaces).
   *
   * To specify the human members to add, add memberships with the appropriate
   * `membership.member.name`. To add a human user, use `users/{user}`, where
   * `{user}` can be the email address for the user. For users in the same
   * Workspace organization `{user}` can also be the `id` for the person from
   * the People API, or the `id` for the user in the Directory API. For example,
   * if the People API Person profile ID for `user@example.com` is `123456789`,
   * you can add the user to the space by setting the `membership.member.name`
   * to `users/user@example.com` or `users/123456789`.
   *
   * For a named space or group chat, if the caller blocks, or is blocked
   * by some members, or doesn't have permission to add some members, then
   * those members aren't added to the created space.
   *
   * To create a direct message (DM) between the calling user and another human
   * user, specify exactly one membership to represent the human user. If
   * one user blocks the other, the request fails and the DM isn't created.
   *
   * To create a DM between the calling user and the calling app, set
   * `Space.singleUserBotDm` to `true` and don't specify any memberships. You
   * can only use this method to set up a DM with the calling app. To add the
   * calling app as a member of a space or an existing DM between two human
   * users, see
   * [Invite or add a user or app to a
   * space](https://developers.google.com/workspace/chat/create-members).
   *
   * If a DM already exists between two users, even when one user blocks the
   * other at the time a request is made, then the existing DM is returned.
   *
   * Spaces with threaded replies aren't supported. If you receive the error
   * message `ALREADY_EXISTS` when setting up a space, try a different
   * `displayName`. An existing space within the Google Workspace organization
   * might already use this display name.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.chat.v1.Space} request.space
   *   Required. The `Space.spaceType` field is required.
   *
   *   To create a space, set `Space.spaceType` to `SPACE` and set
   *   `Space.displayName`. If you receive the error message `ALREADY_EXISTS` when
   *   setting up a space, try a different `displayName`. An existing space
   *   within the Google Workspace organization might already use this display
   *   name.
   *
   *   To create a group chat, set `Space.spaceType` to
   *   `GROUP_CHAT`. Don't set `Space.displayName`.
   *
   *   To create a 1:1 conversation between humans,
   *   set `Space.spaceType` to `DIRECT_MESSAGE` and set
   *   `Space.singleUserBotDm` to `false`. Don't set `Space.displayName` or
   *   `Space.spaceDetails`.
   *
   *   To create an 1:1 conversation between a human and the calling Chat app, set
   *   `Space.spaceType` to `DIRECT_MESSAGE` and
   *   `Space.singleUserBotDm` to `true`. Don't set `Space.displayName` or
   *   `Space.spaceDetails`.
   *
   *   If a `DIRECT_MESSAGE` space already exists, that space is returned instead
   *   of creating a new space.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request.
   *   A random UUID is recommended.
   *   Specifying an existing request ID returns the space created with that ID
   *   instead of creating a new space.
   *   Specifying an existing request ID from the same Chat app with a different
   *   authenticated user returns an error.
   * @param {number[]} [request.memberships]
   *   Optional. The Google Chat users to invite to join the space. Omit the
   *   calling user, as they are added automatically.
   *
   *   The set currently allows up to 20 memberships (in addition to the caller).
   *
   *   For human membership, the `Membership.member` field must contain a `user`
   *   with `name` populated (format: `users/{user}`) and `type` set to
   *   `User.Type.HUMAN`. You can only add human users when setting up a space
   *   (adding Chat apps is only supported for direct message setup with the
   *   calling app). You can also add members using the user's email as an alias
   *   for {user}. For example, the `user.name` can be `users/example@gmail.com`.
   *   To invite Gmail users or users from external Google Workspace domains,
   *   user's email must be used for `{user}`.
   *
   *   Optional when setting `Space.spaceType` to `SPACE`.
   *
   *   Required when setting `Space.spaceType` to `GROUP_CHAT`, along with at
   *   least two memberships.
   *
   *   Required when setting `Space.spaceType` to `DIRECT_MESSAGE` with a human
   *   user, along with exactly one membership.
   *
   *   Must be empty when creating a 1:1 conversation between a human and the
   *   calling Chat app (when setting `Space.spaceType` to
   *   `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Space|Space}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.set_up_space.js</caption>
   * region_tag:chat_v1_generated_ChatService_SetUpSpace_async
   */
  setUpSpace(
    request?: protos.google.chat.v1.ISetUpSpaceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.ISetUpSpaceRequest | undefined,
      {} | undefined,
    ]
  >;
  setUpSpace(
    request: protos.google.chat.v1.ISetUpSpaceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.ISetUpSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setUpSpace(
    request: protos.google.chat.v1.ISetUpSpaceRequest,
    callback: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.ISetUpSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setUpSpace(
    request?: protos.google.chat.v1.ISetUpSpaceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.ISpace,
          protos.google.chat.v1.ISetUpSpaceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.ISetUpSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.ISetUpSpaceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.setUpSpace(request, options, callback);
  }
  /**
   * Updates a space. For an example, see
   * [Update a
   * space](https://developers.google.com/workspace/chat/update-spaces).
   *
   * If you're updating the `displayName` field and receive the error message
   * `ALREADY_EXISTS`, try a different display name.. An existing space within
   * the Google Workspace organization might already use this display name.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.chat.v1.Space} request.space
   *   Required. Space with fields to be updated. `Space.name` must be
   *   populated in the form of `spaces/{space}`. Only fields
   *   specified by `update_mask` are updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The updated field paths, comma separated if there are
   *   multiple.
   *
   *   Currently supported field paths:
   *
   *   - `display_name` (Only supports changing the display name of a space with
   *   the `SPACE` type, or when also including the `space_type` mask to change a
   *   `GROUP_CHAT` space type to `SPACE`. Trying to update the display name of a
   *   `GROUP_CHAT` or a `DIRECT_MESSAGE` space results in an invalid argument
   *   error. If you receive the error message `ALREADY_EXISTS` when updating the
   *   `displayName`, try a different `displayName`. An existing space within the
   *   Google Workspace organization might already use this display name.)
   *
   *   - `space_type` (Only supports changing a `GROUP_CHAT` space type to
   *   `SPACE`. Include `display_name` together
   *   with `space_type` in the update mask and ensure that the specified space
   *   has a non-empty display name and the `SPACE` space type. Including the
   *   `space_type` mask and the `SPACE` type in the specified space when updating
   *   the display name is optional if the existing space already has the `SPACE`
   *   type. Trying to update the space type in other ways results in an invalid
   *   argument error).
   *
   *   - `space_details`
   *
   *   - `space_history_state` (Supports [turning history on or off for the
   *   space](https://support.google.com/chat/answer/7664687) if [the organization
   *   allows users to change their history
   *   setting](https://support.google.com/a/answer/7664184).
   *   Warning: mutually exclusive with all other field paths.)
   *
   *   - Developer Preview: `access_settings.audience` (Supports changing the
   *   [access setting](https://support.google.com/chat/answer/11971020) of a
   *   space. If no audience is specified in the access setting, the space's
   *   access setting is updated to restricted. Warning: mutually exclusive with
   *   all other field paths.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Space|Space}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.update_space.js</caption>
   * region_tag:chat_v1_generated_ChatService_UpdateSpace_async
   */
  updateSpace(
    request?: protos.google.chat.v1.IUpdateSpaceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IUpdateSpaceRequest | undefined,
      {} | undefined,
    ]
  >;
  updateSpace(
    request: protos.google.chat.v1.IUpdateSpaceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IUpdateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSpace(
    request: protos.google.chat.v1.IUpdateSpaceRequest,
    callback: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IUpdateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSpace(
    request?: protos.google.chat.v1.IUpdateSpaceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.ISpace,
          protos.google.chat.v1.IUpdateSpaceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IUpdateSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IUpdateSpaceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'space.name': request.space!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateSpace(request, options, callback);
  }
  /**
   * Deletes a named space. Always performs a cascading delete, which means
   * that the space's child resources—like messages posted in the space and
   * memberships in the space—are also deleted. For an example, see
   * [Delete a
   * space](https://developers.google.com/workspace/chat/delete-spaces).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
   * from a user who has permission to delete the space.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the space to delete.
   *
   *   Format: `spaces/{space}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.delete_space.js</caption>
   * region_tag:chat_v1_generated_ChatService_DeleteSpace_async
   */
  deleteSpace(
    request?: protos.google.chat.v1.IDeleteSpaceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteSpaceRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteSpace(
    request: protos.google.chat.v1.IDeleteSpaceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSpace(
    request: protos.google.chat.v1.IDeleteSpaceRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSpace(
    request?: protos.google.chat.v1.IDeleteSpaceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.chat.v1.IDeleteSpaceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteSpaceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteSpace(request, options, callback);
  }
  /**
   * Completes the
   * [import process](https://developers.google.com/workspace/chat/import-data)
   * for the specified space and makes it visible to users.
   * Requires app authentication and domain-wide delegation. For more
   * information, see [Authorize Google Chat apps to import
   * data](https://developers.google.com/workspace/chat/authorize-import).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the import mode space.
   *
   *   Format: `spaces/{space}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.CompleteImportSpaceResponse|CompleteImportSpaceResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.complete_import_space.js</caption>
   * region_tag:chat_v1_generated_ChatService_CompleteImportSpace_async
   */
  completeImportSpace(
    request?: protos.google.chat.v1.ICompleteImportSpaceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.ICompleteImportSpaceResponse,
      protos.google.chat.v1.ICompleteImportSpaceRequest | undefined,
      {} | undefined,
    ]
  >;
  completeImportSpace(
    request: protos.google.chat.v1.ICompleteImportSpaceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.ICompleteImportSpaceResponse,
      protos.google.chat.v1.ICompleteImportSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  completeImportSpace(
    request: protos.google.chat.v1.ICompleteImportSpaceRequest,
    callback: Callback<
      protos.google.chat.v1.ICompleteImportSpaceResponse,
      protos.google.chat.v1.ICompleteImportSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  completeImportSpace(
    request?: protos.google.chat.v1.ICompleteImportSpaceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.ICompleteImportSpaceResponse,
          protos.google.chat.v1.ICompleteImportSpaceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.ICompleteImportSpaceResponse,
      protos.google.chat.v1.ICompleteImportSpaceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.ICompleteImportSpaceResponse,
      protos.google.chat.v1.ICompleteImportSpaceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.completeImportSpace(request, options, callback);
  }
  /**
   * Returns the existing direct message with the specified user. If no direct
   * message space is found, returns a `404 NOT_FOUND` error. For an example,
   * see
   * [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
   *
   * With [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * returns the direct message space between the specified user and the
   * authenticated user.
   *
   * With [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
   * returns the direct message space between the specified user and the calling
   * Chat app.
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
   * or [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the user to find direct message with.
   *
   *   Format: `users/{user}`, where `{user}` is either the `id` for the
   *   [person](https://developers.google.com/people/api/rest/v1/people) from the
   *   People API, or the `id` for the
   *   [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users)
   *   in the Directory API. For example, if the People API profile ID is
   *   `123456789`, you can find a direct message with that person by using
   *   `users/123456789` as the `name`. When [authenticated as a
   *   user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   *   you can use the email as an alias for `{user}`. For example,
   *   `users/example@gmail.com` where `example@gmail.com` is the email of the
   *   Google Chat user.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Space|Space}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.find_direct_message.js</caption>
   * region_tag:chat_v1_generated_ChatService_FindDirectMessage_async
   */
  findDirectMessage(
    request?: protos.google.chat.v1.IFindDirectMessageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IFindDirectMessageRequest | undefined,
      {} | undefined,
    ]
  >;
  findDirectMessage(
    request: protos.google.chat.v1.IFindDirectMessageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IFindDirectMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  findDirectMessage(
    request: protos.google.chat.v1.IFindDirectMessageRequest,
    callback: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IFindDirectMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  findDirectMessage(
    request?: protos.google.chat.v1.IFindDirectMessageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.ISpace,
          protos.google.chat.v1.IFindDirectMessageRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IFindDirectMessageRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.ISpace,
      protos.google.chat.v1.IFindDirectMessageRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.findDirectMessage(request, options, callback);
  }
  /**
   * Creates a human membership or app membership for the calling app. Creating
   * memberships for other apps isn't supported. For an example, see
   * [Invite or add a user or a Google Chat app to a
   * space](https://developers.google.com/workspace/chat/create-members).
   * When creating a membership, if the specified member has their auto-accept
   * policy turned off, then they're invited, and must accept the space
   * invitation before joining. Otherwise, creating a membership adds the member
   * directly to the specified space. Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * To specify the member to add, set the `membership.member.name` for the
   * human or app member.
   *
   * - To add the calling app to a space or a direct message between two human
   *   users, use `users/app`. Unable to add other
   *   apps to the space.
   *
   * - To add a human user, use `users/{user}`, where `{user}` can be the email
   * address for the user. For users in the same Workspace organization `{user}`
   * can also be the `id` for the person from the People API, or the `id` for
   * the user in the Directory API. For example, if the People API Person
   * profile ID for `user@example.com` is `123456789`, you can add the user to
   * the space by setting the `membership.member.name` to
   * `users/user@example.com` or `users/123456789`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the space for which to create the
   *   membership.
   *
   *   Format: spaces/{space}
   * @param {google.chat.v1.Membership} request.membership
   *   Required. The membership relation to create.
   *   The `memberType` field must contain a user with the `user.name` and
   *   `user.type` fields populated. The server will assign a resource name
   *   and overwrite anything specified.
   *   When a Chat app creates a membership relation for a human user, it must use
   *   the `chat.memberships` scope, set `user.type` to `HUMAN`, and set
   *   `user.name` with format `users/{user}`, where `{user}` can be the email
   *   address for the user. For users in the same Workspace organization `{user}`
   *   can also be the `id` of the
   *   [person](https://developers.google.com/people/api/rest/v1/people) from the
   *   People API, or the `id` for the user in the Directory API. For example, if
   *   the People API Person profile ID for `user@example.com` is `123456789`, you
   *   can add the user to the space by setting the `membership.member.name` to
   *   `users/user@example.com` or `users/123456789`. When a Chat app creates a
   *   membership relation for itself, it must use the `chat.memberships.app`
   *   scope, set `user.type` to `BOT`, and set `user.name` to `users/app`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Membership|Membership}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.create_membership.js</caption>
   * region_tag:chat_v1_generated_ChatService_CreateMembership_async
   */
  createMembership(
    request?: protos.google.chat.v1.ICreateMembershipRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.ICreateMembershipRequest | undefined,
      {} | undefined,
    ]
  >;
  createMembership(
    request: protos.google.chat.v1.ICreateMembershipRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.ICreateMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMembership(
    request: protos.google.chat.v1.ICreateMembershipRequest,
    callback: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.ICreateMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMembership(
    request?: protos.google.chat.v1.ICreateMembershipRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IMembership,
          protos.google.chat.v1.ICreateMembershipRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.ICreateMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.ICreateMembershipRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createMembership(request, options, callback);
  }
  /**
   * Updates a membership. For an example, see [Update a user's membership in
   * a space](https://developers.google.com/workspace/chat/update-members).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.chat.v1.Membership} request.membership
   *   Required. The membership to update. Only fields specified by `update_mask`
   *   are updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The field paths to update. Separate multiple values with commas
   *   or use `*` to update all field paths.
   *
   *   Currently supported field paths:
   *
   *   - `role`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Membership|Membership}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.update_membership.js</caption>
   * region_tag:chat_v1_generated_ChatService_UpdateMembership_async
   */
  updateMembership(
    request?: protos.google.chat.v1.IUpdateMembershipRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IUpdateMembershipRequest | undefined,
      {} | undefined,
    ]
  >;
  updateMembership(
    request: protos.google.chat.v1.IUpdateMembershipRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IUpdateMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateMembership(
    request: protos.google.chat.v1.IUpdateMembershipRequest,
    callback: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IUpdateMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateMembership(
    request?: protos.google.chat.v1.IUpdateMembershipRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IMembership,
          protos.google.chat.v1.IUpdateMembershipRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IUpdateMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IUpdateMembershipRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'membership.name': request.membership!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateMembership(request, options, callback);
  }
  /**
   * Deletes a membership. For an example, see
   * [Remove a user or a Google Chat app from a
   * space](https://developers.google.com/workspace/chat/delete-members).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the membership to delete. Chat apps can delete
   *   human users' or their own memberships. Chat apps can't delete other apps'
   *   memberships.
   *
   *   When deleting a human membership, requires the `chat.memberships` scope and
   *   `spaces/{space}/members/{member}` format. You can use the email as an
   *   alias for `{member}`. For example,
   *   `spaces/{space}/members/example@gmail.com` where `example@gmail.com` is the
   *   email of the Google Chat user.
   *
   *   When deleting an app membership, requires the `chat.memberships.app` scope
   *   and `spaces/{space}/members/app` format.
   *
   *   Format: `spaces/{space}/members/{member}` or `spaces/{space}/members/app`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Membership|Membership}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.delete_membership.js</caption>
   * region_tag:chat_v1_generated_ChatService_DeleteMembership_async
   */
  deleteMembership(
    request?: protos.google.chat.v1.IDeleteMembershipRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IDeleteMembershipRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteMembership(
    request: protos.google.chat.v1.IDeleteMembershipRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IDeleteMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMembership(
    request: protos.google.chat.v1.IDeleteMembershipRequest,
    callback: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IDeleteMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMembership(
    request?: protos.google.chat.v1.IDeleteMembershipRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IMembership,
          protos.google.chat.v1.IDeleteMembershipRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IDeleteMembershipRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IMembership,
      protos.google.chat.v1.IDeleteMembershipRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteMembership(request, options, callback);
  }
  /**
   * Creates a reaction and adds it to a message. Only unicode emojis are
   * supported. For an example, see
   * [Add a reaction to a
   * message](https://developers.google.com/workspace/chat/create-reactions).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The message where the reaction is created.
   *
   *   Format: `spaces/{space}/messages/{message}`
   * @param {google.chat.v1.Reaction} request.reaction
   *   Required. The reaction to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.Reaction|Reaction}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.create_reaction.js</caption>
   * region_tag:chat_v1_generated_ChatService_CreateReaction_async
   */
  createReaction(
    request?: protos.google.chat.v1.ICreateReactionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IReaction,
      protos.google.chat.v1.ICreateReactionRequest | undefined,
      {} | undefined,
    ]
  >;
  createReaction(
    request: protos.google.chat.v1.ICreateReactionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IReaction,
      protos.google.chat.v1.ICreateReactionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReaction(
    request: protos.google.chat.v1.ICreateReactionRequest,
    callback: Callback<
      protos.google.chat.v1.IReaction,
      protos.google.chat.v1.ICreateReactionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReaction(
    request?: protos.google.chat.v1.ICreateReactionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IReaction,
          protos.google.chat.v1.ICreateReactionRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IReaction,
      protos.google.chat.v1.ICreateReactionRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IReaction,
      protos.google.chat.v1.ICreateReactionRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createReaction(request, options, callback);
  }
  /**
   * Deletes a reaction to a message. Only unicode emojis are supported.
   * For an example, see
   * [Delete a
   * reaction](https://developers.google.com/workspace/chat/delete-reactions).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the reaction to delete.
   *
   *   Format: `spaces/{space}/messages/{message}/reactions/{reaction}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.delete_reaction.js</caption>
   * region_tag:chat_v1_generated_ChatService_DeleteReaction_async
   */
  deleteReaction(
    request?: protos.google.chat.v1.IDeleteReactionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteReactionRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteReaction(
    request: protos.google.chat.v1.IDeleteReactionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteReactionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteReaction(
    request: protos.google.chat.v1.IDeleteReactionRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteReactionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteReaction(
    request?: protos.google.chat.v1.IDeleteReactionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.chat.v1.IDeleteReactionRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteReactionRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.chat.v1.IDeleteReactionRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteReaction(request, options, callback);
  }
  /**
   * Returns details about a user's read state within a space, used to identify
   * read and unread messages. For an example, see [Get details about a user's
   * space read
   * state](https://developers.google.com/workspace/chat/get-space-read-state).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the space read state to retrieve.
   *
   *   Only supports getting read state for the calling user.
   *
   *   To refer to the calling user, set one of the following:
   *
   *   - The `me` alias. For example, `users/me/spaces/{space}/spaceReadState`.
   *
   *   - Their Workspace email address. For example,
   *   `users/user@example.com/spaces/{space}/spaceReadState`.
   *
   *   - Their user id. For example,
   *   `users/123456789/spaces/{space}/spaceReadState`.
   *
   *   Format: users/{user}/spaces/{space}/spaceReadState
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.SpaceReadState|SpaceReadState}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.get_space_read_state.js</caption>
   * region_tag:chat_v1_generated_ChatService_GetSpaceReadState_async
   */
  getSpaceReadState(
    request?: protos.google.chat.v1.IGetSpaceReadStateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.ISpaceReadState,
      protos.google.chat.v1.IGetSpaceReadStateRequest | undefined,
      {} | undefined,
    ]
  >;
  getSpaceReadState(
    request: protos.google.chat.v1.IGetSpaceReadStateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.ISpaceReadState,
      protos.google.chat.v1.IGetSpaceReadStateRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSpaceReadState(
    request: protos.google.chat.v1.IGetSpaceReadStateRequest,
    callback: Callback<
      protos.google.chat.v1.ISpaceReadState,
      protos.google.chat.v1.IGetSpaceReadStateRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSpaceReadState(
    request?: protos.google.chat.v1.IGetSpaceReadStateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.ISpaceReadState,
          protos.google.chat.v1.IGetSpaceReadStateRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.ISpaceReadState,
      protos.google.chat.v1.IGetSpaceReadStateRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.ISpaceReadState,
      protos.google.chat.v1.IGetSpaceReadStateRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSpaceReadState(request, options, callback);
  }
  /**
   * Updates a user's read state within a space, used to identify read and
   * unread messages. For an example, see [Update a user's space read
   * state](https://developers.google.com/workspace/chat/update-space-read-state).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.chat.v1.SpaceReadState} request.spaceReadState
   *   Required. The space read state and fields to update.
   *
   *   Only supports updating read state for the calling user.
   *
   *   To refer to the calling user, set one of the following:
   *
   *   - The `me` alias. For example, `users/me/spaces/{space}/spaceReadState`.
   *
   *   - Their Workspace email address. For example,
   *   `users/user@example.com/spaces/{space}/spaceReadState`.
   *
   *   - Their user id. For example,
   *   `users/123456789/spaces/{space}/spaceReadState`.
   *
   *   Format: users/{user}/spaces/{space}/spaceReadState
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The field paths to update. Currently supported field paths:
   *
   *   - `last_read_time`
   *
   *   When the `last_read_time` is before the latest message create time, the
   *   space appears as unread in the UI.
   *
   *   To mark the space as read, set `last_read_time` to any value later (larger)
   *   than the latest message create time. The `last_read_time` is coerced to
   *   match the latest message create time. Note that the space read state only
   *   affects the read state of messages that are visible in the space's
   *   top-level conversation. Replies in threads are unaffected by this
   *   timestamp, and instead rely on the thread read state.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.SpaceReadState|SpaceReadState}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.update_space_read_state.js</caption>
   * region_tag:chat_v1_generated_ChatService_UpdateSpaceReadState_async
   */
  updateSpaceReadState(
    request?: protos.google.chat.v1.IUpdateSpaceReadStateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.ISpaceReadState,
      protos.google.chat.v1.IUpdateSpaceReadStateRequest | undefined,
      {} | undefined,
    ]
  >;
  updateSpaceReadState(
    request: protos.google.chat.v1.IUpdateSpaceReadStateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.ISpaceReadState,
      protos.google.chat.v1.IUpdateSpaceReadStateRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSpaceReadState(
    request: protos.google.chat.v1.IUpdateSpaceReadStateRequest,
    callback: Callback<
      protos.google.chat.v1.ISpaceReadState,
      protos.google.chat.v1.IUpdateSpaceReadStateRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSpaceReadState(
    request?: protos.google.chat.v1.IUpdateSpaceReadStateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.ISpaceReadState,
          protos.google.chat.v1.IUpdateSpaceReadStateRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.ISpaceReadState,
      protos.google.chat.v1.IUpdateSpaceReadStateRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.ISpaceReadState,
      protos.google.chat.v1.IUpdateSpaceReadStateRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'space_read_state.name': request.spaceReadState!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateSpaceReadState(request, options, callback);
  }
  /**
   * Returns details about a user's read state within a thread, used to identify
   * read and unread messages. For an example, see [Get details about a user's
   * thread read
   * state](https://developers.google.com/workspace/chat/get-thread-read-state).
   *
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the thread read state to retrieve.
   *
   *   Only supports getting read state for the calling user.
   *
   *   To refer to the calling user, set one of the following:
   *
   *   - The `me` alias. For example,
   *   `users/me/spaces/{space}/threads/{thread}/threadReadState`.
   *
   *   - Their Workspace email address. For example,
   *   `users/user@example.com/spaces/{space}/threads/{thread}/threadReadState`.
   *
   *   - Their user id. For example,
   *   `users/123456789/spaces/{space}/threads/{thread}/threadReadState`.
   *
   *   Format: users/{user}/spaces/{space}/threads/{thread}/threadReadState
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.chat.v1.ThreadReadState|ThreadReadState}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.get_thread_read_state.js</caption>
   * region_tag:chat_v1_generated_ChatService_GetThreadReadState_async
   */
  getThreadReadState(
    request?: protos.google.chat.v1.IGetThreadReadStateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IThreadReadState,
      protos.google.chat.v1.IGetThreadReadStateRequest | undefined,
      {} | undefined,
    ]
  >;
  getThreadReadState(
    request: protos.google.chat.v1.IGetThreadReadStateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.chat.v1.IThreadReadState,
      protos.google.chat.v1.IGetThreadReadStateRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getThreadReadState(
    request: protos.google.chat.v1.IGetThreadReadStateRequest,
    callback: Callback<
      protos.google.chat.v1.IThreadReadState,
      protos.google.chat.v1.IGetThreadReadStateRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getThreadReadState(
    request?: protos.google.chat.v1.IGetThreadReadStateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.chat.v1.IThreadReadState,
          protos.google.chat.v1.IGetThreadReadStateRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.chat.v1.IThreadReadState,
      protos.google.chat.v1.IGetThreadReadStateRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.chat.v1.IThreadReadState,
      protos.google.chat.v1.IGetThreadReadStateRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getThreadReadState(request, options, callback);
  }

  /**
   * Lists messages in a space that the caller is a member of, including
   * messages from blocked members and spaces. For an example, see
   * [List messages](/chat/api/guides/v1/messages/list).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the space to list messages from.
   *
   *   Format: `spaces/{space}`
   * @param {number} request.pageSize
   *   The maximum number of messages returned. The service might return fewer
   *   messages than this value.
   *
   *   If unspecified, at most 25 are returned.
   *
   *   The maximum value is 1000. If you use a value more than 1000, it's
   *   automatically changed to 1000.
   *
   *   Negative values return an `INVALID_ARGUMENT` error.
   * @param {string} request.pageToken
   *   Optional, if resuming from a previous query.
   *
   *   A page token received from a previous list messages call. Provide this
   *   parameter to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided should match the call that
   *   provided the page token. Passing different values to the other parameters
   *   might lead to unexpected results.
   * @param {string} request.filter
   *   A query filter.
   *
   *   You can filter messages by date (`create_time`) and thread (`thread.name`).
   *
   *   To filter messages by the date they were created, specify the `create_time`
   *   with a timestamp in [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339)
   *   format and double quotation marks. For example,
   *   `"2023-04-21T11:30:00-04:00"`. You can use the greater than operator `>` to
   *   list messages that were created after a timestamp, or the less than
   *   operator `<` to list messages that were created before a timestamp. To
   *   filter messages within a time interval, use the `AND` operator between two
   *   timestamps.
   *
   *   To filter by thread, specify the `thread.name`, formatted as
   *   `spaces/{space}/threads/{thread}`. You can only specify one
   *   `thread.name` per query.
   *
   *   To filter by both thread and date, use the `AND` operator in your query.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   create_time > "2012-04-21T11:30:00-04:00"
   *
   *   create_time > "2012-04-21T11:30:00-04:00" AND
   *     thread.name = spaces/AAAAAAAAAAA/threads/123
   *
   *   create_time > "2012-04-21T11:30:00+00:00" AND
   *
   *   create_time < "2013-01-01T00:00:00+00:00" AND
   *     thread.name = spaces/AAAAAAAAAAA/threads/123
   *
   *   thread.name = spaces/AAAAAAAAAAA/threads/123
   *   ```
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {string} request.orderBy
   *   Optional, if resuming from a previous query.
   *
   *   How the list of messages is ordered. Specify a value to order by an
   *   ordering operation. Valid ordering operation values are as follows:
   *
   *   - `ASC` for ascending.
   *
   *   - `DESC` for descending.
   *
   *   The default ordering is `create_time ASC`.
   * @param {boolean} request.showDeleted
   *   Whether to include deleted messages. Deleted messages include deleted time
   *   and metadata about their deletion, but message content is unavailable.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.chat.v1.Message|Message}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listMessagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMessages(
    request?: protos.google.chat.v1.IListMessagesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IMessage[],
      protos.google.chat.v1.IListMessagesRequest | null,
      protos.google.chat.v1.IListMessagesResponse,
    ]
  >;
  listMessages(
    request: protos.google.chat.v1.IListMessagesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.chat.v1.IListMessagesRequest,
      protos.google.chat.v1.IListMessagesResponse | null | undefined,
      protos.google.chat.v1.IMessage
    >
  ): void;
  listMessages(
    request: protos.google.chat.v1.IListMessagesRequest,
    callback: PaginationCallback<
      protos.google.chat.v1.IListMessagesRequest,
      protos.google.chat.v1.IListMessagesResponse | null | undefined,
      protos.google.chat.v1.IMessage
    >
  ): void;
  listMessages(
    request?: protos.google.chat.v1.IListMessagesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.chat.v1.IListMessagesRequest,
          protos.google.chat.v1.IListMessagesResponse | null | undefined,
          protos.google.chat.v1.IMessage
        >,
    callback?: PaginationCallback<
      protos.google.chat.v1.IListMessagesRequest,
      protos.google.chat.v1.IListMessagesResponse | null | undefined,
      protos.google.chat.v1.IMessage
    >
  ): Promise<
    [
      protos.google.chat.v1.IMessage[],
      protos.google.chat.v1.IListMessagesRequest | null,
      protos.google.chat.v1.IListMessagesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMessages(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the space to list messages from.
   *
   *   Format: `spaces/{space}`
   * @param {number} request.pageSize
   *   The maximum number of messages returned. The service might return fewer
   *   messages than this value.
   *
   *   If unspecified, at most 25 are returned.
   *
   *   The maximum value is 1000. If you use a value more than 1000, it's
   *   automatically changed to 1000.
   *
   *   Negative values return an `INVALID_ARGUMENT` error.
   * @param {string} request.pageToken
   *   Optional, if resuming from a previous query.
   *
   *   A page token received from a previous list messages call. Provide this
   *   parameter to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided should match the call that
   *   provided the page token. Passing different values to the other parameters
   *   might lead to unexpected results.
   * @param {string} request.filter
   *   A query filter.
   *
   *   You can filter messages by date (`create_time`) and thread (`thread.name`).
   *
   *   To filter messages by the date they were created, specify the `create_time`
   *   with a timestamp in [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339)
   *   format and double quotation marks. For example,
   *   `"2023-04-21T11:30:00-04:00"`. You can use the greater than operator `>` to
   *   list messages that were created after a timestamp, or the less than
   *   operator `<` to list messages that were created before a timestamp. To
   *   filter messages within a time interval, use the `AND` operator between two
   *   timestamps.
   *
   *   To filter by thread, specify the `thread.name`, formatted as
   *   `spaces/{space}/threads/{thread}`. You can only specify one
   *   `thread.name` per query.
   *
   *   To filter by both thread and date, use the `AND` operator in your query.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   create_time > "2012-04-21T11:30:00-04:00"
   *
   *   create_time > "2012-04-21T11:30:00-04:00" AND
   *     thread.name = spaces/AAAAAAAAAAA/threads/123
   *
   *   create_time > "2012-04-21T11:30:00+00:00" AND
   *
   *   create_time < "2013-01-01T00:00:00+00:00" AND
   *     thread.name = spaces/AAAAAAAAAAA/threads/123
   *
   *   thread.name = spaces/AAAAAAAAAAA/threads/123
   *   ```
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {string} request.orderBy
   *   Optional, if resuming from a previous query.
   *
   *   How the list of messages is ordered. Specify a value to order by an
   *   ordering operation. Valid ordering operation values are as follows:
   *
   *   - `ASC` for ascending.
   *
   *   - `DESC` for descending.
   *
   *   The default ordering is `create_time ASC`.
   * @param {boolean} request.showDeleted
   *   Whether to include deleted messages. Deleted messages include deleted time
   *   and metadata about their deletion, but message content is unavailable.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.chat.v1.Message|Message} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listMessagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMessagesStream(
    request?: protos.google.chat.v1.IListMessagesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMessages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMessages.createStream(
      this.innerApiCalls.listMessages as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listMessages`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the space to list messages from.
   *
   *   Format: `spaces/{space}`
   * @param {number} request.pageSize
   *   The maximum number of messages returned. The service might return fewer
   *   messages than this value.
   *
   *   If unspecified, at most 25 are returned.
   *
   *   The maximum value is 1000. If you use a value more than 1000, it's
   *   automatically changed to 1000.
   *
   *   Negative values return an `INVALID_ARGUMENT` error.
   * @param {string} request.pageToken
   *   Optional, if resuming from a previous query.
   *
   *   A page token received from a previous list messages call. Provide this
   *   parameter to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided should match the call that
   *   provided the page token. Passing different values to the other parameters
   *   might lead to unexpected results.
   * @param {string} request.filter
   *   A query filter.
   *
   *   You can filter messages by date (`create_time`) and thread (`thread.name`).
   *
   *   To filter messages by the date they were created, specify the `create_time`
   *   with a timestamp in [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339)
   *   format and double quotation marks. For example,
   *   `"2023-04-21T11:30:00-04:00"`. You can use the greater than operator `>` to
   *   list messages that were created after a timestamp, or the less than
   *   operator `<` to list messages that were created before a timestamp. To
   *   filter messages within a time interval, use the `AND` operator between two
   *   timestamps.
   *
   *   To filter by thread, specify the `thread.name`, formatted as
   *   `spaces/{space}/threads/{thread}`. You can only specify one
   *   `thread.name` per query.
   *
   *   To filter by both thread and date, use the `AND` operator in your query.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   create_time > "2012-04-21T11:30:00-04:00"
   *
   *   create_time > "2012-04-21T11:30:00-04:00" AND
   *     thread.name = spaces/AAAAAAAAAAA/threads/123
   *
   *   create_time > "2012-04-21T11:30:00+00:00" AND
   *
   *   create_time < "2013-01-01T00:00:00+00:00" AND
   *     thread.name = spaces/AAAAAAAAAAA/threads/123
   *
   *   thread.name = spaces/AAAAAAAAAAA/threads/123
   *   ```
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {string} request.orderBy
   *   Optional, if resuming from a previous query.
   *
   *   How the list of messages is ordered. Specify a value to order by an
   *   ordering operation. Valid ordering operation values are as follows:
   *
   *   - `ASC` for ascending.
   *
   *   - `DESC` for descending.
   *
   *   The default ordering is `create_time ASC`.
   * @param {boolean} request.showDeleted
   *   Whether to include deleted messages. Deleted messages include deleted time
   *   and metadata about their deletion, but message content is unavailable.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.chat.v1.Message|Message}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.list_messages.js</caption>
   * region_tag:chat_v1_generated_ChatService_ListMessages_async
   */
  listMessagesAsync(
    request?: protos.google.chat.v1.IListMessagesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.chat.v1.IMessage> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMessages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMessages.asyncIterate(
      this.innerApiCalls['listMessages'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.chat.v1.IMessage>;
  }
  /**
   * Lists memberships in a space. For an example, see [List users and Google
   * Chat apps in a
   * space](https://developers.google.com/workspace/chat/list-members). Listing
   * memberships with [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * lists memberships in spaces that the Chat app has
   * access to, but excludes Chat app memberships,
   * including its own. Listing memberships with
   * [User
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
   * lists memberships in spaces that the authenticated user has access to.
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the space for which to fetch a membership
   *   list.
   *
   *   Format: spaces/{space}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of memberships to return. The service might
   *   return fewer than this value.
   *
   *   If unspecified, at most 100 memberships are returned.
   *
   *   The maximum value is 1000. If you use a value more than 1000, it's
   *   automatically changed to 1000.
   *
   *   Negative values return an `INVALID_ARGUMENT` error.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous call to list memberships.
   *   Provide this parameter to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided should match the call that
   *   provided the page token. Passing different values to the other parameters
   *   might lead to unexpected results.
   * @param {string} [request.filter]
   *   Optional. A query filter.
   *
   *   You can filter memberships by a member's role
   *   ([`role`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.members#membershiprole))
   *   and type
   *   ([`member.type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/User#type)).
   *
   *   To filter by role, set `role` to `ROLE_MEMBER` or `ROLE_MANAGER`.
   *
   *   To filter by type, set `member.type` to `HUMAN` or `BOT`.
   *
   *   To filter by both role and type, use the `AND` operator. To filter by
   *   either role or type, use the `OR` operator.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   role = "ROLE_MANAGER" OR role = "ROLE_MEMBER"
   *   member.type = "HUMAN" AND role = "ROLE_MANAGER"
   *   ```
   *
   *   The following queries are invalid:
   *
   *   ```
   *   member.type = "HUMAN" AND member.type = "BOT"
   *   role = "ROLE_MANAGER" AND role = "ROLE_MEMBER"
   *   ```
   *
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {boolean} [request.showGroups]
   *   Optional. When `true`, also returns memberships associated with a
   *   {@link protos.google.chat.v1.Membership.group_member|Google Group}, in
   *   addition to other types of memberships. If a
   *   {@link protos.google.chat.v1.ListMembershipsRequest.filter|filter} is set,
   *   {@link protos.google.chat.v1.Membership.group_member|Google Group}
   *   memberships that don't match the filter criteria aren't returned.
   * @param {boolean} [request.showInvited]
   *   Optional. When `true`, also returns memberships associated with
   *   {@link protos.google.chat.v1.Membership.MembershipState.INVITED|invited} members, in
   *   addition to other types of memberships. If a
   *   filter is set,
   *   {@link protos.google.chat.v1.Membership.MembershipState.INVITED|invited} memberships
   *   that don't match the filter criteria aren't returned.
   *
   *   Currently requires [user
   *   authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.chat.v1.Membership|Membership}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listMembershipsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMemberships(
    request?: protos.google.chat.v1.IListMembershipsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IMembership[],
      protos.google.chat.v1.IListMembershipsRequest | null,
      protos.google.chat.v1.IListMembershipsResponse,
    ]
  >;
  listMemberships(
    request: protos.google.chat.v1.IListMembershipsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.chat.v1.IListMembershipsRequest,
      protos.google.chat.v1.IListMembershipsResponse | null | undefined,
      protos.google.chat.v1.IMembership
    >
  ): void;
  listMemberships(
    request: protos.google.chat.v1.IListMembershipsRequest,
    callback: PaginationCallback<
      protos.google.chat.v1.IListMembershipsRequest,
      protos.google.chat.v1.IListMembershipsResponse | null | undefined,
      protos.google.chat.v1.IMembership
    >
  ): void;
  listMemberships(
    request?: protos.google.chat.v1.IListMembershipsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.chat.v1.IListMembershipsRequest,
          protos.google.chat.v1.IListMembershipsResponse | null | undefined,
          protos.google.chat.v1.IMembership
        >,
    callback?: PaginationCallback<
      protos.google.chat.v1.IListMembershipsRequest,
      protos.google.chat.v1.IListMembershipsResponse | null | undefined,
      protos.google.chat.v1.IMembership
    >
  ): Promise<
    [
      protos.google.chat.v1.IMembership[],
      protos.google.chat.v1.IListMembershipsRequest | null,
      protos.google.chat.v1.IListMembershipsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMemberships(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the space for which to fetch a membership
   *   list.
   *
   *   Format: spaces/{space}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of memberships to return. The service might
   *   return fewer than this value.
   *
   *   If unspecified, at most 100 memberships are returned.
   *
   *   The maximum value is 1000. If you use a value more than 1000, it's
   *   automatically changed to 1000.
   *
   *   Negative values return an `INVALID_ARGUMENT` error.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous call to list memberships.
   *   Provide this parameter to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided should match the call that
   *   provided the page token. Passing different values to the other parameters
   *   might lead to unexpected results.
   * @param {string} [request.filter]
   *   Optional. A query filter.
   *
   *   You can filter memberships by a member's role
   *   ([`role`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.members#membershiprole))
   *   and type
   *   ([`member.type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/User#type)).
   *
   *   To filter by role, set `role` to `ROLE_MEMBER` or `ROLE_MANAGER`.
   *
   *   To filter by type, set `member.type` to `HUMAN` or `BOT`.
   *
   *   To filter by both role and type, use the `AND` operator. To filter by
   *   either role or type, use the `OR` operator.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   role = "ROLE_MANAGER" OR role = "ROLE_MEMBER"
   *   member.type = "HUMAN" AND role = "ROLE_MANAGER"
   *   ```
   *
   *   The following queries are invalid:
   *
   *   ```
   *   member.type = "HUMAN" AND member.type = "BOT"
   *   role = "ROLE_MANAGER" AND role = "ROLE_MEMBER"
   *   ```
   *
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {boolean} [request.showGroups]
   *   Optional. When `true`, also returns memberships associated with a
   *   {@link protos.google.chat.v1.Membership.group_member|Google Group}, in
   *   addition to other types of memberships. If a
   *   {@link protos.google.chat.v1.ListMembershipsRequest.filter|filter} is set,
   *   {@link protos.google.chat.v1.Membership.group_member|Google Group}
   *   memberships that don't match the filter criteria aren't returned.
   * @param {boolean} [request.showInvited]
   *   Optional. When `true`, also returns memberships associated with
   *   {@link protos.google.chat.v1.Membership.MembershipState.INVITED|invited} members, in
   *   addition to other types of memberships. If a
   *   filter is set,
   *   {@link protos.google.chat.v1.Membership.MembershipState.INVITED|invited} memberships
   *   that don't match the filter criteria aren't returned.
   *
   *   Currently requires [user
   *   authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.chat.v1.Membership|Membership} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listMembershipsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMembershipsStream(
    request?: protos.google.chat.v1.IListMembershipsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMemberships'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMemberships.createStream(
      this.innerApiCalls.listMemberships as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listMemberships`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the space for which to fetch a membership
   *   list.
   *
   *   Format: spaces/{space}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of memberships to return. The service might
   *   return fewer than this value.
   *
   *   If unspecified, at most 100 memberships are returned.
   *
   *   The maximum value is 1000. If you use a value more than 1000, it's
   *   automatically changed to 1000.
   *
   *   Negative values return an `INVALID_ARGUMENT` error.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous call to list memberships.
   *   Provide this parameter to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided should match the call that
   *   provided the page token. Passing different values to the other parameters
   *   might lead to unexpected results.
   * @param {string} [request.filter]
   *   Optional. A query filter.
   *
   *   You can filter memberships by a member's role
   *   ([`role`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.members#membershiprole))
   *   and type
   *   ([`member.type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/User#type)).
   *
   *   To filter by role, set `role` to `ROLE_MEMBER` or `ROLE_MANAGER`.
   *
   *   To filter by type, set `member.type` to `HUMAN` or `BOT`.
   *
   *   To filter by both role and type, use the `AND` operator. To filter by
   *   either role or type, use the `OR` operator.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   role = "ROLE_MANAGER" OR role = "ROLE_MEMBER"
   *   member.type = "HUMAN" AND role = "ROLE_MANAGER"
   *   ```
   *
   *   The following queries are invalid:
   *
   *   ```
   *   member.type = "HUMAN" AND member.type = "BOT"
   *   role = "ROLE_MANAGER" AND role = "ROLE_MEMBER"
   *   ```
   *
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {boolean} [request.showGroups]
   *   Optional. When `true`, also returns memberships associated with a
   *   {@link protos.google.chat.v1.Membership.group_member|Google Group}, in
   *   addition to other types of memberships. If a
   *   {@link protos.google.chat.v1.ListMembershipsRequest.filter|filter} is set,
   *   {@link protos.google.chat.v1.Membership.group_member|Google Group}
   *   memberships that don't match the filter criteria aren't returned.
   * @param {boolean} [request.showInvited]
   *   Optional. When `true`, also returns memberships associated with
   *   {@link protos.google.chat.v1.Membership.MembershipState.INVITED|invited} members, in
   *   addition to other types of memberships. If a
   *   filter is set,
   *   {@link protos.google.chat.v1.Membership.MembershipState.INVITED|invited} memberships
   *   that don't match the filter criteria aren't returned.
   *
   *   Currently requires [user
   *   authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.chat.v1.Membership|Membership}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.list_memberships.js</caption>
   * region_tag:chat_v1_generated_ChatService_ListMemberships_async
   */
  listMembershipsAsync(
    request?: protos.google.chat.v1.IListMembershipsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.chat.v1.IMembership> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMemberships'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMemberships.asyncIterate(
      this.innerApiCalls['listMemberships'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.chat.v1.IMembership>;
  }
  /**
   * Lists spaces the caller is a member of. Group chats and DMs aren't listed
   * until the first message is sent. For an example, see
   * [List
   * spaces](https://developers.google.com/workspace/chat/list-spaces).
   *
   * Requires
   * [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
   * Supports
   * [app
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
   * and [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * Lists spaces visible to the caller or authenticated user. Group chats
   * and DMs aren't listed until the first message is sent.
   *
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of spaces to return. The service might return
   *   fewer than this value.
   *
   *   If unspecified, at most 100 spaces are returned.
   *
   *   The maximum value is 1000. If you use a value more than 1000, it's
   *   automatically changed to 1000.
   *
   *   Negative values return an `INVALID_ARGUMENT` error.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous list spaces call.
   *   Provide this parameter to retrieve the subsequent page.
   *
   *   When paginating, the filter value should match the call that provided the
   *   page token. Passing a different value may lead to unexpected results.
   * @param {string} [request.filter]
   *   Optional. A query filter.
   *
   *   You can filter spaces by the space type
   *   ([`space_type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#spacetype)).
   *
   *   To filter by space type, you must specify valid enum value, such as
   *   `SPACE` or `GROUP_CHAT` (the `space_type` can't be
   *   `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR`
   *   operator.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   space_type = "SPACE"
   *   spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
   *   ```
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.chat.v1.Space|Space}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSpacesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSpaces(
    request?: protos.google.chat.v1.IListSpacesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.ISpace[],
      protos.google.chat.v1.IListSpacesRequest | null,
      protos.google.chat.v1.IListSpacesResponse,
    ]
  >;
  listSpaces(
    request: protos.google.chat.v1.IListSpacesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.chat.v1.IListSpacesRequest,
      protos.google.chat.v1.IListSpacesResponse | null | undefined,
      protos.google.chat.v1.ISpace
    >
  ): void;
  listSpaces(
    request: protos.google.chat.v1.IListSpacesRequest,
    callback: PaginationCallback<
      protos.google.chat.v1.IListSpacesRequest,
      protos.google.chat.v1.IListSpacesResponse | null | undefined,
      protos.google.chat.v1.ISpace
    >
  ): void;
  listSpaces(
    request?: protos.google.chat.v1.IListSpacesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.chat.v1.IListSpacesRequest,
          protos.google.chat.v1.IListSpacesResponse | null | undefined,
          protos.google.chat.v1.ISpace
        >,
    callback?: PaginationCallback<
      protos.google.chat.v1.IListSpacesRequest,
      protos.google.chat.v1.IListSpacesResponse | null | undefined,
      protos.google.chat.v1.ISpace
    >
  ): Promise<
    [
      protos.google.chat.v1.ISpace[],
      protos.google.chat.v1.IListSpacesRequest | null,
      protos.google.chat.v1.IListSpacesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listSpaces(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of spaces to return. The service might return
   *   fewer than this value.
   *
   *   If unspecified, at most 100 spaces are returned.
   *
   *   The maximum value is 1000. If you use a value more than 1000, it's
   *   automatically changed to 1000.
   *
   *   Negative values return an `INVALID_ARGUMENT` error.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous list spaces call.
   *   Provide this parameter to retrieve the subsequent page.
   *
   *   When paginating, the filter value should match the call that provided the
   *   page token. Passing a different value may lead to unexpected results.
   * @param {string} [request.filter]
   *   Optional. A query filter.
   *
   *   You can filter spaces by the space type
   *   ([`space_type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#spacetype)).
   *
   *   To filter by space type, you must specify valid enum value, such as
   *   `SPACE` or `GROUP_CHAT` (the `space_type` can't be
   *   `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR`
   *   operator.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   space_type = "SPACE"
   *   spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
   *   ```
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.chat.v1.Space|Space} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSpacesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSpacesStream(
    request?: protos.google.chat.v1.IListSpacesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listSpaces'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSpaces.createStream(
      this.innerApiCalls.listSpaces as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSpaces`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of spaces to return. The service might return
   *   fewer than this value.
   *
   *   If unspecified, at most 100 spaces are returned.
   *
   *   The maximum value is 1000. If you use a value more than 1000, it's
   *   automatically changed to 1000.
   *
   *   Negative values return an `INVALID_ARGUMENT` error.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous list spaces call.
   *   Provide this parameter to retrieve the subsequent page.
   *
   *   When paginating, the filter value should match the call that provided the
   *   page token. Passing a different value may lead to unexpected results.
   * @param {string} [request.filter]
   *   Optional. A query filter.
   *
   *   You can filter spaces by the space type
   *   ([`space_type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#spacetype)).
   *
   *   To filter by space type, you must specify valid enum value, such as
   *   `SPACE` or `GROUP_CHAT` (the `space_type` can't be
   *   `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR`
   *   operator.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   space_type = "SPACE"
   *   spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
   *   ```
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.chat.v1.Space|Space}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.list_spaces.js</caption>
   * region_tag:chat_v1_generated_ChatService_ListSpaces_async
   */
  listSpacesAsync(
    request?: protos.google.chat.v1.IListSpacesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.chat.v1.ISpace> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listSpaces'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSpaces.asyncIterate(
      this.innerApiCalls['listSpaces'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.chat.v1.ISpace>;
  }
  /**
   * Lists reactions to a message. For an example, see
   * [List reactions for a
   * message](https://developers.google.com/workspace/chat/list-reactions).
   * Requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The message users reacted to.
   *
   *   Format: `spaces/{space}/messages/{message}`
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of reactions returned. The service can return
   *   fewer reactions than this value. If unspecified, the default value is 25.
   *   The maximum value is 200; values above 200 are changed to 200.
   * @param {string} [request.pageToken]
   *   Optional. (If resuming from a previous query.)
   *
   *   A page token received from a previous list reactions call. Provide this
   *   to retrieve the subsequent page.
   *
   *   When paginating, the filter value should match the call that provided the
   *   page token. Passing a different value might lead to unexpected results.
   * @param {string} [request.filter]
   *   Optional. A query filter.
   *
   *   You can filter reactions by
   *   [emoji](https://developers.google.com/workspace/chat/api/reference/rest/v1/Emoji)
   *   (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
   *   [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
   *   (`user.name`).
   *
   *   To filter reactions for multiple emojis or users, join similar fields
   *   with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode =
   *   "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`.
   *
   *   To filter reactions by emoji and user, use the `AND` operator, such as
   *   `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`.
   *
   *   If your query uses both `AND` and `OR`, group them with parentheses.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   user.name = "users/{user}"
   *   emoji.unicode = "🙂"
   *   emoji.custom_emoji.uid = "{uid}"
   *   emoji.unicode = "🙂" OR emoji.unicode = "👍"
   *   emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
   *   emoji.unicode = "🙂" AND user.name = "users/{user}"
   *   (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}")
   *   AND user.name = "users/{user}"
   *   ```
   *
   *   The following queries are invalid:
   *
   *   ```
   *   emoji.unicode = "🙂" AND emoji.unicode = "👍"
   *   emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}"
   *   emoji.unicode = "🙂" OR user.name = "users/{user}"
   *   emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR
   *   user.name = "users/{user}"
   *   emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
   *   AND user.name = "users/{user}"
   *   ```
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.chat.v1.Reaction|Reaction}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listReactionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReactions(
    request?: protos.google.chat.v1.IListReactionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.chat.v1.IReaction[],
      protos.google.chat.v1.IListReactionsRequest | null,
      protos.google.chat.v1.IListReactionsResponse,
    ]
  >;
  listReactions(
    request: protos.google.chat.v1.IListReactionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.chat.v1.IListReactionsRequest,
      protos.google.chat.v1.IListReactionsResponse | null | undefined,
      protos.google.chat.v1.IReaction
    >
  ): void;
  listReactions(
    request: protos.google.chat.v1.IListReactionsRequest,
    callback: PaginationCallback<
      protos.google.chat.v1.IListReactionsRequest,
      protos.google.chat.v1.IListReactionsResponse | null | undefined,
      protos.google.chat.v1.IReaction
    >
  ): void;
  listReactions(
    request?: protos.google.chat.v1.IListReactionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.chat.v1.IListReactionsRequest,
          protos.google.chat.v1.IListReactionsResponse | null | undefined,
          protos.google.chat.v1.IReaction
        >,
    callback?: PaginationCallback<
      protos.google.chat.v1.IListReactionsRequest,
      protos.google.chat.v1.IListReactionsResponse | null | undefined,
      protos.google.chat.v1.IReaction
    >
  ): Promise<
    [
      protos.google.chat.v1.IReaction[],
      protos.google.chat.v1.IListReactionsRequest | null,
      protos.google.chat.v1.IListReactionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listReactions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The message users reacted to.
   *
   *   Format: `spaces/{space}/messages/{message}`
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of reactions returned. The service can return
   *   fewer reactions than this value. If unspecified, the default value is 25.
   *   The maximum value is 200; values above 200 are changed to 200.
   * @param {string} [request.pageToken]
   *   Optional. (If resuming from a previous query.)
   *
   *   A page token received from a previous list reactions call. Provide this
   *   to retrieve the subsequent page.
   *
   *   When paginating, the filter value should match the call that provided the
   *   page token. Passing a different value might lead to unexpected results.
   * @param {string} [request.filter]
   *   Optional. A query filter.
   *
   *   You can filter reactions by
   *   [emoji](https://developers.google.com/workspace/chat/api/reference/rest/v1/Emoji)
   *   (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
   *   [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
   *   (`user.name`).
   *
   *   To filter reactions for multiple emojis or users, join similar fields
   *   with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode =
   *   "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`.
   *
   *   To filter reactions by emoji and user, use the `AND` operator, such as
   *   `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`.
   *
   *   If your query uses both `AND` and `OR`, group them with parentheses.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   user.name = "users/{user}"
   *   emoji.unicode = "🙂"
   *   emoji.custom_emoji.uid = "{uid}"
   *   emoji.unicode = "🙂" OR emoji.unicode = "👍"
   *   emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
   *   emoji.unicode = "🙂" AND user.name = "users/{user}"
   *   (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}")
   *   AND user.name = "users/{user}"
   *   ```
   *
   *   The following queries are invalid:
   *
   *   ```
   *   emoji.unicode = "🙂" AND emoji.unicode = "👍"
   *   emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}"
   *   emoji.unicode = "🙂" OR user.name = "users/{user}"
   *   emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR
   *   user.name = "users/{user}"
   *   emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
   *   AND user.name = "users/{user}"
   *   ```
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.chat.v1.Reaction|Reaction} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listReactionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReactionsStream(
    request?: protos.google.chat.v1.IListReactionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReactions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReactions.createStream(
      this.innerApiCalls.listReactions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listReactions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The message users reacted to.
   *
   *   Format: `spaces/{space}/messages/{message}`
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of reactions returned. The service can return
   *   fewer reactions than this value. If unspecified, the default value is 25.
   *   The maximum value is 200; values above 200 are changed to 200.
   * @param {string} [request.pageToken]
   *   Optional. (If resuming from a previous query.)
   *
   *   A page token received from a previous list reactions call. Provide this
   *   to retrieve the subsequent page.
   *
   *   When paginating, the filter value should match the call that provided the
   *   page token. Passing a different value might lead to unexpected results.
   * @param {string} [request.filter]
   *   Optional. A query filter.
   *
   *   You can filter reactions by
   *   [emoji](https://developers.google.com/workspace/chat/api/reference/rest/v1/Emoji)
   *   (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
   *   [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
   *   (`user.name`).
   *
   *   To filter reactions for multiple emojis or users, join similar fields
   *   with the `OR` operator, such as `emoji.unicode = "🙂" OR emoji.unicode =
   *   "👍"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`.
   *
   *   To filter reactions by emoji and user, use the `AND` operator, such as
   *   `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`.
   *
   *   If your query uses both `AND` and `OR`, group them with parentheses.
   *
   *   For example, the following queries are valid:
   *
   *   ```
   *   user.name = "users/{user}"
   *   emoji.unicode = "🙂"
   *   emoji.custom_emoji.uid = "{uid}"
   *   emoji.unicode = "🙂" OR emoji.unicode = "👍"
   *   emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
   *   emoji.unicode = "🙂" AND user.name = "users/{user}"
   *   (emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}")
   *   AND user.name = "users/{user}"
   *   ```
   *
   *   The following queries are invalid:
   *
   *   ```
   *   emoji.unicode = "🙂" AND emoji.unicode = "👍"
   *   emoji.unicode = "🙂" AND emoji.custom_emoji.uid = "{uid}"
   *   emoji.unicode = "🙂" OR user.name = "users/{user}"
   *   emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" OR
   *   user.name = "users/{user}"
   *   emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}"
   *   AND user.name = "users/{user}"
   *   ```
   *
   *   Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   *   error.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.chat.v1.Reaction|Reaction}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/chat_service.list_reactions.js</caption>
   * region_tag:chat_v1_generated_ChatService_ListReactions_async
   */
  listReactionsAsync(
    request?: protos.google.chat.v1.IListReactionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.chat.v1.IReaction> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReactions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReactions.asyncIterate(
      this.innerApiCalls['listReactions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.chat.v1.IReaction>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified attachment resource name string.
   *
   * @param {string} space
   * @param {string} message
   * @param {string} attachment
   * @returns {string} Resource name string.
   */
  attachmentPath(space: string, message: string, attachment: string) {
    return this.pathTemplates.attachmentPathTemplate.render({
      space: space,
      message: message,
      attachment: attachment,
    });
  }

  /**
   * Parse the space from Attachment resource.
   *
   * @param {string} attachmentName
   *   A fully-qualified path representing Attachment resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromAttachmentName(attachmentName: string) {
    return this.pathTemplates.attachmentPathTemplate.match(attachmentName)
      .space;
  }

  /**
   * Parse the message from Attachment resource.
   *
   * @param {string} attachmentName
   *   A fully-qualified path representing Attachment resource.
   * @returns {string} A string representing the message.
   */
  matchMessageFromAttachmentName(attachmentName: string) {
    return this.pathTemplates.attachmentPathTemplate.match(attachmentName)
      .message;
  }

  /**
   * Parse the attachment from Attachment resource.
   *
   * @param {string} attachmentName
   *   A fully-qualified path representing Attachment resource.
   * @returns {string} A string representing the attachment.
   */
  matchAttachmentFromAttachmentName(attachmentName: string) {
    return this.pathTemplates.attachmentPathTemplate.match(attachmentName)
      .attachment;
  }

  /**
   * Return a fully-qualified membership resource name string.
   *
   * @param {string} space
   * @param {string} member
   * @returns {string} Resource name string.
   */
  membershipPath(space: string, member: string) {
    return this.pathTemplates.membershipPathTemplate.render({
      space: space,
      member: member,
    });
  }

  /**
   * Parse the space from Membership resource.
   *
   * @param {string} membershipName
   *   A fully-qualified path representing Membership resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromMembershipName(membershipName: string) {
    return this.pathTemplates.membershipPathTemplate.match(membershipName)
      .space;
  }

  /**
   * Parse the member from Membership resource.
   *
   * @param {string} membershipName
   *   A fully-qualified path representing Membership resource.
   * @returns {string} A string representing the member.
   */
  matchMemberFromMembershipName(membershipName: string) {
    return this.pathTemplates.membershipPathTemplate.match(membershipName)
      .member;
  }

  /**
   * Return a fully-qualified message resource name string.
   *
   * @param {string} space
   * @param {string} message
   * @returns {string} Resource name string.
   */
  messagePath(space: string, message: string) {
    return this.pathTemplates.messagePathTemplate.render({
      space: space,
      message: message,
    });
  }

  /**
   * Parse the space from Message resource.
   *
   * @param {string} messageName
   *   A fully-qualified path representing Message resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromMessageName(messageName: string) {
    return this.pathTemplates.messagePathTemplate.match(messageName).space;
  }

  /**
   * Parse the message from Message resource.
   *
   * @param {string} messageName
   *   A fully-qualified path representing Message resource.
   * @returns {string} A string representing the message.
   */
  matchMessageFromMessageName(messageName: string) {
    return this.pathTemplates.messagePathTemplate.match(messageName).message;
  }

  /**
   * Return a fully-qualified quotedMessageMetadata resource name string.
   *
   * @param {string} space
   * @param {string} message
   * @param {string} quoted_message_metadata
   * @returns {string} Resource name string.
   */
  quotedMessageMetadataPath(
    space: string,
    message: string,
    quotedMessageMetadata: string
  ) {
    return this.pathTemplates.quotedMessageMetadataPathTemplate.render({
      space: space,
      message: message,
      quoted_message_metadata: quotedMessageMetadata,
    });
  }

  /**
   * Parse the space from QuotedMessageMetadata resource.
   *
   * @param {string} quotedMessageMetadataName
   *   A fully-qualified path representing QuotedMessageMetadata resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromQuotedMessageMetadataName(quotedMessageMetadataName: string) {
    return this.pathTemplates.quotedMessageMetadataPathTemplate.match(
      quotedMessageMetadataName
    ).space;
  }

  /**
   * Parse the message from QuotedMessageMetadata resource.
   *
   * @param {string} quotedMessageMetadataName
   *   A fully-qualified path representing QuotedMessageMetadata resource.
   * @returns {string} A string representing the message.
   */
  matchMessageFromQuotedMessageMetadataName(quotedMessageMetadataName: string) {
    return this.pathTemplates.quotedMessageMetadataPathTemplate.match(
      quotedMessageMetadataName
    ).message;
  }

  /**
   * Parse the quoted_message_metadata from QuotedMessageMetadata resource.
   *
   * @param {string} quotedMessageMetadataName
   *   A fully-qualified path representing QuotedMessageMetadata resource.
   * @returns {string} A string representing the quoted_message_metadata.
   */
  matchQuotedMessageMetadataFromQuotedMessageMetadataName(
    quotedMessageMetadataName: string
  ) {
    return this.pathTemplates.quotedMessageMetadataPathTemplate.match(
      quotedMessageMetadataName
    ).quoted_message_metadata;
  }

  /**
   * Return a fully-qualified reaction resource name string.
   *
   * @param {string} space
   * @param {string} message
   * @param {string} reaction
   * @returns {string} Resource name string.
   */
  reactionPath(space: string, message: string, reaction: string) {
    return this.pathTemplates.reactionPathTemplate.render({
      space: space,
      message: message,
      reaction: reaction,
    });
  }

  /**
   * Parse the space from Reaction resource.
   *
   * @param {string} reactionName
   *   A fully-qualified path representing Reaction resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromReactionName(reactionName: string) {
    return this.pathTemplates.reactionPathTemplate.match(reactionName).space;
  }

  /**
   * Parse the message from Reaction resource.
   *
   * @param {string} reactionName
   *   A fully-qualified path representing Reaction resource.
   * @returns {string} A string representing the message.
   */
  matchMessageFromReactionName(reactionName: string) {
    return this.pathTemplates.reactionPathTemplate.match(reactionName).message;
  }

  /**
   * Parse the reaction from Reaction resource.
   *
   * @param {string} reactionName
   *   A fully-qualified path representing Reaction resource.
   * @returns {string} A string representing the reaction.
   */
  matchReactionFromReactionName(reactionName: string) {
    return this.pathTemplates.reactionPathTemplate.match(reactionName).reaction;
  }

  /**
   * Return a fully-qualified space resource name string.
   *
   * @param {string} space
   * @returns {string} Resource name string.
   */
  spacePath(space: string) {
    return this.pathTemplates.spacePathTemplate.render({
      space: space,
    });
  }

  /**
   * Parse the space from Space resource.
   *
   * @param {string} spaceName
   *   A fully-qualified path representing Space resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromSpaceName(spaceName: string) {
    return this.pathTemplates.spacePathTemplate.match(spaceName).space;
  }

  /**
   * Return a fully-qualified spaceReadState resource name string.
   *
   * @param {string} user
   * @param {string} space
   * @returns {string} Resource name string.
   */
  spaceReadStatePath(user: string, space: string) {
    return this.pathTemplates.spaceReadStatePathTemplate.render({
      user: user,
      space: space,
    });
  }

  /**
   * Parse the user from SpaceReadState resource.
   *
   * @param {string} spaceReadStateName
   *   A fully-qualified path representing SpaceReadState resource.
   * @returns {string} A string representing the user.
   */
  matchUserFromSpaceReadStateName(spaceReadStateName: string) {
    return this.pathTemplates.spaceReadStatePathTemplate.match(
      spaceReadStateName
    ).user;
  }

  /**
   * Parse the space from SpaceReadState resource.
   *
   * @param {string} spaceReadStateName
   *   A fully-qualified path representing SpaceReadState resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromSpaceReadStateName(spaceReadStateName: string) {
    return this.pathTemplates.spaceReadStatePathTemplate.match(
      spaceReadStateName
    ).space;
  }

  /**
   * Return a fully-qualified thread resource name string.
   *
   * @param {string} space
   * @param {string} thread
   * @returns {string} Resource name string.
   */
  threadPath(space: string, thread: string) {
    return this.pathTemplates.threadPathTemplate.render({
      space: space,
      thread: thread,
    });
  }

  /**
   * Parse the space from Thread resource.
   *
   * @param {string} threadName
   *   A fully-qualified path representing Thread resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromThreadName(threadName: string) {
    return this.pathTemplates.threadPathTemplate.match(threadName).space;
  }

  /**
   * Parse the thread from Thread resource.
   *
   * @param {string} threadName
   *   A fully-qualified path representing Thread resource.
   * @returns {string} A string representing the thread.
   */
  matchThreadFromThreadName(threadName: string) {
    return this.pathTemplates.threadPathTemplate.match(threadName).thread;
  }

  /**
   * Return a fully-qualified threadReadState resource name string.
   *
   * @param {string} user
   * @param {string} space
   * @param {string} thread
   * @returns {string} Resource name string.
   */
  threadReadStatePath(user: string, space: string, thread: string) {
    return this.pathTemplates.threadReadStatePathTemplate.render({
      user: user,
      space: space,
      thread: thread,
    });
  }

  /**
   * Parse the user from ThreadReadState resource.
   *
   * @param {string} threadReadStateName
   *   A fully-qualified path representing ThreadReadState resource.
   * @returns {string} A string representing the user.
   */
  matchUserFromThreadReadStateName(threadReadStateName: string) {
    return this.pathTemplates.threadReadStatePathTemplate.match(
      threadReadStateName
    ).user;
  }

  /**
   * Parse the space from ThreadReadState resource.
   *
   * @param {string} threadReadStateName
   *   A fully-qualified path representing ThreadReadState resource.
   * @returns {string} A string representing the space.
   */
  matchSpaceFromThreadReadStateName(threadReadStateName: string) {
    return this.pathTemplates.threadReadStatePathTemplate.match(
      threadReadStateName
    ).space;
  }

  /**
   * Parse the thread from ThreadReadState resource.
   *
   * @param {string} threadReadStateName
   *   A fully-qualified path representing ThreadReadState resource.
   * @returns {string} A string representing the thread.
   */
  matchThreadFromThreadReadStateName(threadReadStateName: string) {
    return this.pathTemplates.threadReadStatePathTemplate.match(
      threadReadStateName
    ).thread;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.chatServiceStub && !this._terminated) {
      return this.chatServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
