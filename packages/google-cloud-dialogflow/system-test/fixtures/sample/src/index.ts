// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import {
  AgentsClient,
  AnswerRecordsClient,
  ContextsClient,
  ConversationDatasetsClient,
  ConversationModelsClient,
  ConversationProfilesClient,
  ConversationsClient,
  DocumentsClient,
  EntityTypesClient,
  EnvironmentsClient,
  FulfillmentsClient,
  IntentsClient,
  KnowledgeBasesClient,
  ParticipantsClient,
  SessionEntityTypesClient,
  SessionsClient,
  VersionsClient,
} from '@google-cloud/dialogflow';

// check that the client class type name can be used
function doStuffWithAgentsClient(client: AgentsClient) {
  client.close();
}
function doStuffWithAnswerRecordsClient(client: AnswerRecordsClient) {
  client.close();
}
function doStuffWithContextsClient(client: ContextsClient) {
  client.close();
}
function doStuffWithConversationDatasetsClient(
  client: ConversationDatasetsClient
) {
  client.close();
}
function doStuffWithConversationModelsClient(client: ConversationModelsClient) {
  client.close();
}
function doStuffWithConversationProfilesClient(
  client: ConversationProfilesClient
) {
  client.close();
}
function doStuffWithConversationsClient(client: ConversationsClient) {
  client.close();
}
function doStuffWithDocumentsClient(client: DocumentsClient) {
  client.close();
}
function doStuffWithEntityTypesClient(client: EntityTypesClient) {
  client.close();
}
function doStuffWithEnvironmentsClient(client: EnvironmentsClient) {
  client.close();
}
function doStuffWithFulfillmentsClient(client: FulfillmentsClient) {
  client.close();
}
function doStuffWithIntentsClient(client: IntentsClient) {
  client.close();
}
function doStuffWithKnowledgeBasesClient(client: KnowledgeBasesClient) {
  client.close();
}
function doStuffWithParticipantsClient(client: ParticipantsClient) {
  client.close();
}
function doStuffWithSessionEntityTypesClient(client: SessionEntityTypesClient) {
  client.close();
}
function doStuffWithSessionsClient(client: SessionsClient) {
  client.close();
}
function doStuffWithVersionsClient(client: VersionsClient) {
  client.close();
}

function main() {
  // check that the client instance can be created
  const agentsClient = new AgentsClient();
  doStuffWithAgentsClient(agentsClient);
  // check that the client instance can be created
  const answerRecordsClient = new AnswerRecordsClient();
  doStuffWithAnswerRecordsClient(answerRecordsClient);
  // check that the client instance can be created
  const contextsClient = new ContextsClient();
  doStuffWithContextsClient(contextsClient);
  // check that the client instance can be created
  const conversationDatasetsClient = new ConversationDatasetsClient();
  doStuffWithConversationDatasetsClient(conversationDatasetsClient);
  // check that the client instance can be created
  const conversationModelsClient = new ConversationModelsClient();
  doStuffWithConversationModelsClient(conversationModelsClient);
  // check that the client instance can be created
  const conversationProfilesClient = new ConversationProfilesClient();
  doStuffWithConversationProfilesClient(conversationProfilesClient);
  // check that the client instance can be created
  const conversationsClient = new ConversationsClient();
  doStuffWithConversationsClient(conversationsClient);
  // check that the client instance can be created
  const documentsClient = new DocumentsClient();
  doStuffWithDocumentsClient(documentsClient);
  // check that the client instance can be created
  const entityTypesClient = new EntityTypesClient();
  doStuffWithEntityTypesClient(entityTypesClient);
  // check that the client instance can be created
  const environmentsClient = new EnvironmentsClient();
  doStuffWithEnvironmentsClient(environmentsClient);
  // check that the client instance can be created
  const fulfillmentsClient = new FulfillmentsClient();
  doStuffWithFulfillmentsClient(fulfillmentsClient);
  // check that the client instance can be created
  const intentsClient = new IntentsClient();
  doStuffWithIntentsClient(intentsClient);
  // check that the client instance can be created
  const knowledgeBasesClient = new KnowledgeBasesClient();
  doStuffWithKnowledgeBasesClient(knowledgeBasesClient);
  // check that the client instance can be created
  const participantsClient = new ParticipantsClient();
  doStuffWithParticipantsClient(participantsClient);
  // check that the client instance can be created
  const sessionEntityTypesClient = new SessionEntityTypesClient();
  doStuffWithSessionEntityTypesClient(sessionEntityTypesClient);
  // check that the client instance can be created
  const sessionsClient = new SessionsClient();
  doStuffWithSessionsClient(sessionsClient);
  // check that the client instance can be created
  const versionsClient = new VersionsClient();
  doStuffWithVersionsClient(versionsClient);
}

main();
