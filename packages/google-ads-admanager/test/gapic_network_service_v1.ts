// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it, beforeEach, afterEach} from 'mocha';
import * as networkserviceModule from '../src';

import {GoogleAuth, protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

describe('v1.NetworkServiceClient', () => {
  let googleAuth: GoogleAuth;
  beforeEach(() => {
    googleAuth = {
      getClient: sinon.stub().resolves({
        getRequestHeaders: sinon
          .stub()
          .resolves({Authorization: 'Bearer SOME_TOKEN'}),
      }),
    } as unknown as GoogleAuth;
  });
  afterEach(() => {
    sinon.restore();
  });
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new networkserviceModule.v1.NetworkServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'admanager.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new networkserviceModule.v1.NetworkServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          networkserviceModule.v1.NetworkServiceClient.servicePath;
        assert.strictEqual(servicePath, 'admanager.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          networkserviceModule.v1.NetworkServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'admanager.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'admanager.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'admanager.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new networkserviceModule.v1.NetworkServiceClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'admanager.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new networkserviceModule.v1.NetworkServiceClient({
            universeDomain: 'configured.example.com',
          });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'admanager.configured.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new networkserviceModule.v1.NetworkServiceClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = networkserviceModule.v1.NetworkServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new networkserviceModule.v1.NetworkServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      assert.strictEqual(client.networkServiceStub, undefined);
      await client.initialize();
      assert(client.networkServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.networkServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      assert.strictEqual(client.networkServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getNetwork', () => {
    it('invokes getNetwork without error', async () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.GetNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.GetNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ads.admanager.v1.Network()
      );
      client.innerApiCalls.getNetwork = stubSimpleCall(expectedResponse);
      const [response] = await client.getNetwork(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNetwork without error using callback', async () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.GetNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.GetNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ads.admanager.v1.Network()
      );
      client.innerApiCalls.getNetwork =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getNetwork(
          request,
          (
            err?: Error | null,
            result?: protos.google.ads.admanager.v1.INetwork | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNetwork with error', async () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.GetNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.GetNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getNetwork = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getNetwork(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getNetwork as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getNetwork with closed client', async () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.GetNetworkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.GetNetworkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getNetwork(request), expectedError);
    });
  });

  describe('listNetworks', () => {
    it('invokes listNetworks without error', async () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListNetworksRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListNetworksResponse()
      );
      client.innerApiCalls.listNetworks = stubSimpleCall(expectedResponse);
      const [response] = await client.listNetworks(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listNetworks without error using callback', async () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListNetworksRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListNetworksResponse()
      );
      client.innerApiCalls.listNetworks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listNetworks(
          request,
          (
            err?: Error | null,
            result?: protos.google.ads.admanager.v1.IListNetworksResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listNetworks with error', async () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListNetworksRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.listNetworks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listNetworks(request), expectedError);
    });

    it('invokes listNetworks with closed client', async () => {
      const client = new networkserviceModule.v1.NetworkServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListNetworksRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.listNetworks(request), expectedError);
    });
  });

  describe('Path templates', () => {
    describe('adUnit', () => {
      const fakePath = '/rendered/path/adUnit';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        ad_unit: 'adUnitValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.adUnitPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.adUnitPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('adUnitPath', () => {
        const result = client.adUnitPath('networkCodeValue', 'adUnitValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.adUnitPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromAdUnitName', () => {
        const result = client.matchNetworkCodeFromAdUnitName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.adUnitPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAdUnitFromAdUnitName', () => {
        const result = client.matchAdUnitFromAdUnitName(fakePath);
        assert.strictEqual(result, 'adUnitValue');
        assert(
          (client.pathTemplates.adUnitPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('company', () => {
      const fakePath = '/rendered/path/company';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        company: 'companyValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.companyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.companyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('companyPath', () => {
        const result = client.companyPath('networkCodeValue', 'companyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.companyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromCompanyName', () => {
        const result = client.matchNetworkCodeFromCompanyName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.companyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCompanyFromCompanyName', () => {
        const result = client.matchCompanyFromCompanyName(fakePath);
        assert.strictEqual(result, 'companyValue');
        assert(
          (client.pathTemplates.companyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('contact', () => {
      const fakePath = '/rendered/path/contact';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        contact: 'contactValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.contactPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.contactPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('contactPath', () => {
        const result = client.contactPath('networkCodeValue', 'contactValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.contactPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromContactName', () => {
        const result = client.matchNetworkCodeFromContactName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.contactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchContactFromContactName', () => {
        const result = client.matchContactFromContactName(fakePath);
        assert.strictEqual(result, 'contactValue');
        assert(
          (client.pathTemplates.contactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customField', () => {
      const fakePath = '/rendered/path/customField';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        custom_field: 'customFieldValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.customFieldPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customFieldPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customFieldPath', () => {
        const result = client.customFieldPath(
          'networkCodeValue',
          'customFieldValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.customFieldPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromCustomFieldName', () => {
        const result = client.matchNetworkCodeFromCustomFieldName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.customFieldPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomFieldFromCustomFieldName', () => {
        const result = client.matchCustomFieldFromCustomFieldName(fakePath);
        assert.strictEqual(result, 'customFieldValue');
        assert(
          (client.pathTemplates.customFieldPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customTargetingKey', () => {
      const fakePath = '/rendered/path/customTargetingKey';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        custom_targeting_key: 'customTargetingKeyValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.customTargetingKeyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customTargetingKeyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customTargetingKeyPath', () => {
        const result = client.customTargetingKeyPath(
          'networkCodeValue',
          'customTargetingKeyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.customTargetingKeyPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromCustomTargetingKeyName', () => {
        const result =
          client.matchNetworkCodeFromCustomTargetingKeyName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (
            client.pathTemplates.customTargetingKeyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomTargetingKeyFromCustomTargetingKeyName', () => {
        const result =
          client.matchCustomTargetingKeyFromCustomTargetingKeyName(fakePath);
        assert.strictEqual(result, 'customTargetingKeyValue');
        assert(
          (
            client.pathTemplates.customTargetingKeyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customTargetingValue', () => {
      const fakePath = '/rendered/path/customTargetingValue';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        custom_targeting_key: 'customTargetingKeyValue',
        custom_targeting_value: 'customTargetingValueValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.customTargetingValuePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customTargetingValuePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customTargetingValuePath', () => {
        const result = client.customTargetingValuePath(
          'networkCodeValue',
          'customTargetingKeyValue',
          'customTargetingValueValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.customTargetingValuePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromCustomTargetingValueName', () => {
        const result =
          client.matchNetworkCodeFromCustomTargetingValueName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (
            client.pathTemplates.customTargetingValuePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomTargetingKeyFromCustomTargetingValueName', () => {
        const result =
          client.matchCustomTargetingKeyFromCustomTargetingValueName(fakePath);
        assert.strictEqual(result, 'customTargetingKeyValue');
        assert(
          (
            client.pathTemplates.customTargetingValuePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomTargetingValueFromCustomTargetingValueName', () => {
        const result =
          client.matchCustomTargetingValueFromCustomTargetingValueName(
            fakePath
          );
        assert.strictEqual(result, 'customTargetingValueValue');
        assert(
          (
            client.pathTemplates.customTargetingValuePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entitySignalsMapping', () => {
      const fakePath = '/rendered/path/entitySignalsMapping';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        entity_signals_mapping: 'entitySignalsMappingValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entitySignalsMappingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entitySignalsMappingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entitySignalsMappingPath', () => {
        const result = client.entitySignalsMappingPath(
          'networkCodeValue',
          'entitySignalsMappingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.entitySignalsMappingPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromEntitySignalsMappingName', () => {
        const result =
          client.matchNetworkCodeFromEntitySignalsMappingName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (
            client.pathTemplates.entitySignalsMappingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntitySignalsMappingFromEntitySignalsMappingName', () => {
        const result =
          client.matchEntitySignalsMappingFromEntitySignalsMappingName(
            fakePath
          );
        assert.strictEqual(result, 'entitySignalsMappingValue');
        assert(
          (
            client.pathTemplates.entitySignalsMappingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('label', () => {
      const fakePath = '/rendered/path/label';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        label: 'labelValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.labelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.labelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('labelPath', () => {
        const result = client.labelPath('networkCodeValue', 'labelValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.labelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromLabelName', () => {
        const result = client.matchNetworkCodeFromLabelName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.labelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLabelFromLabelName', () => {
        const result = client.matchLabelFromLabelName(fakePath);
        assert.strictEqual(result, 'labelValue');
        assert(
          (client.pathTemplates.labelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('network', () => {
      const fakePath = '/rendered/path/network';
      const expectedParameters = {
        network_code: 'networkCodeValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.networkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.networkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('networkPath', () => {
        const result = client.networkPath('networkCodeValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.networkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromNetworkName', () => {
        const result = client.matchNetworkCodeFromNetworkName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.networkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('order', () => {
      const fakePath = '/rendered/path/order';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        order: 'orderValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.orderPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.orderPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('orderPath', () => {
        const result = client.orderPath('networkCodeValue', 'orderValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.orderPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromOrderName', () => {
        const result = client.matchNetworkCodeFromOrderName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.orderPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchOrderFromOrderName', () => {
        const result = client.matchOrderFromOrderName(fakePath);
        assert.strictEqual(result, 'orderValue');
        assert(
          (client.pathTemplates.orderPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('placement', () => {
      const fakePath = '/rendered/path/placement';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        placement: 'placementValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.placementPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.placementPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('placementPath', () => {
        const result = client.placementPath(
          'networkCodeValue',
          'placementValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.placementPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromPlacementName', () => {
        const result = client.matchNetworkCodeFromPlacementName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.placementPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPlacementFromPlacementName', () => {
        const result = client.matchPlacementFromPlacementName(fakePath);
        assert.strictEqual(result, 'placementValue');
        assert(
          (client.pathTemplates.placementPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('report', () => {
      const fakePath = '/rendered/path/report';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        report: 'reportValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.reportPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.reportPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('reportPath', () => {
        const result = client.reportPath('networkCodeValue', 'reportValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.reportPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromReportName', () => {
        const result = client.matchNetworkCodeFromReportName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.reportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchReportFromReportName', () => {
        const result = client.matchReportFromReportName(fakePath);
        assert.strictEqual(result, 'reportValue');
        assert(
          (client.pathTemplates.reportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('role', () => {
      const fakePath = '/rendered/path/role';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        role: 'roleValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.rolePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.rolePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('rolePath', () => {
        const result = client.rolePath('networkCodeValue', 'roleValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.rolePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromRoleName', () => {
        const result = client.matchNetworkCodeFromRoleName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.rolePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRoleFromRoleName', () => {
        const result = client.matchRoleFromRoleName(fakePath);
        assert.strictEqual(result, 'roleValue');
        assert(
          (client.pathTemplates.rolePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('taxonomyCategory', () => {
      const fakePath = '/rendered/path/taxonomyCategory';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        taxonomy_category: 'taxonomyCategoryValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.taxonomyCategoryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.taxonomyCategoryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('taxonomyCategoryPath', () => {
        const result = client.taxonomyCategoryPath(
          'networkCodeValue',
          'taxonomyCategoryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.taxonomyCategoryPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromTaxonomyCategoryName', () => {
        const result =
          client.matchNetworkCodeFromTaxonomyCategoryName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.taxonomyCategoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTaxonomyCategoryFromTaxonomyCategoryName', () => {
        const result =
          client.matchTaxonomyCategoryFromTaxonomyCategoryName(fakePath);
        assert.strictEqual(result, 'taxonomyCategoryValue');
        assert(
          (client.pathTemplates.taxonomyCategoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('team', () => {
      const fakePath = '/rendered/path/team';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        team: 'teamValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.teamPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.teamPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('teamPath', () => {
        const result = client.teamPath('networkCodeValue', 'teamValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.teamPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromTeamName', () => {
        const result = client.matchNetworkCodeFromTeamName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.teamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTeamFromTeamName', () => {
        const result = client.matchTeamFromTeamName(fakePath);
        assert.strictEqual(result, 'teamValue');
        assert(
          (client.pathTemplates.teamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('user', () => {
      const fakePath = '/rendered/path/user';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        user: 'userValue',
      };
      const client = new networkserviceModule.v1.NetworkServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.userPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.userPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('userPath', () => {
        const result = client.userPath('networkCodeValue', 'userValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.userPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromUserName', () => {
        const result = client.matchNetworkCodeFromUserName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.userPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchUserFromUserName', () => {
        const result = client.matchUserFromUserName(fakePath);
        assert.strictEqual(result, 'userValue');
        assert(
          (client.pathTemplates.userPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
