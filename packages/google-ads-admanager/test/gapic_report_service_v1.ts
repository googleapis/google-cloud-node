// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it, beforeEach, afterEach} from 'mocha';
import * as reportserviceModule from '../src';

import {PassThrough} from 'stream';

import {GoogleAuth, protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.ReportServiceClient', () => {
  let googleAuth: GoogleAuth;
  beforeEach(() => {
    googleAuth = {
      getClient: sinon.stub().resolves({
        getRequestHeaders: sinon
          .stub()
          .resolves({Authorization: 'Bearer SOME_TOKEN'}),
      }),
    } as unknown as GoogleAuth;
  });
  afterEach(() => {
    sinon.restore();
  });
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new reportserviceModule.v1.ReportServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'admanager.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new reportserviceModule.v1.ReportServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          reportserviceModule.v1.ReportServiceClient.servicePath;
        assert.strictEqual(servicePath, 'admanager.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          reportserviceModule.v1.ReportServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'admanager.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'admanager.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'admanager.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new reportserviceModule.v1.ReportServiceClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'admanager.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new reportserviceModule.v1.ReportServiceClient({
            universeDomain: 'configured.example.com',
          });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'admanager.configured.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new reportserviceModule.v1.ReportServiceClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = reportserviceModule.v1.ReportServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new reportserviceModule.v1.ReportServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      assert.strictEqual(client.reportServiceStub, undefined);
      await client.initialize();
      assert(client.reportServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.reportServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      assert.strictEqual(client.reportServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getReport', () => {
    it('invokes getReport without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.GetReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.GetReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ads.admanager.v1.Report()
      );
      client.innerApiCalls.getReport = stubSimpleCall(expectedResponse);
      const [response] = await client.getReport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReport without error using callback', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.GetReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.GetReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ads.admanager.v1.Report()
      );
      client.innerApiCalls.getReport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getReport(
          request,
          (
            err?: Error | null,
            result?: protos.google.ads.admanager.v1.IReport | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReport with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.GetReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.GetReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getReport = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getReport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReport with closed client', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.GetReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.GetReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getReport(request), expectedError);
    });
  });

  describe('createReport', () => {
    it('invokes createReport without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.CreateReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.CreateReportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ads.admanager.v1.Report()
      );
      client.innerApiCalls.createReport = stubSimpleCall(expectedResponse);
      const [response] = await client.createReport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createReport without error using callback', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.CreateReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.CreateReportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ads.admanager.v1.Report()
      );
      client.innerApiCalls.createReport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createReport(
          request,
          (
            err?: Error | null,
            result?: protos.google.ads.admanager.v1.IReport | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createReport with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.CreateReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.CreateReportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createReport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createReport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createReport with closed client', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.CreateReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.CreateReportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createReport(request), expectedError);
    });
  });

  describe('updateReport', () => {
    it('invokes updateReport without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.UpdateReportRequest()
      );
      request.report ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.UpdateReportRequest',
        ['report', 'name']
      );
      request.report.name = defaultValue1;
      const expectedHeaderRequestParams = `report.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ads.admanager.v1.Report()
      );
      client.innerApiCalls.updateReport = stubSimpleCall(expectedResponse);
      const [response] = await client.updateReport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateReport without error using callback', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.UpdateReportRequest()
      );
      request.report ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.UpdateReportRequest',
        ['report', 'name']
      );
      request.report.name = defaultValue1;
      const expectedHeaderRequestParams = `report.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.ads.admanager.v1.Report()
      );
      client.innerApiCalls.updateReport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateReport(
          request,
          (
            err?: Error | null,
            result?: protos.google.ads.admanager.v1.IReport | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateReport with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.UpdateReportRequest()
      );
      request.report ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.UpdateReportRequest',
        ['report', 'name']
      );
      request.report.name = defaultValue1;
      const expectedHeaderRequestParams = `report.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateReport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateReport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateReport with closed client', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.UpdateReportRequest()
      );
      request.report ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.UpdateReportRequest',
        ['report', 'name']
      );
      request.report.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateReport(request), expectedError);
    });
  });

  describe('runReport', () => {
    it('invokes runReport without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.RunReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.RunReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.runReport = stubLongRunningCall(expectedResponse);
      const [operation] = await client.runReport(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.runReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runReport without error using callback', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.RunReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.RunReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.runReport =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.runReport(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.ads.admanager.v1.IRunReportResponse,
              protos.google.ads.admanager.v1.IRunReportMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.ads.admanager.v1.IRunReportResponse,
        protos.google.ads.admanager.v1.IRunReportMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.runReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runReport with call error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.RunReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.RunReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.runReport = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.runReport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.runReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runReport with LRO error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.RunReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.RunReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.runReport = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.runReport(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.runReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRunReportProgress without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkRunReportProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRunReportProgress with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkRunReportProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listReports', () => {
    it('invokes listReports without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.ListReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
      ];
      client.innerApiCalls.listReports = stubSimpleCall(expectedResponse);
      const [response] = await client.listReports(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReports without error using callback', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.ListReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
      ];
      client.innerApiCalls.listReports =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listReports(
          request,
          (
            err?: Error | null,
            result?: protos.google.ads.admanager.v1.IReport[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReports with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.ListReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listReports = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listReports(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReportsStream without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.ListReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
      ];
      client.descriptors.page.listReports.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listReportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.ads.admanager.v1.Report[] = [];
        stream.on('data', (response: protos.google.ads.admanager.v1.Report) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listReports.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listReports, request)
      );
      assert(
        (client.descriptors.page.listReports.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listReportsStream with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.ListReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listReports.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listReportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.ads.admanager.v1.Report[] = [];
        stream.on('data', (response: protos.google.ads.admanager.v1.Report) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listReports.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listReports, request)
      );
      assert(
        (client.descriptors.page.listReports.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listReports without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.ListReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
        generateSampleMessage(new protos.google.ads.admanager.v1.Report()),
      ];
      client.descriptors.page.listReports.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.ads.admanager.v1.IReport[] = [];
      const iterable = client.listReportsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listReports.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listReports.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listReports with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.ListReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.ListReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listReports.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listReportsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.ads.admanager.v1.IReport[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listReports.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listReports.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('fetchReportResultRows', () => {
    it('invokes fetchReportResultRows without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.FetchReportResultRowsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.FetchReportResultRowsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
      ];
      client.innerApiCalls.fetchReportResultRows =
        stubSimpleCall(expectedResponse);
      const [response] = await client.fetchReportResultRows(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.fetchReportResultRows as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchReportResultRows as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchReportResultRows without error using callback', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.FetchReportResultRowsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.FetchReportResultRowsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
      ];
      client.innerApiCalls.fetchReportResultRows =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.fetchReportResultRows(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.ads.admanager.v1.Report.DataTable.IRow[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.fetchReportResultRows as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchReportResultRows as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchReportResultRows with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.FetchReportResultRowsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.FetchReportResultRowsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.fetchReportResultRows = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.fetchReportResultRows(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.fetchReportResultRows as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchReportResultRows as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchReportResultRowsStream without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.FetchReportResultRowsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.FetchReportResultRowsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
      ];
      client.descriptors.page.fetchReportResultRows.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.fetchReportResultRowsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.ads.admanager.v1.Report.DataTable.Row[] =
          [];
        stream.on(
          'data',
          (response: protos.google.ads.admanager.v1.Report.DataTable.Row) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.fetchReportResultRows
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.fetchReportResultRows, request)
      );
      assert(
        (
          client.descriptors.page.fetchReportResultRows
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes fetchReportResultRowsStream with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.FetchReportResultRowsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.FetchReportResultRowsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.fetchReportResultRows.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.fetchReportResultRowsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.ads.admanager.v1.Report.DataTable.Row[] =
          [];
        stream.on(
          'data',
          (response: protos.google.ads.admanager.v1.Report.DataTable.Row) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.fetchReportResultRows
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.fetchReportResultRows, request)
      );
      assert(
        (
          client.descriptors.page.fetchReportResultRows
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with fetchReportResultRows without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.FetchReportResultRowsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.FetchReportResultRowsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
        generateSampleMessage(
          new protos.google.ads.admanager.v1.Report.DataTable.Row()
        ),
      ];
      client.descriptors.page.fetchReportResultRows.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.ads.admanager.v1.Report.DataTable.IRow[] =
        [];
      const iterable = client.fetchReportResultRowsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.fetchReportResultRows
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.fetchReportResultRows
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with fetchReportResultRows with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.ads.admanager.v1.FetchReportResultRowsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.ads.admanager.v1.FetchReportResultRowsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.fetchReportResultRows.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.fetchReportResultRowsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.ads.admanager.v1.Report.DataTable.IRow[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.fetchReportResultRows
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.fetchReportResultRows
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('adUnit', () => {
      const fakePath = '/rendered/path/adUnit';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        ad_unit: 'adUnitValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.adUnitPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.adUnitPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('adUnitPath', () => {
        const result = client.adUnitPath('networkCodeValue', 'adUnitValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.adUnitPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromAdUnitName', () => {
        const result = client.matchNetworkCodeFromAdUnitName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.adUnitPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAdUnitFromAdUnitName', () => {
        const result = client.matchAdUnitFromAdUnitName(fakePath);
        assert.strictEqual(result, 'adUnitValue');
        assert(
          (client.pathTemplates.adUnitPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('company', () => {
      const fakePath = '/rendered/path/company';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        company: 'companyValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.companyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.companyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('companyPath', () => {
        const result = client.companyPath('networkCodeValue', 'companyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.companyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromCompanyName', () => {
        const result = client.matchNetworkCodeFromCompanyName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.companyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCompanyFromCompanyName', () => {
        const result = client.matchCompanyFromCompanyName(fakePath);
        assert.strictEqual(result, 'companyValue');
        assert(
          (client.pathTemplates.companyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('contact', () => {
      const fakePath = '/rendered/path/contact';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        contact: 'contactValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.contactPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.contactPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('contactPath', () => {
        const result = client.contactPath('networkCodeValue', 'contactValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.contactPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromContactName', () => {
        const result = client.matchNetworkCodeFromContactName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.contactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchContactFromContactName', () => {
        const result = client.matchContactFromContactName(fakePath);
        assert.strictEqual(result, 'contactValue');
        assert(
          (client.pathTemplates.contactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customField', () => {
      const fakePath = '/rendered/path/customField';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        custom_field: 'customFieldValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.customFieldPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customFieldPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customFieldPath', () => {
        const result = client.customFieldPath(
          'networkCodeValue',
          'customFieldValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.customFieldPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromCustomFieldName', () => {
        const result = client.matchNetworkCodeFromCustomFieldName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.customFieldPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomFieldFromCustomFieldName', () => {
        const result = client.matchCustomFieldFromCustomFieldName(fakePath);
        assert.strictEqual(result, 'customFieldValue');
        assert(
          (client.pathTemplates.customFieldPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customTargetingKey', () => {
      const fakePath = '/rendered/path/customTargetingKey';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        custom_targeting_key: 'customTargetingKeyValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.customTargetingKeyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customTargetingKeyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customTargetingKeyPath', () => {
        const result = client.customTargetingKeyPath(
          'networkCodeValue',
          'customTargetingKeyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.customTargetingKeyPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromCustomTargetingKeyName', () => {
        const result =
          client.matchNetworkCodeFromCustomTargetingKeyName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (
            client.pathTemplates.customTargetingKeyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomTargetingKeyFromCustomTargetingKeyName', () => {
        const result =
          client.matchCustomTargetingKeyFromCustomTargetingKeyName(fakePath);
        assert.strictEqual(result, 'customTargetingKeyValue');
        assert(
          (
            client.pathTemplates.customTargetingKeyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customTargetingValue', () => {
      const fakePath = '/rendered/path/customTargetingValue';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        custom_targeting_key: 'customTargetingKeyValue',
        custom_targeting_value: 'customTargetingValueValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.customTargetingValuePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customTargetingValuePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customTargetingValuePath', () => {
        const result = client.customTargetingValuePath(
          'networkCodeValue',
          'customTargetingKeyValue',
          'customTargetingValueValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.customTargetingValuePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromCustomTargetingValueName', () => {
        const result =
          client.matchNetworkCodeFromCustomTargetingValueName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (
            client.pathTemplates.customTargetingValuePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomTargetingKeyFromCustomTargetingValueName', () => {
        const result =
          client.matchCustomTargetingKeyFromCustomTargetingValueName(fakePath);
        assert.strictEqual(result, 'customTargetingKeyValue');
        assert(
          (
            client.pathTemplates.customTargetingValuePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomTargetingValueFromCustomTargetingValueName', () => {
        const result =
          client.matchCustomTargetingValueFromCustomTargetingValueName(
            fakePath
          );
        assert.strictEqual(result, 'customTargetingValueValue');
        assert(
          (
            client.pathTemplates.customTargetingValuePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entitySignalsMapping', () => {
      const fakePath = '/rendered/path/entitySignalsMapping';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        entity_signals_mapping: 'entitySignalsMappingValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entitySignalsMappingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entitySignalsMappingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entitySignalsMappingPath', () => {
        const result = client.entitySignalsMappingPath(
          'networkCodeValue',
          'entitySignalsMappingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.entitySignalsMappingPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromEntitySignalsMappingName', () => {
        const result =
          client.matchNetworkCodeFromEntitySignalsMappingName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (
            client.pathTemplates.entitySignalsMappingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntitySignalsMappingFromEntitySignalsMappingName', () => {
        const result =
          client.matchEntitySignalsMappingFromEntitySignalsMappingName(
            fakePath
          );
        assert.strictEqual(result, 'entitySignalsMappingValue');
        assert(
          (
            client.pathTemplates.entitySignalsMappingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('label', () => {
      const fakePath = '/rendered/path/label';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        label: 'labelValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.labelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.labelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('labelPath', () => {
        const result = client.labelPath('networkCodeValue', 'labelValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.labelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromLabelName', () => {
        const result = client.matchNetworkCodeFromLabelName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.labelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLabelFromLabelName', () => {
        const result = client.matchLabelFromLabelName(fakePath);
        assert.strictEqual(result, 'labelValue');
        assert(
          (client.pathTemplates.labelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('network', () => {
      const fakePath = '/rendered/path/network';
      const expectedParameters = {
        network_code: 'networkCodeValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.networkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.networkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('networkPath', () => {
        const result = client.networkPath('networkCodeValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.networkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromNetworkName', () => {
        const result = client.matchNetworkCodeFromNetworkName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.networkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('order', () => {
      const fakePath = '/rendered/path/order';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        order: 'orderValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.orderPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.orderPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('orderPath', () => {
        const result = client.orderPath('networkCodeValue', 'orderValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.orderPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromOrderName', () => {
        const result = client.matchNetworkCodeFromOrderName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.orderPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchOrderFromOrderName', () => {
        const result = client.matchOrderFromOrderName(fakePath);
        assert.strictEqual(result, 'orderValue');
        assert(
          (client.pathTemplates.orderPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('placement', () => {
      const fakePath = '/rendered/path/placement';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        placement: 'placementValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.placementPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.placementPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('placementPath', () => {
        const result = client.placementPath(
          'networkCodeValue',
          'placementValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.placementPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromPlacementName', () => {
        const result = client.matchNetworkCodeFromPlacementName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.placementPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPlacementFromPlacementName', () => {
        const result = client.matchPlacementFromPlacementName(fakePath);
        assert.strictEqual(result, 'placementValue');
        assert(
          (client.pathTemplates.placementPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('report', () => {
      const fakePath = '/rendered/path/report';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        report: 'reportValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.reportPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.reportPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('reportPath', () => {
        const result = client.reportPath('networkCodeValue', 'reportValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.reportPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromReportName', () => {
        const result = client.matchNetworkCodeFromReportName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.reportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchReportFromReportName', () => {
        const result = client.matchReportFromReportName(fakePath);
        assert.strictEqual(result, 'reportValue');
        assert(
          (client.pathTemplates.reportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('role', () => {
      const fakePath = '/rendered/path/role';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        role: 'roleValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.rolePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.rolePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('rolePath', () => {
        const result = client.rolePath('networkCodeValue', 'roleValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.rolePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromRoleName', () => {
        const result = client.matchNetworkCodeFromRoleName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.rolePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRoleFromRoleName', () => {
        const result = client.matchRoleFromRoleName(fakePath);
        assert.strictEqual(result, 'roleValue');
        assert(
          (client.pathTemplates.rolePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('taxonomyCategory', () => {
      const fakePath = '/rendered/path/taxonomyCategory';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        taxonomy_category: 'taxonomyCategoryValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.taxonomyCategoryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.taxonomyCategoryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('taxonomyCategoryPath', () => {
        const result = client.taxonomyCategoryPath(
          'networkCodeValue',
          'taxonomyCategoryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.taxonomyCategoryPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromTaxonomyCategoryName', () => {
        const result =
          client.matchNetworkCodeFromTaxonomyCategoryName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.taxonomyCategoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTaxonomyCategoryFromTaxonomyCategoryName', () => {
        const result =
          client.matchTaxonomyCategoryFromTaxonomyCategoryName(fakePath);
        assert.strictEqual(result, 'taxonomyCategoryValue');
        assert(
          (client.pathTemplates.taxonomyCategoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('team', () => {
      const fakePath = '/rendered/path/team';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        team: 'teamValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.teamPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.teamPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('teamPath', () => {
        const result = client.teamPath('networkCodeValue', 'teamValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.teamPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromTeamName', () => {
        const result = client.matchNetworkCodeFromTeamName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.teamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTeamFromTeamName', () => {
        const result = client.matchTeamFromTeamName(fakePath);
        assert.strictEqual(result, 'teamValue');
        assert(
          (client.pathTemplates.teamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('user', () => {
      const fakePath = '/rendered/path/user';
      const expectedParameters = {
        network_code: 'networkCodeValue',
        user: 'userValue',
      };
      const client = new reportserviceModule.v1.ReportServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.userPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.userPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('userPath', () => {
        const result = client.userPath('networkCodeValue', 'userValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.userPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchNetworkCodeFromUserName', () => {
        const result = client.matchNetworkCodeFromUserName(fakePath);
        assert.strictEqual(result, 'networkCodeValue');
        assert(
          (client.pathTemplates.userPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchUserFromUserName', () => {
        const result = client.matchUserFromUserName(fakePath);
        assert.strictEqual(result, 'userValue');
        assert(
          (client.pathTemplates.userPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
