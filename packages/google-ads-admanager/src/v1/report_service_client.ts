// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/report_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './report_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Provides methods for interacting with reports.
 * @class
 * @memberof v1
 */
export class ReportServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  reportServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ReportServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ReportServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ReportServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'admanager.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    // Implicitly enable HTTP transport for the APIs that use REST as transport (e.g. Google Cloud Compute).
    if (!opts) {
      opts = {fallback: true};
    } else {
      opts.fallback = opts.fallback ?? true;
    }
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      adUnitPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/adUnits/{ad_unit}'
      ),
      companyPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/companies/{company}'
      ),
      contactPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/contacts/{contact}'
      ),
      customFieldPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/customFields/{custom_field}'
      ),
      customTargetingKeyPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/customTargetingKeys/{custom_targeting_key}'
      ),
      customTargetingValuePathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/customTargetingKeys/{custom_targeting_key}/customTargetingValues/{custom_targeting_value}'
      ),
      entitySignalsMappingPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/entitySignalsMappings/{entity_signals_mapping}'
      ),
      labelPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/labels/{label}'
      ),
      networkPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}'
      ),
      orderPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/orders/{order}'
      ),
      placementPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/placements/{placement}'
      ),
      reportPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/reports/{report}'
      ),
      rolePathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/roles/{role}'
      ),
      taxonomyCategoryPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/taxonomyCategories/{taxonomy_category}'
      ),
      teamPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/teams/{team}'
      ),
      userPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/users/{user}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listReports: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'reports'
      ),
      fetchReportResultRows: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'rows'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=networks/*/operations/reports/runs/*}',
          additional_bindings: [
            {get: '/v1/{name=networks/*/operations/reports/exports/*}'},
          ],
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const runReportResponse = protoFilesRoot.lookup(
      '.google.ads.admanager.v1.RunReportResponse'
    ) as gax.protobuf.Type;
    const runReportMetadata = protoFilesRoot.lookup(
      '.google.ads.admanager.v1.RunReportMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      runReport: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        runReportResponse.decode.bind(runReportResponse),
        runReportMetadata.decode.bind(runReportMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.ads.admanager.v1.ReportService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.reportServiceStub) {
      return this.reportServiceStub;
    }

    // Put together the "service stub" for
    // google.ads.admanager.v1.ReportService.
    this.reportServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.ads.admanager.v1.ReportService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.ads.admanager.v1.ReportService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const reportServiceStubMethods = [
      'getReport',
      'listReports',
      'createReport',
      'updateReport',
      'runReport',
      'fetchReportResultRows',
    ];
    for (const methodName of reportServiceStubMethods) {
      const callPromise = this.reportServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.reportServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'admanager.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'admanager.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * API to retrieve a `Report` object.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the report.
   *   Format: `networks/{network_code}/reports/{report_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.ads.admanager.v1.Report|Report}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/report_service.get_report.js</caption>
   * region_tag:admanager_v1_generated_ReportService_GetReport_async
   */
  getReport(
    request?: protos.google.ads.admanager.v1.IGetReportRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.IGetReportRequest | undefined,
      {} | undefined,
    ]
  >;
  getReport(
    request: protos.google.ads.admanager.v1.IGetReportRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.IGetReportRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getReport(
    request: protos.google.ads.admanager.v1.IGetReportRequest,
    callback: Callback<
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.IGetReportRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getReport(
    request?: protos.google.ads.admanager.v1.IGetReportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.ads.admanager.v1.IReport,
          protos.google.ads.admanager.v1.IGetReportRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.IGetReportRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.IGetReportRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getReport(request, options, callback);
  }
  /**
   * API to create a `Report` object.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource where this `Report` will be created.
   *   Format: `networks/{network_code}`
   * @param {google.ads.admanager.v1.Report} request.report
   *   Required. The `Report` to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.ads.admanager.v1.Report|Report}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/report_service.create_report.js</caption>
   * region_tag:admanager_v1_generated_ReportService_CreateReport_async
   */
  createReport(
    request?: protos.google.ads.admanager.v1.ICreateReportRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.ICreateReportRequest | undefined,
      {} | undefined,
    ]
  >;
  createReport(
    request: protos.google.ads.admanager.v1.ICreateReportRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.ICreateReportRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReport(
    request: protos.google.ads.admanager.v1.ICreateReportRequest,
    callback: Callback<
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.ICreateReportRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReport(
    request?: protos.google.ads.admanager.v1.ICreateReportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.ads.admanager.v1.IReport,
          | protos.google.ads.admanager.v1.ICreateReportRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.ICreateReportRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.ICreateReportRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createReport(request, options, callback);
  }
  /**
   * API to update a `Report` object.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.ads.admanager.v1.Report} request.report
   *   Required. The `Report` to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The list of fields to update.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.ads.admanager.v1.Report|Report}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/report_service.update_report.js</caption>
   * region_tag:admanager_v1_generated_ReportService_UpdateReport_async
   */
  updateReport(
    request?: protos.google.ads.admanager.v1.IUpdateReportRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.IUpdateReportRequest | undefined,
      {} | undefined,
    ]
  >;
  updateReport(
    request: protos.google.ads.admanager.v1.IUpdateReportRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.IUpdateReportRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateReport(
    request: protos.google.ads.admanager.v1.IUpdateReportRequest,
    callback: Callback<
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.IUpdateReportRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateReport(
    request?: protos.google.ads.admanager.v1.IUpdateReportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.ads.admanager.v1.IReport,
          | protos.google.ads.admanager.v1.IUpdateReportRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.IUpdateReportRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.ads.admanager.v1.IReport,
      protos.google.ads.admanager.v1.IUpdateReportRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'report.name': request.report!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateReport(request, options, callback);
  }

  /**
   * Initiates the execution of an existing report asynchronously. Users can
   * get the report by polling this operation via
   * `OperationsService.GetOperation`.
   * Poll every 5 seconds initially, with an exponential
   * backoff. Once a report is complete, the operation will contain a
   * `RunReportResponse` in its response field containing a report_result that
   * can be passed to the `FetchReportResultRows` method to retrieve the report
   * data.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The report to run.
   *   Format: `networks/{network_code}/reports/{report_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/report_service.run_report.js</caption>
   * region_tag:admanager_v1_generated_ReportService_RunReport_async
   */
  runReport(
    request?: protos.google.ads.admanager.v1.IRunReportRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.ads.admanager.v1.IRunReportResponse,
        protos.google.ads.admanager.v1.IRunReportMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  runReport(
    request: protos.google.ads.admanager.v1.IRunReportRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.ads.admanager.v1.IRunReportResponse,
        protos.google.ads.admanager.v1.IRunReportMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  runReport(
    request: protos.google.ads.admanager.v1.IRunReportRequest,
    callback: Callback<
      LROperation<
        protos.google.ads.admanager.v1.IRunReportResponse,
        protos.google.ads.admanager.v1.IRunReportMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  runReport(
    request?: protos.google.ads.admanager.v1.IRunReportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.ads.admanager.v1.IRunReportResponse,
            protos.google.ads.admanager.v1.IRunReportMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.ads.admanager.v1.IRunReportResponse,
        protos.google.ads.admanager.v1.IRunReportMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.ads.admanager.v1.IRunReportResponse,
        protos.google.ads.admanager.v1.IRunReportMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.runReport(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `runReport()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/report_service.run_report.js</caption>
   * region_tag:admanager_v1_generated_ReportService_RunReport_async
   */
  async checkRunReportProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.ads.admanager.v1.RunReportResponse,
      protos.google.ads.admanager.v1.RunReportMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.runReport,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.ads.admanager.v1.RunReportResponse,
      protos.google.ads.admanager.v1.RunReportMetadata
    >;
  }
  /**
   * API to retrieve a list of `Report` objects.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of reports.
   *   Format: `networks/{network_code}`
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of `Reports` to return. The service may return
   *   fewer than this value. If unspecified, at most 50 `Reports` will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `ListReports` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListReports` must
   *   match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. Expression to filter the response.
   *   See syntax details at
   *   https://developers.google.com/ad-manager/api/beta/filters
   * @param {string} [request.orderBy]
   *   Optional. Expression to specify sorting order.
   *   See syntax details at
   *   https://developers.google.com/ad-manager/api/beta/filters#order
   * @param {number} [request.skip]
   *   Optional. Number of individual resources to skip while paginating.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.ads.admanager.v1.Report|Report}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listReportsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReports(
    request?: protos.google.ads.admanager.v1.IListReportsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.ads.admanager.v1.IReport[],
      protos.google.ads.admanager.v1.IListReportsRequest | null,
      protos.google.ads.admanager.v1.IListReportsResponse,
    ]
  >;
  listReports(
    request: protos.google.ads.admanager.v1.IListReportsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.ads.admanager.v1.IListReportsRequest,
      protos.google.ads.admanager.v1.IListReportsResponse | null | undefined,
      protos.google.ads.admanager.v1.IReport
    >
  ): void;
  listReports(
    request: protos.google.ads.admanager.v1.IListReportsRequest,
    callback: PaginationCallback<
      protos.google.ads.admanager.v1.IListReportsRequest,
      protos.google.ads.admanager.v1.IListReportsResponse | null | undefined,
      protos.google.ads.admanager.v1.IReport
    >
  ): void;
  listReports(
    request?: protos.google.ads.admanager.v1.IListReportsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.ads.admanager.v1.IListReportsRequest,
          | protos.google.ads.admanager.v1.IListReportsResponse
          | null
          | undefined,
          protos.google.ads.admanager.v1.IReport
        >,
    callback?: PaginationCallback<
      protos.google.ads.admanager.v1.IListReportsRequest,
      protos.google.ads.admanager.v1.IListReportsResponse | null | undefined,
      protos.google.ads.admanager.v1.IReport
    >
  ): Promise<
    [
      protos.google.ads.admanager.v1.IReport[],
      protos.google.ads.admanager.v1.IListReportsRequest | null,
      protos.google.ads.admanager.v1.IListReportsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listReports(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of reports.
   *   Format: `networks/{network_code}`
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of `Reports` to return. The service may return
   *   fewer than this value. If unspecified, at most 50 `Reports` will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `ListReports` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListReports` must
   *   match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. Expression to filter the response.
   *   See syntax details at
   *   https://developers.google.com/ad-manager/api/beta/filters
   * @param {string} [request.orderBy]
   *   Optional. Expression to specify sorting order.
   *   See syntax details at
   *   https://developers.google.com/ad-manager/api/beta/filters#order
   * @param {number} [request.skip]
   *   Optional. Number of individual resources to skip while paginating.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.ads.admanager.v1.Report|Report} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listReportsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReportsStream(
    request?: protos.google.ads.admanager.v1.IListReportsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReports'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReports.createStream(
      this.innerApiCalls.listReports as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listReports`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of reports.
   *   Format: `networks/{network_code}`
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of `Reports` to return. The service may return
   *   fewer than this value. If unspecified, at most 50 `Reports` will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `ListReports` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListReports` must
   *   match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. Expression to filter the response.
   *   See syntax details at
   *   https://developers.google.com/ad-manager/api/beta/filters
   * @param {string} [request.orderBy]
   *   Optional. Expression to specify sorting order.
   *   See syntax details at
   *   https://developers.google.com/ad-manager/api/beta/filters#order
   * @param {number} [request.skip]
   *   Optional. Number of individual resources to skip while paginating.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.ads.admanager.v1.Report|Report}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/report_service.list_reports.js</caption>
   * region_tag:admanager_v1_generated_ReportService_ListReports_async
   */
  listReportsAsync(
    request?: protos.google.ads.admanager.v1.IListReportsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.ads.admanager.v1.IReport> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReports'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReports.asyncIterate(
      this.innerApiCalls['listReports'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.ads.admanager.v1.IReport>;
  }
  /**
   * Returns the result rows from a completed report.
   * The caller must have previously called `RunReport` and waited for that
   * operation to complete. The rows will be returned according to the order
   * specified by the `sorts` member of the report definition.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The report result being fetched.
   *   Format:
   *   `networks/{network_code}/reports/{report_id}/results/{report_result_id}`
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of rows to return. The service may return
   *   fewer than this value. If unspecified, at most 1,000 rows will be returned.
   *   The maximum value is 10,000; values above 10,000 will be reduced to 10,000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `FetchReportResultRows`
   *   call. Provide this to retrieve the second and subsequent batches of rows.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.ads.admanager.v1.Report.DataTable.Row|Row}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `fetchReportResultRowsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  fetchReportResultRows(
    request?: protos.google.ads.admanager.v1.IFetchReportResultRowsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.ads.admanager.v1.Report.DataTable.IRow[],
      protos.google.ads.admanager.v1.IFetchReportResultRowsRequest | null,
      protos.google.ads.admanager.v1.IFetchReportResultRowsResponse,
    ]
  >;
  fetchReportResultRows(
    request: protos.google.ads.admanager.v1.IFetchReportResultRowsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.ads.admanager.v1.IFetchReportResultRowsRequest,
      | protos.google.ads.admanager.v1.IFetchReportResultRowsResponse
      | null
      | undefined,
      protos.google.ads.admanager.v1.Report.DataTable.IRow
    >
  ): void;
  fetchReportResultRows(
    request: protos.google.ads.admanager.v1.IFetchReportResultRowsRequest,
    callback: PaginationCallback<
      protos.google.ads.admanager.v1.IFetchReportResultRowsRequest,
      | protos.google.ads.admanager.v1.IFetchReportResultRowsResponse
      | null
      | undefined,
      protos.google.ads.admanager.v1.Report.DataTable.IRow
    >
  ): void;
  fetchReportResultRows(
    request?: protos.google.ads.admanager.v1.IFetchReportResultRowsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.ads.admanager.v1.IFetchReportResultRowsRequest,
          | protos.google.ads.admanager.v1.IFetchReportResultRowsResponse
          | null
          | undefined,
          protos.google.ads.admanager.v1.Report.DataTable.IRow
        >,
    callback?: PaginationCallback<
      protos.google.ads.admanager.v1.IFetchReportResultRowsRequest,
      | protos.google.ads.admanager.v1.IFetchReportResultRowsResponse
      | null
      | undefined,
      protos.google.ads.admanager.v1.Report.DataTable.IRow
    >
  ): Promise<
    [
      protos.google.ads.admanager.v1.Report.DataTable.IRow[],
      protos.google.ads.admanager.v1.IFetchReportResultRowsRequest | null,
      protos.google.ads.admanager.v1.IFetchReportResultRowsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchReportResultRows(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The report result being fetched.
   *   Format:
   *   `networks/{network_code}/reports/{report_id}/results/{report_result_id}`
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of rows to return. The service may return
   *   fewer than this value. If unspecified, at most 1,000 rows will be returned.
   *   The maximum value is 10,000; values above 10,000 will be reduced to 10,000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `FetchReportResultRows`
   *   call. Provide this to retrieve the second and subsequent batches of rows.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.ads.admanager.v1.Report.DataTable.Row|Row} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `fetchReportResultRowsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  fetchReportResultRowsStream(
    request?: protos.google.ads.admanager.v1.IFetchReportResultRowsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['fetchReportResultRows'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchReportResultRows.createStream(
      this.innerApiCalls.fetchReportResultRows as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `fetchReportResultRows`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The report result being fetched.
   *   Format:
   *   `networks/{network_code}/reports/{report_id}/results/{report_result_id}`
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of rows to return. The service may return
   *   fewer than this value. If unspecified, at most 1,000 rows will be returned.
   *   The maximum value is 10,000; values above 10,000 will be reduced to 10,000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `FetchReportResultRows`
   *   call. Provide this to retrieve the second and subsequent batches of rows.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.ads.admanager.v1.Report.DataTable.Row|Row}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/report_service.fetch_report_result_rows.js</caption>
   * region_tag:admanager_v1_generated_ReportService_FetchReportResultRows_async
   */
  fetchReportResultRowsAsync(
    request?: protos.google.ads.admanager.v1.IFetchReportResultRowsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.ads.admanager.v1.Report.DataTable.IRow> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['fetchReportResultRows'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchReportResultRows.asyncIterate(
      this.innerApiCalls['fetchReportResultRows'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.ads.admanager.v1.Report.DataTable.IRow>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified adUnit resource name string.
   *
   * @param {string} network_code
   * @param {string} ad_unit
   * @returns {string} Resource name string.
   */
  adUnitPath(networkCode: string, adUnit: string) {
    return this.pathTemplates.adUnitPathTemplate.render({
      network_code: networkCode,
      ad_unit: adUnit,
    });
  }

  /**
   * Parse the network_code from AdUnit resource.
   *
   * @param {string} adUnitName
   *   A fully-qualified path representing AdUnit resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromAdUnitName(adUnitName: string) {
    return this.pathTemplates.adUnitPathTemplate.match(adUnitName).network_code;
  }

  /**
   * Parse the ad_unit from AdUnit resource.
   *
   * @param {string} adUnitName
   *   A fully-qualified path representing AdUnit resource.
   * @returns {string} A string representing the ad_unit.
   */
  matchAdUnitFromAdUnitName(adUnitName: string) {
    return this.pathTemplates.adUnitPathTemplate.match(adUnitName).ad_unit;
  }

  /**
   * Return a fully-qualified company resource name string.
   *
   * @param {string} network_code
   * @param {string} company
   * @returns {string} Resource name string.
   */
  companyPath(networkCode: string, company: string) {
    return this.pathTemplates.companyPathTemplate.render({
      network_code: networkCode,
      company: company,
    });
  }

  /**
   * Parse the network_code from Company resource.
   *
   * @param {string} companyName
   *   A fully-qualified path representing Company resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCompanyName(companyName: string) {
    return this.pathTemplates.companyPathTemplate.match(companyName)
      .network_code;
  }

  /**
   * Parse the company from Company resource.
   *
   * @param {string} companyName
   *   A fully-qualified path representing Company resource.
   * @returns {string} A string representing the company.
   */
  matchCompanyFromCompanyName(companyName: string) {
    return this.pathTemplates.companyPathTemplate.match(companyName).company;
  }

  /**
   * Return a fully-qualified contact resource name string.
   *
   * @param {string} network_code
   * @param {string} contact
   * @returns {string} Resource name string.
   */
  contactPath(networkCode: string, contact: string) {
    return this.pathTemplates.contactPathTemplate.render({
      network_code: networkCode,
      contact: contact,
    });
  }

  /**
   * Parse the network_code from Contact resource.
   *
   * @param {string} contactName
   *   A fully-qualified path representing Contact resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromContactName(contactName: string) {
    return this.pathTemplates.contactPathTemplate.match(contactName)
      .network_code;
  }

  /**
   * Parse the contact from Contact resource.
   *
   * @param {string} contactName
   *   A fully-qualified path representing Contact resource.
   * @returns {string} A string representing the contact.
   */
  matchContactFromContactName(contactName: string) {
    return this.pathTemplates.contactPathTemplate.match(contactName).contact;
  }

  /**
   * Return a fully-qualified customField resource name string.
   *
   * @param {string} network_code
   * @param {string} custom_field
   * @returns {string} Resource name string.
   */
  customFieldPath(networkCode: string, customField: string) {
    return this.pathTemplates.customFieldPathTemplate.render({
      network_code: networkCode,
      custom_field: customField,
    });
  }

  /**
   * Parse the network_code from CustomField resource.
   *
   * @param {string} customFieldName
   *   A fully-qualified path representing CustomField resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCustomFieldName(customFieldName: string) {
    return this.pathTemplates.customFieldPathTemplate.match(customFieldName)
      .network_code;
  }

  /**
   * Parse the custom_field from CustomField resource.
   *
   * @param {string} customFieldName
   *   A fully-qualified path representing CustomField resource.
   * @returns {string} A string representing the custom_field.
   */
  matchCustomFieldFromCustomFieldName(customFieldName: string) {
    return this.pathTemplates.customFieldPathTemplate.match(customFieldName)
      .custom_field;
  }

  /**
   * Return a fully-qualified customTargetingKey resource name string.
   *
   * @param {string} network_code
   * @param {string} custom_targeting_key
   * @returns {string} Resource name string.
   */
  customTargetingKeyPath(networkCode: string, customTargetingKey: string) {
    return this.pathTemplates.customTargetingKeyPathTemplate.render({
      network_code: networkCode,
      custom_targeting_key: customTargetingKey,
    });
  }

  /**
   * Parse the network_code from CustomTargetingKey resource.
   *
   * @param {string} customTargetingKeyName
   *   A fully-qualified path representing CustomTargetingKey resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCustomTargetingKeyName(customTargetingKeyName: string) {
    return this.pathTemplates.customTargetingKeyPathTemplate.match(
      customTargetingKeyName
    ).network_code;
  }

  /**
   * Parse the custom_targeting_key from CustomTargetingKey resource.
   *
   * @param {string} customTargetingKeyName
   *   A fully-qualified path representing CustomTargetingKey resource.
   * @returns {string} A string representing the custom_targeting_key.
   */
  matchCustomTargetingKeyFromCustomTargetingKeyName(
    customTargetingKeyName: string
  ) {
    return this.pathTemplates.customTargetingKeyPathTemplate.match(
      customTargetingKeyName
    ).custom_targeting_key;
  }

  /**
   * Return a fully-qualified customTargetingValue resource name string.
   *
   * @param {string} network_code
   * @param {string} custom_targeting_key
   * @param {string} custom_targeting_value
   * @returns {string} Resource name string.
   */
  customTargetingValuePath(
    networkCode: string,
    customTargetingKey: string,
    customTargetingValue: string
  ) {
    return this.pathTemplates.customTargetingValuePathTemplate.render({
      network_code: networkCode,
      custom_targeting_key: customTargetingKey,
      custom_targeting_value: customTargetingValue,
    });
  }

  /**
   * Parse the network_code from CustomTargetingValue resource.
   *
   * @param {string} customTargetingValueName
   *   A fully-qualified path representing CustomTargetingValue resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCustomTargetingValueName(
    customTargetingValueName: string
  ) {
    return this.pathTemplates.customTargetingValuePathTemplate.match(
      customTargetingValueName
    ).network_code;
  }

  /**
   * Parse the custom_targeting_key from CustomTargetingValue resource.
   *
   * @param {string} customTargetingValueName
   *   A fully-qualified path representing CustomTargetingValue resource.
   * @returns {string} A string representing the custom_targeting_key.
   */
  matchCustomTargetingKeyFromCustomTargetingValueName(
    customTargetingValueName: string
  ) {
    return this.pathTemplates.customTargetingValuePathTemplate.match(
      customTargetingValueName
    ).custom_targeting_key;
  }

  /**
   * Parse the custom_targeting_value from CustomTargetingValue resource.
   *
   * @param {string} customTargetingValueName
   *   A fully-qualified path representing CustomTargetingValue resource.
   * @returns {string} A string representing the custom_targeting_value.
   */
  matchCustomTargetingValueFromCustomTargetingValueName(
    customTargetingValueName: string
  ) {
    return this.pathTemplates.customTargetingValuePathTemplate.match(
      customTargetingValueName
    ).custom_targeting_value;
  }

  /**
   * Return a fully-qualified entitySignalsMapping resource name string.
   *
   * @param {string} network_code
   * @param {string} entity_signals_mapping
   * @returns {string} Resource name string.
   */
  entitySignalsMappingPath(networkCode: string, entitySignalsMapping: string) {
    return this.pathTemplates.entitySignalsMappingPathTemplate.render({
      network_code: networkCode,
      entity_signals_mapping: entitySignalsMapping,
    });
  }

  /**
   * Parse the network_code from EntitySignalsMapping resource.
   *
   * @param {string} entitySignalsMappingName
   *   A fully-qualified path representing EntitySignalsMapping resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromEntitySignalsMappingName(
    entitySignalsMappingName: string
  ) {
    return this.pathTemplates.entitySignalsMappingPathTemplate.match(
      entitySignalsMappingName
    ).network_code;
  }

  /**
   * Parse the entity_signals_mapping from EntitySignalsMapping resource.
   *
   * @param {string} entitySignalsMappingName
   *   A fully-qualified path representing EntitySignalsMapping resource.
   * @returns {string} A string representing the entity_signals_mapping.
   */
  matchEntitySignalsMappingFromEntitySignalsMappingName(
    entitySignalsMappingName: string
  ) {
    return this.pathTemplates.entitySignalsMappingPathTemplate.match(
      entitySignalsMappingName
    ).entity_signals_mapping;
  }

  /**
   * Return a fully-qualified label resource name string.
   *
   * @param {string} network_code
   * @param {string} label
   * @returns {string} Resource name string.
   */
  labelPath(networkCode: string, label: string) {
    return this.pathTemplates.labelPathTemplate.render({
      network_code: networkCode,
      label: label,
    });
  }

  /**
   * Parse the network_code from Label resource.
   *
   * @param {string} labelName
   *   A fully-qualified path representing Label resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromLabelName(labelName: string) {
    return this.pathTemplates.labelPathTemplate.match(labelName).network_code;
  }

  /**
   * Parse the label from Label resource.
   *
   * @param {string} labelName
   *   A fully-qualified path representing Label resource.
   * @returns {string} A string representing the label.
   */
  matchLabelFromLabelName(labelName: string) {
    return this.pathTemplates.labelPathTemplate.match(labelName).label;
  }

  /**
   * Return a fully-qualified network resource name string.
   *
   * @param {string} network_code
   * @returns {string} Resource name string.
   */
  networkPath(networkCode: string) {
    return this.pathTemplates.networkPathTemplate.render({
      network_code: networkCode,
    });
  }

  /**
   * Parse the network_code from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName)
      .network_code;
  }

  /**
   * Return a fully-qualified order resource name string.
   *
   * @param {string} network_code
   * @param {string} order
   * @returns {string} Resource name string.
   */
  orderPath(networkCode: string, order: string) {
    return this.pathTemplates.orderPathTemplate.render({
      network_code: networkCode,
      order: order,
    });
  }

  /**
   * Parse the network_code from Order resource.
   *
   * @param {string} orderName
   *   A fully-qualified path representing Order resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromOrderName(orderName: string) {
    return this.pathTemplates.orderPathTemplate.match(orderName).network_code;
  }

  /**
   * Parse the order from Order resource.
   *
   * @param {string} orderName
   *   A fully-qualified path representing Order resource.
   * @returns {string} A string representing the order.
   */
  matchOrderFromOrderName(orderName: string) {
    return this.pathTemplates.orderPathTemplate.match(orderName).order;
  }

  /**
   * Return a fully-qualified placement resource name string.
   *
   * @param {string} network_code
   * @param {string} placement
   * @returns {string} Resource name string.
   */
  placementPath(networkCode: string, placement: string) {
    return this.pathTemplates.placementPathTemplate.render({
      network_code: networkCode,
      placement: placement,
    });
  }

  /**
   * Parse the network_code from Placement resource.
   *
   * @param {string} placementName
   *   A fully-qualified path representing Placement resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromPlacementName(placementName: string) {
    return this.pathTemplates.placementPathTemplate.match(placementName)
      .network_code;
  }

  /**
   * Parse the placement from Placement resource.
   *
   * @param {string} placementName
   *   A fully-qualified path representing Placement resource.
   * @returns {string} A string representing the placement.
   */
  matchPlacementFromPlacementName(placementName: string) {
    return this.pathTemplates.placementPathTemplate.match(placementName)
      .placement;
  }

  /**
   * Return a fully-qualified report resource name string.
   *
   * @param {string} network_code
   * @param {string} report
   * @returns {string} Resource name string.
   */
  reportPath(networkCode: string, report: string) {
    return this.pathTemplates.reportPathTemplate.render({
      network_code: networkCode,
      report: report,
    });
  }

  /**
   * Parse the network_code from Report resource.
   *
   * @param {string} reportName
   *   A fully-qualified path representing Report resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromReportName(reportName: string) {
    return this.pathTemplates.reportPathTemplate.match(reportName).network_code;
  }

  /**
   * Parse the report from Report resource.
   *
   * @param {string} reportName
   *   A fully-qualified path representing Report resource.
   * @returns {string} A string representing the report.
   */
  matchReportFromReportName(reportName: string) {
    return this.pathTemplates.reportPathTemplate.match(reportName).report;
  }

  /**
   * Return a fully-qualified role resource name string.
   *
   * @param {string} network_code
   * @param {string} role
   * @returns {string} Resource name string.
   */
  rolePath(networkCode: string, role: string) {
    return this.pathTemplates.rolePathTemplate.render({
      network_code: networkCode,
      role: role,
    });
  }

  /**
   * Parse the network_code from Role resource.
   *
   * @param {string} roleName
   *   A fully-qualified path representing Role resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromRoleName(roleName: string) {
    return this.pathTemplates.rolePathTemplate.match(roleName).network_code;
  }

  /**
   * Parse the role from Role resource.
   *
   * @param {string} roleName
   *   A fully-qualified path representing Role resource.
   * @returns {string} A string representing the role.
   */
  matchRoleFromRoleName(roleName: string) {
    return this.pathTemplates.rolePathTemplate.match(roleName).role;
  }

  /**
   * Return a fully-qualified taxonomyCategory resource name string.
   *
   * @param {string} network_code
   * @param {string} taxonomy_category
   * @returns {string} Resource name string.
   */
  taxonomyCategoryPath(networkCode: string, taxonomyCategory: string) {
    return this.pathTemplates.taxonomyCategoryPathTemplate.render({
      network_code: networkCode,
      taxonomy_category: taxonomyCategory,
    });
  }

  /**
   * Parse the network_code from TaxonomyCategory resource.
   *
   * @param {string} taxonomyCategoryName
   *   A fully-qualified path representing TaxonomyCategory resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromTaxonomyCategoryName(taxonomyCategoryName: string) {
    return this.pathTemplates.taxonomyCategoryPathTemplate.match(
      taxonomyCategoryName
    ).network_code;
  }

  /**
   * Parse the taxonomy_category from TaxonomyCategory resource.
   *
   * @param {string} taxonomyCategoryName
   *   A fully-qualified path representing TaxonomyCategory resource.
   * @returns {string} A string representing the taxonomy_category.
   */
  matchTaxonomyCategoryFromTaxonomyCategoryName(taxonomyCategoryName: string) {
    return this.pathTemplates.taxonomyCategoryPathTemplate.match(
      taxonomyCategoryName
    ).taxonomy_category;
  }

  /**
   * Return a fully-qualified team resource name string.
   *
   * @param {string} network_code
   * @param {string} team
   * @returns {string} Resource name string.
   */
  teamPath(networkCode: string, team: string) {
    return this.pathTemplates.teamPathTemplate.render({
      network_code: networkCode,
      team: team,
    });
  }

  /**
   * Parse the network_code from Team resource.
   *
   * @param {string} teamName
   *   A fully-qualified path representing Team resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromTeamName(teamName: string) {
    return this.pathTemplates.teamPathTemplate.match(teamName).network_code;
  }

  /**
   * Parse the team from Team resource.
   *
   * @param {string} teamName
   *   A fully-qualified path representing Team resource.
   * @returns {string} A string representing the team.
   */
  matchTeamFromTeamName(teamName: string) {
    return this.pathTemplates.teamPathTemplate.match(teamName).team;
  }

  /**
   * Return a fully-qualified user resource name string.
   *
   * @param {string} network_code
   * @param {string} user
   * @returns {string} Resource name string.
   */
  userPath(networkCode: string, user: string) {
    return this.pathTemplates.userPathTemplate.render({
      network_code: networkCode,
      user: user,
    });
  }

  /**
   * Parse the network_code from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).network_code;
  }

  /**
   * Parse the user from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the user.
   */
  matchUserFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).user;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.reportServiceStub && !this._terminated) {
      return this.reportServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
