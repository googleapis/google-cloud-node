// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax/build/src/protobuf").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_language_protos || ($protobuf.roots._google_cloud_language_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.cloud = (function() {
    
            /**
             * Namespace cloud.
             * @memberof google
             * @namespace
             */
            var cloud = {};
    
            cloud.language = (function() {
    
                /**
                 * Namespace language.
                 * @memberof google.cloud
                 * @namespace
                 */
                var language = {};
    
                language.v1 = (function() {
    
                    /**
                     * Namespace v1.
                     * @memberof google.cloud.language
                     * @namespace
                     */
                    var v1 = {};
    
                    v1.LanguageService = (function() {
    
                        /**
                         * Constructs a new LanguageService service.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a LanguageService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function LanguageService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (LanguageService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = LanguageService;
    
                        /**
                         * Creates new LanguageService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.language.v1.LanguageService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {LanguageService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        LanguageService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1.LanguageService|analyzeSentiment}.
                         * @memberof google.cloud.language.v1.LanguageService
                         * @typedef AnalyzeSentimentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1.AnalyzeSentimentResponse} [response] AnalyzeSentimentResponse
                         */
    
                        /**
                         * Calls AnalyzeSentiment.
                         * @function analyzeSentiment
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IAnalyzeSentimentRequest} request AnalyzeSentimentRequest message or plain object
                         * @param {google.cloud.language.v1.LanguageService.AnalyzeSentimentCallback} callback Node-style callback called with the error, if any, and AnalyzeSentimentResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.analyzeSentiment = function analyzeSentiment(request, callback) {
                            return this.rpcCall(analyzeSentiment, $root.google.cloud.language.v1.AnalyzeSentimentRequest, $root.google.cloud.language.v1.AnalyzeSentimentResponse, request, callback);
                        }, "name", { value: "AnalyzeSentiment" });
    
                        /**
                         * Calls AnalyzeSentiment.
                         * @function analyzeSentiment
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IAnalyzeSentimentRequest} request AnalyzeSentimentRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1.AnalyzeSentimentResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1.LanguageService|analyzeEntities}.
                         * @memberof google.cloud.language.v1.LanguageService
                         * @typedef AnalyzeEntitiesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1.AnalyzeEntitiesResponse} [response] AnalyzeEntitiesResponse
                         */
    
                        /**
                         * Calls AnalyzeEntities.
                         * @function analyzeEntities
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IAnalyzeEntitiesRequest} request AnalyzeEntitiesRequest message or plain object
                         * @param {google.cloud.language.v1.LanguageService.AnalyzeEntitiesCallback} callback Node-style callback called with the error, if any, and AnalyzeEntitiesResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.analyzeEntities = function analyzeEntities(request, callback) {
                            return this.rpcCall(analyzeEntities, $root.google.cloud.language.v1.AnalyzeEntitiesRequest, $root.google.cloud.language.v1.AnalyzeEntitiesResponse, request, callback);
                        }, "name", { value: "AnalyzeEntities" });
    
                        /**
                         * Calls AnalyzeEntities.
                         * @function analyzeEntities
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IAnalyzeEntitiesRequest} request AnalyzeEntitiesRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1.AnalyzeEntitiesResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1.LanguageService|analyzeEntitySentiment}.
                         * @memberof google.cloud.language.v1.LanguageService
                         * @typedef AnalyzeEntitySentimentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1.AnalyzeEntitySentimentResponse} [response] AnalyzeEntitySentimentResponse
                         */
    
                        /**
                         * Calls AnalyzeEntitySentiment.
                         * @function analyzeEntitySentiment
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IAnalyzeEntitySentimentRequest} request AnalyzeEntitySentimentRequest message or plain object
                         * @param {google.cloud.language.v1.LanguageService.AnalyzeEntitySentimentCallback} callback Node-style callback called with the error, if any, and AnalyzeEntitySentimentResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.analyzeEntitySentiment = function analyzeEntitySentiment(request, callback) {
                            return this.rpcCall(analyzeEntitySentiment, $root.google.cloud.language.v1.AnalyzeEntitySentimentRequest, $root.google.cloud.language.v1.AnalyzeEntitySentimentResponse, request, callback);
                        }, "name", { value: "AnalyzeEntitySentiment" });
    
                        /**
                         * Calls AnalyzeEntitySentiment.
                         * @function analyzeEntitySentiment
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IAnalyzeEntitySentimentRequest} request AnalyzeEntitySentimentRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1.AnalyzeEntitySentimentResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1.LanguageService|analyzeSyntax}.
                         * @memberof google.cloud.language.v1.LanguageService
                         * @typedef AnalyzeSyntaxCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1.AnalyzeSyntaxResponse} [response] AnalyzeSyntaxResponse
                         */
    
                        /**
                         * Calls AnalyzeSyntax.
                         * @function analyzeSyntax
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IAnalyzeSyntaxRequest} request AnalyzeSyntaxRequest message or plain object
                         * @param {google.cloud.language.v1.LanguageService.AnalyzeSyntaxCallback} callback Node-style callback called with the error, if any, and AnalyzeSyntaxResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.analyzeSyntax = function analyzeSyntax(request, callback) {
                            return this.rpcCall(analyzeSyntax, $root.google.cloud.language.v1.AnalyzeSyntaxRequest, $root.google.cloud.language.v1.AnalyzeSyntaxResponse, request, callback);
                        }, "name", { value: "AnalyzeSyntax" });
    
                        /**
                         * Calls AnalyzeSyntax.
                         * @function analyzeSyntax
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IAnalyzeSyntaxRequest} request AnalyzeSyntaxRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1.AnalyzeSyntaxResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1.LanguageService|classifyText}.
                         * @memberof google.cloud.language.v1.LanguageService
                         * @typedef ClassifyTextCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1.ClassifyTextResponse} [response] ClassifyTextResponse
                         */
    
                        /**
                         * Calls ClassifyText.
                         * @function classifyText
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IClassifyTextRequest} request ClassifyTextRequest message or plain object
                         * @param {google.cloud.language.v1.LanguageService.ClassifyTextCallback} callback Node-style callback called with the error, if any, and ClassifyTextResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.classifyText = function classifyText(request, callback) {
                            return this.rpcCall(classifyText, $root.google.cloud.language.v1.ClassifyTextRequest, $root.google.cloud.language.v1.ClassifyTextResponse, request, callback);
                        }, "name", { value: "ClassifyText" });
    
                        /**
                         * Calls ClassifyText.
                         * @function classifyText
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IClassifyTextRequest} request ClassifyTextRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1.ClassifyTextResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1.LanguageService|annotateText}.
                         * @memberof google.cloud.language.v1.LanguageService
                         * @typedef AnnotateTextCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1.AnnotateTextResponse} [response] AnnotateTextResponse
                         */
    
                        /**
                         * Calls AnnotateText.
                         * @function annotateText
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IAnnotateTextRequest} request AnnotateTextRequest message or plain object
                         * @param {google.cloud.language.v1.LanguageService.AnnotateTextCallback} callback Node-style callback called with the error, if any, and AnnotateTextResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.annotateText = function annotateText(request, callback) {
                            return this.rpcCall(annotateText, $root.google.cloud.language.v1.AnnotateTextRequest, $root.google.cloud.language.v1.AnnotateTextResponse, request, callback);
                        }, "name", { value: "AnnotateText" });
    
                        /**
                         * Calls AnnotateText.
                         * @function annotateText
                         * @memberof google.cloud.language.v1.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1.IAnnotateTextRequest} request AnnotateTextRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1.AnnotateTextResponse>} Promise
                         * @variation 2
                         */
    
                        return LanguageService;
                    })();
    
                    v1.Document = (function() {
    
                        /**
                         * Properties of a Document.
                         * @memberof google.cloud.language.v1
                         * @interface IDocument
                         * @property {google.cloud.language.v1.Document.Type|null} [type] Document type
                         * @property {string|null} [content] Document content
                         * @property {string|null} [gcsContentUri] Document gcsContentUri
                         * @property {string|null} [language] Document language
                         */
    
                        /**
                         * Constructs a new Document.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a Document.
                         * @implements IDocument
                         * @constructor
                         * @param {google.cloud.language.v1.IDocument=} [properties] Properties to set
                         */
                        function Document(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Document type.
                         * @member {google.cloud.language.v1.Document.Type} type
                         * @memberof google.cloud.language.v1.Document
                         * @instance
                         */
                        Document.prototype.type = 0;
    
                        /**
                         * Document content.
                         * @member {string|null|undefined} content
                         * @memberof google.cloud.language.v1.Document
                         * @instance
                         */
                        Document.prototype.content = null;
    
                        /**
                         * Document gcsContentUri.
                         * @member {string|null|undefined} gcsContentUri
                         * @memberof google.cloud.language.v1.Document
                         * @instance
                         */
                        Document.prototype.gcsContentUri = null;
    
                        /**
                         * Document language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1.Document
                         * @instance
                         */
                        Document.prototype.language = "";
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Document source.
                         * @member {"content"|"gcsContentUri"|undefined} source
                         * @memberof google.cloud.language.v1.Document
                         * @instance
                         */
                        Object.defineProperty(Document.prototype, "source", {
                            get: $util.oneOfGetter($oneOfFields = ["content", "gcsContentUri"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Document instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.Document
                         * @static
                         * @param {google.cloud.language.v1.IDocument=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.Document} Document instance
                         */
                        Document.create = function create(properties) {
                            return new Document(properties);
                        };
    
                        /**
                         * Encodes the specified Document message. Does not implicitly {@link google.cloud.language.v1.Document.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.Document
                         * @static
                         * @param {google.cloud.language.v1.IDocument} message Document message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Document.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
                            if (message.gcsContentUri != null && Object.hasOwnProperty.call(message, "gcsContentUri"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.gcsContentUri);
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.language);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Document message, length delimited. Does not implicitly {@link google.cloud.language.v1.Document.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.Document
                         * @static
                         * @param {google.cloud.language.v1.IDocument} message Document message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Document.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Document message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.Document
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.Document} Document
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Document.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.Document();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.content = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.gcsContentUri = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.language = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Document message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.Document
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.Document} Document
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Document.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Document message.
                         * @function verify
                         * @memberof google.cloud.language.v1.Document
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Document.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.content != null && message.hasOwnProperty("content")) {
                                properties.source = 1;
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            }
                            if (message.gcsContentUri != null && message.hasOwnProperty("gcsContentUri")) {
                                if (properties.source === 1)
                                    return "source: multiple values";
                                properties.source = 1;
                                if (!$util.isString(message.gcsContentUri))
                                    return "gcsContentUri: string expected";
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Document message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.Document
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.Document} Document
                         */
                        Document.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.Document)
                                return object;
                            var message = new $root.google.cloud.language.v1.Document();
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "TYPE_UNSPECIFIED":
                            case 0:
                                message.type = 0;
                                break;
                            case "PLAIN_TEXT":
                            case 1:
                                message.type = 1;
                                break;
                            case "HTML":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.gcsContentUri != null)
                                message.gcsContentUri = String(object.gcsContentUri);
                            if (object.language != null)
                                message.language = String(object.language);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Document message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.Document
                         * @static
                         * @param {google.cloud.language.v1.Document} message Document
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Document.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                                object.language = "";
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.cloud.language.v1.Document.Type[message.type] === undefined ? message.type : $root.google.cloud.language.v1.Document.Type[message.type] : message.type;
                            if (message.content != null && message.hasOwnProperty("content")) {
                                object.content = message.content;
                                if (options.oneofs)
                                    object.source = "content";
                            }
                            if (message.gcsContentUri != null && message.hasOwnProperty("gcsContentUri")) {
                                object.gcsContentUri = message.gcsContentUri;
                                if (options.oneofs)
                                    object.source = "gcsContentUri";
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            return object;
                        };
    
                        /**
                         * Converts this Document to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.Document
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Document.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Document
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.Document
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Document.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.Document";
                        };
    
                        /**
                         * Type enum.
                         * @name google.cloud.language.v1.Document.Type
                         * @enum {number}
                         * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                         * @property {number} PLAIN_TEXT=1 PLAIN_TEXT value
                         * @property {number} HTML=2 HTML value
                         */
                        Document.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PLAIN_TEXT"] = 1;
                            values[valuesById[2] = "HTML"] = 2;
                            return values;
                        })();
    
                        return Document;
                    })();
    
                    v1.Sentence = (function() {
    
                        /**
                         * Properties of a Sentence.
                         * @memberof google.cloud.language.v1
                         * @interface ISentence
                         * @property {google.cloud.language.v1.ITextSpan|null} [text] Sentence text
                         * @property {google.cloud.language.v1.ISentiment|null} [sentiment] Sentence sentiment
                         */
    
                        /**
                         * Constructs a new Sentence.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a Sentence.
                         * @implements ISentence
                         * @constructor
                         * @param {google.cloud.language.v1.ISentence=} [properties] Properties to set
                         */
                        function Sentence(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Sentence text.
                         * @member {google.cloud.language.v1.ITextSpan|null|undefined} text
                         * @memberof google.cloud.language.v1.Sentence
                         * @instance
                         */
                        Sentence.prototype.text = null;
    
                        /**
                         * Sentence sentiment.
                         * @member {google.cloud.language.v1.ISentiment|null|undefined} sentiment
                         * @memberof google.cloud.language.v1.Sentence
                         * @instance
                         */
                        Sentence.prototype.sentiment = null;
    
                        /**
                         * Creates a new Sentence instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.Sentence
                         * @static
                         * @param {google.cloud.language.v1.ISentence=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.Sentence} Sentence instance
                         */
                        Sentence.create = function create(properties) {
                            return new Sentence(properties);
                        };
    
                        /**
                         * Encodes the specified Sentence message. Does not implicitly {@link google.cloud.language.v1.Sentence.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.Sentence
                         * @static
                         * @param {google.cloud.language.v1.ISentence} message Sentence message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Sentence.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                $root.google.cloud.language.v1.TextSpan.encode(message.text, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.sentiment != null && Object.hasOwnProperty.call(message, "sentiment"))
                                $root.google.cloud.language.v1.Sentiment.encode(message.sentiment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Sentence message, length delimited. Does not implicitly {@link google.cloud.language.v1.Sentence.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.Sentence
                         * @static
                         * @param {google.cloud.language.v1.ISentence} message Sentence message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Sentence.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Sentence message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.Sentence
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.Sentence} Sentence
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Sentence.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.Sentence();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = $root.google.cloud.language.v1.TextSpan.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.sentiment = $root.google.cloud.language.v1.Sentiment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Sentence message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.Sentence
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.Sentence} Sentence
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Sentence.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Sentence message.
                         * @function verify
                         * @memberof google.cloud.language.v1.Sentence
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Sentence.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text")) {
                                var error = $root.google.cloud.language.v1.TextSpan.verify(message.text);
                                if (error)
                                    return "text." + error;
                            }
                            if (message.sentiment != null && message.hasOwnProperty("sentiment")) {
                                var error = $root.google.cloud.language.v1.Sentiment.verify(message.sentiment);
                                if (error)
                                    return "sentiment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Sentence message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.Sentence
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.Sentence} Sentence
                         */
                        Sentence.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.Sentence)
                                return object;
                            var message = new $root.google.cloud.language.v1.Sentence();
                            if (object.text != null) {
                                if (typeof object.text !== "object")
                                    throw TypeError(".google.cloud.language.v1.Sentence.text: object expected");
                                message.text = $root.google.cloud.language.v1.TextSpan.fromObject(object.text);
                            }
                            if (object.sentiment != null) {
                                if (typeof object.sentiment !== "object")
                                    throw TypeError(".google.cloud.language.v1.Sentence.sentiment: object expected");
                                message.sentiment = $root.google.cloud.language.v1.Sentiment.fromObject(object.sentiment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Sentence message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.Sentence
                         * @static
                         * @param {google.cloud.language.v1.Sentence} message Sentence
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Sentence.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.text = null;
                                object.sentiment = null;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = $root.google.cloud.language.v1.TextSpan.toObject(message.text, options);
                            if (message.sentiment != null && message.hasOwnProperty("sentiment"))
                                object.sentiment = $root.google.cloud.language.v1.Sentiment.toObject(message.sentiment, options);
                            return object;
                        };
    
                        /**
                         * Converts this Sentence to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.Sentence
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Sentence.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Sentence
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.Sentence
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Sentence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.Sentence";
                        };
    
                        return Sentence;
                    })();
    
                    /**
                     * EncodingType enum.
                     * @name google.cloud.language.v1.EncodingType
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} UTF8=1 UTF8 value
                     * @property {number} UTF16=2 UTF16 value
                     * @property {number} UTF32=3 UTF32 value
                     */
                    v1.EncodingType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "UTF8"] = 1;
                        values[valuesById[2] = "UTF16"] = 2;
                        values[valuesById[3] = "UTF32"] = 3;
                        return values;
                    })();
    
                    v1.Entity = (function() {
    
                        /**
                         * Properties of an Entity.
                         * @memberof google.cloud.language.v1
                         * @interface IEntity
                         * @property {string|null} [name] Entity name
                         * @property {google.cloud.language.v1.Entity.Type|null} [type] Entity type
                         * @property {Object.<string,string>|null} [metadata] Entity metadata
                         * @property {number|null} [salience] Entity salience
                         * @property {Array.<google.cloud.language.v1.IEntityMention>|null} [mentions] Entity mentions
                         * @property {google.cloud.language.v1.ISentiment|null} [sentiment] Entity sentiment
                         */
    
                        /**
                         * Constructs a new Entity.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an Entity.
                         * @implements IEntity
                         * @constructor
                         * @param {google.cloud.language.v1.IEntity=} [properties] Properties to set
                         */
                        function Entity(properties) {
                            this.metadata = {};
                            this.mentions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Entity name.
                         * @member {string} name
                         * @memberof google.cloud.language.v1.Entity
                         * @instance
                         */
                        Entity.prototype.name = "";
    
                        /**
                         * Entity type.
                         * @member {google.cloud.language.v1.Entity.Type} type
                         * @memberof google.cloud.language.v1.Entity
                         * @instance
                         */
                        Entity.prototype.type = 0;
    
                        /**
                         * Entity metadata.
                         * @member {Object.<string,string>} metadata
                         * @memberof google.cloud.language.v1.Entity
                         * @instance
                         */
                        Entity.prototype.metadata = $util.emptyObject;
    
                        /**
                         * Entity salience.
                         * @member {number} salience
                         * @memberof google.cloud.language.v1.Entity
                         * @instance
                         */
                        Entity.prototype.salience = 0;
    
                        /**
                         * Entity mentions.
                         * @member {Array.<google.cloud.language.v1.IEntityMention>} mentions
                         * @memberof google.cloud.language.v1.Entity
                         * @instance
                         */
                        Entity.prototype.mentions = $util.emptyArray;
    
                        /**
                         * Entity sentiment.
                         * @member {google.cloud.language.v1.ISentiment|null|undefined} sentiment
                         * @memberof google.cloud.language.v1.Entity
                         * @instance
                         */
                        Entity.prototype.sentiment = null;
    
                        /**
                         * Creates a new Entity instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.Entity
                         * @static
                         * @param {google.cloud.language.v1.IEntity=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.Entity} Entity instance
                         */
                        Entity.create = function create(properties) {
                            return new Entity(properties);
                        };
    
                        /**
                         * Encodes the specified Entity message. Does not implicitly {@link google.cloud.language.v1.Entity.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.Entity
                         * @static
                         * @param {google.cloud.language.v1.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                            if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                for (var keys = Object.keys(message.metadata), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.metadata[keys[i]]).ldelim();
                            if (message.salience != null && Object.hasOwnProperty.call(message, "salience"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.salience);
                            if (message.mentions != null && message.mentions.length)
                                for (var i = 0; i < message.mentions.length; ++i)
                                    $root.google.cloud.language.v1.EntityMention.encode(message.mentions[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.sentiment != null && Object.hasOwnProperty.call(message, "sentiment"))
                                $root.google.cloud.language.v1.Sentiment.encode(message.sentiment, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Entity message, length delimited. Does not implicitly {@link google.cloud.language.v1.Entity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.Entity
                         * @static
                         * @param {google.cloud.language.v1.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.Entity(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        if (message.metadata === $util.emptyObject)
                                            message.metadata = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.metadata[key] = value;
                                        break;
                                    }
                                case 4: {
                                        message.salience = reader.float();
                                        break;
                                    }
                                case 5: {
                                        if (!(message.mentions && message.mentions.length))
                                            message.mentions = [];
                                        message.mentions.push($root.google.cloud.language.v1.EntityMention.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        message.sentiment = $root.google.cloud.language.v1.Sentiment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Entity message.
                         * @function verify
                         * @memberof google.cloud.language.v1.Entity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Entity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                    break;
                                }
                            if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                if (!$util.isObject(message.metadata))
                                    return "metadata: object expected";
                                var key = Object.keys(message.metadata);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.metadata[key[i]]))
                                        return "metadata: string{k:string} expected";
                            }
                            if (message.salience != null && message.hasOwnProperty("salience"))
                                if (typeof message.salience !== "number")
                                    return "salience: number expected";
                            if (message.mentions != null && message.hasOwnProperty("mentions")) {
                                if (!Array.isArray(message.mentions))
                                    return "mentions: array expected";
                                for (var i = 0; i < message.mentions.length; ++i) {
                                    var error = $root.google.cloud.language.v1.EntityMention.verify(message.mentions[i]);
                                    if (error)
                                        return "mentions." + error;
                                }
                            }
                            if (message.sentiment != null && message.hasOwnProperty("sentiment")) {
                                var error = $root.google.cloud.language.v1.Sentiment.verify(message.sentiment);
                                if (error)
                                    return "sentiment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Entity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.Entity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.Entity} Entity
                         */
                        Entity.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.Entity)
                                return object;
                            var message = new $root.google.cloud.language.v1.Entity();
                            if (object.name != null)
                                message.name = String(object.name);
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "UNKNOWN":
                            case 0:
                                message.type = 0;
                                break;
                            case "PERSON":
                            case 1:
                                message.type = 1;
                                break;
                            case "LOCATION":
                            case 2:
                                message.type = 2;
                                break;
                            case "ORGANIZATION":
                            case 3:
                                message.type = 3;
                                break;
                            case "EVENT":
                            case 4:
                                message.type = 4;
                                break;
                            case "WORK_OF_ART":
                            case 5:
                                message.type = 5;
                                break;
                            case "CONSUMER_GOOD":
                            case 6:
                                message.type = 6;
                                break;
                            case "OTHER":
                            case 7:
                                message.type = 7;
                                break;
                            case "PHONE_NUMBER":
                            case 9:
                                message.type = 9;
                                break;
                            case "ADDRESS":
                            case 10:
                                message.type = 10;
                                break;
                            case "DATE":
                            case 11:
                                message.type = 11;
                                break;
                            case "NUMBER":
                            case 12:
                                message.type = 12;
                                break;
                            case "PRICE":
                            case 13:
                                message.type = 13;
                                break;
                            }
                            if (object.metadata) {
                                if (typeof object.metadata !== "object")
                                    throw TypeError(".google.cloud.language.v1.Entity.metadata: object expected");
                                message.metadata = {};
                                for (var keys = Object.keys(object.metadata), i = 0; i < keys.length; ++i)
                                    message.metadata[keys[i]] = String(object.metadata[keys[i]]);
                            }
                            if (object.salience != null)
                                message.salience = Number(object.salience);
                            if (object.mentions) {
                                if (!Array.isArray(object.mentions))
                                    throw TypeError(".google.cloud.language.v1.Entity.mentions: array expected");
                                message.mentions = [];
                                for (var i = 0; i < object.mentions.length; ++i) {
                                    if (typeof object.mentions[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.Entity.mentions: object expected");
                                    message.mentions[i] = $root.google.cloud.language.v1.EntityMention.fromObject(object.mentions[i]);
                                }
                            }
                            if (object.sentiment != null) {
                                if (typeof object.sentiment !== "object")
                                    throw TypeError(".google.cloud.language.v1.Entity.sentiment: object expected");
                                message.sentiment = $root.google.cloud.language.v1.Sentiment.fromObject(object.sentiment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Entity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.Entity
                         * @static
                         * @param {google.cloud.language.v1.Entity} message Entity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Entity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.mentions = [];
                            if (options.objects || options.defaults)
                                object.metadata = {};
                            if (options.defaults) {
                                object.name = "";
                                object.type = options.enums === String ? "UNKNOWN" : 0;
                                object.salience = 0;
                                object.sentiment = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.cloud.language.v1.Entity.Type[message.type] === undefined ? message.type : $root.google.cloud.language.v1.Entity.Type[message.type] : message.type;
                            var keys2;
                            if (message.metadata && (keys2 = Object.keys(message.metadata)).length) {
                                object.metadata = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.metadata[keys2[j]] = message.metadata[keys2[j]];
                            }
                            if (message.salience != null && message.hasOwnProperty("salience"))
                                object.salience = options.json && !isFinite(message.salience) ? String(message.salience) : message.salience;
                            if (message.mentions && message.mentions.length) {
                                object.mentions = [];
                                for (var j = 0; j < message.mentions.length; ++j)
                                    object.mentions[j] = $root.google.cloud.language.v1.EntityMention.toObject(message.mentions[j], options);
                            }
                            if (message.sentiment != null && message.hasOwnProperty("sentiment"))
                                object.sentiment = $root.google.cloud.language.v1.Sentiment.toObject(message.sentiment, options);
                            return object;
                        };
    
                        /**
                         * Converts this Entity to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.Entity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Entity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Entity
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.Entity
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.Entity";
                        };
    
                        /**
                         * Type enum.
                         * @name google.cloud.language.v1.Entity.Type
                         * @enum {number}
                         * @property {number} UNKNOWN=0 UNKNOWN value
                         * @property {number} PERSON=1 PERSON value
                         * @property {number} LOCATION=2 LOCATION value
                         * @property {number} ORGANIZATION=3 ORGANIZATION value
                         * @property {number} EVENT=4 EVENT value
                         * @property {number} WORK_OF_ART=5 WORK_OF_ART value
                         * @property {number} CONSUMER_GOOD=6 CONSUMER_GOOD value
                         * @property {number} OTHER=7 OTHER value
                         * @property {number} PHONE_NUMBER=9 PHONE_NUMBER value
                         * @property {number} ADDRESS=10 ADDRESS value
                         * @property {number} DATE=11 DATE value
                         * @property {number} NUMBER=12 NUMBER value
                         * @property {number} PRICE=13 PRICE value
                         */
                        Entity.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "UNKNOWN"] = 0;
                            values[valuesById[1] = "PERSON"] = 1;
                            values[valuesById[2] = "LOCATION"] = 2;
                            values[valuesById[3] = "ORGANIZATION"] = 3;
                            values[valuesById[4] = "EVENT"] = 4;
                            values[valuesById[5] = "WORK_OF_ART"] = 5;
                            values[valuesById[6] = "CONSUMER_GOOD"] = 6;
                            values[valuesById[7] = "OTHER"] = 7;
                            values[valuesById[9] = "PHONE_NUMBER"] = 9;
                            values[valuesById[10] = "ADDRESS"] = 10;
                            values[valuesById[11] = "DATE"] = 11;
                            values[valuesById[12] = "NUMBER"] = 12;
                            values[valuesById[13] = "PRICE"] = 13;
                            return values;
                        })();
    
                        return Entity;
                    })();
    
                    v1.Token = (function() {
    
                        /**
                         * Properties of a Token.
                         * @memberof google.cloud.language.v1
                         * @interface IToken
                         * @property {google.cloud.language.v1.ITextSpan|null} [text] Token text
                         * @property {google.cloud.language.v1.IPartOfSpeech|null} [partOfSpeech] Token partOfSpeech
                         * @property {google.cloud.language.v1.IDependencyEdge|null} [dependencyEdge] Token dependencyEdge
                         * @property {string|null} [lemma] Token lemma
                         */
    
                        /**
                         * Constructs a new Token.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a Token.
                         * @implements IToken
                         * @constructor
                         * @param {google.cloud.language.v1.IToken=} [properties] Properties to set
                         */
                        function Token(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Token text.
                         * @member {google.cloud.language.v1.ITextSpan|null|undefined} text
                         * @memberof google.cloud.language.v1.Token
                         * @instance
                         */
                        Token.prototype.text = null;
    
                        /**
                         * Token partOfSpeech.
                         * @member {google.cloud.language.v1.IPartOfSpeech|null|undefined} partOfSpeech
                         * @memberof google.cloud.language.v1.Token
                         * @instance
                         */
                        Token.prototype.partOfSpeech = null;
    
                        /**
                         * Token dependencyEdge.
                         * @member {google.cloud.language.v1.IDependencyEdge|null|undefined} dependencyEdge
                         * @memberof google.cloud.language.v1.Token
                         * @instance
                         */
                        Token.prototype.dependencyEdge = null;
    
                        /**
                         * Token lemma.
                         * @member {string} lemma
                         * @memberof google.cloud.language.v1.Token
                         * @instance
                         */
                        Token.prototype.lemma = "";
    
                        /**
                         * Creates a new Token instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.Token
                         * @static
                         * @param {google.cloud.language.v1.IToken=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.Token} Token instance
                         */
                        Token.create = function create(properties) {
                            return new Token(properties);
                        };
    
                        /**
                         * Encodes the specified Token message. Does not implicitly {@link google.cloud.language.v1.Token.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.Token
                         * @static
                         * @param {google.cloud.language.v1.IToken} message Token message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Token.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                $root.google.cloud.language.v1.TextSpan.encode(message.text, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.partOfSpeech != null && Object.hasOwnProperty.call(message, "partOfSpeech"))
                                $root.google.cloud.language.v1.PartOfSpeech.encode(message.partOfSpeech, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.dependencyEdge != null && Object.hasOwnProperty.call(message, "dependencyEdge"))
                                $root.google.cloud.language.v1.DependencyEdge.encode(message.dependencyEdge, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.lemma != null && Object.hasOwnProperty.call(message, "lemma"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.lemma);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Token message, length delimited. Does not implicitly {@link google.cloud.language.v1.Token.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.Token
                         * @static
                         * @param {google.cloud.language.v1.IToken} message Token message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Token.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Token message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.Token
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.Token} Token
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Token.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.Token();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = $root.google.cloud.language.v1.TextSpan.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.partOfSpeech = $root.google.cloud.language.v1.PartOfSpeech.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.dependencyEdge = $root.google.cloud.language.v1.DependencyEdge.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.lemma = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Token message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.Token
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.Token} Token
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Token.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Token message.
                         * @function verify
                         * @memberof google.cloud.language.v1.Token
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Token.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text")) {
                                var error = $root.google.cloud.language.v1.TextSpan.verify(message.text);
                                if (error)
                                    return "text." + error;
                            }
                            if (message.partOfSpeech != null && message.hasOwnProperty("partOfSpeech")) {
                                var error = $root.google.cloud.language.v1.PartOfSpeech.verify(message.partOfSpeech);
                                if (error)
                                    return "partOfSpeech." + error;
                            }
                            if (message.dependencyEdge != null && message.hasOwnProperty("dependencyEdge")) {
                                var error = $root.google.cloud.language.v1.DependencyEdge.verify(message.dependencyEdge);
                                if (error)
                                    return "dependencyEdge." + error;
                            }
                            if (message.lemma != null && message.hasOwnProperty("lemma"))
                                if (!$util.isString(message.lemma))
                                    return "lemma: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Token message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.Token
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.Token} Token
                         */
                        Token.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.Token)
                                return object;
                            var message = new $root.google.cloud.language.v1.Token();
                            if (object.text != null) {
                                if (typeof object.text !== "object")
                                    throw TypeError(".google.cloud.language.v1.Token.text: object expected");
                                message.text = $root.google.cloud.language.v1.TextSpan.fromObject(object.text);
                            }
                            if (object.partOfSpeech != null) {
                                if (typeof object.partOfSpeech !== "object")
                                    throw TypeError(".google.cloud.language.v1.Token.partOfSpeech: object expected");
                                message.partOfSpeech = $root.google.cloud.language.v1.PartOfSpeech.fromObject(object.partOfSpeech);
                            }
                            if (object.dependencyEdge != null) {
                                if (typeof object.dependencyEdge !== "object")
                                    throw TypeError(".google.cloud.language.v1.Token.dependencyEdge: object expected");
                                message.dependencyEdge = $root.google.cloud.language.v1.DependencyEdge.fromObject(object.dependencyEdge);
                            }
                            if (object.lemma != null)
                                message.lemma = String(object.lemma);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Token message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.Token
                         * @static
                         * @param {google.cloud.language.v1.Token} message Token
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Token.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.text = null;
                                object.partOfSpeech = null;
                                object.dependencyEdge = null;
                                object.lemma = "";
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = $root.google.cloud.language.v1.TextSpan.toObject(message.text, options);
                            if (message.partOfSpeech != null && message.hasOwnProperty("partOfSpeech"))
                                object.partOfSpeech = $root.google.cloud.language.v1.PartOfSpeech.toObject(message.partOfSpeech, options);
                            if (message.dependencyEdge != null && message.hasOwnProperty("dependencyEdge"))
                                object.dependencyEdge = $root.google.cloud.language.v1.DependencyEdge.toObject(message.dependencyEdge, options);
                            if (message.lemma != null && message.hasOwnProperty("lemma"))
                                object.lemma = message.lemma;
                            return object;
                        };
    
                        /**
                         * Converts this Token to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.Token
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Token.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Token
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.Token
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Token.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.Token";
                        };
    
                        return Token;
                    })();
    
                    v1.Sentiment = (function() {
    
                        /**
                         * Properties of a Sentiment.
                         * @memberof google.cloud.language.v1
                         * @interface ISentiment
                         * @property {number|null} [magnitude] Sentiment magnitude
                         * @property {number|null} [score] Sentiment score
                         */
    
                        /**
                         * Constructs a new Sentiment.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a Sentiment.
                         * @implements ISentiment
                         * @constructor
                         * @param {google.cloud.language.v1.ISentiment=} [properties] Properties to set
                         */
                        function Sentiment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Sentiment magnitude.
                         * @member {number} magnitude
                         * @memberof google.cloud.language.v1.Sentiment
                         * @instance
                         */
                        Sentiment.prototype.magnitude = 0;
    
                        /**
                         * Sentiment score.
                         * @member {number} score
                         * @memberof google.cloud.language.v1.Sentiment
                         * @instance
                         */
                        Sentiment.prototype.score = 0;
    
                        /**
                         * Creates a new Sentiment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.Sentiment
                         * @static
                         * @param {google.cloud.language.v1.ISentiment=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.Sentiment} Sentiment instance
                         */
                        Sentiment.create = function create(properties) {
                            return new Sentiment(properties);
                        };
    
                        /**
                         * Encodes the specified Sentiment message. Does not implicitly {@link google.cloud.language.v1.Sentiment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.Sentiment
                         * @static
                         * @param {google.cloud.language.v1.ISentiment} message Sentiment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Sentiment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.magnitude != null && Object.hasOwnProperty.call(message, "magnitude"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.magnitude);
                            if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.score);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Sentiment message, length delimited. Does not implicitly {@link google.cloud.language.v1.Sentiment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.Sentiment
                         * @static
                         * @param {google.cloud.language.v1.ISentiment} message Sentiment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Sentiment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Sentiment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.Sentiment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.Sentiment} Sentiment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Sentiment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.Sentiment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2: {
                                        message.magnitude = reader.float();
                                        break;
                                    }
                                case 3: {
                                        message.score = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Sentiment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.Sentiment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.Sentiment} Sentiment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Sentiment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Sentiment message.
                         * @function verify
                         * @memberof google.cloud.language.v1.Sentiment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Sentiment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.magnitude != null && message.hasOwnProperty("magnitude"))
                                if (typeof message.magnitude !== "number")
                                    return "magnitude: number expected";
                            if (message.score != null && message.hasOwnProperty("score"))
                                if (typeof message.score !== "number")
                                    return "score: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a Sentiment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.Sentiment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.Sentiment} Sentiment
                         */
                        Sentiment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.Sentiment)
                                return object;
                            var message = new $root.google.cloud.language.v1.Sentiment();
                            if (object.magnitude != null)
                                message.magnitude = Number(object.magnitude);
                            if (object.score != null)
                                message.score = Number(object.score);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Sentiment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.Sentiment
                         * @static
                         * @param {google.cloud.language.v1.Sentiment} message Sentiment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Sentiment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.magnitude = 0;
                                object.score = 0;
                            }
                            if (message.magnitude != null && message.hasOwnProperty("magnitude"))
                                object.magnitude = options.json && !isFinite(message.magnitude) ? String(message.magnitude) : message.magnitude;
                            if (message.score != null && message.hasOwnProperty("score"))
                                object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;
                            return object;
                        };
    
                        /**
                         * Converts this Sentiment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.Sentiment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Sentiment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Sentiment
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.Sentiment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Sentiment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.Sentiment";
                        };
    
                        return Sentiment;
                    })();
    
                    v1.PartOfSpeech = (function() {
    
                        /**
                         * Properties of a PartOfSpeech.
                         * @memberof google.cloud.language.v1
                         * @interface IPartOfSpeech
                         * @property {google.cloud.language.v1.PartOfSpeech.Tag|null} [tag] PartOfSpeech tag
                         * @property {google.cloud.language.v1.PartOfSpeech.Aspect|null} [aspect] PartOfSpeech aspect
                         * @property {google.cloud.language.v1.PartOfSpeech.Case|null} ["case"] PartOfSpeech case
                         * @property {google.cloud.language.v1.PartOfSpeech.Form|null} [form] PartOfSpeech form
                         * @property {google.cloud.language.v1.PartOfSpeech.Gender|null} [gender] PartOfSpeech gender
                         * @property {google.cloud.language.v1.PartOfSpeech.Mood|null} [mood] PartOfSpeech mood
                         * @property {google.cloud.language.v1.PartOfSpeech.Number|null} [number] PartOfSpeech number
                         * @property {google.cloud.language.v1.PartOfSpeech.Person|null} [person] PartOfSpeech person
                         * @property {google.cloud.language.v1.PartOfSpeech.Proper|null} [proper] PartOfSpeech proper
                         * @property {google.cloud.language.v1.PartOfSpeech.Reciprocity|null} [reciprocity] PartOfSpeech reciprocity
                         * @property {google.cloud.language.v1.PartOfSpeech.Tense|null} [tense] PartOfSpeech tense
                         * @property {google.cloud.language.v1.PartOfSpeech.Voice|null} [voice] PartOfSpeech voice
                         */
    
                        /**
                         * Constructs a new PartOfSpeech.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a PartOfSpeech.
                         * @implements IPartOfSpeech
                         * @constructor
                         * @param {google.cloud.language.v1.IPartOfSpeech=} [properties] Properties to set
                         */
                        function PartOfSpeech(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PartOfSpeech tag.
                         * @member {google.cloud.language.v1.PartOfSpeech.Tag} tag
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.tag = 0;
    
                        /**
                         * PartOfSpeech aspect.
                         * @member {google.cloud.language.v1.PartOfSpeech.Aspect} aspect
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.aspect = 0;
    
                        /**
                         * PartOfSpeech case.
                         * @member {google.cloud.language.v1.PartOfSpeech.Case} case
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype["case"] = 0;
    
                        /**
                         * PartOfSpeech form.
                         * @member {google.cloud.language.v1.PartOfSpeech.Form} form
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.form = 0;
    
                        /**
                         * PartOfSpeech gender.
                         * @member {google.cloud.language.v1.PartOfSpeech.Gender} gender
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.gender = 0;
    
                        /**
                         * PartOfSpeech mood.
                         * @member {google.cloud.language.v1.PartOfSpeech.Mood} mood
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.mood = 0;
    
                        /**
                         * PartOfSpeech number.
                         * @member {google.cloud.language.v1.PartOfSpeech.Number} number
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.number = 0;
    
                        /**
                         * PartOfSpeech person.
                         * @member {google.cloud.language.v1.PartOfSpeech.Person} person
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.person = 0;
    
                        /**
                         * PartOfSpeech proper.
                         * @member {google.cloud.language.v1.PartOfSpeech.Proper} proper
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.proper = 0;
    
                        /**
                         * PartOfSpeech reciprocity.
                         * @member {google.cloud.language.v1.PartOfSpeech.Reciprocity} reciprocity
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.reciprocity = 0;
    
                        /**
                         * PartOfSpeech tense.
                         * @member {google.cloud.language.v1.PartOfSpeech.Tense} tense
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.tense = 0;
    
                        /**
                         * PartOfSpeech voice.
                         * @member {google.cloud.language.v1.PartOfSpeech.Voice} voice
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.voice = 0;
    
                        /**
                         * Creates a new PartOfSpeech instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @static
                         * @param {google.cloud.language.v1.IPartOfSpeech=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.PartOfSpeech} PartOfSpeech instance
                         */
                        PartOfSpeech.create = function create(properties) {
                            return new PartOfSpeech(properties);
                        };
    
                        /**
                         * Encodes the specified PartOfSpeech message. Does not implicitly {@link google.cloud.language.v1.PartOfSpeech.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @static
                         * @param {google.cloud.language.v1.IPartOfSpeech} message PartOfSpeech message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PartOfSpeech.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tag != null && Object.hasOwnProperty.call(message, "tag"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.tag);
                            if (message.aspect != null && Object.hasOwnProperty.call(message, "aspect"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aspect);
                            if (message["case"] != null && Object.hasOwnProperty.call(message, "case"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message["case"]);
                            if (message.form != null && Object.hasOwnProperty.call(message, "form"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.form);
                            if (message.gender != null && Object.hasOwnProperty.call(message, "gender"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gender);
                            if (message.mood != null && Object.hasOwnProperty.call(message, "mood"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.mood);
                            if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.number);
                            if (message.person != null && Object.hasOwnProperty.call(message, "person"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.person);
                            if (message.proper != null && Object.hasOwnProperty.call(message, "proper"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.proper);
                            if (message.reciprocity != null && Object.hasOwnProperty.call(message, "reciprocity"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.reciprocity);
                            if (message.tense != null && Object.hasOwnProperty.call(message, "tense"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.tense);
                            if (message.voice != null && Object.hasOwnProperty.call(message, "voice"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.voice);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PartOfSpeech message, length delimited. Does not implicitly {@link google.cloud.language.v1.PartOfSpeech.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @static
                         * @param {google.cloud.language.v1.IPartOfSpeech} message PartOfSpeech message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PartOfSpeech.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PartOfSpeech message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.PartOfSpeech} PartOfSpeech
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PartOfSpeech.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.PartOfSpeech();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.tag = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.aspect = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message["case"] = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.form = reader.int32();
                                        break;
                                    }
                                case 5: {
                                        message.gender = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.mood = reader.int32();
                                        break;
                                    }
                                case 7: {
                                        message.number = reader.int32();
                                        break;
                                    }
                                case 8: {
                                        message.person = reader.int32();
                                        break;
                                    }
                                case 9: {
                                        message.proper = reader.int32();
                                        break;
                                    }
                                case 10: {
                                        message.reciprocity = reader.int32();
                                        break;
                                    }
                                case 11: {
                                        message.tense = reader.int32();
                                        break;
                                    }
                                case 12: {
                                        message.voice = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PartOfSpeech message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.PartOfSpeech} PartOfSpeech
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PartOfSpeech.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PartOfSpeech message.
                         * @function verify
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PartOfSpeech.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                switch (message.tag) {
                                default:
                                    return "tag: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                    break;
                                }
                            if (message.aspect != null && message.hasOwnProperty("aspect"))
                                switch (message.aspect) {
                                default:
                                    return "aspect: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message["case"] != null && message.hasOwnProperty("case"))
                                switch (message["case"]) {
                                default:
                                    return "case: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                    break;
                                }
                            if (message.form != null && message.hasOwnProperty("form"))
                                switch (message.form) {
                                default:
                                    return "form: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                    break;
                                }
                            if (message.gender != null && message.hasOwnProperty("gender"))
                                switch (message.gender) {
                                default:
                                    return "gender: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.mood != null && message.hasOwnProperty("mood"))
                                switch (message.mood) {
                                default:
                                    return "mood: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            if (message.number != null && message.hasOwnProperty("number"))
                                switch (message.number) {
                                default:
                                    return "number: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.person != null && message.hasOwnProperty("person"))
                                switch (message.person) {
                                default:
                                    return "person: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.proper != null && message.hasOwnProperty("proper"))
                                switch (message.proper) {
                                default:
                                    return "proper: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.reciprocity != null && message.hasOwnProperty("reciprocity"))
                                switch (message.reciprocity) {
                                default:
                                    return "reciprocity: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.tense != null && message.hasOwnProperty("tense"))
                                switch (message.tense) {
                                default:
                                    return "tense: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            if (message.voice != null && message.hasOwnProperty("voice"))
                                switch (message.voice) {
                                default:
                                    return "voice: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a PartOfSpeech message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.PartOfSpeech} PartOfSpeech
                         */
                        PartOfSpeech.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.PartOfSpeech)
                                return object;
                            var message = new $root.google.cloud.language.v1.PartOfSpeech();
                            switch (object.tag) {
                            default:
                                if (typeof object.tag === "number") {
                                    message.tag = object.tag;
                                    break;
                                }
                                break;
                            case "UNKNOWN":
                            case 0:
                                message.tag = 0;
                                break;
                            case "ADJ":
                            case 1:
                                message.tag = 1;
                                break;
                            case "ADP":
                            case 2:
                                message.tag = 2;
                                break;
                            case "ADV":
                            case 3:
                                message.tag = 3;
                                break;
                            case "CONJ":
                            case 4:
                                message.tag = 4;
                                break;
                            case "DET":
                            case 5:
                                message.tag = 5;
                                break;
                            case "NOUN":
                            case 6:
                                message.tag = 6;
                                break;
                            case "NUM":
                            case 7:
                                message.tag = 7;
                                break;
                            case "PRON":
                            case 8:
                                message.tag = 8;
                                break;
                            case "PRT":
                            case 9:
                                message.tag = 9;
                                break;
                            case "PUNCT":
                            case 10:
                                message.tag = 10;
                                break;
                            case "VERB":
                            case 11:
                                message.tag = 11;
                                break;
                            case "X":
                            case 12:
                                message.tag = 12;
                                break;
                            case "AFFIX":
                            case 13:
                                message.tag = 13;
                                break;
                            }
                            switch (object.aspect) {
                            default:
                                if (typeof object.aspect === "number") {
                                    message.aspect = object.aspect;
                                    break;
                                }
                                break;
                            case "ASPECT_UNKNOWN":
                            case 0:
                                message.aspect = 0;
                                break;
                            case "PERFECTIVE":
                            case 1:
                                message.aspect = 1;
                                break;
                            case "IMPERFECTIVE":
                            case 2:
                                message.aspect = 2;
                                break;
                            case "PROGRESSIVE":
                            case 3:
                                message.aspect = 3;
                                break;
                            }
                            switch (object["case"]) {
                            default:
                                if (typeof object["case"] === "number") {
                                    message["case"] = object["case"];
                                    break;
                                }
                                break;
                            case "CASE_UNKNOWN":
                            case 0:
                                message["case"] = 0;
                                break;
                            case "ACCUSATIVE":
                            case 1:
                                message["case"] = 1;
                                break;
                            case "ADVERBIAL":
                            case 2:
                                message["case"] = 2;
                                break;
                            case "COMPLEMENTIVE":
                            case 3:
                                message["case"] = 3;
                                break;
                            case "DATIVE":
                            case 4:
                                message["case"] = 4;
                                break;
                            case "GENITIVE":
                            case 5:
                                message["case"] = 5;
                                break;
                            case "INSTRUMENTAL":
                            case 6:
                                message["case"] = 6;
                                break;
                            case "LOCATIVE":
                            case 7:
                                message["case"] = 7;
                                break;
                            case "NOMINATIVE":
                            case 8:
                                message["case"] = 8;
                                break;
                            case "OBLIQUE":
                            case 9:
                                message["case"] = 9;
                                break;
                            case "PARTITIVE":
                            case 10:
                                message["case"] = 10;
                                break;
                            case "PREPOSITIONAL":
                            case 11:
                                message["case"] = 11;
                                break;
                            case "REFLEXIVE_CASE":
                            case 12:
                                message["case"] = 12;
                                break;
                            case "RELATIVE_CASE":
                            case 13:
                                message["case"] = 13;
                                break;
                            case "VOCATIVE":
                            case 14:
                                message["case"] = 14;
                                break;
                            }
                            switch (object.form) {
                            default:
                                if (typeof object.form === "number") {
                                    message.form = object.form;
                                    break;
                                }
                                break;
                            case "FORM_UNKNOWN":
                            case 0:
                                message.form = 0;
                                break;
                            case "ADNOMIAL":
                            case 1:
                                message.form = 1;
                                break;
                            case "AUXILIARY":
                            case 2:
                                message.form = 2;
                                break;
                            case "COMPLEMENTIZER":
                            case 3:
                                message.form = 3;
                                break;
                            case "FINAL_ENDING":
                            case 4:
                                message.form = 4;
                                break;
                            case "GERUND":
                            case 5:
                                message.form = 5;
                                break;
                            case "REALIS":
                            case 6:
                                message.form = 6;
                                break;
                            case "IRREALIS":
                            case 7:
                                message.form = 7;
                                break;
                            case "SHORT":
                            case 8:
                                message.form = 8;
                                break;
                            case "LONG":
                            case 9:
                                message.form = 9;
                                break;
                            case "ORDER":
                            case 10:
                                message.form = 10;
                                break;
                            case "SPECIFIC":
                            case 11:
                                message.form = 11;
                                break;
                            }
                            switch (object.gender) {
                            default:
                                if (typeof object.gender === "number") {
                                    message.gender = object.gender;
                                    break;
                                }
                                break;
                            case "GENDER_UNKNOWN":
                            case 0:
                                message.gender = 0;
                                break;
                            case "FEMININE":
                            case 1:
                                message.gender = 1;
                                break;
                            case "MASCULINE":
                            case 2:
                                message.gender = 2;
                                break;
                            case "NEUTER":
                            case 3:
                                message.gender = 3;
                                break;
                            }
                            switch (object.mood) {
                            default:
                                if (typeof object.mood === "number") {
                                    message.mood = object.mood;
                                    break;
                                }
                                break;
                            case "MOOD_UNKNOWN":
                            case 0:
                                message.mood = 0;
                                break;
                            case "CONDITIONAL_MOOD":
                            case 1:
                                message.mood = 1;
                                break;
                            case "IMPERATIVE":
                            case 2:
                                message.mood = 2;
                                break;
                            case "INDICATIVE":
                            case 3:
                                message.mood = 3;
                                break;
                            case "INTERROGATIVE":
                            case 4:
                                message.mood = 4;
                                break;
                            case "JUSSIVE":
                            case 5:
                                message.mood = 5;
                                break;
                            case "SUBJUNCTIVE":
                            case 6:
                                message.mood = 6;
                                break;
                            }
                            switch (object.number) {
                            default:
                                if (typeof object.number === "number") {
                                    message.number = object.number;
                                    break;
                                }
                                break;
                            case "NUMBER_UNKNOWN":
                            case 0:
                                message.number = 0;
                                break;
                            case "SINGULAR":
                            case 1:
                                message.number = 1;
                                break;
                            case "PLURAL":
                            case 2:
                                message.number = 2;
                                break;
                            case "DUAL":
                            case 3:
                                message.number = 3;
                                break;
                            }
                            switch (object.person) {
                            default:
                                if (typeof object.person === "number") {
                                    message.person = object.person;
                                    break;
                                }
                                break;
                            case "PERSON_UNKNOWN":
                            case 0:
                                message.person = 0;
                                break;
                            case "FIRST":
                            case 1:
                                message.person = 1;
                                break;
                            case "SECOND":
                            case 2:
                                message.person = 2;
                                break;
                            case "THIRD":
                            case 3:
                                message.person = 3;
                                break;
                            case "REFLEXIVE_PERSON":
                            case 4:
                                message.person = 4;
                                break;
                            }
                            switch (object.proper) {
                            default:
                                if (typeof object.proper === "number") {
                                    message.proper = object.proper;
                                    break;
                                }
                                break;
                            case "PROPER_UNKNOWN":
                            case 0:
                                message.proper = 0;
                                break;
                            case "PROPER":
                            case 1:
                                message.proper = 1;
                                break;
                            case "NOT_PROPER":
                            case 2:
                                message.proper = 2;
                                break;
                            }
                            switch (object.reciprocity) {
                            default:
                                if (typeof object.reciprocity === "number") {
                                    message.reciprocity = object.reciprocity;
                                    break;
                                }
                                break;
                            case "RECIPROCITY_UNKNOWN":
                            case 0:
                                message.reciprocity = 0;
                                break;
                            case "RECIPROCAL":
                            case 1:
                                message.reciprocity = 1;
                                break;
                            case "NON_RECIPROCAL":
                            case 2:
                                message.reciprocity = 2;
                                break;
                            }
                            switch (object.tense) {
                            default:
                                if (typeof object.tense === "number") {
                                    message.tense = object.tense;
                                    break;
                                }
                                break;
                            case "TENSE_UNKNOWN":
                            case 0:
                                message.tense = 0;
                                break;
                            case "CONDITIONAL_TENSE":
                            case 1:
                                message.tense = 1;
                                break;
                            case "FUTURE":
                            case 2:
                                message.tense = 2;
                                break;
                            case "PAST":
                            case 3:
                                message.tense = 3;
                                break;
                            case "PRESENT":
                            case 4:
                                message.tense = 4;
                                break;
                            case "IMPERFECT":
                            case 5:
                                message.tense = 5;
                                break;
                            case "PLUPERFECT":
                            case 6:
                                message.tense = 6;
                                break;
                            }
                            switch (object.voice) {
                            default:
                                if (typeof object.voice === "number") {
                                    message.voice = object.voice;
                                    break;
                                }
                                break;
                            case "VOICE_UNKNOWN":
                            case 0:
                                message.voice = 0;
                                break;
                            case "ACTIVE":
                            case 1:
                                message.voice = 1;
                                break;
                            case "CAUSATIVE":
                            case 2:
                                message.voice = 2;
                                break;
                            case "PASSIVE":
                            case 3:
                                message.voice = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PartOfSpeech message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @static
                         * @param {google.cloud.language.v1.PartOfSpeech} message PartOfSpeech
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PartOfSpeech.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.tag = options.enums === String ? "UNKNOWN" : 0;
                                object.aspect = options.enums === String ? "ASPECT_UNKNOWN" : 0;
                                object["case"] = options.enums === String ? "CASE_UNKNOWN" : 0;
                                object.form = options.enums === String ? "FORM_UNKNOWN" : 0;
                                object.gender = options.enums === String ? "GENDER_UNKNOWN" : 0;
                                object.mood = options.enums === String ? "MOOD_UNKNOWN" : 0;
                                object.number = options.enums === String ? "NUMBER_UNKNOWN" : 0;
                                object.person = options.enums === String ? "PERSON_UNKNOWN" : 0;
                                object.proper = options.enums === String ? "PROPER_UNKNOWN" : 0;
                                object.reciprocity = options.enums === String ? "RECIPROCITY_UNKNOWN" : 0;
                                object.tense = options.enums === String ? "TENSE_UNKNOWN" : 0;
                                object.voice = options.enums === String ? "VOICE_UNKNOWN" : 0;
                            }
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                object.tag = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Tag[message.tag] === undefined ? message.tag : $root.google.cloud.language.v1.PartOfSpeech.Tag[message.tag] : message.tag;
                            if (message.aspect != null && message.hasOwnProperty("aspect"))
                                object.aspect = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Aspect[message.aspect] === undefined ? message.aspect : $root.google.cloud.language.v1.PartOfSpeech.Aspect[message.aspect] : message.aspect;
                            if (message["case"] != null && message.hasOwnProperty("case"))
                                object["case"] = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Case[message["case"]] === undefined ? message["case"] : $root.google.cloud.language.v1.PartOfSpeech.Case[message["case"]] : message["case"];
                            if (message.form != null && message.hasOwnProperty("form"))
                                object.form = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Form[message.form] === undefined ? message.form : $root.google.cloud.language.v1.PartOfSpeech.Form[message.form] : message.form;
                            if (message.gender != null && message.hasOwnProperty("gender"))
                                object.gender = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Gender[message.gender] === undefined ? message.gender : $root.google.cloud.language.v1.PartOfSpeech.Gender[message.gender] : message.gender;
                            if (message.mood != null && message.hasOwnProperty("mood"))
                                object.mood = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Mood[message.mood] === undefined ? message.mood : $root.google.cloud.language.v1.PartOfSpeech.Mood[message.mood] : message.mood;
                            if (message.number != null && message.hasOwnProperty("number"))
                                object.number = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Number[message.number] === undefined ? message.number : $root.google.cloud.language.v1.PartOfSpeech.Number[message.number] : message.number;
                            if (message.person != null && message.hasOwnProperty("person"))
                                object.person = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Person[message.person] === undefined ? message.person : $root.google.cloud.language.v1.PartOfSpeech.Person[message.person] : message.person;
                            if (message.proper != null && message.hasOwnProperty("proper"))
                                object.proper = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Proper[message.proper] === undefined ? message.proper : $root.google.cloud.language.v1.PartOfSpeech.Proper[message.proper] : message.proper;
                            if (message.reciprocity != null && message.hasOwnProperty("reciprocity"))
                                object.reciprocity = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Reciprocity[message.reciprocity] === undefined ? message.reciprocity : $root.google.cloud.language.v1.PartOfSpeech.Reciprocity[message.reciprocity] : message.reciprocity;
                            if (message.tense != null && message.hasOwnProperty("tense"))
                                object.tense = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Tense[message.tense] === undefined ? message.tense : $root.google.cloud.language.v1.PartOfSpeech.Tense[message.tense] : message.tense;
                            if (message.voice != null && message.hasOwnProperty("voice"))
                                object.voice = options.enums === String ? $root.google.cloud.language.v1.PartOfSpeech.Voice[message.voice] === undefined ? message.voice : $root.google.cloud.language.v1.PartOfSpeech.Voice[message.voice] : message.voice;
                            return object;
                        };
    
                        /**
                         * Converts this PartOfSpeech to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PartOfSpeech.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for PartOfSpeech
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.PartOfSpeech
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PartOfSpeech.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.PartOfSpeech";
                        };
    
                        /**
                         * Tag enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Tag
                         * @enum {number}
                         * @property {number} UNKNOWN=0 UNKNOWN value
                         * @property {number} ADJ=1 ADJ value
                         * @property {number} ADP=2 ADP value
                         * @property {number} ADV=3 ADV value
                         * @property {number} CONJ=4 CONJ value
                         * @property {number} DET=5 DET value
                         * @property {number} NOUN=6 NOUN value
                         * @property {number} NUM=7 NUM value
                         * @property {number} PRON=8 PRON value
                         * @property {number} PRT=9 PRT value
                         * @property {number} PUNCT=10 PUNCT value
                         * @property {number} VERB=11 VERB value
                         * @property {number} X=12 X value
                         * @property {number} AFFIX=13 AFFIX value
                         */
                        PartOfSpeech.Tag = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "UNKNOWN"] = 0;
                            values[valuesById[1] = "ADJ"] = 1;
                            values[valuesById[2] = "ADP"] = 2;
                            values[valuesById[3] = "ADV"] = 3;
                            values[valuesById[4] = "CONJ"] = 4;
                            values[valuesById[5] = "DET"] = 5;
                            values[valuesById[6] = "NOUN"] = 6;
                            values[valuesById[7] = "NUM"] = 7;
                            values[valuesById[8] = "PRON"] = 8;
                            values[valuesById[9] = "PRT"] = 9;
                            values[valuesById[10] = "PUNCT"] = 10;
                            values[valuesById[11] = "VERB"] = 11;
                            values[valuesById[12] = "X"] = 12;
                            values[valuesById[13] = "AFFIX"] = 13;
                            return values;
                        })();
    
                        /**
                         * Aspect enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Aspect
                         * @enum {number}
                         * @property {number} ASPECT_UNKNOWN=0 ASPECT_UNKNOWN value
                         * @property {number} PERFECTIVE=1 PERFECTIVE value
                         * @property {number} IMPERFECTIVE=2 IMPERFECTIVE value
                         * @property {number} PROGRESSIVE=3 PROGRESSIVE value
                         */
                        PartOfSpeech.Aspect = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ASPECT_UNKNOWN"] = 0;
                            values[valuesById[1] = "PERFECTIVE"] = 1;
                            values[valuesById[2] = "IMPERFECTIVE"] = 2;
                            values[valuesById[3] = "PROGRESSIVE"] = 3;
                            return values;
                        })();
    
                        /**
                         * Case enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Case
                         * @enum {number}
                         * @property {number} CASE_UNKNOWN=0 CASE_UNKNOWN value
                         * @property {number} ACCUSATIVE=1 ACCUSATIVE value
                         * @property {number} ADVERBIAL=2 ADVERBIAL value
                         * @property {number} COMPLEMENTIVE=3 COMPLEMENTIVE value
                         * @property {number} DATIVE=4 DATIVE value
                         * @property {number} GENITIVE=5 GENITIVE value
                         * @property {number} INSTRUMENTAL=6 INSTRUMENTAL value
                         * @property {number} LOCATIVE=7 LOCATIVE value
                         * @property {number} NOMINATIVE=8 NOMINATIVE value
                         * @property {number} OBLIQUE=9 OBLIQUE value
                         * @property {number} PARTITIVE=10 PARTITIVE value
                         * @property {number} PREPOSITIONAL=11 PREPOSITIONAL value
                         * @property {number} REFLEXIVE_CASE=12 REFLEXIVE_CASE value
                         * @property {number} RELATIVE_CASE=13 RELATIVE_CASE value
                         * @property {number} VOCATIVE=14 VOCATIVE value
                         */
                        PartOfSpeech.Case = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "CASE_UNKNOWN"] = 0;
                            values[valuesById[1] = "ACCUSATIVE"] = 1;
                            values[valuesById[2] = "ADVERBIAL"] = 2;
                            values[valuesById[3] = "COMPLEMENTIVE"] = 3;
                            values[valuesById[4] = "DATIVE"] = 4;
                            values[valuesById[5] = "GENITIVE"] = 5;
                            values[valuesById[6] = "INSTRUMENTAL"] = 6;
                            values[valuesById[7] = "LOCATIVE"] = 7;
                            values[valuesById[8] = "NOMINATIVE"] = 8;
                            values[valuesById[9] = "OBLIQUE"] = 9;
                            values[valuesById[10] = "PARTITIVE"] = 10;
                            values[valuesById[11] = "PREPOSITIONAL"] = 11;
                            values[valuesById[12] = "REFLEXIVE_CASE"] = 12;
                            values[valuesById[13] = "RELATIVE_CASE"] = 13;
                            values[valuesById[14] = "VOCATIVE"] = 14;
                            return values;
                        })();
    
                        /**
                         * Form enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Form
                         * @enum {number}
                         * @property {number} FORM_UNKNOWN=0 FORM_UNKNOWN value
                         * @property {number} ADNOMIAL=1 ADNOMIAL value
                         * @property {number} AUXILIARY=2 AUXILIARY value
                         * @property {number} COMPLEMENTIZER=3 COMPLEMENTIZER value
                         * @property {number} FINAL_ENDING=4 FINAL_ENDING value
                         * @property {number} GERUND=5 GERUND value
                         * @property {number} REALIS=6 REALIS value
                         * @property {number} IRREALIS=7 IRREALIS value
                         * @property {number} SHORT=8 SHORT value
                         * @property {number} LONG=9 LONG value
                         * @property {number} ORDER=10 ORDER value
                         * @property {number} SPECIFIC=11 SPECIFIC value
                         */
                        PartOfSpeech.Form = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "FORM_UNKNOWN"] = 0;
                            values[valuesById[1] = "ADNOMIAL"] = 1;
                            values[valuesById[2] = "AUXILIARY"] = 2;
                            values[valuesById[3] = "COMPLEMENTIZER"] = 3;
                            values[valuesById[4] = "FINAL_ENDING"] = 4;
                            values[valuesById[5] = "GERUND"] = 5;
                            values[valuesById[6] = "REALIS"] = 6;
                            values[valuesById[7] = "IRREALIS"] = 7;
                            values[valuesById[8] = "SHORT"] = 8;
                            values[valuesById[9] = "LONG"] = 9;
                            values[valuesById[10] = "ORDER"] = 10;
                            values[valuesById[11] = "SPECIFIC"] = 11;
                            return values;
                        })();
    
                        /**
                         * Gender enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Gender
                         * @enum {number}
                         * @property {number} GENDER_UNKNOWN=0 GENDER_UNKNOWN value
                         * @property {number} FEMININE=1 FEMININE value
                         * @property {number} MASCULINE=2 MASCULINE value
                         * @property {number} NEUTER=3 NEUTER value
                         */
                        PartOfSpeech.Gender = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "GENDER_UNKNOWN"] = 0;
                            values[valuesById[1] = "FEMININE"] = 1;
                            values[valuesById[2] = "MASCULINE"] = 2;
                            values[valuesById[3] = "NEUTER"] = 3;
                            return values;
                        })();
    
                        /**
                         * Mood enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Mood
                         * @enum {number}
                         * @property {number} MOOD_UNKNOWN=0 MOOD_UNKNOWN value
                         * @property {number} CONDITIONAL_MOOD=1 CONDITIONAL_MOOD value
                         * @property {number} IMPERATIVE=2 IMPERATIVE value
                         * @property {number} INDICATIVE=3 INDICATIVE value
                         * @property {number} INTERROGATIVE=4 INTERROGATIVE value
                         * @property {number} JUSSIVE=5 JUSSIVE value
                         * @property {number} SUBJUNCTIVE=6 SUBJUNCTIVE value
                         */
                        PartOfSpeech.Mood = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "MOOD_UNKNOWN"] = 0;
                            values[valuesById[1] = "CONDITIONAL_MOOD"] = 1;
                            values[valuesById[2] = "IMPERATIVE"] = 2;
                            values[valuesById[3] = "INDICATIVE"] = 3;
                            values[valuesById[4] = "INTERROGATIVE"] = 4;
                            values[valuesById[5] = "JUSSIVE"] = 5;
                            values[valuesById[6] = "SUBJUNCTIVE"] = 6;
                            return values;
                        })();
    
                        /**
                         * Number enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Number
                         * @enum {number}
                         * @property {number} NUMBER_UNKNOWN=0 NUMBER_UNKNOWN value
                         * @property {number} SINGULAR=1 SINGULAR value
                         * @property {number} PLURAL=2 PLURAL value
                         * @property {number} DUAL=3 DUAL value
                         */
                        PartOfSpeech.Number = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "NUMBER_UNKNOWN"] = 0;
                            values[valuesById[1] = "SINGULAR"] = 1;
                            values[valuesById[2] = "PLURAL"] = 2;
                            values[valuesById[3] = "DUAL"] = 3;
                            return values;
                        })();
    
                        /**
                         * Person enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Person
                         * @enum {number}
                         * @property {number} PERSON_UNKNOWN=0 PERSON_UNKNOWN value
                         * @property {number} FIRST=1 FIRST value
                         * @property {number} SECOND=2 SECOND value
                         * @property {number} THIRD=3 THIRD value
                         * @property {number} REFLEXIVE_PERSON=4 REFLEXIVE_PERSON value
                         */
                        PartOfSpeech.Person = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "PERSON_UNKNOWN"] = 0;
                            values[valuesById[1] = "FIRST"] = 1;
                            values[valuesById[2] = "SECOND"] = 2;
                            values[valuesById[3] = "THIRD"] = 3;
                            values[valuesById[4] = "REFLEXIVE_PERSON"] = 4;
                            return values;
                        })();
    
                        /**
                         * Proper enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Proper
                         * @enum {number}
                         * @property {number} PROPER_UNKNOWN=0 PROPER_UNKNOWN value
                         * @property {number} PROPER=1 PROPER value
                         * @property {number} NOT_PROPER=2 NOT_PROPER value
                         */
                        PartOfSpeech.Proper = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "PROPER_UNKNOWN"] = 0;
                            values[valuesById[1] = "PROPER"] = 1;
                            values[valuesById[2] = "NOT_PROPER"] = 2;
                            return values;
                        })();
    
                        /**
                         * Reciprocity enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Reciprocity
                         * @enum {number}
                         * @property {number} RECIPROCITY_UNKNOWN=0 RECIPROCITY_UNKNOWN value
                         * @property {number} RECIPROCAL=1 RECIPROCAL value
                         * @property {number} NON_RECIPROCAL=2 NON_RECIPROCAL value
                         */
                        PartOfSpeech.Reciprocity = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "RECIPROCITY_UNKNOWN"] = 0;
                            values[valuesById[1] = "RECIPROCAL"] = 1;
                            values[valuesById[2] = "NON_RECIPROCAL"] = 2;
                            return values;
                        })();
    
                        /**
                         * Tense enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Tense
                         * @enum {number}
                         * @property {number} TENSE_UNKNOWN=0 TENSE_UNKNOWN value
                         * @property {number} CONDITIONAL_TENSE=1 CONDITIONAL_TENSE value
                         * @property {number} FUTURE=2 FUTURE value
                         * @property {number} PAST=3 PAST value
                         * @property {number} PRESENT=4 PRESENT value
                         * @property {number} IMPERFECT=5 IMPERFECT value
                         * @property {number} PLUPERFECT=6 PLUPERFECT value
                         */
                        PartOfSpeech.Tense = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TENSE_UNKNOWN"] = 0;
                            values[valuesById[1] = "CONDITIONAL_TENSE"] = 1;
                            values[valuesById[2] = "FUTURE"] = 2;
                            values[valuesById[3] = "PAST"] = 3;
                            values[valuesById[4] = "PRESENT"] = 4;
                            values[valuesById[5] = "IMPERFECT"] = 5;
                            values[valuesById[6] = "PLUPERFECT"] = 6;
                            return values;
                        })();
    
                        /**
                         * Voice enum.
                         * @name google.cloud.language.v1.PartOfSpeech.Voice
                         * @enum {number}
                         * @property {number} VOICE_UNKNOWN=0 VOICE_UNKNOWN value
                         * @property {number} ACTIVE=1 ACTIVE value
                         * @property {number} CAUSATIVE=2 CAUSATIVE value
                         * @property {number} PASSIVE=3 PASSIVE value
                         */
                        PartOfSpeech.Voice = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "VOICE_UNKNOWN"] = 0;
                            values[valuesById[1] = "ACTIVE"] = 1;
                            values[valuesById[2] = "CAUSATIVE"] = 2;
                            values[valuesById[3] = "PASSIVE"] = 3;
                            return values;
                        })();
    
                        return PartOfSpeech;
                    })();
    
                    v1.DependencyEdge = (function() {
    
                        /**
                         * Properties of a DependencyEdge.
                         * @memberof google.cloud.language.v1
                         * @interface IDependencyEdge
                         * @property {number|null} [headTokenIndex] DependencyEdge headTokenIndex
                         * @property {google.cloud.language.v1.DependencyEdge.Label|null} [label] DependencyEdge label
                         */
    
                        /**
                         * Constructs a new DependencyEdge.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a DependencyEdge.
                         * @implements IDependencyEdge
                         * @constructor
                         * @param {google.cloud.language.v1.IDependencyEdge=} [properties] Properties to set
                         */
                        function DependencyEdge(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DependencyEdge headTokenIndex.
                         * @member {number} headTokenIndex
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @instance
                         */
                        DependencyEdge.prototype.headTokenIndex = 0;
    
                        /**
                         * DependencyEdge label.
                         * @member {google.cloud.language.v1.DependencyEdge.Label} label
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @instance
                         */
                        DependencyEdge.prototype.label = 0;
    
                        /**
                         * Creates a new DependencyEdge instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @static
                         * @param {google.cloud.language.v1.IDependencyEdge=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.DependencyEdge} DependencyEdge instance
                         */
                        DependencyEdge.create = function create(properties) {
                            return new DependencyEdge(properties);
                        };
    
                        /**
                         * Encodes the specified DependencyEdge message. Does not implicitly {@link google.cloud.language.v1.DependencyEdge.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @static
                         * @param {google.cloud.language.v1.IDependencyEdge} message DependencyEdge message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DependencyEdge.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.headTokenIndex != null && Object.hasOwnProperty.call(message, "headTokenIndex"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.headTokenIndex);
                            if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.label);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DependencyEdge message, length delimited. Does not implicitly {@link google.cloud.language.v1.DependencyEdge.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @static
                         * @param {google.cloud.language.v1.IDependencyEdge} message DependencyEdge message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DependencyEdge.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DependencyEdge message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.DependencyEdge} DependencyEdge
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DependencyEdge.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.DependencyEdge();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.headTokenIndex = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.label = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DependencyEdge message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.DependencyEdge} DependencyEdge
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DependencyEdge.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DependencyEdge message.
                         * @function verify
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DependencyEdge.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.headTokenIndex != null && message.hasOwnProperty("headTokenIndex"))
                                if (!$util.isInteger(message.headTokenIndex))
                                    return "headTokenIndex: integer expected";
                            if (message.label != null && message.hasOwnProperty("label"))
                                switch (message.label) {
                                default:
                                    return "label: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 17:
                                case 18:
                                case 19:
                                case 20:
                                case 21:
                                case 22:
                                case 23:
                                case 24:
                                case 25:
                                case 26:
                                case 27:
                                case 28:
                                case 29:
                                case 30:
                                case 31:
                                case 32:
                                case 33:
                                case 34:
                                case 35:
                                case 36:
                                case 37:
                                case 38:
                                case 39:
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 60:
                                case 61:
                                case 62:
                                case 63:
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 77:
                                case 78:
                                case 79:
                                case 80:
                                case 81:
                                case 82:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a DependencyEdge message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.DependencyEdge} DependencyEdge
                         */
                        DependencyEdge.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.DependencyEdge)
                                return object;
                            var message = new $root.google.cloud.language.v1.DependencyEdge();
                            if (object.headTokenIndex != null)
                                message.headTokenIndex = object.headTokenIndex | 0;
                            switch (object.label) {
                            default:
                                if (typeof object.label === "number") {
                                    message.label = object.label;
                                    break;
                                }
                                break;
                            case "UNKNOWN":
                            case 0:
                                message.label = 0;
                                break;
                            case "ABBREV":
                            case 1:
                                message.label = 1;
                                break;
                            case "ACOMP":
                            case 2:
                                message.label = 2;
                                break;
                            case "ADVCL":
                            case 3:
                                message.label = 3;
                                break;
                            case "ADVMOD":
                            case 4:
                                message.label = 4;
                                break;
                            case "AMOD":
                            case 5:
                                message.label = 5;
                                break;
                            case "APPOS":
                            case 6:
                                message.label = 6;
                                break;
                            case "ATTR":
                            case 7:
                                message.label = 7;
                                break;
                            case "AUX":
                            case 8:
                                message.label = 8;
                                break;
                            case "AUXPASS":
                            case 9:
                                message.label = 9;
                                break;
                            case "CC":
                            case 10:
                                message.label = 10;
                                break;
                            case "CCOMP":
                            case 11:
                                message.label = 11;
                                break;
                            case "CONJ":
                            case 12:
                                message.label = 12;
                                break;
                            case "CSUBJ":
                            case 13:
                                message.label = 13;
                                break;
                            case "CSUBJPASS":
                            case 14:
                                message.label = 14;
                                break;
                            case "DEP":
                            case 15:
                                message.label = 15;
                                break;
                            case "DET":
                            case 16:
                                message.label = 16;
                                break;
                            case "DISCOURSE":
                            case 17:
                                message.label = 17;
                                break;
                            case "DOBJ":
                            case 18:
                                message.label = 18;
                                break;
                            case "EXPL":
                            case 19:
                                message.label = 19;
                                break;
                            case "GOESWITH":
                            case 20:
                                message.label = 20;
                                break;
                            case "IOBJ":
                            case 21:
                                message.label = 21;
                                break;
                            case "MARK":
                            case 22:
                                message.label = 22;
                                break;
                            case "MWE":
                            case 23:
                                message.label = 23;
                                break;
                            case "MWV":
                            case 24:
                                message.label = 24;
                                break;
                            case "NEG":
                            case 25:
                                message.label = 25;
                                break;
                            case "NN":
                            case 26:
                                message.label = 26;
                                break;
                            case "NPADVMOD":
                            case 27:
                                message.label = 27;
                                break;
                            case "NSUBJ":
                            case 28:
                                message.label = 28;
                                break;
                            case "NSUBJPASS":
                            case 29:
                                message.label = 29;
                                break;
                            case "NUM":
                            case 30:
                                message.label = 30;
                                break;
                            case "NUMBER":
                            case 31:
                                message.label = 31;
                                break;
                            case "P":
                            case 32:
                                message.label = 32;
                                break;
                            case "PARATAXIS":
                            case 33:
                                message.label = 33;
                                break;
                            case "PARTMOD":
                            case 34:
                                message.label = 34;
                                break;
                            case "PCOMP":
                            case 35:
                                message.label = 35;
                                break;
                            case "POBJ":
                            case 36:
                                message.label = 36;
                                break;
                            case "POSS":
                            case 37:
                                message.label = 37;
                                break;
                            case "POSTNEG":
                            case 38:
                                message.label = 38;
                                break;
                            case "PRECOMP":
                            case 39:
                                message.label = 39;
                                break;
                            case "PRECONJ":
                            case 40:
                                message.label = 40;
                                break;
                            case "PREDET":
                            case 41:
                                message.label = 41;
                                break;
                            case "PREF":
                            case 42:
                                message.label = 42;
                                break;
                            case "PREP":
                            case 43:
                                message.label = 43;
                                break;
                            case "PRONL":
                            case 44:
                                message.label = 44;
                                break;
                            case "PRT":
                            case 45:
                                message.label = 45;
                                break;
                            case "PS":
                            case 46:
                                message.label = 46;
                                break;
                            case "QUANTMOD":
                            case 47:
                                message.label = 47;
                                break;
                            case "RCMOD":
                            case 48:
                                message.label = 48;
                                break;
                            case "RCMODREL":
                            case 49:
                                message.label = 49;
                                break;
                            case "RDROP":
                            case 50:
                                message.label = 50;
                                break;
                            case "REF":
                            case 51:
                                message.label = 51;
                                break;
                            case "REMNANT":
                            case 52:
                                message.label = 52;
                                break;
                            case "REPARANDUM":
                            case 53:
                                message.label = 53;
                                break;
                            case "ROOT":
                            case 54:
                                message.label = 54;
                                break;
                            case "SNUM":
                            case 55:
                                message.label = 55;
                                break;
                            case "SUFF":
                            case 56:
                                message.label = 56;
                                break;
                            case "TMOD":
                            case 57:
                                message.label = 57;
                                break;
                            case "TOPIC":
                            case 58:
                                message.label = 58;
                                break;
                            case "VMOD":
                            case 59:
                                message.label = 59;
                                break;
                            case "VOCATIVE":
                            case 60:
                                message.label = 60;
                                break;
                            case "XCOMP":
                            case 61:
                                message.label = 61;
                                break;
                            case "SUFFIX":
                            case 62:
                                message.label = 62;
                                break;
                            case "TITLE":
                            case 63:
                                message.label = 63;
                                break;
                            case "ADVPHMOD":
                            case 64:
                                message.label = 64;
                                break;
                            case "AUXCAUS":
                            case 65:
                                message.label = 65;
                                break;
                            case "AUXVV":
                            case 66:
                                message.label = 66;
                                break;
                            case "DTMOD":
                            case 67:
                                message.label = 67;
                                break;
                            case "FOREIGN":
                            case 68:
                                message.label = 68;
                                break;
                            case "KW":
                            case 69:
                                message.label = 69;
                                break;
                            case "LIST":
                            case 70:
                                message.label = 70;
                                break;
                            case "NOMC":
                            case 71:
                                message.label = 71;
                                break;
                            case "NOMCSUBJ":
                            case 72:
                                message.label = 72;
                                break;
                            case "NOMCSUBJPASS":
                            case 73:
                                message.label = 73;
                                break;
                            case "NUMC":
                            case 74:
                                message.label = 74;
                                break;
                            case "COP":
                            case 75:
                                message.label = 75;
                                break;
                            case "DISLOCATED":
                            case 76:
                                message.label = 76;
                                break;
                            case "ASP":
                            case 77:
                                message.label = 77;
                                break;
                            case "GMOD":
                            case 78:
                                message.label = 78;
                                break;
                            case "GOBJ":
                            case 79:
                                message.label = 79;
                                break;
                            case "INFMOD":
                            case 80:
                                message.label = 80;
                                break;
                            case "MES":
                            case 81:
                                message.label = 81;
                                break;
                            case "NCOMP":
                            case 82:
                                message.label = 82;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DependencyEdge message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @static
                         * @param {google.cloud.language.v1.DependencyEdge} message DependencyEdge
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DependencyEdge.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.headTokenIndex = 0;
                                object.label = options.enums === String ? "UNKNOWN" : 0;
                            }
                            if (message.headTokenIndex != null && message.hasOwnProperty("headTokenIndex"))
                                object.headTokenIndex = message.headTokenIndex;
                            if (message.label != null && message.hasOwnProperty("label"))
                                object.label = options.enums === String ? $root.google.cloud.language.v1.DependencyEdge.Label[message.label] === undefined ? message.label : $root.google.cloud.language.v1.DependencyEdge.Label[message.label] : message.label;
                            return object;
                        };
    
                        /**
                         * Converts this DependencyEdge to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DependencyEdge.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DependencyEdge
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.DependencyEdge
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DependencyEdge.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.DependencyEdge";
                        };
    
                        /**
                         * Label enum.
                         * @name google.cloud.language.v1.DependencyEdge.Label
                         * @enum {number}
                         * @property {number} UNKNOWN=0 UNKNOWN value
                         * @property {number} ABBREV=1 ABBREV value
                         * @property {number} ACOMP=2 ACOMP value
                         * @property {number} ADVCL=3 ADVCL value
                         * @property {number} ADVMOD=4 ADVMOD value
                         * @property {number} AMOD=5 AMOD value
                         * @property {number} APPOS=6 APPOS value
                         * @property {number} ATTR=7 ATTR value
                         * @property {number} AUX=8 AUX value
                         * @property {number} AUXPASS=9 AUXPASS value
                         * @property {number} CC=10 CC value
                         * @property {number} CCOMP=11 CCOMP value
                         * @property {number} CONJ=12 CONJ value
                         * @property {number} CSUBJ=13 CSUBJ value
                         * @property {number} CSUBJPASS=14 CSUBJPASS value
                         * @property {number} DEP=15 DEP value
                         * @property {number} DET=16 DET value
                         * @property {number} DISCOURSE=17 DISCOURSE value
                         * @property {number} DOBJ=18 DOBJ value
                         * @property {number} EXPL=19 EXPL value
                         * @property {number} GOESWITH=20 GOESWITH value
                         * @property {number} IOBJ=21 IOBJ value
                         * @property {number} MARK=22 MARK value
                         * @property {number} MWE=23 MWE value
                         * @property {number} MWV=24 MWV value
                         * @property {number} NEG=25 NEG value
                         * @property {number} NN=26 NN value
                         * @property {number} NPADVMOD=27 NPADVMOD value
                         * @property {number} NSUBJ=28 NSUBJ value
                         * @property {number} NSUBJPASS=29 NSUBJPASS value
                         * @property {number} NUM=30 NUM value
                         * @property {number} NUMBER=31 NUMBER value
                         * @property {number} P=32 P value
                         * @property {number} PARATAXIS=33 PARATAXIS value
                         * @property {number} PARTMOD=34 PARTMOD value
                         * @property {number} PCOMP=35 PCOMP value
                         * @property {number} POBJ=36 POBJ value
                         * @property {number} POSS=37 POSS value
                         * @property {number} POSTNEG=38 POSTNEG value
                         * @property {number} PRECOMP=39 PRECOMP value
                         * @property {number} PRECONJ=40 PRECONJ value
                         * @property {number} PREDET=41 PREDET value
                         * @property {number} PREF=42 PREF value
                         * @property {number} PREP=43 PREP value
                         * @property {number} PRONL=44 PRONL value
                         * @property {number} PRT=45 PRT value
                         * @property {number} PS=46 PS value
                         * @property {number} QUANTMOD=47 QUANTMOD value
                         * @property {number} RCMOD=48 RCMOD value
                         * @property {number} RCMODREL=49 RCMODREL value
                         * @property {number} RDROP=50 RDROP value
                         * @property {number} REF=51 REF value
                         * @property {number} REMNANT=52 REMNANT value
                         * @property {number} REPARANDUM=53 REPARANDUM value
                         * @property {number} ROOT=54 ROOT value
                         * @property {number} SNUM=55 SNUM value
                         * @property {number} SUFF=56 SUFF value
                         * @property {number} TMOD=57 TMOD value
                         * @property {number} TOPIC=58 TOPIC value
                         * @property {number} VMOD=59 VMOD value
                         * @property {number} VOCATIVE=60 VOCATIVE value
                         * @property {number} XCOMP=61 XCOMP value
                         * @property {number} SUFFIX=62 SUFFIX value
                         * @property {number} TITLE=63 TITLE value
                         * @property {number} ADVPHMOD=64 ADVPHMOD value
                         * @property {number} AUXCAUS=65 AUXCAUS value
                         * @property {number} AUXVV=66 AUXVV value
                         * @property {number} DTMOD=67 DTMOD value
                         * @property {number} FOREIGN=68 FOREIGN value
                         * @property {number} KW=69 KW value
                         * @property {number} LIST=70 LIST value
                         * @property {number} NOMC=71 NOMC value
                         * @property {number} NOMCSUBJ=72 NOMCSUBJ value
                         * @property {number} NOMCSUBJPASS=73 NOMCSUBJPASS value
                         * @property {number} NUMC=74 NUMC value
                         * @property {number} COP=75 COP value
                         * @property {number} DISLOCATED=76 DISLOCATED value
                         * @property {number} ASP=77 ASP value
                         * @property {number} GMOD=78 GMOD value
                         * @property {number} GOBJ=79 GOBJ value
                         * @property {number} INFMOD=80 INFMOD value
                         * @property {number} MES=81 MES value
                         * @property {number} NCOMP=82 NCOMP value
                         */
                        DependencyEdge.Label = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "UNKNOWN"] = 0;
                            values[valuesById[1] = "ABBREV"] = 1;
                            values[valuesById[2] = "ACOMP"] = 2;
                            values[valuesById[3] = "ADVCL"] = 3;
                            values[valuesById[4] = "ADVMOD"] = 4;
                            values[valuesById[5] = "AMOD"] = 5;
                            values[valuesById[6] = "APPOS"] = 6;
                            values[valuesById[7] = "ATTR"] = 7;
                            values[valuesById[8] = "AUX"] = 8;
                            values[valuesById[9] = "AUXPASS"] = 9;
                            values[valuesById[10] = "CC"] = 10;
                            values[valuesById[11] = "CCOMP"] = 11;
                            values[valuesById[12] = "CONJ"] = 12;
                            values[valuesById[13] = "CSUBJ"] = 13;
                            values[valuesById[14] = "CSUBJPASS"] = 14;
                            values[valuesById[15] = "DEP"] = 15;
                            values[valuesById[16] = "DET"] = 16;
                            values[valuesById[17] = "DISCOURSE"] = 17;
                            values[valuesById[18] = "DOBJ"] = 18;
                            values[valuesById[19] = "EXPL"] = 19;
                            values[valuesById[20] = "GOESWITH"] = 20;
                            values[valuesById[21] = "IOBJ"] = 21;
                            values[valuesById[22] = "MARK"] = 22;
                            values[valuesById[23] = "MWE"] = 23;
                            values[valuesById[24] = "MWV"] = 24;
                            values[valuesById[25] = "NEG"] = 25;
                            values[valuesById[26] = "NN"] = 26;
                            values[valuesById[27] = "NPADVMOD"] = 27;
                            values[valuesById[28] = "NSUBJ"] = 28;
                            values[valuesById[29] = "NSUBJPASS"] = 29;
                            values[valuesById[30] = "NUM"] = 30;
                            values[valuesById[31] = "NUMBER"] = 31;
                            values[valuesById[32] = "P"] = 32;
                            values[valuesById[33] = "PARATAXIS"] = 33;
                            values[valuesById[34] = "PARTMOD"] = 34;
                            values[valuesById[35] = "PCOMP"] = 35;
                            values[valuesById[36] = "POBJ"] = 36;
                            values[valuesById[37] = "POSS"] = 37;
                            values[valuesById[38] = "POSTNEG"] = 38;
                            values[valuesById[39] = "PRECOMP"] = 39;
                            values[valuesById[40] = "PRECONJ"] = 40;
                            values[valuesById[41] = "PREDET"] = 41;
                            values[valuesById[42] = "PREF"] = 42;
                            values[valuesById[43] = "PREP"] = 43;
                            values[valuesById[44] = "PRONL"] = 44;
                            values[valuesById[45] = "PRT"] = 45;
                            values[valuesById[46] = "PS"] = 46;
                            values[valuesById[47] = "QUANTMOD"] = 47;
                            values[valuesById[48] = "RCMOD"] = 48;
                            values[valuesById[49] = "RCMODREL"] = 49;
                            values[valuesById[50] = "RDROP"] = 50;
                            values[valuesById[51] = "REF"] = 51;
                            values[valuesById[52] = "REMNANT"] = 52;
                            values[valuesById[53] = "REPARANDUM"] = 53;
                            values[valuesById[54] = "ROOT"] = 54;
                            values[valuesById[55] = "SNUM"] = 55;
                            values[valuesById[56] = "SUFF"] = 56;
                            values[valuesById[57] = "TMOD"] = 57;
                            values[valuesById[58] = "TOPIC"] = 58;
                            values[valuesById[59] = "VMOD"] = 59;
                            values[valuesById[60] = "VOCATIVE"] = 60;
                            values[valuesById[61] = "XCOMP"] = 61;
                            values[valuesById[62] = "SUFFIX"] = 62;
                            values[valuesById[63] = "TITLE"] = 63;
                            values[valuesById[64] = "ADVPHMOD"] = 64;
                            values[valuesById[65] = "AUXCAUS"] = 65;
                            values[valuesById[66] = "AUXVV"] = 66;
                            values[valuesById[67] = "DTMOD"] = 67;
                            values[valuesById[68] = "FOREIGN"] = 68;
                            values[valuesById[69] = "KW"] = 69;
                            values[valuesById[70] = "LIST"] = 70;
                            values[valuesById[71] = "NOMC"] = 71;
                            values[valuesById[72] = "NOMCSUBJ"] = 72;
                            values[valuesById[73] = "NOMCSUBJPASS"] = 73;
                            values[valuesById[74] = "NUMC"] = 74;
                            values[valuesById[75] = "COP"] = 75;
                            values[valuesById[76] = "DISLOCATED"] = 76;
                            values[valuesById[77] = "ASP"] = 77;
                            values[valuesById[78] = "GMOD"] = 78;
                            values[valuesById[79] = "GOBJ"] = 79;
                            values[valuesById[80] = "INFMOD"] = 80;
                            values[valuesById[81] = "MES"] = 81;
                            values[valuesById[82] = "NCOMP"] = 82;
                            return values;
                        })();
    
                        return DependencyEdge;
                    })();
    
                    v1.EntityMention = (function() {
    
                        /**
                         * Properties of an EntityMention.
                         * @memberof google.cloud.language.v1
                         * @interface IEntityMention
                         * @property {google.cloud.language.v1.ITextSpan|null} [text] EntityMention text
                         * @property {google.cloud.language.v1.EntityMention.Type|null} [type] EntityMention type
                         * @property {google.cloud.language.v1.ISentiment|null} [sentiment] EntityMention sentiment
                         */
    
                        /**
                         * Constructs a new EntityMention.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an EntityMention.
                         * @implements IEntityMention
                         * @constructor
                         * @param {google.cloud.language.v1.IEntityMention=} [properties] Properties to set
                         */
                        function EntityMention(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * EntityMention text.
                         * @member {google.cloud.language.v1.ITextSpan|null|undefined} text
                         * @memberof google.cloud.language.v1.EntityMention
                         * @instance
                         */
                        EntityMention.prototype.text = null;
    
                        /**
                         * EntityMention type.
                         * @member {google.cloud.language.v1.EntityMention.Type} type
                         * @memberof google.cloud.language.v1.EntityMention
                         * @instance
                         */
                        EntityMention.prototype.type = 0;
    
                        /**
                         * EntityMention sentiment.
                         * @member {google.cloud.language.v1.ISentiment|null|undefined} sentiment
                         * @memberof google.cloud.language.v1.EntityMention
                         * @instance
                         */
                        EntityMention.prototype.sentiment = null;
    
                        /**
                         * Creates a new EntityMention instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.EntityMention
                         * @static
                         * @param {google.cloud.language.v1.IEntityMention=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.EntityMention} EntityMention instance
                         */
                        EntityMention.create = function create(properties) {
                            return new EntityMention(properties);
                        };
    
                        /**
                         * Encodes the specified EntityMention message. Does not implicitly {@link google.cloud.language.v1.EntityMention.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.EntityMention
                         * @static
                         * @param {google.cloud.language.v1.IEntityMention} message EntityMention message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        EntityMention.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                $root.google.cloud.language.v1.TextSpan.encode(message.text, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                            if (message.sentiment != null && Object.hasOwnProperty.call(message, "sentiment"))
                                $root.google.cloud.language.v1.Sentiment.encode(message.sentiment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified EntityMention message, length delimited. Does not implicitly {@link google.cloud.language.v1.EntityMention.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.EntityMention
                         * @static
                         * @param {google.cloud.language.v1.IEntityMention} message EntityMention message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        EntityMention.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an EntityMention message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.EntityMention
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.EntityMention} EntityMention
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        EntityMention.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.EntityMention();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = $root.google.cloud.language.v1.TextSpan.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.sentiment = $root.google.cloud.language.v1.Sentiment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an EntityMention message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.EntityMention
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.EntityMention} EntityMention
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        EntityMention.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an EntityMention message.
                         * @function verify
                         * @memberof google.cloud.language.v1.EntityMention
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        EntityMention.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text")) {
                                var error = $root.google.cloud.language.v1.TextSpan.verify(message.text);
                                if (error)
                                    return "text." + error;
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.sentiment != null && message.hasOwnProperty("sentiment")) {
                                var error = $root.google.cloud.language.v1.Sentiment.verify(message.sentiment);
                                if (error)
                                    return "sentiment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an EntityMention message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.EntityMention
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.EntityMention} EntityMention
                         */
                        EntityMention.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.EntityMention)
                                return object;
                            var message = new $root.google.cloud.language.v1.EntityMention();
                            if (object.text != null) {
                                if (typeof object.text !== "object")
                                    throw TypeError(".google.cloud.language.v1.EntityMention.text: object expected");
                                message.text = $root.google.cloud.language.v1.TextSpan.fromObject(object.text);
                            }
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "TYPE_UNKNOWN":
                            case 0:
                                message.type = 0;
                                break;
                            case "PROPER":
                            case 1:
                                message.type = 1;
                                break;
                            case "COMMON":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.sentiment != null) {
                                if (typeof object.sentiment !== "object")
                                    throw TypeError(".google.cloud.language.v1.EntityMention.sentiment: object expected");
                                message.sentiment = $root.google.cloud.language.v1.Sentiment.fromObject(object.sentiment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an EntityMention message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.EntityMention
                         * @static
                         * @param {google.cloud.language.v1.EntityMention} message EntityMention
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        EntityMention.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.text = null;
                                object.type = options.enums === String ? "TYPE_UNKNOWN" : 0;
                                object.sentiment = null;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = $root.google.cloud.language.v1.TextSpan.toObject(message.text, options);
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.cloud.language.v1.EntityMention.Type[message.type] === undefined ? message.type : $root.google.cloud.language.v1.EntityMention.Type[message.type] : message.type;
                            if (message.sentiment != null && message.hasOwnProperty("sentiment"))
                                object.sentiment = $root.google.cloud.language.v1.Sentiment.toObject(message.sentiment, options);
                            return object;
                        };
    
                        /**
                         * Converts this EntityMention to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.EntityMention
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        EntityMention.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for EntityMention
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.EntityMention
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        EntityMention.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.EntityMention";
                        };
    
                        /**
                         * Type enum.
                         * @name google.cloud.language.v1.EntityMention.Type
                         * @enum {number}
                         * @property {number} TYPE_UNKNOWN=0 TYPE_UNKNOWN value
                         * @property {number} PROPER=1 PROPER value
                         * @property {number} COMMON=2 COMMON value
                         */
                        EntityMention.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TYPE_UNKNOWN"] = 0;
                            values[valuesById[1] = "PROPER"] = 1;
                            values[valuesById[2] = "COMMON"] = 2;
                            return values;
                        })();
    
                        return EntityMention;
                    })();
    
                    v1.TextSpan = (function() {
    
                        /**
                         * Properties of a TextSpan.
                         * @memberof google.cloud.language.v1
                         * @interface ITextSpan
                         * @property {string|null} [content] TextSpan content
                         * @property {number|null} [beginOffset] TextSpan beginOffset
                         */
    
                        /**
                         * Constructs a new TextSpan.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a TextSpan.
                         * @implements ITextSpan
                         * @constructor
                         * @param {google.cloud.language.v1.ITextSpan=} [properties] Properties to set
                         */
                        function TextSpan(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextSpan content.
                         * @member {string} content
                         * @memberof google.cloud.language.v1.TextSpan
                         * @instance
                         */
                        TextSpan.prototype.content = "";
    
                        /**
                         * TextSpan beginOffset.
                         * @member {number} beginOffset
                         * @memberof google.cloud.language.v1.TextSpan
                         * @instance
                         */
                        TextSpan.prototype.beginOffset = 0;
    
                        /**
                         * Creates a new TextSpan instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.TextSpan
                         * @static
                         * @param {google.cloud.language.v1.ITextSpan=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.TextSpan} TextSpan instance
                         */
                        TextSpan.create = function create(properties) {
                            return new TextSpan(properties);
                        };
    
                        /**
                         * Encodes the specified TextSpan message. Does not implicitly {@link google.cloud.language.v1.TextSpan.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.TextSpan
                         * @static
                         * @param {google.cloud.language.v1.ITextSpan} message TextSpan message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextSpan.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
                            if (message.beginOffset != null && Object.hasOwnProperty.call(message, "beginOffset"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.beginOffset);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextSpan message, length delimited. Does not implicitly {@link google.cloud.language.v1.TextSpan.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.TextSpan
                         * @static
                         * @param {google.cloud.language.v1.ITextSpan} message TextSpan message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextSpan.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextSpan message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.TextSpan
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.TextSpan} TextSpan
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextSpan.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.TextSpan();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.content = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.beginOffset = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextSpan message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.TextSpan
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.TextSpan} TextSpan
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextSpan.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextSpan message.
                         * @function verify
                         * @memberof google.cloud.language.v1.TextSpan
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextSpan.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.content != null && message.hasOwnProperty("content"))
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            if (message.beginOffset != null && message.hasOwnProperty("beginOffset"))
                                if (!$util.isInteger(message.beginOffset))
                                    return "beginOffset: integer expected";
                            return null;
                        };
    
                        /**
                         * Creates a TextSpan message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.TextSpan
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.TextSpan} TextSpan
                         */
                        TextSpan.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.TextSpan)
                                return object;
                            var message = new $root.google.cloud.language.v1.TextSpan();
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.beginOffset != null)
                                message.beginOffset = object.beginOffset | 0;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextSpan message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.TextSpan
                         * @static
                         * @param {google.cloud.language.v1.TextSpan} message TextSpan
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextSpan.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.content = "";
                                object.beginOffset = 0;
                            }
                            if (message.content != null && message.hasOwnProperty("content"))
                                object.content = message.content;
                            if (message.beginOffset != null && message.hasOwnProperty("beginOffset"))
                                object.beginOffset = message.beginOffset;
                            return object;
                        };
    
                        /**
                         * Converts this TextSpan to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.TextSpan
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextSpan.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextSpan
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.TextSpan
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextSpan.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.TextSpan";
                        };
    
                        return TextSpan;
                    })();
    
                    v1.ClassificationCategory = (function() {
    
                        /**
                         * Properties of a ClassificationCategory.
                         * @memberof google.cloud.language.v1
                         * @interface IClassificationCategory
                         * @property {string|null} [name] ClassificationCategory name
                         * @property {number|null} [confidence] ClassificationCategory confidence
                         */
    
                        /**
                         * Constructs a new ClassificationCategory.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a ClassificationCategory.
                         * @implements IClassificationCategory
                         * @constructor
                         * @param {google.cloud.language.v1.IClassificationCategory=} [properties] Properties to set
                         */
                        function ClassificationCategory(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClassificationCategory name.
                         * @member {string} name
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @instance
                         */
                        ClassificationCategory.prototype.name = "";
    
                        /**
                         * ClassificationCategory confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @instance
                         */
                        ClassificationCategory.prototype.confidence = 0;
    
                        /**
                         * Creates a new ClassificationCategory instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @static
                         * @param {google.cloud.language.v1.IClassificationCategory=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.ClassificationCategory} ClassificationCategory instance
                         */
                        ClassificationCategory.create = function create(properties) {
                            return new ClassificationCategory(properties);
                        };
    
                        /**
                         * Encodes the specified ClassificationCategory message. Does not implicitly {@link google.cloud.language.v1.ClassificationCategory.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @static
                         * @param {google.cloud.language.v1.IClassificationCategory} message ClassificationCategory message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassificationCategory.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClassificationCategory message, length delimited. Does not implicitly {@link google.cloud.language.v1.ClassificationCategory.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @static
                         * @param {google.cloud.language.v1.IClassificationCategory} message ClassificationCategory message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassificationCategory.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClassificationCategory message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.ClassificationCategory} ClassificationCategory
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassificationCategory.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.ClassificationCategory();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClassificationCategory message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.ClassificationCategory} ClassificationCategory
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassificationCategory.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClassificationCategory message.
                         * @function verify
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClassificationCategory.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a ClassificationCategory message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.ClassificationCategory} ClassificationCategory
                         */
                        ClassificationCategory.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.ClassificationCategory)
                                return object;
                            var message = new $root.google.cloud.language.v1.ClassificationCategory();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClassificationCategory message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @static
                         * @param {google.cloud.language.v1.ClassificationCategory} message ClassificationCategory
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClassificationCategory.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.confidence = 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this ClassificationCategory to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClassificationCategory.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ClassificationCategory
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.ClassificationCategory
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ClassificationCategory.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.ClassificationCategory";
                        };
    
                        return ClassificationCategory;
                    })();
    
                    v1.ClassificationModelOptions = (function() {
    
                        /**
                         * Properties of a ClassificationModelOptions.
                         * @memberof google.cloud.language.v1
                         * @interface IClassificationModelOptions
                         * @property {google.cloud.language.v1.ClassificationModelOptions.IV1Model|null} [v1Model] ClassificationModelOptions v1Model
                         * @property {google.cloud.language.v1.ClassificationModelOptions.IV2Model|null} [v2Model] ClassificationModelOptions v2Model
                         */
    
                        /**
                         * Constructs a new ClassificationModelOptions.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a ClassificationModelOptions.
                         * @implements IClassificationModelOptions
                         * @constructor
                         * @param {google.cloud.language.v1.IClassificationModelOptions=} [properties] Properties to set
                         */
                        function ClassificationModelOptions(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClassificationModelOptions v1Model.
                         * @member {google.cloud.language.v1.ClassificationModelOptions.IV1Model|null|undefined} v1Model
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @instance
                         */
                        ClassificationModelOptions.prototype.v1Model = null;
    
                        /**
                         * ClassificationModelOptions v2Model.
                         * @member {google.cloud.language.v1.ClassificationModelOptions.IV2Model|null|undefined} v2Model
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @instance
                         */
                        ClassificationModelOptions.prototype.v2Model = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * ClassificationModelOptions modelType.
                         * @member {"v1Model"|"v2Model"|undefined} modelType
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @instance
                         */
                        Object.defineProperty(ClassificationModelOptions.prototype, "modelType", {
                            get: $util.oneOfGetter($oneOfFields = ["v1Model", "v2Model"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new ClassificationModelOptions instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @static
                         * @param {google.cloud.language.v1.IClassificationModelOptions=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.ClassificationModelOptions} ClassificationModelOptions instance
                         */
                        ClassificationModelOptions.create = function create(properties) {
                            return new ClassificationModelOptions(properties);
                        };
    
                        /**
                         * Encodes the specified ClassificationModelOptions message. Does not implicitly {@link google.cloud.language.v1.ClassificationModelOptions.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @static
                         * @param {google.cloud.language.v1.IClassificationModelOptions} message ClassificationModelOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassificationModelOptions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.v1Model != null && Object.hasOwnProperty.call(message, "v1Model"))
                                $root.google.cloud.language.v1.ClassificationModelOptions.V1Model.encode(message.v1Model, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.v2Model != null && Object.hasOwnProperty.call(message, "v2Model"))
                                $root.google.cloud.language.v1.ClassificationModelOptions.V2Model.encode(message.v2Model, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClassificationModelOptions message, length delimited. Does not implicitly {@link google.cloud.language.v1.ClassificationModelOptions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @static
                         * @param {google.cloud.language.v1.IClassificationModelOptions} message ClassificationModelOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassificationModelOptions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClassificationModelOptions message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.ClassificationModelOptions} ClassificationModelOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassificationModelOptions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.ClassificationModelOptions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.v1Model = $root.google.cloud.language.v1.ClassificationModelOptions.V1Model.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.v2Model = $root.google.cloud.language.v1.ClassificationModelOptions.V2Model.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClassificationModelOptions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.ClassificationModelOptions} ClassificationModelOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassificationModelOptions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClassificationModelOptions message.
                         * @function verify
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClassificationModelOptions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.v1Model != null && message.hasOwnProperty("v1Model")) {
                                properties.modelType = 1;
                                {
                                    var error = $root.google.cloud.language.v1.ClassificationModelOptions.V1Model.verify(message.v1Model);
                                    if (error)
                                        return "v1Model." + error;
                                }
                            }
                            if (message.v2Model != null && message.hasOwnProperty("v2Model")) {
                                if (properties.modelType === 1)
                                    return "modelType: multiple values";
                                properties.modelType = 1;
                                {
                                    var error = $root.google.cloud.language.v1.ClassificationModelOptions.V2Model.verify(message.v2Model);
                                    if (error)
                                        return "v2Model." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ClassificationModelOptions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.ClassificationModelOptions} ClassificationModelOptions
                         */
                        ClassificationModelOptions.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.ClassificationModelOptions)
                                return object;
                            var message = new $root.google.cloud.language.v1.ClassificationModelOptions();
                            if (object.v1Model != null) {
                                if (typeof object.v1Model !== "object")
                                    throw TypeError(".google.cloud.language.v1.ClassificationModelOptions.v1Model: object expected");
                                message.v1Model = $root.google.cloud.language.v1.ClassificationModelOptions.V1Model.fromObject(object.v1Model);
                            }
                            if (object.v2Model != null) {
                                if (typeof object.v2Model !== "object")
                                    throw TypeError(".google.cloud.language.v1.ClassificationModelOptions.v2Model: object expected");
                                message.v2Model = $root.google.cloud.language.v1.ClassificationModelOptions.V2Model.fromObject(object.v2Model);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClassificationModelOptions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @static
                         * @param {google.cloud.language.v1.ClassificationModelOptions} message ClassificationModelOptions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClassificationModelOptions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.v1Model != null && message.hasOwnProperty("v1Model")) {
                                object.v1Model = $root.google.cloud.language.v1.ClassificationModelOptions.V1Model.toObject(message.v1Model, options);
                                if (options.oneofs)
                                    object.modelType = "v1Model";
                            }
                            if (message.v2Model != null && message.hasOwnProperty("v2Model")) {
                                object.v2Model = $root.google.cloud.language.v1.ClassificationModelOptions.V2Model.toObject(message.v2Model, options);
                                if (options.oneofs)
                                    object.modelType = "v2Model";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ClassificationModelOptions to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClassificationModelOptions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ClassificationModelOptions
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.ClassificationModelOptions
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ClassificationModelOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.ClassificationModelOptions";
                        };
    
                        ClassificationModelOptions.V1Model = (function() {
    
                            /**
                             * Properties of a V1Model.
                             * @memberof google.cloud.language.v1.ClassificationModelOptions
                             * @interface IV1Model
                             */
    
                            /**
                             * Constructs a new V1Model.
                             * @memberof google.cloud.language.v1.ClassificationModelOptions
                             * @classdesc Represents a V1Model.
                             * @implements IV1Model
                             * @constructor
                             * @param {google.cloud.language.v1.ClassificationModelOptions.IV1Model=} [properties] Properties to set
                             */
                            function V1Model(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Creates a new V1Model instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V1Model
                             * @static
                             * @param {google.cloud.language.v1.ClassificationModelOptions.IV1Model=} [properties] Properties to set
                             * @returns {google.cloud.language.v1.ClassificationModelOptions.V1Model} V1Model instance
                             */
                            V1Model.create = function create(properties) {
                                return new V1Model(properties);
                            };
    
                            /**
                             * Encodes the specified V1Model message. Does not implicitly {@link google.cloud.language.v1.ClassificationModelOptions.V1Model.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V1Model
                             * @static
                             * @param {google.cloud.language.v1.ClassificationModelOptions.IV1Model} message V1Model message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            V1Model.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified V1Model message, length delimited. Does not implicitly {@link google.cloud.language.v1.ClassificationModelOptions.V1Model.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V1Model
                             * @static
                             * @param {google.cloud.language.v1.ClassificationModelOptions.IV1Model} message V1Model message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            V1Model.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a V1Model message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V1Model
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.language.v1.ClassificationModelOptions.V1Model} V1Model
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            V1Model.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.ClassificationModelOptions.V1Model();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a V1Model message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V1Model
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.language.v1.ClassificationModelOptions.V1Model} V1Model
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            V1Model.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a V1Model message.
                             * @function verify
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V1Model
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            V1Model.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };
    
                            /**
                             * Creates a V1Model message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V1Model
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.language.v1.ClassificationModelOptions.V1Model} V1Model
                             */
                            V1Model.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.language.v1.ClassificationModelOptions.V1Model)
                                    return object;
                                return new $root.google.cloud.language.v1.ClassificationModelOptions.V1Model();
                            };
    
                            /**
                             * Creates a plain object from a V1Model message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V1Model
                             * @static
                             * @param {google.cloud.language.v1.ClassificationModelOptions.V1Model} message V1Model
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            V1Model.toObject = function toObject() {
                                return {};
                            };
    
                            /**
                             * Converts this V1Model to JSON.
                             * @function toJSON
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V1Model
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            V1Model.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for V1Model
                             * @function getTypeUrl
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V1Model
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            V1Model.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.language.v1.ClassificationModelOptions.V1Model";
                            };
    
                            return V1Model;
                        })();
    
                        ClassificationModelOptions.V2Model = (function() {
    
                            /**
                             * Properties of a V2Model.
                             * @memberof google.cloud.language.v1.ClassificationModelOptions
                             * @interface IV2Model
                             * @property {google.cloud.language.v1.ClassificationModelOptions.V2Model.ContentCategoriesVersion|null} [contentCategoriesVersion] V2Model contentCategoriesVersion
                             */
    
                            /**
                             * Constructs a new V2Model.
                             * @memberof google.cloud.language.v1.ClassificationModelOptions
                             * @classdesc Represents a V2Model.
                             * @implements IV2Model
                             * @constructor
                             * @param {google.cloud.language.v1.ClassificationModelOptions.IV2Model=} [properties] Properties to set
                             */
                            function V2Model(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * V2Model contentCategoriesVersion.
                             * @member {google.cloud.language.v1.ClassificationModelOptions.V2Model.ContentCategoriesVersion} contentCategoriesVersion
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @instance
                             */
                            V2Model.prototype.contentCategoriesVersion = 0;
    
                            /**
                             * Creates a new V2Model instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @static
                             * @param {google.cloud.language.v1.ClassificationModelOptions.IV2Model=} [properties] Properties to set
                             * @returns {google.cloud.language.v1.ClassificationModelOptions.V2Model} V2Model instance
                             */
                            V2Model.create = function create(properties) {
                                return new V2Model(properties);
                            };
    
                            /**
                             * Encodes the specified V2Model message. Does not implicitly {@link google.cloud.language.v1.ClassificationModelOptions.V2Model.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @static
                             * @param {google.cloud.language.v1.ClassificationModelOptions.IV2Model} message V2Model message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            V2Model.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.contentCategoriesVersion != null && Object.hasOwnProperty.call(message, "contentCategoriesVersion"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.contentCategoriesVersion);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified V2Model message, length delimited. Does not implicitly {@link google.cloud.language.v1.ClassificationModelOptions.V2Model.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @static
                             * @param {google.cloud.language.v1.ClassificationModelOptions.IV2Model} message V2Model message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            V2Model.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a V2Model message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.language.v1.ClassificationModelOptions.V2Model} V2Model
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            V2Model.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.ClassificationModelOptions.V2Model();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.contentCategoriesVersion = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a V2Model message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.language.v1.ClassificationModelOptions.V2Model} V2Model
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            V2Model.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a V2Model message.
                             * @function verify
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            V2Model.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.contentCategoriesVersion != null && message.hasOwnProperty("contentCategoriesVersion"))
                                    switch (message.contentCategoriesVersion) {
                                    default:
                                        return "contentCategoriesVersion: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates a V2Model message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.language.v1.ClassificationModelOptions.V2Model} V2Model
                             */
                            V2Model.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.language.v1.ClassificationModelOptions.V2Model)
                                    return object;
                                var message = new $root.google.cloud.language.v1.ClassificationModelOptions.V2Model();
                                switch (object.contentCategoriesVersion) {
                                default:
                                    if (typeof object.contentCategoriesVersion === "number") {
                                        message.contentCategoriesVersion = object.contentCategoriesVersion;
                                        break;
                                    }
                                    break;
                                case "CONTENT_CATEGORIES_VERSION_UNSPECIFIED":
                                case 0:
                                    message.contentCategoriesVersion = 0;
                                    break;
                                case "V1":
                                case 1:
                                    message.contentCategoriesVersion = 1;
                                    break;
                                case "V2":
                                case 2:
                                    message.contentCategoriesVersion = 2;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a V2Model message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @static
                             * @param {google.cloud.language.v1.ClassificationModelOptions.V2Model} message V2Model
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            V2Model.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.contentCategoriesVersion = options.enums === String ? "CONTENT_CATEGORIES_VERSION_UNSPECIFIED" : 0;
                                if (message.contentCategoriesVersion != null && message.hasOwnProperty("contentCategoriesVersion"))
                                    object.contentCategoriesVersion = options.enums === String ? $root.google.cloud.language.v1.ClassificationModelOptions.V2Model.ContentCategoriesVersion[message.contentCategoriesVersion] === undefined ? message.contentCategoriesVersion : $root.google.cloud.language.v1.ClassificationModelOptions.V2Model.ContentCategoriesVersion[message.contentCategoriesVersion] : message.contentCategoriesVersion;
                                return object;
                            };
    
                            /**
                             * Converts this V2Model to JSON.
                             * @function toJSON
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            V2Model.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for V2Model
                             * @function getTypeUrl
                             * @memberof google.cloud.language.v1.ClassificationModelOptions.V2Model
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            V2Model.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.language.v1.ClassificationModelOptions.V2Model";
                            };
    
                            /**
                             * ContentCategoriesVersion enum.
                             * @name google.cloud.language.v1.ClassificationModelOptions.V2Model.ContentCategoriesVersion
                             * @enum {number}
                             * @property {number} CONTENT_CATEGORIES_VERSION_UNSPECIFIED=0 CONTENT_CATEGORIES_VERSION_UNSPECIFIED value
                             * @property {number} V1=1 V1 value
                             * @property {number} V2=2 V2 value
                             */
                            V2Model.ContentCategoriesVersion = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "CONTENT_CATEGORIES_VERSION_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "V1"] = 1;
                                values[valuesById[2] = "V2"] = 2;
                                return values;
                            })();
    
                            return V2Model;
                        })();
    
                        return ClassificationModelOptions;
                    })();
    
                    v1.AnalyzeSentimentRequest = (function() {
    
                        /**
                         * Properties of an AnalyzeSentimentRequest.
                         * @memberof google.cloud.language.v1
                         * @interface IAnalyzeSentimentRequest
                         * @property {google.cloud.language.v1.IDocument|null} [document] AnalyzeSentimentRequest document
                         * @property {google.cloud.language.v1.EncodingType|null} [encodingType] AnalyzeSentimentRequest encodingType
                         */
    
                        /**
                         * Constructs a new AnalyzeSentimentRequest.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an AnalyzeSentimentRequest.
                         * @implements IAnalyzeSentimentRequest
                         * @constructor
                         * @param {google.cloud.language.v1.IAnalyzeSentimentRequest=} [properties] Properties to set
                         */
                        function AnalyzeSentimentRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeSentimentRequest document.
                         * @member {google.cloud.language.v1.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @instance
                         */
                        AnalyzeSentimentRequest.prototype.document = null;
    
                        /**
                         * AnalyzeSentimentRequest encodingType.
                         * @member {google.cloud.language.v1.EncodingType} encodingType
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @instance
                         */
                        AnalyzeSentimentRequest.prototype.encodingType = 0;
    
                        /**
                         * Creates a new AnalyzeSentimentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSentimentRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.AnalyzeSentimentRequest} AnalyzeSentimentRequest instance
                         */
                        AnalyzeSentimentRequest.create = function create(properties) {
                            return new AnalyzeSentimentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeSentimentRequest message. Does not implicitly {@link google.cloud.language.v1.AnalyzeSentimentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSentimentRequest} message AnalyzeSentimentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSentimentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.encodingType != null && Object.hasOwnProperty.call(message, "encodingType"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeSentimentRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnalyzeSentimentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSentimentRequest} message AnalyzeSentimentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSentimentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeSentimentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.AnalyzeSentimentRequest} AnalyzeSentimentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSentimentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnalyzeSentimentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.encodingType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeSentimentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.AnalyzeSentimentRequest} AnalyzeSentimentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSentimentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeSentimentRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeSentimentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                switch (message.encodingType) {
                                default:
                                    return "encodingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeSentimentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.AnalyzeSentimentRequest} AnalyzeSentimentRequest
                         */
                        AnalyzeSentimentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.AnalyzeSentimentRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1.AnalyzeSentimentRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1.AnalyzeSentimentRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1.Document.fromObject(object.document);
                            }
                            switch (object.encodingType) {
                            default:
                                if (typeof object.encodingType === "number") {
                                    message.encodingType = object.encodingType;
                                    break;
                                }
                                break;
                            case "NONE":
                            case 0:
                                message.encodingType = 0;
                                break;
                            case "UTF8":
                            case 1:
                                message.encodingType = 1;
                                break;
                            case "UTF16":
                            case 2:
                                message.encodingType = 2;
                                break;
                            case "UTF32":
                            case 3:
                                message.encodingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeSentimentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @static
                         * @param {google.cloud.language.v1.AnalyzeSentimentRequest} message AnalyzeSentimentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeSentimentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.encodingType = options.enums === String ? "NONE" : 0;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1.Document.toObject(message.document, options);
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                object.encodingType = options.enums === String ? $root.google.cloud.language.v1.EncodingType[message.encodingType] === undefined ? message.encodingType : $root.google.cloud.language.v1.EncodingType[message.encodingType] : message.encodingType;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeSentimentRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeSentimentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeSentimentRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.AnalyzeSentimentRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeSentimentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.AnalyzeSentimentRequest";
                        };
    
                        return AnalyzeSentimentRequest;
                    })();
    
                    v1.AnalyzeSentimentResponse = (function() {
    
                        /**
                         * Properties of an AnalyzeSentimentResponse.
                         * @memberof google.cloud.language.v1
                         * @interface IAnalyzeSentimentResponse
                         * @property {google.cloud.language.v1.ISentiment|null} [documentSentiment] AnalyzeSentimentResponse documentSentiment
                         * @property {string|null} [language] AnalyzeSentimentResponse language
                         * @property {Array.<google.cloud.language.v1.ISentence>|null} [sentences] AnalyzeSentimentResponse sentences
                         */
    
                        /**
                         * Constructs a new AnalyzeSentimentResponse.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an AnalyzeSentimentResponse.
                         * @implements IAnalyzeSentimentResponse
                         * @constructor
                         * @param {google.cloud.language.v1.IAnalyzeSentimentResponse=} [properties] Properties to set
                         */
                        function AnalyzeSentimentResponse(properties) {
                            this.sentences = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeSentimentResponse documentSentiment.
                         * @member {google.cloud.language.v1.ISentiment|null|undefined} documentSentiment
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @instance
                         */
                        AnalyzeSentimentResponse.prototype.documentSentiment = null;
    
                        /**
                         * AnalyzeSentimentResponse language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @instance
                         */
                        AnalyzeSentimentResponse.prototype.language = "";
    
                        /**
                         * AnalyzeSentimentResponse sentences.
                         * @member {Array.<google.cloud.language.v1.ISentence>} sentences
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @instance
                         */
                        AnalyzeSentimentResponse.prototype.sentences = $util.emptyArray;
    
                        /**
                         * Creates a new AnalyzeSentimentResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSentimentResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.AnalyzeSentimentResponse} AnalyzeSentimentResponse instance
                         */
                        AnalyzeSentimentResponse.create = function create(properties) {
                            return new AnalyzeSentimentResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeSentimentResponse message. Does not implicitly {@link google.cloud.language.v1.AnalyzeSentimentResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSentimentResponse} message AnalyzeSentimentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSentimentResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.documentSentiment != null && Object.hasOwnProperty.call(message, "documentSentiment"))
                                $root.google.cloud.language.v1.Sentiment.encode(message.documentSentiment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
                            if (message.sentences != null && message.sentences.length)
                                for (var i = 0; i < message.sentences.length; ++i)
                                    $root.google.cloud.language.v1.Sentence.encode(message.sentences[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeSentimentResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnalyzeSentimentResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSentimentResponse} message AnalyzeSentimentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSentimentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeSentimentResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.AnalyzeSentimentResponse} AnalyzeSentimentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSentimentResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnalyzeSentimentResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.documentSentiment = $root.google.cloud.language.v1.Sentiment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.language = reader.string();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.sentences && message.sentences.length))
                                            message.sentences = [];
                                        message.sentences.push($root.google.cloud.language.v1.Sentence.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeSentimentResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.AnalyzeSentimentResponse} AnalyzeSentimentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSentimentResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeSentimentResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeSentimentResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.documentSentiment != null && message.hasOwnProperty("documentSentiment")) {
                                var error = $root.google.cloud.language.v1.Sentiment.verify(message.documentSentiment);
                                if (error)
                                    return "documentSentiment." + error;
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            if (message.sentences != null && message.hasOwnProperty("sentences")) {
                                if (!Array.isArray(message.sentences))
                                    return "sentences: array expected";
                                for (var i = 0; i < message.sentences.length; ++i) {
                                    var error = $root.google.cloud.language.v1.Sentence.verify(message.sentences[i]);
                                    if (error)
                                        return "sentences." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeSentimentResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.AnalyzeSentimentResponse} AnalyzeSentimentResponse
                         */
                        AnalyzeSentimentResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.AnalyzeSentimentResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1.AnalyzeSentimentResponse();
                            if (object.documentSentiment != null) {
                                if (typeof object.documentSentiment !== "object")
                                    throw TypeError(".google.cloud.language.v1.AnalyzeSentimentResponse.documentSentiment: object expected");
                                message.documentSentiment = $root.google.cloud.language.v1.Sentiment.fromObject(object.documentSentiment);
                            }
                            if (object.language != null)
                                message.language = String(object.language);
                            if (object.sentences) {
                                if (!Array.isArray(object.sentences))
                                    throw TypeError(".google.cloud.language.v1.AnalyzeSentimentResponse.sentences: array expected");
                                message.sentences = [];
                                for (var i = 0; i < object.sentences.length; ++i) {
                                    if (typeof object.sentences[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.AnalyzeSentimentResponse.sentences: object expected");
                                    message.sentences[i] = $root.google.cloud.language.v1.Sentence.fromObject(object.sentences[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeSentimentResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @static
                         * @param {google.cloud.language.v1.AnalyzeSentimentResponse} message AnalyzeSentimentResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeSentimentResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.sentences = [];
                            if (options.defaults) {
                                object.documentSentiment = null;
                                object.language = "";
                            }
                            if (message.documentSentiment != null && message.hasOwnProperty("documentSentiment"))
                                object.documentSentiment = $root.google.cloud.language.v1.Sentiment.toObject(message.documentSentiment, options);
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            if (message.sentences && message.sentences.length) {
                                object.sentences = [];
                                for (var j = 0; j < message.sentences.length; ++j)
                                    object.sentences[j] = $root.google.cloud.language.v1.Sentence.toObject(message.sentences[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeSentimentResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeSentimentResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeSentimentResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.AnalyzeSentimentResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeSentimentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.AnalyzeSentimentResponse";
                        };
    
                        return AnalyzeSentimentResponse;
                    })();
    
                    v1.AnalyzeEntitySentimentRequest = (function() {
    
                        /**
                         * Properties of an AnalyzeEntitySentimentRequest.
                         * @memberof google.cloud.language.v1
                         * @interface IAnalyzeEntitySentimentRequest
                         * @property {google.cloud.language.v1.IDocument|null} [document] AnalyzeEntitySentimentRequest document
                         * @property {google.cloud.language.v1.EncodingType|null} [encodingType] AnalyzeEntitySentimentRequest encodingType
                         */
    
                        /**
                         * Constructs a new AnalyzeEntitySentimentRequest.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an AnalyzeEntitySentimentRequest.
                         * @implements IAnalyzeEntitySentimentRequest
                         * @constructor
                         * @param {google.cloud.language.v1.IAnalyzeEntitySentimentRequest=} [properties] Properties to set
                         */
                        function AnalyzeEntitySentimentRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeEntitySentimentRequest document.
                         * @member {google.cloud.language.v1.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @instance
                         */
                        AnalyzeEntitySentimentRequest.prototype.document = null;
    
                        /**
                         * AnalyzeEntitySentimentRequest encodingType.
                         * @member {google.cloud.language.v1.EncodingType} encodingType
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @instance
                         */
                        AnalyzeEntitySentimentRequest.prototype.encodingType = 0;
    
                        /**
                         * Creates a new AnalyzeEntitySentimentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitySentimentRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.AnalyzeEntitySentimentRequest} AnalyzeEntitySentimentRequest instance
                         */
                        AnalyzeEntitySentimentRequest.create = function create(properties) {
                            return new AnalyzeEntitySentimentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitySentimentRequest message. Does not implicitly {@link google.cloud.language.v1.AnalyzeEntitySentimentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitySentimentRequest} message AnalyzeEntitySentimentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitySentimentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.encodingType != null && Object.hasOwnProperty.call(message, "encodingType"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitySentimentRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnalyzeEntitySentimentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitySentimentRequest} message AnalyzeEntitySentimentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitySentimentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeEntitySentimentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.AnalyzeEntitySentimentRequest} AnalyzeEntitySentimentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitySentimentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnalyzeEntitySentimentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.encodingType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeEntitySentimentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.AnalyzeEntitySentimentRequest} AnalyzeEntitySentimentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitySentimentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeEntitySentimentRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeEntitySentimentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                switch (message.encodingType) {
                                default:
                                    return "encodingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeEntitySentimentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.AnalyzeEntitySentimentRequest} AnalyzeEntitySentimentRequest
                         */
                        AnalyzeEntitySentimentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.AnalyzeEntitySentimentRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1.AnalyzeEntitySentimentRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1.AnalyzeEntitySentimentRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1.Document.fromObject(object.document);
                            }
                            switch (object.encodingType) {
                            default:
                                if (typeof object.encodingType === "number") {
                                    message.encodingType = object.encodingType;
                                    break;
                                }
                                break;
                            case "NONE":
                            case 0:
                                message.encodingType = 0;
                                break;
                            case "UTF8":
                            case 1:
                                message.encodingType = 1;
                                break;
                            case "UTF16":
                            case 2:
                                message.encodingType = 2;
                                break;
                            case "UTF32":
                            case 3:
                                message.encodingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeEntitySentimentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {google.cloud.language.v1.AnalyzeEntitySentimentRequest} message AnalyzeEntitySentimentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeEntitySentimentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.encodingType = options.enums === String ? "NONE" : 0;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1.Document.toObject(message.document, options);
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                object.encodingType = options.enums === String ? $root.google.cloud.language.v1.EncodingType[message.encodingType] === undefined ? message.encodingType : $root.google.cloud.language.v1.EncodingType[message.encodingType] : message.encodingType;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeEntitySentimentRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeEntitySentimentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeEntitySentimentRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeEntitySentimentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.AnalyzeEntitySentimentRequest";
                        };
    
                        return AnalyzeEntitySentimentRequest;
                    })();
    
                    v1.AnalyzeEntitySentimentResponse = (function() {
    
                        /**
                         * Properties of an AnalyzeEntitySentimentResponse.
                         * @memberof google.cloud.language.v1
                         * @interface IAnalyzeEntitySentimentResponse
                         * @property {Array.<google.cloud.language.v1.IEntity>|null} [entities] AnalyzeEntitySentimentResponse entities
                         * @property {string|null} [language] AnalyzeEntitySentimentResponse language
                         */
    
                        /**
                         * Constructs a new AnalyzeEntitySentimentResponse.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an AnalyzeEntitySentimentResponse.
                         * @implements IAnalyzeEntitySentimentResponse
                         * @constructor
                         * @param {google.cloud.language.v1.IAnalyzeEntitySentimentResponse=} [properties] Properties to set
                         */
                        function AnalyzeEntitySentimentResponse(properties) {
                            this.entities = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeEntitySentimentResponse entities.
                         * @member {Array.<google.cloud.language.v1.IEntity>} entities
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @instance
                         */
                        AnalyzeEntitySentimentResponse.prototype.entities = $util.emptyArray;
    
                        /**
                         * AnalyzeEntitySentimentResponse language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @instance
                         */
                        AnalyzeEntitySentimentResponse.prototype.language = "";
    
                        /**
                         * Creates a new AnalyzeEntitySentimentResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitySentimentResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.AnalyzeEntitySentimentResponse} AnalyzeEntitySentimentResponse instance
                         */
                        AnalyzeEntitySentimentResponse.create = function create(properties) {
                            return new AnalyzeEntitySentimentResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitySentimentResponse message. Does not implicitly {@link google.cloud.language.v1.AnalyzeEntitySentimentResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitySentimentResponse} message AnalyzeEntitySentimentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitySentimentResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entities != null && message.entities.length)
                                for (var i = 0; i < message.entities.length; ++i)
                                    $root.google.cloud.language.v1.Entity.encode(message.entities[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitySentimentResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnalyzeEntitySentimentResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitySentimentResponse} message AnalyzeEntitySentimentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitySentimentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeEntitySentimentResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.AnalyzeEntitySentimentResponse} AnalyzeEntitySentimentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitySentimentResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnalyzeEntitySentimentResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.entities && message.entities.length))
                                            message.entities = [];
                                        message.entities.push($root.google.cloud.language.v1.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.language = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeEntitySentimentResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.AnalyzeEntitySentimentResponse} AnalyzeEntitySentimentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitySentimentResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeEntitySentimentResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeEntitySentimentResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entities != null && message.hasOwnProperty("entities")) {
                                if (!Array.isArray(message.entities))
                                    return "entities: array expected";
                                for (var i = 0; i < message.entities.length; ++i) {
                                    var error = $root.google.cloud.language.v1.Entity.verify(message.entities[i]);
                                    if (error)
                                        return "entities." + error;
                                }
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeEntitySentimentResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.AnalyzeEntitySentimentResponse} AnalyzeEntitySentimentResponse
                         */
                        AnalyzeEntitySentimentResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.AnalyzeEntitySentimentResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1.AnalyzeEntitySentimentResponse();
                            if (object.entities) {
                                if (!Array.isArray(object.entities))
                                    throw TypeError(".google.cloud.language.v1.AnalyzeEntitySentimentResponse.entities: array expected");
                                message.entities = [];
                                for (var i = 0; i < object.entities.length; ++i) {
                                    if (typeof object.entities[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.AnalyzeEntitySentimentResponse.entities: object expected");
                                    message.entities[i] = $root.google.cloud.language.v1.Entity.fromObject(object.entities[i]);
                                }
                            }
                            if (object.language != null)
                                message.language = String(object.language);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeEntitySentimentResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {google.cloud.language.v1.AnalyzeEntitySentimentResponse} message AnalyzeEntitySentimentResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeEntitySentimentResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.entities = [];
                            if (options.defaults)
                                object.language = "";
                            if (message.entities && message.entities.length) {
                                object.entities = [];
                                for (var j = 0; j < message.entities.length; ++j)
                                    object.entities[j] = $root.google.cloud.language.v1.Entity.toObject(message.entities[j], options);
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeEntitySentimentResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeEntitySentimentResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeEntitySentimentResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeEntitySentimentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.AnalyzeEntitySentimentResponse";
                        };
    
                        return AnalyzeEntitySentimentResponse;
                    })();
    
                    v1.AnalyzeEntitiesRequest = (function() {
    
                        /**
                         * Properties of an AnalyzeEntitiesRequest.
                         * @memberof google.cloud.language.v1
                         * @interface IAnalyzeEntitiesRequest
                         * @property {google.cloud.language.v1.IDocument|null} [document] AnalyzeEntitiesRequest document
                         * @property {google.cloud.language.v1.EncodingType|null} [encodingType] AnalyzeEntitiesRequest encodingType
                         */
    
                        /**
                         * Constructs a new AnalyzeEntitiesRequest.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an AnalyzeEntitiesRequest.
                         * @implements IAnalyzeEntitiesRequest
                         * @constructor
                         * @param {google.cloud.language.v1.IAnalyzeEntitiesRequest=} [properties] Properties to set
                         */
                        function AnalyzeEntitiesRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeEntitiesRequest document.
                         * @member {google.cloud.language.v1.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @instance
                         */
                        AnalyzeEntitiesRequest.prototype.document = null;
    
                        /**
                         * AnalyzeEntitiesRequest encodingType.
                         * @member {google.cloud.language.v1.EncodingType} encodingType
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @instance
                         */
                        AnalyzeEntitiesRequest.prototype.encodingType = 0;
    
                        /**
                         * Creates a new AnalyzeEntitiesRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitiesRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.AnalyzeEntitiesRequest} AnalyzeEntitiesRequest instance
                         */
                        AnalyzeEntitiesRequest.create = function create(properties) {
                            return new AnalyzeEntitiesRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitiesRequest message. Does not implicitly {@link google.cloud.language.v1.AnalyzeEntitiesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitiesRequest} message AnalyzeEntitiesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitiesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.encodingType != null && Object.hasOwnProperty.call(message, "encodingType"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitiesRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnalyzeEntitiesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitiesRequest} message AnalyzeEntitiesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitiesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeEntitiesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.AnalyzeEntitiesRequest} AnalyzeEntitiesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitiesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnalyzeEntitiesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.encodingType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeEntitiesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.AnalyzeEntitiesRequest} AnalyzeEntitiesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitiesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeEntitiesRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeEntitiesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                switch (message.encodingType) {
                                default:
                                    return "encodingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeEntitiesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.AnalyzeEntitiesRequest} AnalyzeEntitiesRequest
                         */
                        AnalyzeEntitiesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.AnalyzeEntitiesRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1.AnalyzeEntitiesRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1.AnalyzeEntitiesRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1.Document.fromObject(object.document);
                            }
                            switch (object.encodingType) {
                            default:
                                if (typeof object.encodingType === "number") {
                                    message.encodingType = object.encodingType;
                                    break;
                                }
                                break;
                            case "NONE":
                            case 0:
                                message.encodingType = 0;
                                break;
                            case "UTF8":
                            case 1:
                                message.encodingType = 1;
                                break;
                            case "UTF16":
                            case 2:
                                message.encodingType = 2;
                                break;
                            case "UTF32":
                            case 3:
                                message.encodingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeEntitiesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @static
                         * @param {google.cloud.language.v1.AnalyzeEntitiesRequest} message AnalyzeEntitiesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeEntitiesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.encodingType = options.enums === String ? "NONE" : 0;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1.Document.toObject(message.document, options);
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                object.encodingType = options.enums === String ? $root.google.cloud.language.v1.EncodingType[message.encodingType] === undefined ? message.encodingType : $root.google.cloud.language.v1.EncodingType[message.encodingType] : message.encodingType;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeEntitiesRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeEntitiesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeEntitiesRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeEntitiesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.AnalyzeEntitiesRequest";
                        };
    
                        return AnalyzeEntitiesRequest;
                    })();
    
                    v1.AnalyzeEntitiesResponse = (function() {
    
                        /**
                         * Properties of an AnalyzeEntitiesResponse.
                         * @memberof google.cloud.language.v1
                         * @interface IAnalyzeEntitiesResponse
                         * @property {Array.<google.cloud.language.v1.IEntity>|null} [entities] AnalyzeEntitiesResponse entities
                         * @property {string|null} [language] AnalyzeEntitiesResponse language
                         */
    
                        /**
                         * Constructs a new AnalyzeEntitiesResponse.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an AnalyzeEntitiesResponse.
                         * @implements IAnalyzeEntitiesResponse
                         * @constructor
                         * @param {google.cloud.language.v1.IAnalyzeEntitiesResponse=} [properties] Properties to set
                         */
                        function AnalyzeEntitiesResponse(properties) {
                            this.entities = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeEntitiesResponse entities.
                         * @member {Array.<google.cloud.language.v1.IEntity>} entities
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @instance
                         */
                        AnalyzeEntitiesResponse.prototype.entities = $util.emptyArray;
    
                        /**
                         * AnalyzeEntitiesResponse language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @instance
                         */
                        AnalyzeEntitiesResponse.prototype.language = "";
    
                        /**
                         * Creates a new AnalyzeEntitiesResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitiesResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.AnalyzeEntitiesResponse} AnalyzeEntitiesResponse instance
                         */
                        AnalyzeEntitiesResponse.create = function create(properties) {
                            return new AnalyzeEntitiesResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitiesResponse message. Does not implicitly {@link google.cloud.language.v1.AnalyzeEntitiesResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitiesResponse} message AnalyzeEntitiesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitiesResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entities != null && message.entities.length)
                                for (var i = 0; i < message.entities.length; ++i)
                                    $root.google.cloud.language.v1.Entity.encode(message.entities[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitiesResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnalyzeEntitiesResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeEntitiesResponse} message AnalyzeEntitiesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitiesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeEntitiesResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.AnalyzeEntitiesResponse} AnalyzeEntitiesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitiesResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnalyzeEntitiesResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.entities && message.entities.length))
                                            message.entities = [];
                                        message.entities.push($root.google.cloud.language.v1.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.language = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeEntitiesResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.AnalyzeEntitiesResponse} AnalyzeEntitiesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitiesResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeEntitiesResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeEntitiesResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entities != null && message.hasOwnProperty("entities")) {
                                if (!Array.isArray(message.entities))
                                    return "entities: array expected";
                                for (var i = 0; i < message.entities.length; ++i) {
                                    var error = $root.google.cloud.language.v1.Entity.verify(message.entities[i]);
                                    if (error)
                                        return "entities." + error;
                                }
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeEntitiesResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.AnalyzeEntitiesResponse} AnalyzeEntitiesResponse
                         */
                        AnalyzeEntitiesResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.AnalyzeEntitiesResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1.AnalyzeEntitiesResponse();
                            if (object.entities) {
                                if (!Array.isArray(object.entities))
                                    throw TypeError(".google.cloud.language.v1.AnalyzeEntitiesResponse.entities: array expected");
                                message.entities = [];
                                for (var i = 0; i < object.entities.length; ++i) {
                                    if (typeof object.entities[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.AnalyzeEntitiesResponse.entities: object expected");
                                    message.entities[i] = $root.google.cloud.language.v1.Entity.fromObject(object.entities[i]);
                                }
                            }
                            if (object.language != null)
                                message.language = String(object.language);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeEntitiesResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @static
                         * @param {google.cloud.language.v1.AnalyzeEntitiesResponse} message AnalyzeEntitiesResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeEntitiesResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.entities = [];
                            if (options.defaults)
                                object.language = "";
                            if (message.entities && message.entities.length) {
                                object.entities = [];
                                for (var j = 0; j < message.entities.length; ++j)
                                    object.entities[j] = $root.google.cloud.language.v1.Entity.toObject(message.entities[j], options);
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeEntitiesResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeEntitiesResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeEntitiesResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.AnalyzeEntitiesResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeEntitiesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.AnalyzeEntitiesResponse";
                        };
    
                        return AnalyzeEntitiesResponse;
                    })();
    
                    v1.AnalyzeSyntaxRequest = (function() {
    
                        /**
                         * Properties of an AnalyzeSyntaxRequest.
                         * @memberof google.cloud.language.v1
                         * @interface IAnalyzeSyntaxRequest
                         * @property {google.cloud.language.v1.IDocument|null} [document] AnalyzeSyntaxRequest document
                         * @property {google.cloud.language.v1.EncodingType|null} [encodingType] AnalyzeSyntaxRequest encodingType
                         */
    
                        /**
                         * Constructs a new AnalyzeSyntaxRequest.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an AnalyzeSyntaxRequest.
                         * @implements IAnalyzeSyntaxRequest
                         * @constructor
                         * @param {google.cloud.language.v1.IAnalyzeSyntaxRequest=} [properties] Properties to set
                         */
                        function AnalyzeSyntaxRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeSyntaxRequest document.
                         * @member {google.cloud.language.v1.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @instance
                         */
                        AnalyzeSyntaxRequest.prototype.document = null;
    
                        /**
                         * AnalyzeSyntaxRequest encodingType.
                         * @member {google.cloud.language.v1.EncodingType} encodingType
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @instance
                         */
                        AnalyzeSyntaxRequest.prototype.encodingType = 0;
    
                        /**
                         * Creates a new AnalyzeSyntaxRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSyntaxRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.AnalyzeSyntaxRequest} AnalyzeSyntaxRequest instance
                         */
                        AnalyzeSyntaxRequest.create = function create(properties) {
                            return new AnalyzeSyntaxRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeSyntaxRequest message. Does not implicitly {@link google.cloud.language.v1.AnalyzeSyntaxRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSyntaxRequest} message AnalyzeSyntaxRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSyntaxRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.encodingType != null && Object.hasOwnProperty.call(message, "encodingType"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeSyntaxRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnalyzeSyntaxRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSyntaxRequest} message AnalyzeSyntaxRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSyntaxRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeSyntaxRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.AnalyzeSyntaxRequest} AnalyzeSyntaxRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSyntaxRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnalyzeSyntaxRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.encodingType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeSyntaxRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.AnalyzeSyntaxRequest} AnalyzeSyntaxRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSyntaxRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeSyntaxRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeSyntaxRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                switch (message.encodingType) {
                                default:
                                    return "encodingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeSyntaxRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.AnalyzeSyntaxRequest} AnalyzeSyntaxRequest
                         */
                        AnalyzeSyntaxRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.AnalyzeSyntaxRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1.AnalyzeSyntaxRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1.AnalyzeSyntaxRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1.Document.fromObject(object.document);
                            }
                            switch (object.encodingType) {
                            default:
                                if (typeof object.encodingType === "number") {
                                    message.encodingType = object.encodingType;
                                    break;
                                }
                                break;
                            case "NONE":
                            case 0:
                                message.encodingType = 0;
                                break;
                            case "UTF8":
                            case 1:
                                message.encodingType = 1;
                                break;
                            case "UTF16":
                            case 2:
                                message.encodingType = 2;
                                break;
                            case "UTF32":
                            case 3:
                                message.encodingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeSyntaxRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @static
                         * @param {google.cloud.language.v1.AnalyzeSyntaxRequest} message AnalyzeSyntaxRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeSyntaxRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.encodingType = options.enums === String ? "NONE" : 0;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1.Document.toObject(message.document, options);
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                object.encodingType = options.enums === String ? $root.google.cloud.language.v1.EncodingType[message.encodingType] === undefined ? message.encodingType : $root.google.cloud.language.v1.EncodingType[message.encodingType] : message.encodingType;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeSyntaxRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeSyntaxRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeSyntaxRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeSyntaxRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.AnalyzeSyntaxRequest";
                        };
    
                        return AnalyzeSyntaxRequest;
                    })();
    
                    v1.AnalyzeSyntaxResponse = (function() {
    
                        /**
                         * Properties of an AnalyzeSyntaxResponse.
                         * @memberof google.cloud.language.v1
                         * @interface IAnalyzeSyntaxResponse
                         * @property {Array.<google.cloud.language.v1.ISentence>|null} [sentences] AnalyzeSyntaxResponse sentences
                         * @property {Array.<google.cloud.language.v1.IToken>|null} [tokens] AnalyzeSyntaxResponse tokens
                         * @property {string|null} [language] AnalyzeSyntaxResponse language
                         */
    
                        /**
                         * Constructs a new AnalyzeSyntaxResponse.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an AnalyzeSyntaxResponse.
                         * @implements IAnalyzeSyntaxResponse
                         * @constructor
                         * @param {google.cloud.language.v1.IAnalyzeSyntaxResponse=} [properties] Properties to set
                         */
                        function AnalyzeSyntaxResponse(properties) {
                            this.sentences = [];
                            this.tokens = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeSyntaxResponse sentences.
                         * @member {Array.<google.cloud.language.v1.ISentence>} sentences
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @instance
                         */
                        AnalyzeSyntaxResponse.prototype.sentences = $util.emptyArray;
    
                        /**
                         * AnalyzeSyntaxResponse tokens.
                         * @member {Array.<google.cloud.language.v1.IToken>} tokens
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @instance
                         */
                        AnalyzeSyntaxResponse.prototype.tokens = $util.emptyArray;
    
                        /**
                         * AnalyzeSyntaxResponse language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @instance
                         */
                        AnalyzeSyntaxResponse.prototype.language = "";
    
                        /**
                         * Creates a new AnalyzeSyntaxResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSyntaxResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.AnalyzeSyntaxResponse} AnalyzeSyntaxResponse instance
                         */
                        AnalyzeSyntaxResponse.create = function create(properties) {
                            return new AnalyzeSyntaxResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeSyntaxResponse message. Does not implicitly {@link google.cloud.language.v1.AnalyzeSyntaxResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSyntaxResponse} message AnalyzeSyntaxResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSyntaxResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.sentences != null && message.sentences.length)
                                for (var i = 0; i < message.sentences.length; ++i)
                                    $root.google.cloud.language.v1.Sentence.encode(message.sentences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.tokens != null && message.tokens.length)
                                for (var i = 0; i < message.tokens.length; ++i)
                                    $root.google.cloud.language.v1.Token.encode(message.tokens[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.language);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeSyntaxResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnalyzeSyntaxResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnalyzeSyntaxResponse} message AnalyzeSyntaxResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSyntaxResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeSyntaxResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.AnalyzeSyntaxResponse} AnalyzeSyntaxResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSyntaxResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnalyzeSyntaxResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.sentences && message.sentences.length))
                                            message.sentences = [];
                                        message.sentences.push($root.google.cloud.language.v1.Sentence.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        if (!(message.tokens && message.tokens.length))
                                            message.tokens = [];
                                        message.tokens.push($root.google.cloud.language.v1.Token.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.language = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeSyntaxResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.AnalyzeSyntaxResponse} AnalyzeSyntaxResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSyntaxResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeSyntaxResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeSyntaxResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.sentences != null && message.hasOwnProperty("sentences")) {
                                if (!Array.isArray(message.sentences))
                                    return "sentences: array expected";
                                for (var i = 0; i < message.sentences.length; ++i) {
                                    var error = $root.google.cloud.language.v1.Sentence.verify(message.sentences[i]);
                                    if (error)
                                        return "sentences." + error;
                                }
                            }
                            if (message.tokens != null && message.hasOwnProperty("tokens")) {
                                if (!Array.isArray(message.tokens))
                                    return "tokens: array expected";
                                for (var i = 0; i < message.tokens.length; ++i) {
                                    var error = $root.google.cloud.language.v1.Token.verify(message.tokens[i]);
                                    if (error)
                                        return "tokens." + error;
                                }
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeSyntaxResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.AnalyzeSyntaxResponse} AnalyzeSyntaxResponse
                         */
                        AnalyzeSyntaxResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.AnalyzeSyntaxResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1.AnalyzeSyntaxResponse();
                            if (object.sentences) {
                                if (!Array.isArray(object.sentences))
                                    throw TypeError(".google.cloud.language.v1.AnalyzeSyntaxResponse.sentences: array expected");
                                message.sentences = [];
                                for (var i = 0; i < object.sentences.length; ++i) {
                                    if (typeof object.sentences[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.AnalyzeSyntaxResponse.sentences: object expected");
                                    message.sentences[i] = $root.google.cloud.language.v1.Sentence.fromObject(object.sentences[i]);
                                }
                            }
                            if (object.tokens) {
                                if (!Array.isArray(object.tokens))
                                    throw TypeError(".google.cloud.language.v1.AnalyzeSyntaxResponse.tokens: array expected");
                                message.tokens = [];
                                for (var i = 0; i < object.tokens.length; ++i) {
                                    if (typeof object.tokens[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.AnalyzeSyntaxResponse.tokens: object expected");
                                    message.tokens[i] = $root.google.cloud.language.v1.Token.fromObject(object.tokens[i]);
                                }
                            }
                            if (object.language != null)
                                message.language = String(object.language);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeSyntaxResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @static
                         * @param {google.cloud.language.v1.AnalyzeSyntaxResponse} message AnalyzeSyntaxResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeSyntaxResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.sentences = [];
                                object.tokens = [];
                            }
                            if (options.defaults)
                                object.language = "";
                            if (message.sentences && message.sentences.length) {
                                object.sentences = [];
                                for (var j = 0; j < message.sentences.length; ++j)
                                    object.sentences[j] = $root.google.cloud.language.v1.Sentence.toObject(message.sentences[j], options);
                            }
                            if (message.tokens && message.tokens.length) {
                                object.tokens = [];
                                for (var j = 0; j < message.tokens.length; ++j)
                                    object.tokens[j] = $root.google.cloud.language.v1.Token.toObject(message.tokens[j], options);
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeSyntaxResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeSyntaxResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeSyntaxResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.AnalyzeSyntaxResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeSyntaxResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.AnalyzeSyntaxResponse";
                        };
    
                        return AnalyzeSyntaxResponse;
                    })();
    
                    v1.ClassifyTextRequest = (function() {
    
                        /**
                         * Properties of a ClassifyTextRequest.
                         * @memberof google.cloud.language.v1
                         * @interface IClassifyTextRequest
                         * @property {google.cloud.language.v1.IDocument|null} [document] ClassifyTextRequest document
                         * @property {google.cloud.language.v1.IClassificationModelOptions|null} [classificationModelOptions] ClassifyTextRequest classificationModelOptions
                         */
    
                        /**
                         * Constructs a new ClassifyTextRequest.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a ClassifyTextRequest.
                         * @implements IClassifyTextRequest
                         * @constructor
                         * @param {google.cloud.language.v1.IClassifyTextRequest=} [properties] Properties to set
                         */
                        function ClassifyTextRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClassifyTextRequest document.
                         * @member {google.cloud.language.v1.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @instance
                         */
                        ClassifyTextRequest.prototype.document = null;
    
                        /**
                         * ClassifyTextRequest classificationModelOptions.
                         * @member {google.cloud.language.v1.IClassificationModelOptions|null|undefined} classificationModelOptions
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @instance
                         */
                        ClassifyTextRequest.prototype.classificationModelOptions = null;
    
                        /**
                         * Creates a new ClassifyTextRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @static
                         * @param {google.cloud.language.v1.IClassifyTextRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.ClassifyTextRequest} ClassifyTextRequest instance
                         */
                        ClassifyTextRequest.create = function create(properties) {
                            return new ClassifyTextRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ClassifyTextRequest message. Does not implicitly {@link google.cloud.language.v1.ClassifyTextRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @static
                         * @param {google.cloud.language.v1.IClassifyTextRequest} message ClassifyTextRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassifyTextRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.classificationModelOptions != null && Object.hasOwnProperty.call(message, "classificationModelOptions"))
                                $root.google.cloud.language.v1.ClassificationModelOptions.encode(message.classificationModelOptions, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClassifyTextRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1.ClassifyTextRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @static
                         * @param {google.cloud.language.v1.IClassifyTextRequest} message ClassifyTextRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassifyTextRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClassifyTextRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.ClassifyTextRequest} ClassifyTextRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassifyTextRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.ClassifyTextRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.classificationModelOptions = $root.google.cloud.language.v1.ClassificationModelOptions.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClassifyTextRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.ClassifyTextRequest} ClassifyTextRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassifyTextRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClassifyTextRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClassifyTextRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.classificationModelOptions != null && message.hasOwnProperty("classificationModelOptions")) {
                                var error = $root.google.cloud.language.v1.ClassificationModelOptions.verify(message.classificationModelOptions);
                                if (error)
                                    return "classificationModelOptions." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ClassifyTextRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.ClassifyTextRequest} ClassifyTextRequest
                         */
                        ClassifyTextRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.ClassifyTextRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1.ClassifyTextRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1.ClassifyTextRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1.Document.fromObject(object.document);
                            }
                            if (object.classificationModelOptions != null) {
                                if (typeof object.classificationModelOptions !== "object")
                                    throw TypeError(".google.cloud.language.v1.ClassifyTextRequest.classificationModelOptions: object expected");
                                message.classificationModelOptions = $root.google.cloud.language.v1.ClassificationModelOptions.fromObject(object.classificationModelOptions);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClassifyTextRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @static
                         * @param {google.cloud.language.v1.ClassifyTextRequest} message ClassifyTextRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClassifyTextRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.classificationModelOptions = null;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1.Document.toObject(message.document, options);
                            if (message.classificationModelOptions != null && message.hasOwnProperty("classificationModelOptions"))
                                object.classificationModelOptions = $root.google.cloud.language.v1.ClassificationModelOptions.toObject(message.classificationModelOptions, options);
                            return object;
                        };
    
                        /**
                         * Converts this ClassifyTextRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClassifyTextRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ClassifyTextRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.ClassifyTextRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ClassifyTextRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.ClassifyTextRequest";
                        };
    
                        return ClassifyTextRequest;
                    })();
    
                    v1.ClassifyTextResponse = (function() {
    
                        /**
                         * Properties of a ClassifyTextResponse.
                         * @memberof google.cloud.language.v1
                         * @interface IClassifyTextResponse
                         * @property {Array.<google.cloud.language.v1.IClassificationCategory>|null} [categories] ClassifyTextResponse categories
                         */
    
                        /**
                         * Constructs a new ClassifyTextResponse.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents a ClassifyTextResponse.
                         * @implements IClassifyTextResponse
                         * @constructor
                         * @param {google.cloud.language.v1.IClassifyTextResponse=} [properties] Properties to set
                         */
                        function ClassifyTextResponse(properties) {
                            this.categories = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClassifyTextResponse categories.
                         * @member {Array.<google.cloud.language.v1.IClassificationCategory>} categories
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @instance
                         */
                        ClassifyTextResponse.prototype.categories = $util.emptyArray;
    
                        /**
                         * Creates a new ClassifyTextResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @static
                         * @param {google.cloud.language.v1.IClassifyTextResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.ClassifyTextResponse} ClassifyTextResponse instance
                         */
                        ClassifyTextResponse.create = function create(properties) {
                            return new ClassifyTextResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ClassifyTextResponse message. Does not implicitly {@link google.cloud.language.v1.ClassifyTextResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @static
                         * @param {google.cloud.language.v1.IClassifyTextResponse} message ClassifyTextResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassifyTextResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.categories != null && message.categories.length)
                                for (var i = 0; i < message.categories.length; ++i)
                                    $root.google.cloud.language.v1.ClassificationCategory.encode(message.categories[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClassifyTextResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1.ClassifyTextResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @static
                         * @param {google.cloud.language.v1.IClassifyTextResponse} message ClassifyTextResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassifyTextResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClassifyTextResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.ClassifyTextResponse} ClassifyTextResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassifyTextResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.ClassifyTextResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.categories && message.categories.length))
                                            message.categories = [];
                                        message.categories.push($root.google.cloud.language.v1.ClassificationCategory.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClassifyTextResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.ClassifyTextResponse} ClassifyTextResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassifyTextResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClassifyTextResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClassifyTextResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.categories != null && message.hasOwnProperty("categories")) {
                                if (!Array.isArray(message.categories))
                                    return "categories: array expected";
                                for (var i = 0; i < message.categories.length; ++i) {
                                    var error = $root.google.cloud.language.v1.ClassificationCategory.verify(message.categories[i]);
                                    if (error)
                                        return "categories." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ClassifyTextResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.ClassifyTextResponse} ClassifyTextResponse
                         */
                        ClassifyTextResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.ClassifyTextResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1.ClassifyTextResponse();
                            if (object.categories) {
                                if (!Array.isArray(object.categories))
                                    throw TypeError(".google.cloud.language.v1.ClassifyTextResponse.categories: array expected");
                                message.categories = [];
                                for (var i = 0; i < object.categories.length; ++i) {
                                    if (typeof object.categories[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.ClassifyTextResponse.categories: object expected");
                                    message.categories[i] = $root.google.cloud.language.v1.ClassificationCategory.fromObject(object.categories[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClassifyTextResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @static
                         * @param {google.cloud.language.v1.ClassifyTextResponse} message ClassifyTextResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClassifyTextResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.categories = [];
                            if (message.categories && message.categories.length) {
                                object.categories = [];
                                for (var j = 0; j < message.categories.length; ++j)
                                    object.categories[j] = $root.google.cloud.language.v1.ClassificationCategory.toObject(message.categories[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ClassifyTextResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClassifyTextResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ClassifyTextResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.ClassifyTextResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ClassifyTextResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.ClassifyTextResponse";
                        };
    
                        return ClassifyTextResponse;
                    })();
    
                    v1.AnnotateTextRequest = (function() {
    
                        /**
                         * Properties of an AnnotateTextRequest.
                         * @memberof google.cloud.language.v1
                         * @interface IAnnotateTextRequest
                         * @property {google.cloud.language.v1.IDocument|null} [document] AnnotateTextRequest document
                         * @property {google.cloud.language.v1.AnnotateTextRequest.IFeatures|null} [features] AnnotateTextRequest features
                         * @property {google.cloud.language.v1.EncodingType|null} [encodingType] AnnotateTextRequest encodingType
                         */
    
                        /**
                         * Constructs a new AnnotateTextRequest.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an AnnotateTextRequest.
                         * @implements IAnnotateTextRequest
                         * @constructor
                         * @param {google.cloud.language.v1.IAnnotateTextRequest=} [properties] Properties to set
                         */
                        function AnnotateTextRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateTextRequest document.
                         * @member {google.cloud.language.v1.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @instance
                         */
                        AnnotateTextRequest.prototype.document = null;
    
                        /**
                         * AnnotateTextRequest features.
                         * @member {google.cloud.language.v1.AnnotateTextRequest.IFeatures|null|undefined} features
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @instance
                         */
                        AnnotateTextRequest.prototype.features = null;
    
                        /**
                         * AnnotateTextRequest encodingType.
                         * @member {google.cloud.language.v1.EncodingType} encodingType
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @instance
                         */
                        AnnotateTextRequest.prototype.encodingType = 0;
    
                        /**
                         * Creates a new AnnotateTextRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnnotateTextRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.AnnotateTextRequest} AnnotateTextRequest instance
                         */
                        AnnotateTextRequest.create = function create(properties) {
                            return new AnnotateTextRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateTextRequest message. Does not implicitly {@link google.cloud.language.v1.AnnotateTextRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnnotateTextRequest} message AnnotateTextRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateTextRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                                $root.google.cloud.language.v1.AnnotateTextRequest.Features.encode(message.features, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.encodingType != null && Object.hasOwnProperty.call(message, "encodingType"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.encodingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateTextRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnnotateTextRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @static
                         * @param {google.cloud.language.v1.IAnnotateTextRequest} message AnnotateTextRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateTextRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateTextRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.AnnotateTextRequest} AnnotateTextRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateTextRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnnotateTextRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.features = $root.google.cloud.language.v1.AnnotateTextRequest.Features.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.encodingType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateTextRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.AnnotateTextRequest} AnnotateTextRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateTextRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateTextRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateTextRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.features != null && message.hasOwnProperty("features")) {
                                var error = $root.google.cloud.language.v1.AnnotateTextRequest.Features.verify(message.features);
                                if (error)
                                    return "features." + error;
                            }
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                switch (message.encodingType) {
                                default:
                                    return "encodingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateTextRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.AnnotateTextRequest} AnnotateTextRequest
                         */
                        AnnotateTextRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.AnnotateTextRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1.AnnotateTextRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1.AnnotateTextRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1.Document.fromObject(object.document);
                            }
                            if (object.features != null) {
                                if (typeof object.features !== "object")
                                    throw TypeError(".google.cloud.language.v1.AnnotateTextRequest.features: object expected");
                                message.features = $root.google.cloud.language.v1.AnnotateTextRequest.Features.fromObject(object.features);
                            }
                            switch (object.encodingType) {
                            default:
                                if (typeof object.encodingType === "number") {
                                    message.encodingType = object.encodingType;
                                    break;
                                }
                                break;
                            case "NONE":
                            case 0:
                                message.encodingType = 0;
                                break;
                            case "UTF8":
                            case 1:
                                message.encodingType = 1;
                                break;
                            case "UTF16":
                            case 2:
                                message.encodingType = 2;
                                break;
                            case "UTF32":
                            case 3:
                                message.encodingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateTextRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @static
                         * @param {google.cloud.language.v1.AnnotateTextRequest} message AnnotateTextRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateTextRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.features = null;
                                object.encodingType = options.enums === String ? "NONE" : 0;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1.Document.toObject(message.document, options);
                            if (message.features != null && message.hasOwnProperty("features"))
                                object.features = $root.google.cloud.language.v1.AnnotateTextRequest.Features.toObject(message.features, options);
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                object.encodingType = options.enums === String ? $root.google.cloud.language.v1.EncodingType[message.encodingType] === undefined ? message.encodingType : $root.google.cloud.language.v1.EncodingType[message.encodingType] : message.encodingType;
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateTextRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateTextRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateTextRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.AnnotateTextRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateTextRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.AnnotateTextRequest";
                        };
    
                        AnnotateTextRequest.Features = (function() {
    
                            /**
                             * Properties of a Features.
                             * @memberof google.cloud.language.v1.AnnotateTextRequest
                             * @interface IFeatures
                             * @property {boolean|null} [extractSyntax] Features extractSyntax
                             * @property {boolean|null} [extractEntities] Features extractEntities
                             * @property {boolean|null} [extractDocumentSentiment] Features extractDocumentSentiment
                             * @property {boolean|null} [extractEntitySentiment] Features extractEntitySentiment
                             * @property {boolean|null} [classifyText] Features classifyText
                             * @property {google.cloud.language.v1.IClassificationModelOptions|null} [classificationModelOptions] Features classificationModelOptions
                             */
    
                            /**
                             * Constructs a new Features.
                             * @memberof google.cloud.language.v1.AnnotateTextRequest
                             * @classdesc Represents a Features.
                             * @implements IFeatures
                             * @constructor
                             * @param {google.cloud.language.v1.AnnotateTextRequest.IFeatures=} [properties] Properties to set
                             */
                            function Features(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Features extractSyntax.
                             * @member {boolean} extractSyntax
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.extractSyntax = false;
    
                            /**
                             * Features extractEntities.
                             * @member {boolean} extractEntities
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.extractEntities = false;
    
                            /**
                             * Features extractDocumentSentiment.
                             * @member {boolean} extractDocumentSentiment
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.extractDocumentSentiment = false;
    
                            /**
                             * Features extractEntitySentiment.
                             * @member {boolean} extractEntitySentiment
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.extractEntitySentiment = false;
    
                            /**
                             * Features classifyText.
                             * @member {boolean} classifyText
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.classifyText = false;
    
                            /**
                             * Features classificationModelOptions.
                             * @member {google.cloud.language.v1.IClassificationModelOptions|null|undefined} classificationModelOptions
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.classificationModelOptions = null;
    
                            /**
                             * Creates a new Features instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @static
                             * @param {google.cloud.language.v1.AnnotateTextRequest.IFeatures=} [properties] Properties to set
                             * @returns {google.cloud.language.v1.AnnotateTextRequest.Features} Features instance
                             */
                            Features.create = function create(properties) {
                                return new Features(properties);
                            };
    
                            /**
                             * Encodes the specified Features message. Does not implicitly {@link google.cloud.language.v1.AnnotateTextRequest.Features.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @static
                             * @param {google.cloud.language.v1.AnnotateTextRequest.IFeatures} message Features message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Features.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.extractSyntax != null && Object.hasOwnProperty.call(message, "extractSyntax"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.extractSyntax);
                                if (message.extractEntities != null && Object.hasOwnProperty.call(message, "extractEntities"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.extractEntities);
                                if (message.extractDocumentSentiment != null && Object.hasOwnProperty.call(message, "extractDocumentSentiment"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.extractDocumentSentiment);
                                if (message.extractEntitySentiment != null && Object.hasOwnProperty.call(message, "extractEntitySentiment"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.extractEntitySentiment);
                                if (message.classifyText != null && Object.hasOwnProperty.call(message, "classifyText"))
                                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.classifyText);
                                if (message.classificationModelOptions != null && Object.hasOwnProperty.call(message, "classificationModelOptions"))
                                    $root.google.cloud.language.v1.ClassificationModelOptions.encode(message.classificationModelOptions, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Features message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnnotateTextRequest.Features.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @static
                             * @param {google.cloud.language.v1.AnnotateTextRequest.IFeatures} message Features message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Features.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Features message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.language.v1.AnnotateTextRequest.Features} Features
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Features.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnnotateTextRequest.Features();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.extractSyntax = reader.bool();
                                            break;
                                        }
                                    case 2: {
                                            message.extractEntities = reader.bool();
                                            break;
                                        }
                                    case 3: {
                                            message.extractDocumentSentiment = reader.bool();
                                            break;
                                        }
                                    case 4: {
                                            message.extractEntitySentiment = reader.bool();
                                            break;
                                        }
                                    case 6: {
                                            message.classifyText = reader.bool();
                                            break;
                                        }
                                    case 10: {
                                            message.classificationModelOptions = $root.google.cloud.language.v1.ClassificationModelOptions.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Features message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.language.v1.AnnotateTextRequest.Features} Features
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Features.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Features message.
                             * @function verify
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Features.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.extractSyntax != null && message.hasOwnProperty("extractSyntax"))
                                    if (typeof message.extractSyntax !== "boolean")
                                        return "extractSyntax: boolean expected";
                                if (message.extractEntities != null && message.hasOwnProperty("extractEntities"))
                                    if (typeof message.extractEntities !== "boolean")
                                        return "extractEntities: boolean expected";
                                if (message.extractDocumentSentiment != null && message.hasOwnProperty("extractDocumentSentiment"))
                                    if (typeof message.extractDocumentSentiment !== "boolean")
                                        return "extractDocumentSentiment: boolean expected";
                                if (message.extractEntitySentiment != null && message.hasOwnProperty("extractEntitySentiment"))
                                    if (typeof message.extractEntitySentiment !== "boolean")
                                        return "extractEntitySentiment: boolean expected";
                                if (message.classifyText != null && message.hasOwnProperty("classifyText"))
                                    if (typeof message.classifyText !== "boolean")
                                        return "classifyText: boolean expected";
                                if (message.classificationModelOptions != null && message.hasOwnProperty("classificationModelOptions")) {
                                    var error = $root.google.cloud.language.v1.ClassificationModelOptions.verify(message.classificationModelOptions);
                                    if (error)
                                        return "classificationModelOptions." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Features message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.language.v1.AnnotateTextRequest.Features} Features
                             */
                            Features.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.language.v1.AnnotateTextRequest.Features)
                                    return object;
                                var message = new $root.google.cloud.language.v1.AnnotateTextRequest.Features();
                                if (object.extractSyntax != null)
                                    message.extractSyntax = Boolean(object.extractSyntax);
                                if (object.extractEntities != null)
                                    message.extractEntities = Boolean(object.extractEntities);
                                if (object.extractDocumentSentiment != null)
                                    message.extractDocumentSentiment = Boolean(object.extractDocumentSentiment);
                                if (object.extractEntitySentiment != null)
                                    message.extractEntitySentiment = Boolean(object.extractEntitySentiment);
                                if (object.classifyText != null)
                                    message.classifyText = Boolean(object.classifyText);
                                if (object.classificationModelOptions != null) {
                                    if (typeof object.classificationModelOptions !== "object")
                                        throw TypeError(".google.cloud.language.v1.AnnotateTextRequest.Features.classificationModelOptions: object expected");
                                    message.classificationModelOptions = $root.google.cloud.language.v1.ClassificationModelOptions.fromObject(object.classificationModelOptions);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Features message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @static
                             * @param {google.cloud.language.v1.AnnotateTextRequest.Features} message Features
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Features.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.extractSyntax = false;
                                    object.extractEntities = false;
                                    object.extractDocumentSentiment = false;
                                    object.extractEntitySentiment = false;
                                    object.classifyText = false;
                                    object.classificationModelOptions = null;
                                }
                                if (message.extractSyntax != null && message.hasOwnProperty("extractSyntax"))
                                    object.extractSyntax = message.extractSyntax;
                                if (message.extractEntities != null && message.hasOwnProperty("extractEntities"))
                                    object.extractEntities = message.extractEntities;
                                if (message.extractDocumentSentiment != null && message.hasOwnProperty("extractDocumentSentiment"))
                                    object.extractDocumentSentiment = message.extractDocumentSentiment;
                                if (message.extractEntitySentiment != null && message.hasOwnProperty("extractEntitySentiment"))
                                    object.extractEntitySentiment = message.extractEntitySentiment;
                                if (message.classifyText != null && message.hasOwnProperty("classifyText"))
                                    object.classifyText = message.classifyText;
                                if (message.classificationModelOptions != null && message.hasOwnProperty("classificationModelOptions"))
                                    object.classificationModelOptions = $root.google.cloud.language.v1.ClassificationModelOptions.toObject(message.classificationModelOptions, options);
                                return object;
                            };
    
                            /**
                             * Converts this Features to JSON.
                             * @function toJSON
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Features.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Features
                             * @function getTypeUrl
                             * @memberof google.cloud.language.v1.AnnotateTextRequest.Features
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Features.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.language.v1.AnnotateTextRequest.Features";
                            };
    
                            return Features;
                        })();
    
                        return AnnotateTextRequest;
                    })();
    
                    v1.AnnotateTextResponse = (function() {
    
                        /**
                         * Properties of an AnnotateTextResponse.
                         * @memberof google.cloud.language.v1
                         * @interface IAnnotateTextResponse
                         * @property {Array.<google.cloud.language.v1.ISentence>|null} [sentences] AnnotateTextResponse sentences
                         * @property {Array.<google.cloud.language.v1.IToken>|null} [tokens] AnnotateTextResponse tokens
                         * @property {Array.<google.cloud.language.v1.IEntity>|null} [entities] AnnotateTextResponse entities
                         * @property {google.cloud.language.v1.ISentiment|null} [documentSentiment] AnnotateTextResponse documentSentiment
                         * @property {string|null} [language] AnnotateTextResponse language
                         * @property {Array.<google.cloud.language.v1.IClassificationCategory>|null} [categories] AnnotateTextResponse categories
                         */
    
                        /**
                         * Constructs a new AnnotateTextResponse.
                         * @memberof google.cloud.language.v1
                         * @classdesc Represents an AnnotateTextResponse.
                         * @implements IAnnotateTextResponse
                         * @constructor
                         * @param {google.cloud.language.v1.IAnnotateTextResponse=} [properties] Properties to set
                         */
                        function AnnotateTextResponse(properties) {
                            this.sentences = [];
                            this.tokens = [];
                            this.entities = [];
                            this.categories = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateTextResponse sentences.
                         * @member {Array.<google.cloud.language.v1.ISentence>} sentences
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.sentences = $util.emptyArray;
    
                        /**
                         * AnnotateTextResponse tokens.
                         * @member {Array.<google.cloud.language.v1.IToken>} tokens
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.tokens = $util.emptyArray;
    
                        /**
                         * AnnotateTextResponse entities.
                         * @member {Array.<google.cloud.language.v1.IEntity>} entities
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.entities = $util.emptyArray;
    
                        /**
                         * AnnotateTextResponse documentSentiment.
                         * @member {google.cloud.language.v1.ISentiment|null|undefined} documentSentiment
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.documentSentiment = null;
    
                        /**
                         * AnnotateTextResponse language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.language = "";
    
                        /**
                         * AnnotateTextResponse categories.
                         * @member {Array.<google.cloud.language.v1.IClassificationCategory>} categories
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.categories = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateTextResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnnotateTextResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1.AnnotateTextResponse} AnnotateTextResponse instance
                         */
                        AnnotateTextResponse.create = function create(properties) {
                            return new AnnotateTextResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateTextResponse message. Does not implicitly {@link google.cloud.language.v1.AnnotateTextResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnnotateTextResponse} message AnnotateTextResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateTextResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.sentences != null && message.sentences.length)
                                for (var i = 0; i < message.sentences.length; ++i)
                                    $root.google.cloud.language.v1.Sentence.encode(message.sentences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.tokens != null && message.tokens.length)
                                for (var i = 0; i < message.tokens.length; ++i)
                                    $root.google.cloud.language.v1.Token.encode(message.tokens[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.entities != null && message.entities.length)
                                for (var i = 0; i < message.entities.length; ++i)
                                    $root.google.cloud.language.v1.Entity.encode(message.entities[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.documentSentiment != null && Object.hasOwnProperty.call(message, "documentSentiment"))
                                $root.google.cloud.language.v1.Sentiment.encode(message.documentSentiment, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.language);
                            if (message.categories != null && message.categories.length)
                                for (var i = 0; i < message.categories.length; ++i)
                                    $root.google.cloud.language.v1.ClassificationCategory.encode(message.categories[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateTextResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1.AnnotateTextResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @static
                         * @param {google.cloud.language.v1.IAnnotateTextResponse} message AnnotateTextResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateTextResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateTextResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1.AnnotateTextResponse} AnnotateTextResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateTextResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1.AnnotateTextResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.sentences && message.sentences.length))
                                            message.sentences = [];
                                        message.sentences.push($root.google.cloud.language.v1.Sentence.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        if (!(message.tokens && message.tokens.length))
                                            message.tokens = [];
                                        message.tokens.push($root.google.cloud.language.v1.Token.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.entities && message.entities.length))
                                            message.entities = [];
                                        message.entities.push($root.google.cloud.language.v1.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        message.documentSentiment = $root.google.cloud.language.v1.Sentiment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.language = reader.string();
                                        break;
                                    }
                                case 6: {
                                        if (!(message.categories && message.categories.length))
                                            message.categories = [];
                                        message.categories.push($root.google.cloud.language.v1.ClassificationCategory.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateTextResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1.AnnotateTextResponse} AnnotateTextResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateTextResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateTextResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateTextResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.sentences != null && message.hasOwnProperty("sentences")) {
                                if (!Array.isArray(message.sentences))
                                    return "sentences: array expected";
                                for (var i = 0; i < message.sentences.length; ++i) {
                                    var error = $root.google.cloud.language.v1.Sentence.verify(message.sentences[i]);
                                    if (error)
                                        return "sentences." + error;
                                }
                            }
                            if (message.tokens != null && message.hasOwnProperty("tokens")) {
                                if (!Array.isArray(message.tokens))
                                    return "tokens: array expected";
                                for (var i = 0; i < message.tokens.length; ++i) {
                                    var error = $root.google.cloud.language.v1.Token.verify(message.tokens[i]);
                                    if (error)
                                        return "tokens." + error;
                                }
                            }
                            if (message.entities != null && message.hasOwnProperty("entities")) {
                                if (!Array.isArray(message.entities))
                                    return "entities: array expected";
                                for (var i = 0; i < message.entities.length; ++i) {
                                    var error = $root.google.cloud.language.v1.Entity.verify(message.entities[i]);
                                    if (error)
                                        return "entities." + error;
                                }
                            }
                            if (message.documentSentiment != null && message.hasOwnProperty("documentSentiment")) {
                                var error = $root.google.cloud.language.v1.Sentiment.verify(message.documentSentiment);
                                if (error)
                                    return "documentSentiment." + error;
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            if (message.categories != null && message.hasOwnProperty("categories")) {
                                if (!Array.isArray(message.categories))
                                    return "categories: array expected";
                                for (var i = 0; i < message.categories.length; ++i) {
                                    var error = $root.google.cloud.language.v1.ClassificationCategory.verify(message.categories[i]);
                                    if (error)
                                        return "categories." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateTextResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1.AnnotateTextResponse} AnnotateTextResponse
                         */
                        AnnotateTextResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1.AnnotateTextResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1.AnnotateTextResponse();
                            if (object.sentences) {
                                if (!Array.isArray(object.sentences))
                                    throw TypeError(".google.cloud.language.v1.AnnotateTextResponse.sentences: array expected");
                                message.sentences = [];
                                for (var i = 0; i < object.sentences.length; ++i) {
                                    if (typeof object.sentences[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.AnnotateTextResponse.sentences: object expected");
                                    message.sentences[i] = $root.google.cloud.language.v1.Sentence.fromObject(object.sentences[i]);
                                }
                            }
                            if (object.tokens) {
                                if (!Array.isArray(object.tokens))
                                    throw TypeError(".google.cloud.language.v1.AnnotateTextResponse.tokens: array expected");
                                message.tokens = [];
                                for (var i = 0; i < object.tokens.length; ++i) {
                                    if (typeof object.tokens[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.AnnotateTextResponse.tokens: object expected");
                                    message.tokens[i] = $root.google.cloud.language.v1.Token.fromObject(object.tokens[i]);
                                }
                            }
                            if (object.entities) {
                                if (!Array.isArray(object.entities))
                                    throw TypeError(".google.cloud.language.v1.AnnotateTextResponse.entities: array expected");
                                message.entities = [];
                                for (var i = 0; i < object.entities.length; ++i) {
                                    if (typeof object.entities[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.AnnotateTextResponse.entities: object expected");
                                    message.entities[i] = $root.google.cloud.language.v1.Entity.fromObject(object.entities[i]);
                                }
                            }
                            if (object.documentSentiment != null) {
                                if (typeof object.documentSentiment !== "object")
                                    throw TypeError(".google.cloud.language.v1.AnnotateTextResponse.documentSentiment: object expected");
                                message.documentSentiment = $root.google.cloud.language.v1.Sentiment.fromObject(object.documentSentiment);
                            }
                            if (object.language != null)
                                message.language = String(object.language);
                            if (object.categories) {
                                if (!Array.isArray(object.categories))
                                    throw TypeError(".google.cloud.language.v1.AnnotateTextResponse.categories: array expected");
                                message.categories = [];
                                for (var i = 0; i < object.categories.length; ++i) {
                                    if (typeof object.categories[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1.AnnotateTextResponse.categories: object expected");
                                    message.categories[i] = $root.google.cloud.language.v1.ClassificationCategory.fromObject(object.categories[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateTextResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @static
                         * @param {google.cloud.language.v1.AnnotateTextResponse} message AnnotateTextResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateTextResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.sentences = [];
                                object.tokens = [];
                                object.entities = [];
                                object.categories = [];
                            }
                            if (options.defaults) {
                                object.documentSentiment = null;
                                object.language = "";
                            }
                            if (message.sentences && message.sentences.length) {
                                object.sentences = [];
                                for (var j = 0; j < message.sentences.length; ++j)
                                    object.sentences[j] = $root.google.cloud.language.v1.Sentence.toObject(message.sentences[j], options);
                            }
                            if (message.tokens && message.tokens.length) {
                                object.tokens = [];
                                for (var j = 0; j < message.tokens.length; ++j)
                                    object.tokens[j] = $root.google.cloud.language.v1.Token.toObject(message.tokens[j], options);
                            }
                            if (message.entities && message.entities.length) {
                                object.entities = [];
                                for (var j = 0; j < message.entities.length; ++j)
                                    object.entities[j] = $root.google.cloud.language.v1.Entity.toObject(message.entities[j], options);
                            }
                            if (message.documentSentiment != null && message.hasOwnProperty("documentSentiment"))
                                object.documentSentiment = $root.google.cloud.language.v1.Sentiment.toObject(message.documentSentiment, options);
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            if (message.categories && message.categories.length) {
                                object.categories = [];
                                for (var j = 0; j < message.categories.length; ++j)
                                    object.categories[j] = $root.google.cloud.language.v1.ClassificationCategory.toObject(message.categories[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateTextResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateTextResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateTextResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1.AnnotateTextResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateTextResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1.AnnotateTextResponse";
                        };
    
                        return AnnotateTextResponse;
                    })();
    
                    return v1;
                })();
    
                language.v1beta2 = (function() {
    
                    /**
                     * Namespace v1beta2.
                     * @memberof google.cloud.language
                     * @namespace
                     */
                    var v1beta2 = {};
    
                    v1beta2.LanguageService = (function() {
    
                        /**
                         * Constructs a new LanguageService service.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a LanguageService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function LanguageService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (LanguageService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = LanguageService;
    
                        /**
                         * Creates new LanguageService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {LanguageService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        LanguageService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1beta2.LanguageService|analyzeSentiment}.
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @typedef AnalyzeSentimentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1beta2.AnalyzeSentimentResponse} [response] AnalyzeSentimentResponse
                         */
    
                        /**
                         * Calls AnalyzeSentiment.
                         * @function analyzeSentiment
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IAnalyzeSentimentRequest} request AnalyzeSentimentRequest message or plain object
                         * @param {google.cloud.language.v1beta2.LanguageService.AnalyzeSentimentCallback} callback Node-style callback called with the error, if any, and AnalyzeSentimentResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.analyzeSentiment = function analyzeSentiment(request, callback) {
                            return this.rpcCall(analyzeSentiment, $root.google.cloud.language.v1beta2.AnalyzeSentimentRequest, $root.google.cloud.language.v1beta2.AnalyzeSentimentResponse, request, callback);
                        }, "name", { value: "AnalyzeSentiment" });
    
                        /**
                         * Calls AnalyzeSentiment.
                         * @function analyzeSentiment
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IAnalyzeSentimentRequest} request AnalyzeSentimentRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1beta2.AnalyzeSentimentResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1beta2.LanguageService|analyzeEntities}.
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @typedef AnalyzeEntitiesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1beta2.AnalyzeEntitiesResponse} [response] AnalyzeEntitiesResponse
                         */
    
                        /**
                         * Calls AnalyzeEntities.
                         * @function analyzeEntities
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitiesRequest} request AnalyzeEntitiesRequest message or plain object
                         * @param {google.cloud.language.v1beta2.LanguageService.AnalyzeEntitiesCallback} callback Node-style callback called with the error, if any, and AnalyzeEntitiesResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.analyzeEntities = function analyzeEntities(request, callback) {
                            return this.rpcCall(analyzeEntities, $root.google.cloud.language.v1beta2.AnalyzeEntitiesRequest, $root.google.cloud.language.v1beta2.AnalyzeEntitiesResponse, request, callback);
                        }, "name", { value: "AnalyzeEntities" });
    
                        /**
                         * Calls AnalyzeEntities.
                         * @function analyzeEntities
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitiesRequest} request AnalyzeEntitiesRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1beta2.AnalyzeEntitiesResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1beta2.LanguageService|analyzeEntitySentiment}.
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @typedef AnalyzeEntitySentimentCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse} [response] AnalyzeEntitySentimentResponse
                         */
    
                        /**
                         * Calls AnalyzeEntitySentiment.
                         * @function analyzeEntitySentiment
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitySentimentRequest} request AnalyzeEntitySentimentRequest message or plain object
                         * @param {google.cloud.language.v1beta2.LanguageService.AnalyzeEntitySentimentCallback} callback Node-style callback called with the error, if any, and AnalyzeEntitySentimentResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.analyzeEntitySentiment = function analyzeEntitySentiment(request, callback) {
                            return this.rpcCall(analyzeEntitySentiment, $root.google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest, $root.google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse, request, callback);
                        }, "name", { value: "AnalyzeEntitySentiment" });
    
                        /**
                         * Calls AnalyzeEntitySentiment.
                         * @function analyzeEntitySentiment
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitySentimentRequest} request AnalyzeEntitySentimentRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1beta2.LanguageService|analyzeSyntax}.
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @typedef AnalyzeSyntaxCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1beta2.AnalyzeSyntaxResponse} [response] AnalyzeSyntaxResponse
                         */
    
                        /**
                         * Calls AnalyzeSyntax.
                         * @function analyzeSyntax
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IAnalyzeSyntaxRequest} request AnalyzeSyntaxRequest message or plain object
                         * @param {google.cloud.language.v1beta2.LanguageService.AnalyzeSyntaxCallback} callback Node-style callback called with the error, if any, and AnalyzeSyntaxResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.analyzeSyntax = function analyzeSyntax(request, callback) {
                            return this.rpcCall(analyzeSyntax, $root.google.cloud.language.v1beta2.AnalyzeSyntaxRequest, $root.google.cloud.language.v1beta2.AnalyzeSyntaxResponse, request, callback);
                        }, "name", { value: "AnalyzeSyntax" });
    
                        /**
                         * Calls AnalyzeSyntax.
                         * @function analyzeSyntax
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IAnalyzeSyntaxRequest} request AnalyzeSyntaxRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1beta2.AnalyzeSyntaxResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1beta2.LanguageService|classifyText}.
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @typedef ClassifyTextCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1beta2.ClassifyTextResponse} [response] ClassifyTextResponse
                         */
    
                        /**
                         * Calls ClassifyText.
                         * @function classifyText
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IClassifyTextRequest} request ClassifyTextRequest message or plain object
                         * @param {google.cloud.language.v1beta2.LanguageService.ClassifyTextCallback} callback Node-style callback called with the error, if any, and ClassifyTextResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.classifyText = function classifyText(request, callback) {
                            return this.rpcCall(classifyText, $root.google.cloud.language.v1beta2.ClassifyTextRequest, $root.google.cloud.language.v1beta2.ClassifyTextResponse, request, callback);
                        }, "name", { value: "ClassifyText" });
    
                        /**
                         * Calls ClassifyText.
                         * @function classifyText
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IClassifyTextRequest} request ClassifyTextRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1beta2.ClassifyTextResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.language.v1beta2.LanguageService|annotateText}.
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @typedef AnnotateTextCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.language.v1beta2.AnnotateTextResponse} [response] AnnotateTextResponse
                         */
    
                        /**
                         * Calls AnnotateText.
                         * @function annotateText
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IAnnotateTextRequest} request AnnotateTextRequest message or plain object
                         * @param {google.cloud.language.v1beta2.LanguageService.AnnotateTextCallback} callback Node-style callback called with the error, if any, and AnnotateTextResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(LanguageService.prototype.annotateText = function annotateText(request, callback) {
                            return this.rpcCall(annotateText, $root.google.cloud.language.v1beta2.AnnotateTextRequest, $root.google.cloud.language.v1beta2.AnnotateTextResponse, request, callback);
                        }, "name", { value: "AnnotateText" });
    
                        /**
                         * Calls AnnotateText.
                         * @function annotateText
                         * @memberof google.cloud.language.v1beta2.LanguageService
                         * @instance
                         * @param {google.cloud.language.v1beta2.IAnnotateTextRequest} request AnnotateTextRequest message or plain object
                         * @returns {Promise<google.cloud.language.v1beta2.AnnotateTextResponse>} Promise
                         * @variation 2
                         */
    
                        return LanguageService;
                    })();
    
                    v1beta2.Document = (function() {
    
                        /**
                         * Properties of a Document.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IDocument
                         * @property {google.cloud.language.v1beta2.Document.Type|null} [type] Document type
                         * @property {string|null} [content] Document content
                         * @property {string|null} [gcsContentUri] Document gcsContentUri
                         * @property {string|null} [language] Document language
                         * @property {string|null} [referenceWebUri] Document referenceWebUri
                         * @property {google.cloud.language.v1beta2.Document.BoilerplateHandling|null} [boilerplateHandling] Document boilerplateHandling
                         */
    
                        /**
                         * Constructs a new Document.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a Document.
                         * @implements IDocument
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IDocument=} [properties] Properties to set
                         */
                        function Document(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Document type.
                         * @member {google.cloud.language.v1beta2.Document.Type} type
                         * @memberof google.cloud.language.v1beta2.Document
                         * @instance
                         */
                        Document.prototype.type = 0;
    
                        /**
                         * Document content.
                         * @member {string|null|undefined} content
                         * @memberof google.cloud.language.v1beta2.Document
                         * @instance
                         */
                        Document.prototype.content = null;
    
                        /**
                         * Document gcsContentUri.
                         * @member {string|null|undefined} gcsContentUri
                         * @memberof google.cloud.language.v1beta2.Document
                         * @instance
                         */
                        Document.prototype.gcsContentUri = null;
    
                        /**
                         * Document language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1beta2.Document
                         * @instance
                         */
                        Document.prototype.language = "";
    
                        /**
                         * Document referenceWebUri.
                         * @member {string} referenceWebUri
                         * @memberof google.cloud.language.v1beta2.Document
                         * @instance
                         */
                        Document.prototype.referenceWebUri = "";
    
                        /**
                         * Document boilerplateHandling.
                         * @member {google.cloud.language.v1beta2.Document.BoilerplateHandling} boilerplateHandling
                         * @memberof google.cloud.language.v1beta2.Document
                         * @instance
                         */
                        Document.prototype.boilerplateHandling = 0;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Document source.
                         * @member {"content"|"gcsContentUri"|undefined} source
                         * @memberof google.cloud.language.v1beta2.Document
                         * @instance
                         */
                        Object.defineProperty(Document.prototype, "source", {
                            get: $util.oneOfGetter($oneOfFields = ["content", "gcsContentUri"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Document instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.Document
                         * @static
                         * @param {google.cloud.language.v1beta2.IDocument=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.Document} Document instance
                         */
                        Document.create = function create(properties) {
                            return new Document(properties);
                        };
    
                        /**
                         * Encodes the specified Document message. Does not implicitly {@link google.cloud.language.v1beta2.Document.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.Document
                         * @static
                         * @param {google.cloud.language.v1beta2.IDocument} message Document message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Document.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
                            if (message.gcsContentUri != null && Object.hasOwnProperty.call(message, "gcsContentUri"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.gcsContentUri);
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.language);
                            if (message.referenceWebUri != null && Object.hasOwnProperty.call(message, "referenceWebUri"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.referenceWebUri);
                            if (message.boilerplateHandling != null && Object.hasOwnProperty.call(message, "boilerplateHandling"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.boilerplateHandling);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Document message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.Document.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.Document
                         * @static
                         * @param {google.cloud.language.v1beta2.IDocument} message Document message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Document.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Document message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.Document
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.Document} Document
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Document.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.Document();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.content = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.gcsContentUri = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.language = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.referenceWebUri = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.boilerplateHandling = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Document message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.Document
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.Document} Document
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Document.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Document message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.Document
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Document.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.content != null && message.hasOwnProperty("content")) {
                                properties.source = 1;
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            }
                            if (message.gcsContentUri != null && message.hasOwnProperty("gcsContentUri")) {
                                if (properties.source === 1)
                                    return "source: multiple values";
                                properties.source = 1;
                                if (!$util.isString(message.gcsContentUri))
                                    return "gcsContentUri: string expected";
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            if (message.referenceWebUri != null && message.hasOwnProperty("referenceWebUri"))
                                if (!$util.isString(message.referenceWebUri))
                                    return "referenceWebUri: string expected";
                            if (message.boilerplateHandling != null && message.hasOwnProperty("boilerplateHandling"))
                                switch (message.boilerplateHandling) {
                                default:
                                    return "boilerplateHandling: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a Document message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.Document
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.Document} Document
                         */
                        Document.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.Document)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.Document();
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "TYPE_UNSPECIFIED":
                            case 0:
                                message.type = 0;
                                break;
                            case "PLAIN_TEXT":
                            case 1:
                                message.type = 1;
                                break;
                            case "HTML":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.gcsContentUri != null)
                                message.gcsContentUri = String(object.gcsContentUri);
                            if (object.language != null)
                                message.language = String(object.language);
                            if (object.referenceWebUri != null)
                                message.referenceWebUri = String(object.referenceWebUri);
                            switch (object.boilerplateHandling) {
                            default:
                                if (typeof object.boilerplateHandling === "number") {
                                    message.boilerplateHandling = object.boilerplateHandling;
                                    break;
                                }
                                break;
                            case "BOILERPLATE_HANDLING_UNSPECIFIED":
                            case 0:
                                message.boilerplateHandling = 0;
                                break;
                            case "SKIP_BOILERPLATE":
                            case 1:
                                message.boilerplateHandling = 1;
                                break;
                            case "KEEP_BOILERPLATE":
                            case 2:
                                message.boilerplateHandling = 2;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Document message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.Document
                         * @static
                         * @param {google.cloud.language.v1beta2.Document} message Document
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Document.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                                object.language = "";
                                object.referenceWebUri = "";
                                object.boilerplateHandling = options.enums === String ? "BOILERPLATE_HANDLING_UNSPECIFIED" : 0;
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.cloud.language.v1beta2.Document.Type[message.type] === undefined ? message.type : $root.google.cloud.language.v1beta2.Document.Type[message.type] : message.type;
                            if (message.content != null && message.hasOwnProperty("content")) {
                                object.content = message.content;
                                if (options.oneofs)
                                    object.source = "content";
                            }
                            if (message.gcsContentUri != null && message.hasOwnProperty("gcsContentUri")) {
                                object.gcsContentUri = message.gcsContentUri;
                                if (options.oneofs)
                                    object.source = "gcsContentUri";
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            if (message.referenceWebUri != null && message.hasOwnProperty("referenceWebUri"))
                                object.referenceWebUri = message.referenceWebUri;
                            if (message.boilerplateHandling != null && message.hasOwnProperty("boilerplateHandling"))
                                object.boilerplateHandling = options.enums === String ? $root.google.cloud.language.v1beta2.Document.BoilerplateHandling[message.boilerplateHandling] === undefined ? message.boilerplateHandling : $root.google.cloud.language.v1beta2.Document.BoilerplateHandling[message.boilerplateHandling] : message.boilerplateHandling;
                            return object;
                        };
    
                        /**
                         * Converts this Document to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.Document
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Document.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Document
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.Document
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Document.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.Document";
                        };
    
                        /**
                         * Type enum.
                         * @name google.cloud.language.v1beta2.Document.Type
                         * @enum {number}
                         * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                         * @property {number} PLAIN_TEXT=1 PLAIN_TEXT value
                         * @property {number} HTML=2 HTML value
                         */
                        Document.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PLAIN_TEXT"] = 1;
                            values[valuesById[2] = "HTML"] = 2;
                            return values;
                        })();
    
                        /**
                         * BoilerplateHandling enum.
                         * @name google.cloud.language.v1beta2.Document.BoilerplateHandling
                         * @enum {number}
                         * @property {number} BOILERPLATE_HANDLING_UNSPECIFIED=0 BOILERPLATE_HANDLING_UNSPECIFIED value
                         * @property {number} SKIP_BOILERPLATE=1 SKIP_BOILERPLATE value
                         * @property {number} KEEP_BOILERPLATE=2 KEEP_BOILERPLATE value
                         */
                        Document.BoilerplateHandling = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "BOILERPLATE_HANDLING_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "SKIP_BOILERPLATE"] = 1;
                            values[valuesById[2] = "KEEP_BOILERPLATE"] = 2;
                            return values;
                        })();
    
                        return Document;
                    })();
    
                    v1beta2.Sentence = (function() {
    
                        /**
                         * Properties of a Sentence.
                         * @memberof google.cloud.language.v1beta2
                         * @interface ISentence
                         * @property {google.cloud.language.v1beta2.ITextSpan|null} [text] Sentence text
                         * @property {google.cloud.language.v1beta2.ISentiment|null} [sentiment] Sentence sentiment
                         */
    
                        /**
                         * Constructs a new Sentence.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a Sentence.
                         * @implements ISentence
                         * @constructor
                         * @param {google.cloud.language.v1beta2.ISentence=} [properties] Properties to set
                         */
                        function Sentence(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Sentence text.
                         * @member {google.cloud.language.v1beta2.ITextSpan|null|undefined} text
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @instance
                         */
                        Sentence.prototype.text = null;
    
                        /**
                         * Sentence sentiment.
                         * @member {google.cloud.language.v1beta2.ISentiment|null|undefined} sentiment
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @instance
                         */
                        Sentence.prototype.sentiment = null;
    
                        /**
                         * Creates a new Sentence instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @static
                         * @param {google.cloud.language.v1beta2.ISentence=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.Sentence} Sentence instance
                         */
                        Sentence.create = function create(properties) {
                            return new Sentence(properties);
                        };
    
                        /**
                         * Encodes the specified Sentence message. Does not implicitly {@link google.cloud.language.v1beta2.Sentence.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @static
                         * @param {google.cloud.language.v1beta2.ISentence} message Sentence message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Sentence.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                $root.google.cloud.language.v1beta2.TextSpan.encode(message.text, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.sentiment != null && Object.hasOwnProperty.call(message, "sentiment"))
                                $root.google.cloud.language.v1beta2.Sentiment.encode(message.sentiment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Sentence message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.Sentence.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @static
                         * @param {google.cloud.language.v1beta2.ISentence} message Sentence message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Sentence.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Sentence message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.Sentence} Sentence
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Sentence.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.Sentence();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = $root.google.cloud.language.v1beta2.TextSpan.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.sentiment = $root.google.cloud.language.v1beta2.Sentiment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Sentence message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.Sentence} Sentence
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Sentence.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Sentence message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Sentence.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text")) {
                                var error = $root.google.cloud.language.v1beta2.TextSpan.verify(message.text);
                                if (error)
                                    return "text." + error;
                            }
                            if (message.sentiment != null && message.hasOwnProperty("sentiment")) {
                                var error = $root.google.cloud.language.v1beta2.Sentiment.verify(message.sentiment);
                                if (error)
                                    return "sentiment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Sentence message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.Sentence} Sentence
                         */
                        Sentence.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.Sentence)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.Sentence();
                            if (object.text != null) {
                                if (typeof object.text !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.Sentence.text: object expected");
                                message.text = $root.google.cloud.language.v1beta2.TextSpan.fromObject(object.text);
                            }
                            if (object.sentiment != null) {
                                if (typeof object.sentiment !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.Sentence.sentiment: object expected");
                                message.sentiment = $root.google.cloud.language.v1beta2.Sentiment.fromObject(object.sentiment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Sentence message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @static
                         * @param {google.cloud.language.v1beta2.Sentence} message Sentence
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Sentence.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.text = null;
                                object.sentiment = null;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = $root.google.cloud.language.v1beta2.TextSpan.toObject(message.text, options);
                            if (message.sentiment != null && message.hasOwnProperty("sentiment"))
                                object.sentiment = $root.google.cloud.language.v1beta2.Sentiment.toObject(message.sentiment, options);
                            return object;
                        };
    
                        /**
                         * Converts this Sentence to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Sentence.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Sentence
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.Sentence
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Sentence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.Sentence";
                        };
    
                        return Sentence;
                    })();
    
                    /**
                     * EncodingType enum.
                     * @name google.cloud.language.v1beta2.EncodingType
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} UTF8=1 UTF8 value
                     * @property {number} UTF16=2 UTF16 value
                     * @property {number} UTF32=3 UTF32 value
                     */
                    v1beta2.EncodingType = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "UTF8"] = 1;
                        values[valuesById[2] = "UTF16"] = 2;
                        values[valuesById[3] = "UTF32"] = 3;
                        return values;
                    })();
    
                    v1beta2.Entity = (function() {
    
                        /**
                         * Properties of an Entity.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IEntity
                         * @property {string|null} [name] Entity name
                         * @property {google.cloud.language.v1beta2.Entity.Type|null} [type] Entity type
                         * @property {Object.<string,string>|null} [metadata] Entity metadata
                         * @property {number|null} [salience] Entity salience
                         * @property {Array.<google.cloud.language.v1beta2.IEntityMention>|null} [mentions] Entity mentions
                         * @property {google.cloud.language.v1beta2.ISentiment|null} [sentiment] Entity sentiment
                         */
    
                        /**
                         * Constructs a new Entity.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an Entity.
                         * @implements IEntity
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IEntity=} [properties] Properties to set
                         */
                        function Entity(properties) {
                            this.metadata = {};
                            this.mentions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Entity name.
                         * @member {string} name
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @instance
                         */
                        Entity.prototype.name = "";
    
                        /**
                         * Entity type.
                         * @member {google.cloud.language.v1beta2.Entity.Type} type
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @instance
                         */
                        Entity.prototype.type = 0;
    
                        /**
                         * Entity metadata.
                         * @member {Object.<string,string>} metadata
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @instance
                         */
                        Entity.prototype.metadata = $util.emptyObject;
    
                        /**
                         * Entity salience.
                         * @member {number} salience
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @instance
                         */
                        Entity.prototype.salience = 0;
    
                        /**
                         * Entity mentions.
                         * @member {Array.<google.cloud.language.v1beta2.IEntityMention>} mentions
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @instance
                         */
                        Entity.prototype.mentions = $util.emptyArray;
    
                        /**
                         * Entity sentiment.
                         * @member {google.cloud.language.v1beta2.ISentiment|null|undefined} sentiment
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @instance
                         */
                        Entity.prototype.sentiment = null;
    
                        /**
                         * Creates a new Entity instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @static
                         * @param {google.cloud.language.v1beta2.IEntity=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.Entity} Entity instance
                         */
                        Entity.create = function create(properties) {
                            return new Entity(properties);
                        };
    
                        /**
                         * Encodes the specified Entity message. Does not implicitly {@link google.cloud.language.v1beta2.Entity.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @static
                         * @param {google.cloud.language.v1beta2.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                            if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                for (var keys = Object.keys(message.metadata), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.metadata[keys[i]]).ldelim();
                            if (message.salience != null && Object.hasOwnProperty.call(message, "salience"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.salience);
                            if (message.mentions != null && message.mentions.length)
                                for (var i = 0; i < message.mentions.length; ++i)
                                    $root.google.cloud.language.v1beta2.EntityMention.encode(message.mentions[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.sentiment != null && Object.hasOwnProperty.call(message, "sentiment"))
                                $root.google.cloud.language.v1beta2.Sentiment.encode(message.sentiment, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Entity message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.Entity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @static
                         * @param {google.cloud.language.v1beta2.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.Entity(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        if (message.metadata === $util.emptyObject)
                                            message.metadata = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.metadata[key] = value;
                                        break;
                                    }
                                case 4: {
                                        message.salience = reader.float();
                                        break;
                                    }
                                case 5: {
                                        if (!(message.mentions && message.mentions.length))
                                            message.mentions = [];
                                        message.mentions.push($root.google.cloud.language.v1beta2.EntityMention.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        message.sentiment = $root.google.cloud.language.v1beta2.Sentiment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Entity message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Entity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                    break;
                                }
                            if (message.metadata != null && message.hasOwnProperty("metadata")) {
                                if (!$util.isObject(message.metadata))
                                    return "metadata: object expected";
                                var key = Object.keys(message.metadata);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.metadata[key[i]]))
                                        return "metadata: string{k:string} expected";
                            }
                            if (message.salience != null && message.hasOwnProperty("salience"))
                                if (typeof message.salience !== "number")
                                    return "salience: number expected";
                            if (message.mentions != null && message.hasOwnProperty("mentions")) {
                                if (!Array.isArray(message.mentions))
                                    return "mentions: array expected";
                                for (var i = 0; i < message.mentions.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.EntityMention.verify(message.mentions[i]);
                                    if (error)
                                        return "mentions." + error;
                                }
                            }
                            if (message.sentiment != null && message.hasOwnProperty("sentiment")) {
                                var error = $root.google.cloud.language.v1beta2.Sentiment.verify(message.sentiment);
                                if (error)
                                    return "sentiment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Entity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.Entity} Entity
                         */
                        Entity.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.Entity)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.Entity();
                            if (object.name != null)
                                message.name = String(object.name);
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "UNKNOWN":
                            case 0:
                                message.type = 0;
                                break;
                            case "PERSON":
                            case 1:
                                message.type = 1;
                                break;
                            case "LOCATION":
                            case 2:
                                message.type = 2;
                                break;
                            case "ORGANIZATION":
                            case 3:
                                message.type = 3;
                                break;
                            case "EVENT":
                            case 4:
                                message.type = 4;
                                break;
                            case "WORK_OF_ART":
                            case 5:
                                message.type = 5;
                                break;
                            case "CONSUMER_GOOD":
                            case 6:
                                message.type = 6;
                                break;
                            case "OTHER":
                            case 7:
                                message.type = 7;
                                break;
                            case "PHONE_NUMBER":
                            case 9:
                                message.type = 9;
                                break;
                            case "ADDRESS":
                            case 10:
                                message.type = 10;
                                break;
                            case "DATE":
                            case 11:
                                message.type = 11;
                                break;
                            case "NUMBER":
                            case 12:
                                message.type = 12;
                                break;
                            case "PRICE":
                            case 13:
                                message.type = 13;
                                break;
                            }
                            if (object.metadata) {
                                if (typeof object.metadata !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.Entity.metadata: object expected");
                                message.metadata = {};
                                for (var keys = Object.keys(object.metadata), i = 0; i < keys.length; ++i)
                                    message.metadata[keys[i]] = String(object.metadata[keys[i]]);
                            }
                            if (object.salience != null)
                                message.salience = Number(object.salience);
                            if (object.mentions) {
                                if (!Array.isArray(object.mentions))
                                    throw TypeError(".google.cloud.language.v1beta2.Entity.mentions: array expected");
                                message.mentions = [];
                                for (var i = 0; i < object.mentions.length; ++i) {
                                    if (typeof object.mentions[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.Entity.mentions: object expected");
                                    message.mentions[i] = $root.google.cloud.language.v1beta2.EntityMention.fromObject(object.mentions[i]);
                                }
                            }
                            if (object.sentiment != null) {
                                if (typeof object.sentiment !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.Entity.sentiment: object expected");
                                message.sentiment = $root.google.cloud.language.v1beta2.Sentiment.fromObject(object.sentiment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Entity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @static
                         * @param {google.cloud.language.v1beta2.Entity} message Entity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Entity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.mentions = [];
                            if (options.objects || options.defaults)
                                object.metadata = {};
                            if (options.defaults) {
                                object.name = "";
                                object.type = options.enums === String ? "UNKNOWN" : 0;
                                object.salience = 0;
                                object.sentiment = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.cloud.language.v1beta2.Entity.Type[message.type] === undefined ? message.type : $root.google.cloud.language.v1beta2.Entity.Type[message.type] : message.type;
                            var keys2;
                            if (message.metadata && (keys2 = Object.keys(message.metadata)).length) {
                                object.metadata = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.metadata[keys2[j]] = message.metadata[keys2[j]];
                            }
                            if (message.salience != null && message.hasOwnProperty("salience"))
                                object.salience = options.json && !isFinite(message.salience) ? String(message.salience) : message.salience;
                            if (message.mentions && message.mentions.length) {
                                object.mentions = [];
                                for (var j = 0; j < message.mentions.length; ++j)
                                    object.mentions[j] = $root.google.cloud.language.v1beta2.EntityMention.toObject(message.mentions[j], options);
                            }
                            if (message.sentiment != null && message.hasOwnProperty("sentiment"))
                                object.sentiment = $root.google.cloud.language.v1beta2.Sentiment.toObject(message.sentiment, options);
                            return object;
                        };
    
                        /**
                         * Converts this Entity to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Entity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Entity
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.Entity
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.Entity";
                        };
    
                        /**
                         * Type enum.
                         * @name google.cloud.language.v1beta2.Entity.Type
                         * @enum {number}
                         * @property {number} UNKNOWN=0 UNKNOWN value
                         * @property {number} PERSON=1 PERSON value
                         * @property {number} LOCATION=2 LOCATION value
                         * @property {number} ORGANIZATION=3 ORGANIZATION value
                         * @property {number} EVENT=4 EVENT value
                         * @property {number} WORK_OF_ART=5 WORK_OF_ART value
                         * @property {number} CONSUMER_GOOD=6 CONSUMER_GOOD value
                         * @property {number} OTHER=7 OTHER value
                         * @property {number} PHONE_NUMBER=9 PHONE_NUMBER value
                         * @property {number} ADDRESS=10 ADDRESS value
                         * @property {number} DATE=11 DATE value
                         * @property {number} NUMBER=12 NUMBER value
                         * @property {number} PRICE=13 PRICE value
                         */
                        Entity.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "UNKNOWN"] = 0;
                            values[valuesById[1] = "PERSON"] = 1;
                            values[valuesById[2] = "LOCATION"] = 2;
                            values[valuesById[3] = "ORGANIZATION"] = 3;
                            values[valuesById[4] = "EVENT"] = 4;
                            values[valuesById[5] = "WORK_OF_ART"] = 5;
                            values[valuesById[6] = "CONSUMER_GOOD"] = 6;
                            values[valuesById[7] = "OTHER"] = 7;
                            values[valuesById[9] = "PHONE_NUMBER"] = 9;
                            values[valuesById[10] = "ADDRESS"] = 10;
                            values[valuesById[11] = "DATE"] = 11;
                            values[valuesById[12] = "NUMBER"] = 12;
                            values[valuesById[13] = "PRICE"] = 13;
                            return values;
                        })();
    
                        return Entity;
                    })();
    
                    v1beta2.Token = (function() {
    
                        /**
                         * Properties of a Token.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IToken
                         * @property {google.cloud.language.v1beta2.ITextSpan|null} [text] Token text
                         * @property {google.cloud.language.v1beta2.IPartOfSpeech|null} [partOfSpeech] Token partOfSpeech
                         * @property {google.cloud.language.v1beta2.IDependencyEdge|null} [dependencyEdge] Token dependencyEdge
                         * @property {string|null} [lemma] Token lemma
                         */
    
                        /**
                         * Constructs a new Token.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a Token.
                         * @implements IToken
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IToken=} [properties] Properties to set
                         */
                        function Token(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Token text.
                         * @member {google.cloud.language.v1beta2.ITextSpan|null|undefined} text
                         * @memberof google.cloud.language.v1beta2.Token
                         * @instance
                         */
                        Token.prototype.text = null;
    
                        /**
                         * Token partOfSpeech.
                         * @member {google.cloud.language.v1beta2.IPartOfSpeech|null|undefined} partOfSpeech
                         * @memberof google.cloud.language.v1beta2.Token
                         * @instance
                         */
                        Token.prototype.partOfSpeech = null;
    
                        /**
                         * Token dependencyEdge.
                         * @member {google.cloud.language.v1beta2.IDependencyEdge|null|undefined} dependencyEdge
                         * @memberof google.cloud.language.v1beta2.Token
                         * @instance
                         */
                        Token.prototype.dependencyEdge = null;
    
                        /**
                         * Token lemma.
                         * @member {string} lemma
                         * @memberof google.cloud.language.v1beta2.Token
                         * @instance
                         */
                        Token.prototype.lemma = "";
    
                        /**
                         * Creates a new Token instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.Token
                         * @static
                         * @param {google.cloud.language.v1beta2.IToken=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.Token} Token instance
                         */
                        Token.create = function create(properties) {
                            return new Token(properties);
                        };
    
                        /**
                         * Encodes the specified Token message. Does not implicitly {@link google.cloud.language.v1beta2.Token.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.Token
                         * @static
                         * @param {google.cloud.language.v1beta2.IToken} message Token message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Token.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                $root.google.cloud.language.v1beta2.TextSpan.encode(message.text, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.partOfSpeech != null && Object.hasOwnProperty.call(message, "partOfSpeech"))
                                $root.google.cloud.language.v1beta2.PartOfSpeech.encode(message.partOfSpeech, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.dependencyEdge != null && Object.hasOwnProperty.call(message, "dependencyEdge"))
                                $root.google.cloud.language.v1beta2.DependencyEdge.encode(message.dependencyEdge, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.lemma != null && Object.hasOwnProperty.call(message, "lemma"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.lemma);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Token message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.Token.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.Token
                         * @static
                         * @param {google.cloud.language.v1beta2.IToken} message Token message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Token.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Token message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.Token
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.Token} Token
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Token.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.Token();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = $root.google.cloud.language.v1beta2.TextSpan.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.partOfSpeech = $root.google.cloud.language.v1beta2.PartOfSpeech.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.dependencyEdge = $root.google.cloud.language.v1beta2.DependencyEdge.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.lemma = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Token message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.Token
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.Token} Token
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Token.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Token message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.Token
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Token.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text")) {
                                var error = $root.google.cloud.language.v1beta2.TextSpan.verify(message.text);
                                if (error)
                                    return "text." + error;
                            }
                            if (message.partOfSpeech != null && message.hasOwnProperty("partOfSpeech")) {
                                var error = $root.google.cloud.language.v1beta2.PartOfSpeech.verify(message.partOfSpeech);
                                if (error)
                                    return "partOfSpeech." + error;
                            }
                            if (message.dependencyEdge != null && message.hasOwnProperty("dependencyEdge")) {
                                var error = $root.google.cloud.language.v1beta2.DependencyEdge.verify(message.dependencyEdge);
                                if (error)
                                    return "dependencyEdge." + error;
                            }
                            if (message.lemma != null && message.hasOwnProperty("lemma"))
                                if (!$util.isString(message.lemma))
                                    return "lemma: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Token message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.Token
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.Token} Token
                         */
                        Token.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.Token)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.Token();
                            if (object.text != null) {
                                if (typeof object.text !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.Token.text: object expected");
                                message.text = $root.google.cloud.language.v1beta2.TextSpan.fromObject(object.text);
                            }
                            if (object.partOfSpeech != null) {
                                if (typeof object.partOfSpeech !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.Token.partOfSpeech: object expected");
                                message.partOfSpeech = $root.google.cloud.language.v1beta2.PartOfSpeech.fromObject(object.partOfSpeech);
                            }
                            if (object.dependencyEdge != null) {
                                if (typeof object.dependencyEdge !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.Token.dependencyEdge: object expected");
                                message.dependencyEdge = $root.google.cloud.language.v1beta2.DependencyEdge.fromObject(object.dependencyEdge);
                            }
                            if (object.lemma != null)
                                message.lemma = String(object.lemma);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Token message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.Token
                         * @static
                         * @param {google.cloud.language.v1beta2.Token} message Token
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Token.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.text = null;
                                object.partOfSpeech = null;
                                object.dependencyEdge = null;
                                object.lemma = "";
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = $root.google.cloud.language.v1beta2.TextSpan.toObject(message.text, options);
                            if (message.partOfSpeech != null && message.hasOwnProperty("partOfSpeech"))
                                object.partOfSpeech = $root.google.cloud.language.v1beta2.PartOfSpeech.toObject(message.partOfSpeech, options);
                            if (message.dependencyEdge != null && message.hasOwnProperty("dependencyEdge"))
                                object.dependencyEdge = $root.google.cloud.language.v1beta2.DependencyEdge.toObject(message.dependencyEdge, options);
                            if (message.lemma != null && message.hasOwnProperty("lemma"))
                                object.lemma = message.lemma;
                            return object;
                        };
    
                        /**
                         * Converts this Token to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.Token
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Token.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Token
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.Token
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Token.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.Token";
                        };
    
                        return Token;
                    })();
    
                    v1beta2.Sentiment = (function() {
    
                        /**
                         * Properties of a Sentiment.
                         * @memberof google.cloud.language.v1beta2
                         * @interface ISentiment
                         * @property {number|null} [magnitude] Sentiment magnitude
                         * @property {number|null} [score] Sentiment score
                         */
    
                        /**
                         * Constructs a new Sentiment.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a Sentiment.
                         * @implements ISentiment
                         * @constructor
                         * @param {google.cloud.language.v1beta2.ISentiment=} [properties] Properties to set
                         */
                        function Sentiment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Sentiment magnitude.
                         * @member {number} magnitude
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @instance
                         */
                        Sentiment.prototype.magnitude = 0;
    
                        /**
                         * Sentiment score.
                         * @member {number} score
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @instance
                         */
                        Sentiment.prototype.score = 0;
    
                        /**
                         * Creates a new Sentiment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @static
                         * @param {google.cloud.language.v1beta2.ISentiment=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.Sentiment} Sentiment instance
                         */
                        Sentiment.create = function create(properties) {
                            return new Sentiment(properties);
                        };
    
                        /**
                         * Encodes the specified Sentiment message. Does not implicitly {@link google.cloud.language.v1beta2.Sentiment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @static
                         * @param {google.cloud.language.v1beta2.ISentiment} message Sentiment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Sentiment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.magnitude != null && Object.hasOwnProperty.call(message, "magnitude"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.magnitude);
                            if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.score);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Sentiment message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.Sentiment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @static
                         * @param {google.cloud.language.v1beta2.ISentiment} message Sentiment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Sentiment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Sentiment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.Sentiment} Sentiment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Sentiment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.Sentiment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2: {
                                        message.magnitude = reader.float();
                                        break;
                                    }
                                case 3: {
                                        message.score = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Sentiment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.Sentiment} Sentiment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Sentiment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Sentiment message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Sentiment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.magnitude != null && message.hasOwnProperty("magnitude"))
                                if (typeof message.magnitude !== "number")
                                    return "magnitude: number expected";
                            if (message.score != null && message.hasOwnProperty("score"))
                                if (typeof message.score !== "number")
                                    return "score: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a Sentiment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.Sentiment} Sentiment
                         */
                        Sentiment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.Sentiment)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.Sentiment();
                            if (object.magnitude != null)
                                message.magnitude = Number(object.magnitude);
                            if (object.score != null)
                                message.score = Number(object.score);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Sentiment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @static
                         * @param {google.cloud.language.v1beta2.Sentiment} message Sentiment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Sentiment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.magnitude = 0;
                                object.score = 0;
                            }
                            if (message.magnitude != null && message.hasOwnProperty("magnitude"))
                                object.magnitude = options.json && !isFinite(message.magnitude) ? String(message.magnitude) : message.magnitude;
                            if (message.score != null && message.hasOwnProperty("score"))
                                object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;
                            return object;
                        };
    
                        /**
                         * Converts this Sentiment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Sentiment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Sentiment
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.Sentiment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Sentiment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.Sentiment";
                        };
    
                        return Sentiment;
                    })();
    
                    v1beta2.PartOfSpeech = (function() {
    
                        /**
                         * Properties of a PartOfSpeech.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IPartOfSpeech
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Tag|null} [tag] PartOfSpeech tag
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Aspect|null} [aspect] PartOfSpeech aspect
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Case|null} ["case"] PartOfSpeech case
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Form|null} [form] PartOfSpeech form
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Gender|null} [gender] PartOfSpeech gender
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Mood|null} [mood] PartOfSpeech mood
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Number|null} [number] PartOfSpeech number
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Person|null} [person] PartOfSpeech person
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Proper|null} [proper] PartOfSpeech proper
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Reciprocity|null} [reciprocity] PartOfSpeech reciprocity
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Tense|null} [tense] PartOfSpeech tense
                         * @property {google.cloud.language.v1beta2.PartOfSpeech.Voice|null} [voice] PartOfSpeech voice
                         */
    
                        /**
                         * Constructs a new PartOfSpeech.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a PartOfSpeech.
                         * @implements IPartOfSpeech
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IPartOfSpeech=} [properties] Properties to set
                         */
                        function PartOfSpeech(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PartOfSpeech tag.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Tag} tag
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.tag = 0;
    
                        /**
                         * PartOfSpeech aspect.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Aspect} aspect
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.aspect = 0;
    
                        /**
                         * PartOfSpeech case.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Case} case
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype["case"] = 0;
    
                        /**
                         * PartOfSpeech form.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Form} form
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.form = 0;
    
                        /**
                         * PartOfSpeech gender.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Gender} gender
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.gender = 0;
    
                        /**
                         * PartOfSpeech mood.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Mood} mood
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.mood = 0;
    
                        /**
                         * PartOfSpeech number.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Number} number
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.number = 0;
    
                        /**
                         * PartOfSpeech person.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Person} person
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.person = 0;
    
                        /**
                         * PartOfSpeech proper.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Proper} proper
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.proper = 0;
    
                        /**
                         * PartOfSpeech reciprocity.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Reciprocity} reciprocity
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.reciprocity = 0;
    
                        /**
                         * PartOfSpeech tense.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Tense} tense
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.tense = 0;
    
                        /**
                         * PartOfSpeech voice.
                         * @member {google.cloud.language.v1beta2.PartOfSpeech.Voice} voice
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         */
                        PartOfSpeech.prototype.voice = 0;
    
                        /**
                         * Creates a new PartOfSpeech instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @static
                         * @param {google.cloud.language.v1beta2.IPartOfSpeech=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.PartOfSpeech} PartOfSpeech instance
                         */
                        PartOfSpeech.create = function create(properties) {
                            return new PartOfSpeech(properties);
                        };
    
                        /**
                         * Encodes the specified PartOfSpeech message. Does not implicitly {@link google.cloud.language.v1beta2.PartOfSpeech.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @static
                         * @param {google.cloud.language.v1beta2.IPartOfSpeech} message PartOfSpeech message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PartOfSpeech.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tag != null && Object.hasOwnProperty.call(message, "tag"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.tag);
                            if (message.aspect != null && Object.hasOwnProperty.call(message, "aspect"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aspect);
                            if (message["case"] != null && Object.hasOwnProperty.call(message, "case"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message["case"]);
                            if (message.form != null && Object.hasOwnProperty.call(message, "form"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.form);
                            if (message.gender != null && Object.hasOwnProperty.call(message, "gender"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gender);
                            if (message.mood != null && Object.hasOwnProperty.call(message, "mood"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.mood);
                            if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.number);
                            if (message.person != null && Object.hasOwnProperty.call(message, "person"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.person);
                            if (message.proper != null && Object.hasOwnProperty.call(message, "proper"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.proper);
                            if (message.reciprocity != null && Object.hasOwnProperty.call(message, "reciprocity"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.reciprocity);
                            if (message.tense != null && Object.hasOwnProperty.call(message, "tense"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.tense);
                            if (message.voice != null && Object.hasOwnProperty.call(message, "voice"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.voice);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PartOfSpeech message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.PartOfSpeech.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @static
                         * @param {google.cloud.language.v1beta2.IPartOfSpeech} message PartOfSpeech message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PartOfSpeech.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PartOfSpeech message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.PartOfSpeech} PartOfSpeech
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PartOfSpeech.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.PartOfSpeech();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.tag = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.aspect = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message["case"] = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.form = reader.int32();
                                        break;
                                    }
                                case 5: {
                                        message.gender = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.mood = reader.int32();
                                        break;
                                    }
                                case 7: {
                                        message.number = reader.int32();
                                        break;
                                    }
                                case 8: {
                                        message.person = reader.int32();
                                        break;
                                    }
                                case 9: {
                                        message.proper = reader.int32();
                                        break;
                                    }
                                case 10: {
                                        message.reciprocity = reader.int32();
                                        break;
                                    }
                                case 11: {
                                        message.tense = reader.int32();
                                        break;
                                    }
                                case 12: {
                                        message.voice = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PartOfSpeech message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.PartOfSpeech} PartOfSpeech
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PartOfSpeech.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PartOfSpeech message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PartOfSpeech.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                switch (message.tag) {
                                default:
                                    return "tag: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                    break;
                                }
                            if (message.aspect != null && message.hasOwnProperty("aspect"))
                                switch (message.aspect) {
                                default:
                                    return "aspect: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message["case"] != null && message.hasOwnProperty("case"))
                                switch (message["case"]) {
                                default:
                                    return "case: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                    break;
                                }
                            if (message.form != null && message.hasOwnProperty("form"))
                                switch (message.form) {
                                default:
                                    return "form: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                    break;
                                }
                            if (message.gender != null && message.hasOwnProperty("gender"))
                                switch (message.gender) {
                                default:
                                    return "gender: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.mood != null && message.hasOwnProperty("mood"))
                                switch (message.mood) {
                                default:
                                    return "mood: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            if (message.number != null && message.hasOwnProperty("number"))
                                switch (message.number) {
                                default:
                                    return "number: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.person != null && message.hasOwnProperty("person"))
                                switch (message.person) {
                                default:
                                    return "person: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.proper != null && message.hasOwnProperty("proper"))
                                switch (message.proper) {
                                default:
                                    return "proper: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.reciprocity != null && message.hasOwnProperty("reciprocity"))
                                switch (message.reciprocity) {
                                default:
                                    return "reciprocity: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.tense != null && message.hasOwnProperty("tense"))
                                switch (message.tense) {
                                default:
                                    return "tense: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            if (message.voice != null && message.hasOwnProperty("voice"))
                                switch (message.voice) {
                                default:
                                    return "voice: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a PartOfSpeech message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.PartOfSpeech} PartOfSpeech
                         */
                        PartOfSpeech.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.PartOfSpeech)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.PartOfSpeech();
                            switch (object.tag) {
                            default:
                                if (typeof object.tag === "number") {
                                    message.tag = object.tag;
                                    break;
                                }
                                break;
                            case "UNKNOWN":
                            case 0:
                                message.tag = 0;
                                break;
                            case "ADJ":
                            case 1:
                                message.tag = 1;
                                break;
                            case "ADP":
                            case 2:
                                message.tag = 2;
                                break;
                            case "ADV":
                            case 3:
                                message.tag = 3;
                                break;
                            case "CONJ":
                            case 4:
                                message.tag = 4;
                                break;
                            case "DET":
                            case 5:
                                message.tag = 5;
                                break;
                            case "NOUN":
                            case 6:
                                message.tag = 6;
                                break;
                            case "NUM":
                            case 7:
                                message.tag = 7;
                                break;
                            case "PRON":
                            case 8:
                                message.tag = 8;
                                break;
                            case "PRT":
                            case 9:
                                message.tag = 9;
                                break;
                            case "PUNCT":
                            case 10:
                                message.tag = 10;
                                break;
                            case "VERB":
                            case 11:
                                message.tag = 11;
                                break;
                            case "X":
                            case 12:
                                message.tag = 12;
                                break;
                            case "AFFIX":
                            case 13:
                                message.tag = 13;
                                break;
                            }
                            switch (object.aspect) {
                            default:
                                if (typeof object.aspect === "number") {
                                    message.aspect = object.aspect;
                                    break;
                                }
                                break;
                            case "ASPECT_UNKNOWN":
                            case 0:
                                message.aspect = 0;
                                break;
                            case "PERFECTIVE":
                            case 1:
                                message.aspect = 1;
                                break;
                            case "IMPERFECTIVE":
                            case 2:
                                message.aspect = 2;
                                break;
                            case "PROGRESSIVE":
                            case 3:
                                message.aspect = 3;
                                break;
                            }
                            switch (object["case"]) {
                            default:
                                if (typeof object["case"] === "number") {
                                    message["case"] = object["case"];
                                    break;
                                }
                                break;
                            case "CASE_UNKNOWN":
                            case 0:
                                message["case"] = 0;
                                break;
                            case "ACCUSATIVE":
                            case 1:
                                message["case"] = 1;
                                break;
                            case "ADVERBIAL":
                            case 2:
                                message["case"] = 2;
                                break;
                            case "COMPLEMENTIVE":
                            case 3:
                                message["case"] = 3;
                                break;
                            case "DATIVE":
                            case 4:
                                message["case"] = 4;
                                break;
                            case "GENITIVE":
                            case 5:
                                message["case"] = 5;
                                break;
                            case "INSTRUMENTAL":
                            case 6:
                                message["case"] = 6;
                                break;
                            case "LOCATIVE":
                            case 7:
                                message["case"] = 7;
                                break;
                            case "NOMINATIVE":
                            case 8:
                                message["case"] = 8;
                                break;
                            case "OBLIQUE":
                            case 9:
                                message["case"] = 9;
                                break;
                            case "PARTITIVE":
                            case 10:
                                message["case"] = 10;
                                break;
                            case "PREPOSITIONAL":
                            case 11:
                                message["case"] = 11;
                                break;
                            case "REFLEXIVE_CASE":
                            case 12:
                                message["case"] = 12;
                                break;
                            case "RELATIVE_CASE":
                            case 13:
                                message["case"] = 13;
                                break;
                            case "VOCATIVE":
                            case 14:
                                message["case"] = 14;
                                break;
                            }
                            switch (object.form) {
                            default:
                                if (typeof object.form === "number") {
                                    message.form = object.form;
                                    break;
                                }
                                break;
                            case "FORM_UNKNOWN":
                            case 0:
                                message.form = 0;
                                break;
                            case "ADNOMIAL":
                            case 1:
                                message.form = 1;
                                break;
                            case "AUXILIARY":
                            case 2:
                                message.form = 2;
                                break;
                            case "COMPLEMENTIZER":
                            case 3:
                                message.form = 3;
                                break;
                            case "FINAL_ENDING":
                            case 4:
                                message.form = 4;
                                break;
                            case "GERUND":
                            case 5:
                                message.form = 5;
                                break;
                            case "REALIS":
                            case 6:
                                message.form = 6;
                                break;
                            case "IRREALIS":
                            case 7:
                                message.form = 7;
                                break;
                            case "SHORT":
                            case 8:
                                message.form = 8;
                                break;
                            case "LONG":
                            case 9:
                                message.form = 9;
                                break;
                            case "ORDER":
                            case 10:
                                message.form = 10;
                                break;
                            case "SPECIFIC":
                            case 11:
                                message.form = 11;
                                break;
                            }
                            switch (object.gender) {
                            default:
                                if (typeof object.gender === "number") {
                                    message.gender = object.gender;
                                    break;
                                }
                                break;
                            case "GENDER_UNKNOWN":
                            case 0:
                                message.gender = 0;
                                break;
                            case "FEMININE":
                            case 1:
                                message.gender = 1;
                                break;
                            case "MASCULINE":
                            case 2:
                                message.gender = 2;
                                break;
                            case "NEUTER":
                            case 3:
                                message.gender = 3;
                                break;
                            }
                            switch (object.mood) {
                            default:
                                if (typeof object.mood === "number") {
                                    message.mood = object.mood;
                                    break;
                                }
                                break;
                            case "MOOD_UNKNOWN":
                            case 0:
                                message.mood = 0;
                                break;
                            case "CONDITIONAL_MOOD":
                            case 1:
                                message.mood = 1;
                                break;
                            case "IMPERATIVE":
                            case 2:
                                message.mood = 2;
                                break;
                            case "INDICATIVE":
                            case 3:
                                message.mood = 3;
                                break;
                            case "INTERROGATIVE":
                            case 4:
                                message.mood = 4;
                                break;
                            case "JUSSIVE":
                            case 5:
                                message.mood = 5;
                                break;
                            case "SUBJUNCTIVE":
                            case 6:
                                message.mood = 6;
                                break;
                            }
                            switch (object.number) {
                            default:
                                if (typeof object.number === "number") {
                                    message.number = object.number;
                                    break;
                                }
                                break;
                            case "NUMBER_UNKNOWN":
                            case 0:
                                message.number = 0;
                                break;
                            case "SINGULAR":
                            case 1:
                                message.number = 1;
                                break;
                            case "PLURAL":
                            case 2:
                                message.number = 2;
                                break;
                            case "DUAL":
                            case 3:
                                message.number = 3;
                                break;
                            }
                            switch (object.person) {
                            default:
                                if (typeof object.person === "number") {
                                    message.person = object.person;
                                    break;
                                }
                                break;
                            case "PERSON_UNKNOWN":
                            case 0:
                                message.person = 0;
                                break;
                            case "FIRST":
                            case 1:
                                message.person = 1;
                                break;
                            case "SECOND":
                            case 2:
                                message.person = 2;
                                break;
                            case "THIRD":
                            case 3:
                                message.person = 3;
                                break;
                            case "REFLEXIVE_PERSON":
                            case 4:
                                message.person = 4;
                                break;
                            }
                            switch (object.proper) {
                            default:
                                if (typeof object.proper === "number") {
                                    message.proper = object.proper;
                                    break;
                                }
                                break;
                            case "PROPER_UNKNOWN":
                            case 0:
                                message.proper = 0;
                                break;
                            case "PROPER":
                            case 1:
                                message.proper = 1;
                                break;
                            case "NOT_PROPER":
                            case 2:
                                message.proper = 2;
                                break;
                            }
                            switch (object.reciprocity) {
                            default:
                                if (typeof object.reciprocity === "number") {
                                    message.reciprocity = object.reciprocity;
                                    break;
                                }
                                break;
                            case "RECIPROCITY_UNKNOWN":
                            case 0:
                                message.reciprocity = 0;
                                break;
                            case "RECIPROCAL":
                            case 1:
                                message.reciprocity = 1;
                                break;
                            case "NON_RECIPROCAL":
                            case 2:
                                message.reciprocity = 2;
                                break;
                            }
                            switch (object.tense) {
                            default:
                                if (typeof object.tense === "number") {
                                    message.tense = object.tense;
                                    break;
                                }
                                break;
                            case "TENSE_UNKNOWN":
                            case 0:
                                message.tense = 0;
                                break;
                            case "CONDITIONAL_TENSE":
                            case 1:
                                message.tense = 1;
                                break;
                            case "FUTURE":
                            case 2:
                                message.tense = 2;
                                break;
                            case "PAST":
                            case 3:
                                message.tense = 3;
                                break;
                            case "PRESENT":
                            case 4:
                                message.tense = 4;
                                break;
                            case "IMPERFECT":
                            case 5:
                                message.tense = 5;
                                break;
                            case "PLUPERFECT":
                            case 6:
                                message.tense = 6;
                                break;
                            }
                            switch (object.voice) {
                            default:
                                if (typeof object.voice === "number") {
                                    message.voice = object.voice;
                                    break;
                                }
                                break;
                            case "VOICE_UNKNOWN":
                            case 0:
                                message.voice = 0;
                                break;
                            case "ACTIVE":
                            case 1:
                                message.voice = 1;
                                break;
                            case "CAUSATIVE":
                            case 2:
                                message.voice = 2;
                                break;
                            case "PASSIVE":
                            case 3:
                                message.voice = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PartOfSpeech message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @static
                         * @param {google.cloud.language.v1beta2.PartOfSpeech} message PartOfSpeech
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PartOfSpeech.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.tag = options.enums === String ? "UNKNOWN" : 0;
                                object.aspect = options.enums === String ? "ASPECT_UNKNOWN" : 0;
                                object["case"] = options.enums === String ? "CASE_UNKNOWN" : 0;
                                object.form = options.enums === String ? "FORM_UNKNOWN" : 0;
                                object.gender = options.enums === String ? "GENDER_UNKNOWN" : 0;
                                object.mood = options.enums === String ? "MOOD_UNKNOWN" : 0;
                                object.number = options.enums === String ? "NUMBER_UNKNOWN" : 0;
                                object.person = options.enums === String ? "PERSON_UNKNOWN" : 0;
                                object.proper = options.enums === String ? "PROPER_UNKNOWN" : 0;
                                object.reciprocity = options.enums === String ? "RECIPROCITY_UNKNOWN" : 0;
                                object.tense = options.enums === String ? "TENSE_UNKNOWN" : 0;
                                object.voice = options.enums === String ? "VOICE_UNKNOWN" : 0;
                            }
                            if (message.tag != null && message.hasOwnProperty("tag"))
                                object.tag = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Tag[message.tag] === undefined ? message.tag : $root.google.cloud.language.v1beta2.PartOfSpeech.Tag[message.tag] : message.tag;
                            if (message.aspect != null && message.hasOwnProperty("aspect"))
                                object.aspect = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Aspect[message.aspect] === undefined ? message.aspect : $root.google.cloud.language.v1beta2.PartOfSpeech.Aspect[message.aspect] : message.aspect;
                            if (message["case"] != null && message.hasOwnProperty("case"))
                                object["case"] = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Case[message["case"]] === undefined ? message["case"] : $root.google.cloud.language.v1beta2.PartOfSpeech.Case[message["case"]] : message["case"];
                            if (message.form != null && message.hasOwnProperty("form"))
                                object.form = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Form[message.form] === undefined ? message.form : $root.google.cloud.language.v1beta2.PartOfSpeech.Form[message.form] : message.form;
                            if (message.gender != null && message.hasOwnProperty("gender"))
                                object.gender = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Gender[message.gender] === undefined ? message.gender : $root.google.cloud.language.v1beta2.PartOfSpeech.Gender[message.gender] : message.gender;
                            if (message.mood != null && message.hasOwnProperty("mood"))
                                object.mood = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Mood[message.mood] === undefined ? message.mood : $root.google.cloud.language.v1beta2.PartOfSpeech.Mood[message.mood] : message.mood;
                            if (message.number != null && message.hasOwnProperty("number"))
                                object.number = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Number[message.number] === undefined ? message.number : $root.google.cloud.language.v1beta2.PartOfSpeech.Number[message.number] : message.number;
                            if (message.person != null && message.hasOwnProperty("person"))
                                object.person = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Person[message.person] === undefined ? message.person : $root.google.cloud.language.v1beta2.PartOfSpeech.Person[message.person] : message.person;
                            if (message.proper != null && message.hasOwnProperty("proper"))
                                object.proper = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Proper[message.proper] === undefined ? message.proper : $root.google.cloud.language.v1beta2.PartOfSpeech.Proper[message.proper] : message.proper;
                            if (message.reciprocity != null && message.hasOwnProperty("reciprocity"))
                                object.reciprocity = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Reciprocity[message.reciprocity] === undefined ? message.reciprocity : $root.google.cloud.language.v1beta2.PartOfSpeech.Reciprocity[message.reciprocity] : message.reciprocity;
                            if (message.tense != null && message.hasOwnProperty("tense"))
                                object.tense = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Tense[message.tense] === undefined ? message.tense : $root.google.cloud.language.v1beta2.PartOfSpeech.Tense[message.tense] : message.tense;
                            if (message.voice != null && message.hasOwnProperty("voice"))
                                object.voice = options.enums === String ? $root.google.cloud.language.v1beta2.PartOfSpeech.Voice[message.voice] === undefined ? message.voice : $root.google.cloud.language.v1beta2.PartOfSpeech.Voice[message.voice] : message.voice;
                            return object;
                        };
    
                        /**
                         * Converts this PartOfSpeech to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PartOfSpeech.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for PartOfSpeech
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.PartOfSpeech
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PartOfSpeech.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.PartOfSpeech";
                        };
    
                        /**
                         * Tag enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Tag
                         * @enum {number}
                         * @property {number} UNKNOWN=0 UNKNOWN value
                         * @property {number} ADJ=1 ADJ value
                         * @property {number} ADP=2 ADP value
                         * @property {number} ADV=3 ADV value
                         * @property {number} CONJ=4 CONJ value
                         * @property {number} DET=5 DET value
                         * @property {number} NOUN=6 NOUN value
                         * @property {number} NUM=7 NUM value
                         * @property {number} PRON=8 PRON value
                         * @property {number} PRT=9 PRT value
                         * @property {number} PUNCT=10 PUNCT value
                         * @property {number} VERB=11 VERB value
                         * @property {number} X=12 X value
                         * @property {number} AFFIX=13 AFFIX value
                         */
                        PartOfSpeech.Tag = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "UNKNOWN"] = 0;
                            values[valuesById[1] = "ADJ"] = 1;
                            values[valuesById[2] = "ADP"] = 2;
                            values[valuesById[3] = "ADV"] = 3;
                            values[valuesById[4] = "CONJ"] = 4;
                            values[valuesById[5] = "DET"] = 5;
                            values[valuesById[6] = "NOUN"] = 6;
                            values[valuesById[7] = "NUM"] = 7;
                            values[valuesById[8] = "PRON"] = 8;
                            values[valuesById[9] = "PRT"] = 9;
                            values[valuesById[10] = "PUNCT"] = 10;
                            values[valuesById[11] = "VERB"] = 11;
                            values[valuesById[12] = "X"] = 12;
                            values[valuesById[13] = "AFFIX"] = 13;
                            return values;
                        })();
    
                        /**
                         * Aspect enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Aspect
                         * @enum {number}
                         * @property {number} ASPECT_UNKNOWN=0 ASPECT_UNKNOWN value
                         * @property {number} PERFECTIVE=1 PERFECTIVE value
                         * @property {number} IMPERFECTIVE=2 IMPERFECTIVE value
                         * @property {number} PROGRESSIVE=3 PROGRESSIVE value
                         */
                        PartOfSpeech.Aspect = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ASPECT_UNKNOWN"] = 0;
                            values[valuesById[1] = "PERFECTIVE"] = 1;
                            values[valuesById[2] = "IMPERFECTIVE"] = 2;
                            values[valuesById[3] = "PROGRESSIVE"] = 3;
                            return values;
                        })();
    
                        /**
                         * Case enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Case
                         * @enum {number}
                         * @property {number} CASE_UNKNOWN=0 CASE_UNKNOWN value
                         * @property {number} ACCUSATIVE=1 ACCUSATIVE value
                         * @property {number} ADVERBIAL=2 ADVERBIAL value
                         * @property {number} COMPLEMENTIVE=3 COMPLEMENTIVE value
                         * @property {number} DATIVE=4 DATIVE value
                         * @property {number} GENITIVE=5 GENITIVE value
                         * @property {number} INSTRUMENTAL=6 INSTRUMENTAL value
                         * @property {number} LOCATIVE=7 LOCATIVE value
                         * @property {number} NOMINATIVE=8 NOMINATIVE value
                         * @property {number} OBLIQUE=9 OBLIQUE value
                         * @property {number} PARTITIVE=10 PARTITIVE value
                         * @property {number} PREPOSITIONAL=11 PREPOSITIONAL value
                         * @property {number} REFLEXIVE_CASE=12 REFLEXIVE_CASE value
                         * @property {number} RELATIVE_CASE=13 RELATIVE_CASE value
                         * @property {number} VOCATIVE=14 VOCATIVE value
                         */
                        PartOfSpeech.Case = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "CASE_UNKNOWN"] = 0;
                            values[valuesById[1] = "ACCUSATIVE"] = 1;
                            values[valuesById[2] = "ADVERBIAL"] = 2;
                            values[valuesById[3] = "COMPLEMENTIVE"] = 3;
                            values[valuesById[4] = "DATIVE"] = 4;
                            values[valuesById[5] = "GENITIVE"] = 5;
                            values[valuesById[6] = "INSTRUMENTAL"] = 6;
                            values[valuesById[7] = "LOCATIVE"] = 7;
                            values[valuesById[8] = "NOMINATIVE"] = 8;
                            values[valuesById[9] = "OBLIQUE"] = 9;
                            values[valuesById[10] = "PARTITIVE"] = 10;
                            values[valuesById[11] = "PREPOSITIONAL"] = 11;
                            values[valuesById[12] = "REFLEXIVE_CASE"] = 12;
                            values[valuesById[13] = "RELATIVE_CASE"] = 13;
                            values[valuesById[14] = "VOCATIVE"] = 14;
                            return values;
                        })();
    
                        /**
                         * Form enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Form
                         * @enum {number}
                         * @property {number} FORM_UNKNOWN=0 FORM_UNKNOWN value
                         * @property {number} ADNOMIAL=1 ADNOMIAL value
                         * @property {number} AUXILIARY=2 AUXILIARY value
                         * @property {number} COMPLEMENTIZER=3 COMPLEMENTIZER value
                         * @property {number} FINAL_ENDING=4 FINAL_ENDING value
                         * @property {number} GERUND=5 GERUND value
                         * @property {number} REALIS=6 REALIS value
                         * @property {number} IRREALIS=7 IRREALIS value
                         * @property {number} SHORT=8 SHORT value
                         * @property {number} LONG=9 LONG value
                         * @property {number} ORDER=10 ORDER value
                         * @property {number} SPECIFIC=11 SPECIFIC value
                         */
                        PartOfSpeech.Form = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "FORM_UNKNOWN"] = 0;
                            values[valuesById[1] = "ADNOMIAL"] = 1;
                            values[valuesById[2] = "AUXILIARY"] = 2;
                            values[valuesById[3] = "COMPLEMENTIZER"] = 3;
                            values[valuesById[4] = "FINAL_ENDING"] = 4;
                            values[valuesById[5] = "GERUND"] = 5;
                            values[valuesById[6] = "REALIS"] = 6;
                            values[valuesById[7] = "IRREALIS"] = 7;
                            values[valuesById[8] = "SHORT"] = 8;
                            values[valuesById[9] = "LONG"] = 9;
                            values[valuesById[10] = "ORDER"] = 10;
                            values[valuesById[11] = "SPECIFIC"] = 11;
                            return values;
                        })();
    
                        /**
                         * Gender enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Gender
                         * @enum {number}
                         * @property {number} GENDER_UNKNOWN=0 GENDER_UNKNOWN value
                         * @property {number} FEMININE=1 FEMININE value
                         * @property {number} MASCULINE=2 MASCULINE value
                         * @property {number} NEUTER=3 NEUTER value
                         */
                        PartOfSpeech.Gender = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "GENDER_UNKNOWN"] = 0;
                            values[valuesById[1] = "FEMININE"] = 1;
                            values[valuesById[2] = "MASCULINE"] = 2;
                            values[valuesById[3] = "NEUTER"] = 3;
                            return values;
                        })();
    
                        /**
                         * Mood enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Mood
                         * @enum {number}
                         * @property {number} MOOD_UNKNOWN=0 MOOD_UNKNOWN value
                         * @property {number} CONDITIONAL_MOOD=1 CONDITIONAL_MOOD value
                         * @property {number} IMPERATIVE=2 IMPERATIVE value
                         * @property {number} INDICATIVE=3 INDICATIVE value
                         * @property {number} INTERROGATIVE=4 INTERROGATIVE value
                         * @property {number} JUSSIVE=5 JUSSIVE value
                         * @property {number} SUBJUNCTIVE=6 SUBJUNCTIVE value
                         */
                        PartOfSpeech.Mood = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "MOOD_UNKNOWN"] = 0;
                            values[valuesById[1] = "CONDITIONAL_MOOD"] = 1;
                            values[valuesById[2] = "IMPERATIVE"] = 2;
                            values[valuesById[3] = "INDICATIVE"] = 3;
                            values[valuesById[4] = "INTERROGATIVE"] = 4;
                            values[valuesById[5] = "JUSSIVE"] = 5;
                            values[valuesById[6] = "SUBJUNCTIVE"] = 6;
                            return values;
                        })();
    
                        /**
                         * Number enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Number
                         * @enum {number}
                         * @property {number} NUMBER_UNKNOWN=0 NUMBER_UNKNOWN value
                         * @property {number} SINGULAR=1 SINGULAR value
                         * @property {number} PLURAL=2 PLURAL value
                         * @property {number} DUAL=3 DUAL value
                         */
                        PartOfSpeech.Number = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "NUMBER_UNKNOWN"] = 0;
                            values[valuesById[1] = "SINGULAR"] = 1;
                            values[valuesById[2] = "PLURAL"] = 2;
                            values[valuesById[3] = "DUAL"] = 3;
                            return values;
                        })();
    
                        /**
                         * Person enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Person
                         * @enum {number}
                         * @property {number} PERSON_UNKNOWN=0 PERSON_UNKNOWN value
                         * @property {number} FIRST=1 FIRST value
                         * @property {number} SECOND=2 SECOND value
                         * @property {number} THIRD=3 THIRD value
                         * @property {number} REFLEXIVE_PERSON=4 REFLEXIVE_PERSON value
                         */
                        PartOfSpeech.Person = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "PERSON_UNKNOWN"] = 0;
                            values[valuesById[1] = "FIRST"] = 1;
                            values[valuesById[2] = "SECOND"] = 2;
                            values[valuesById[3] = "THIRD"] = 3;
                            values[valuesById[4] = "REFLEXIVE_PERSON"] = 4;
                            return values;
                        })();
    
                        /**
                         * Proper enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Proper
                         * @enum {number}
                         * @property {number} PROPER_UNKNOWN=0 PROPER_UNKNOWN value
                         * @property {number} PROPER=1 PROPER value
                         * @property {number} NOT_PROPER=2 NOT_PROPER value
                         */
                        PartOfSpeech.Proper = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "PROPER_UNKNOWN"] = 0;
                            values[valuesById[1] = "PROPER"] = 1;
                            values[valuesById[2] = "NOT_PROPER"] = 2;
                            return values;
                        })();
    
                        /**
                         * Reciprocity enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Reciprocity
                         * @enum {number}
                         * @property {number} RECIPROCITY_UNKNOWN=0 RECIPROCITY_UNKNOWN value
                         * @property {number} RECIPROCAL=1 RECIPROCAL value
                         * @property {number} NON_RECIPROCAL=2 NON_RECIPROCAL value
                         */
                        PartOfSpeech.Reciprocity = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "RECIPROCITY_UNKNOWN"] = 0;
                            values[valuesById[1] = "RECIPROCAL"] = 1;
                            values[valuesById[2] = "NON_RECIPROCAL"] = 2;
                            return values;
                        })();
    
                        /**
                         * Tense enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Tense
                         * @enum {number}
                         * @property {number} TENSE_UNKNOWN=0 TENSE_UNKNOWN value
                         * @property {number} CONDITIONAL_TENSE=1 CONDITIONAL_TENSE value
                         * @property {number} FUTURE=2 FUTURE value
                         * @property {number} PAST=3 PAST value
                         * @property {number} PRESENT=4 PRESENT value
                         * @property {number} IMPERFECT=5 IMPERFECT value
                         * @property {number} PLUPERFECT=6 PLUPERFECT value
                         */
                        PartOfSpeech.Tense = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TENSE_UNKNOWN"] = 0;
                            values[valuesById[1] = "CONDITIONAL_TENSE"] = 1;
                            values[valuesById[2] = "FUTURE"] = 2;
                            values[valuesById[3] = "PAST"] = 3;
                            values[valuesById[4] = "PRESENT"] = 4;
                            values[valuesById[5] = "IMPERFECT"] = 5;
                            values[valuesById[6] = "PLUPERFECT"] = 6;
                            return values;
                        })();
    
                        /**
                         * Voice enum.
                         * @name google.cloud.language.v1beta2.PartOfSpeech.Voice
                         * @enum {number}
                         * @property {number} VOICE_UNKNOWN=0 VOICE_UNKNOWN value
                         * @property {number} ACTIVE=1 ACTIVE value
                         * @property {number} CAUSATIVE=2 CAUSATIVE value
                         * @property {number} PASSIVE=3 PASSIVE value
                         */
                        PartOfSpeech.Voice = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "VOICE_UNKNOWN"] = 0;
                            values[valuesById[1] = "ACTIVE"] = 1;
                            values[valuesById[2] = "CAUSATIVE"] = 2;
                            values[valuesById[3] = "PASSIVE"] = 3;
                            return values;
                        })();
    
                        return PartOfSpeech;
                    })();
    
                    v1beta2.DependencyEdge = (function() {
    
                        /**
                         * Properties of a DependencyEdge.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IDependencyEdge
                         * @property {number|null} [headTokenIndex] DependencyEdge headTokenIndex
                         * @property {google.cloud.language.v1beta2.DependencyEdge.Label|null} [label] DependencyEdge label
                         */
    
                        /**
                         * Constructs a new DependencyEdge.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a DependencyEdge.
                         * @implements IDependencyEdge
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IDependencyEdge=} [properties] Properties to set
                         */
                        function DependencyEdge(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DependencyEdge headTokenIndex.
                         * @member {number} headTokenIndex
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @instance
                         */
                        DependencyEdge.prototype.headTokenIndex = 0;
    
                        /**
                         * DependencyEdge label.
                         * @member {google.cloud.language.v1beta2.DependencyEdge.Label} label
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @instance
                         */
                        DependencyEdge.prototype.label = 0;
    
                        /**
                         * Creates a new DependencyEdge instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @static
                         * @param {google.cloud.language.v1beta2.IDependencyEdge=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.DependencyEdge} DependencyEdge instance
                         */
                        DependencyEdge.create = function create(properties) {
                            return new DependencyEdge(properties);
                        };
    
                        /**
                         * Encodes the specified DependencyEdge message. Does not implicitly {@link google.cloud.language.v1beta2.DependencyEdge.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @static
                         * @param {google.cloud.language.v1beta2.IDependencyEdge} message DependencyEdge message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DependencyEdge.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.headTokenIndex != null && Object.hasOwnProperty.call(message, "headTokenIndex"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.headTokenIndex);
                            if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.label);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DependencyEdge message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.DependencyEdge.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @static
                         * @param {google.cloud.language.v1beta2.IDependencyEdge} message DependencyEdge message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DependencyEdge.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DependencyEdge message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.DependencyEdge} DependencyEdge
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DependencyEdge.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.DependencyEdge();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.headTokenIndex = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.label = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DependencyEdge message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.DependencyEdge} DependencyEdge
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DependencyEdge.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DependencyEdge message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DependencyEdge.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.headTokenIndex != null && message.hasOwnProperty("headTokenIndex"))
                                if (!$util.isInteger(message.headTokenIndex))
                                    return "headTokenIndex: integer expected";
                            if (message.label != null && message.hasOwnProperty("label"))
                                switch (message.label) {
                                default:
                                    return "label: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                case 10:
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 17:
                                case 18:
                                case 19:
                                case 20:
                                case 21:
                                case 22:
                                case 23:
                                case 24:
                                case 25:
                                case 26:
                                case 27:
                                case 28:
                                case 29:
                                case 30:
                                case 31:
                                case 32:
                                case 33:
                                case 34:
                                case 35:
                                case 36:
                                case 37:
                                case 38:
                                case 39:
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 60:
                                case 61:
                                case 62:
                                case 63:
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 77:
                                case 78:
                                case 79:
                                case 80:
                                case 81:
                                case 82:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a DependencyEdge message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.DependencyEdge} DependencyEdge
                         */
                        DependencyEdge.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.DependencyEdge)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.DependencyEdge();
                            if (object.headTokenIndex != null)
                                message.headTokenIndex = object.headTokenIndex | 0;
                            switch (object.label) {
                            default:
                                if (typeof object.label === "number") {
                                    message.label = object.label;
                                    break;
                                }
                                break;
                            case "UNKNOWN":
                            case 0:
                                message.label = 0;
                                break;
                            case "ABBREV":
                            case 1:
                                message.label = 1;
                                break;
                            case "ACOMP":
                            case 2:
                                message.label = 2;
                                break;
                            case "ADVCL":
                            case 3:
                                message.label = 3;
                                break;
                            case "ADVMOD":
                            case 4:
                                message.label = 4;
                                break;
                            case "AMOD":
                            case 5:
                                message.label = 5;
                                break;
                            case "APPOS":
                            case 6:
                                message.label = 6;
                                break;
                            case "ATTR":
                            case 7:
                                message.label = 7;
                                break;
                            case "AUX":
                            case 8:
                                message.label = 8;
                                break;
                            case "AUXPASS":
                            case 9:
                                message.label = 9;
                                break;
                            case "CC":
                            case 10:
                                message.label = 10;
                                break;
                            case "CCOMP":
                            case 11:
                                message.label = 11;
                                break;
                            case "CONJ":
                            case 12:
                                message.label = 12;
                                break;
                            case "CSUBJ":
                            case 13:
                                message.label = 13;
                                break;
                            case "CSUBJPASS":
                            case 14:
                                message.label = 14;
                                break;
                            case "DEP":
                            case 15:
                                message.label = 15;
                                break;
                            case "DET":
                            case 16:
                                message.label = 16;
                                break;
                            case "DISCOURSE":
                            case 17:
                                message.label = 17;
                                break;
                            case "DOBJ":
                            case 18:
                                message.label = 18;
                                break;
                            case "EXPL":
                            case 19:
                                message.label = 19;
                                break;
                            case "GOESWITH":
                            case 20:
                                message.label = 20;
                                break;
                            case "IOBJ":
                            case 21:
                                message.label = 21;
                                break;
                            case "MARK":
                            case 22:
                                message.label = 22;
                                break;
                            case "MWE":
                            case 23:
                                message.label = 23;
                                break;
                            case "MWV":
                            case 24:
                                message.label = 24;
                                break;
                            case "NEG":
                            case 25:
                                message.label = 25;
                                break;
                            case "NN":
                            case 26:
                                message.label = 26;
                                break;
                            case "NPADVMOD":
                            case 27:
                                message.label = 27;
                                break;
                            case "NSUBJ":
                            case 28:
                                message.label = 28;
                                break;
                            case "NSUBJPASS":
                            case 29:
                                message.label = 29;
                                break;
                            case "NUM":
                            case 30:
                                message.label = 30;
                                break;
                            case "NUMBER":
                            case 31:
                                message.label = 31;
                                break;
                            case "P":
                            case 32:
                                message.label = 32;
                                break;
                            case "PARATAXIS":
                            case 33:
                                message.label = 33;
                                break;
                            case "PARTMOD":
                            case 34:
                                message.label = 34;
                                break;
                            case "PCOMP":
                            case 35:
                                message.label = 35;
                                break;
                            case "POBJ":
                            case 36:
                                message.label = 36;
                                break;
                            case "POSS":
                            case 37:
                                message.label = 37;
                                break;
                            case "POSTNEG":
                            case 38:
                                message.label = 38;
                                break;
                            case "PRECOMP":
                            case 39:
                                message.label = 39;
                                break;
                            case "PRECONJ":
                            case 40:
                                message.label = 40;
                                break;
                            case "PREDET":
                            case 41:
                                message.label = 41;
                                break;
                            case "PREF":
                            case 42:
                                message.label = 42;
                                break;
                            case "PREP":
                            case 43:
                                message.label = 43;
                                break;
                            case "PRONL":
                            case 44:
                                message.label = 44;
                                break;
                            case "PRT":
                            case 45:
                                message.label = 45;
                                break;
                            case "PS":
                            case 46:
                                message.label = 46;
                                break;
                            case "QUANTMOD":
                            case 47:
                                message.label = 47;
                                break;
                            case "RCMOD":
                            case 48:
                                message.label = 48;
                                break;
                            case "RCMODREL":
                            case 49:
                                message.label = 49;
                                break;
                            case "RDROP":
                            case 50:
                                message.label = 50;
                                break;
                            case "REF":
                            case 51:
                                message.label = 51;
                                break;
                            case "REMNANT":
                            case 52:
                                message.label = 52;
                                break;
                            case "REPARANDUM":
                            case 53:
                                message.label = 53;
                                break;
                            case "ROOT":
                            case 54:
                                message.label = 54;
                                break;
                            case "SNUM":
                            case 55:
                                message.label = 55;
                                break;
                            case "SUFF":
                            case 56:
                                message.label = 56;
                                break;
                            case "TMOD":
                            case 57:
                                message.label = 57;
                                break;
                            case "TOPIC":
                            case 58:
                                message.label = 58;
                                break;
                            case "VMOD":
                            case 59:
                                message.label = 59;
                                break;
                            case "VOCATIVE":
                            case 60:
                                message.label = 60;
                                break;
                            case "XCOMP":
                            case 61:
                                message.label = 61;
                                break;
                            case "SUFFIX":
                            case 62:
                                message.label = 62;
                                break;
                            case "TITLE":
                            case 63:
                                message.label = 63;
                                break;
                            case "ADVPHMOD":
                            case 64:
                                message.label = 64;
                                break;
                            case "AUXCAUS":
                            case 65:
                                message.label = 65;
                                break;
                            case "AUXVV":
                            case 66:
                                message.label = 66;
                                break;
                            case "DTMOD":
                            case 67:
                                message.label = 67;
                                break;
                            case "FOREIGN":
                            case 68:
                                message.label = 68;
                                break;
                            case "KW":
                            case 69:
                                message.label = 69;
                                break;
                            case "LIST":
                            case 70:
                                message.label = 70;
                                break;
                            case "NOMC":
                            case 71:
                                message.label = 71;
                                break;
                            case "NOMCSUBJ":
                            case 72:
                                message.label = 72;
                                break;
                            case "NOMCSUBJPASS":
                            case 73:
                                message.label = 73;
                                break;
                            case "NUMC":
                            case 74:
                                message.label = 74;
                                break;
                            case "COP":
                            case 75:
                                message.label = 75;
                                break;
                            case "DISLOCATED":
                            case 76:
                                message.label = 76;
                                break;
                            case "ASP":
                            case 77:
                                message.label = 77;
                                break;
                            case "GMOD":
                            case 78:
                                message.label = 78;
                                break;
                            case "GOBJ":
                            case 79:
                                message.label = 79;
                                break;
                            case "INFMOD":
                            case 80:
                                message.label = 80;
                                break;
                            case "MES":
                            case 81:
                                message.label = 81;
                                break;
                            case "NCOMP":
                            case 82:
                                message.label = 82;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DependencyEdge message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @static
                         * @param {google.cloud.language.v1beta2.DependencyEdge} message DependencyEdge
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DependencyEdge.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.headTokenIndex = 0;
                                object.label = options.enums === String ? "UNKNOWN" : 0;
                            }
                            if (message.headTokenIndex != null && message.hasOwnProperty("headTokenIndex"))
                                object.headTokenIndex = message.headTokenIndex;
                            if (message.label != null && message.hasOwnProperty("label"))
                                object.label = options.enums === String ? $root.google.cloud.language.v1beta2.DependencyEdge.Label[message.label] === undefined ? message.label : $root.google.cloud.language.v1beta2.DependencyEdge.Label[message.label] : message.label;
                            return object;
                        };
    
                        /**
                         * Converts this DependencyEdge to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DependencyEdge.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DependencyEdge
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.DependencyEdge
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DependencyEdge.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.DependencyEdge";
                        };
    
                        /**
                         * Label enum.
                         * @name google.cloud.language.v1beta2.DependencyEdge.Label
                         * @enum {number}
                         * @property {number} UNKNOWN=0 UNKNOWN value
                         * @property {number} ABBREV=1 ABBREV value
                         * @property {number} ACOMP=2 ACOMP value
                         * @property {number} ADVCL=3 ADVCL value
                         * @property {number} ADVMOD=4 ADVMOD value
                         * @property {number} AMOD=5 AMOD value
                         * @property {number} APPOS=6 APPOS value
                         * @property {number} ATTR=7 ATTR value
                         * @property {number} AUX=8 AUX value
                         * @property {number} AUXPASS=9 AUXPASS value
                         * @property {number} CC=10 CC value
                         * @property {number} CCOMP=11 CCOMP value
                         * @property {number} CONJ=12 CONJ value
                         * @property {number} CSUBJ=13 CSUBJ value
                         * @property {number} CSUBJPASS=14 CSUBJPASS value
                         * @property {number} DEP=15 DEP value
                         * @property {number} DET=16 DET value
                         * @property {number} DISCOURSE=17 DISCOURSE value
                         * @property {number} DOBJ=18 DOBJ value
                         * @property {number} EXPL=19 EXPL value
                         * @property {number} GOESWITH=20 GOESWITH value
                         * @property {number} IOBJ=21 IOBJ value
                         * @property {number} MARK=22 MARK value
                         * @property {number} MWE=23 MWE value
                         * @property {number} MWV=24 MWV value
                         * @property {number} NEG=25 NEG value
                         * @property {number} NN=26 NN value
                         * @property {number} NPADVMOD=27 NPADVMOD value
                         * @property {number} NSUBJ=28 NSUBJ value
                         * @property {number} NSUBJPASS=29 NSUBJPASS value
                         * @property {number} NUM=30 NUM value
                         * @property {number} NUMBER=31 NUMBER value
                         * @property {number} P=32 P value
                         * @property {number} PARATAXIS=33 PARATAXIS value
                         * @property {number} PARTMOD=34 PARTMOD value
                         * @property {number} PCOMP=35 PCOMP value
                         * @property {number} POBJ=36 POBJ value
                         * @property {number} POSS=37 POSS value
                         * @property {number} POSTNEG=38 POSTNEG value
                         * @property {number} PRECOMP=39 PRECOMP value
                         * @property {number} PRECONJ=40 PRECONJ value
                         * @property {number} PREDET=41 PREDET value
                         * @property {number} PREF=42 PREF value
                         * @property {number} PREP=43 PREP value
                         * @property {number} PRONL=44 PRONL value
                         * @property {number} PRT=45 PRT value
                         * @property {number} PS=46 PS value
                         * @property {number} QUANTMOD=47 QUANTMOD value
                         * @property {number} RCMOD=48 RCMOD value
                         * @property {number} RCMODREL=49 RCMODREL value
                         * @property {number} RDROP=50 RDROP value
                         * @property {number} REF=51 REF value
                         * @property {number} REMNANT=52 REMNANT value
                         * @property {number} REPARANDUM=53 REPARANDUM value
                         * @property {number} ROOT=54 ROOT value
                         * @property {number} SNUM=55 SNUM value
                         * @property {number} SUFF=56 SUFF value
                         * @property {number} TMOD=57 TMOD value
                         * @property {number} TOPIC=58 TOPIC value
                         * @property {number} VMOD=59 VMOD value
                         * @property {number} VOCATIVE=60 VOCATIVE value
                         * @property {number} XCOMP=61 XCOMP value
                         * @property {number} SUFFIX=62 SUFFIX value
                         * @property {number} TITLE=63 TITLE value
                         * @property {number} ADVPHMOD=64 ADVPHMOD value
                         * @property {number} AUXCAUS=65 AUXCAUS value
                         * @property {number} AUXVV=66 AUXVV value
                         * @property {number} DTMOD=67 DTMOD value
                         * @property {number} FOREIGN=68 FOREIGN value
                         * @property {number} KW=69 KW value
                         * @property {number} LIST=70 LIST value
                         * @property {number} NOMC=71 NOMC value
                         * @property {number} NOMCSUBJ=72 NOMCSUBJ value
                         * @property {number} NOMCSUBJPASS=73 NOMCSUBJPASS value
                         * @property {number} NUMC=74 NUMC value
                         * @property {number} COP=75 COP value
                         * @property {number} DISLOCATED=76 DISLOCATED value
                         * @property {number} ASP=77 ASP value
                         * @property {number} GMOD=78 GMOD value
                         * @property {number} GOBJ=79 GOBJ value
                         * @property {number} INFMOD=80 INFMOD value
                         * @property {number} MES=81 MES value
                         * @property {number} NCOMP=82 NCOMP value
                         */
                        DependencyEdge.Label = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "UNKNOWN"] = 0;
                            values[valuesById[1] = "ABBREV"] = 1;
                            values[valuesById[2] = "ACOMP"] = 2;
                            values[valuesById[3] = "ADVCL"] = 3;
                            values[valuesById[4] = "ADVMOD"] = 4;
                            values[valuesById[5] = "AMOD"] = 5;
                            values[valuesById[6] = "APPOS"] = 6;
                            values[valuesById[7] = "ATTR"] = 7;
                            values[valuesById[8] = "AUX"] = 8;
                            values[valuesById[9] = "AUXPASS"] = 9;
                            values[valuesById[10] = "CC"] = 10;
                            values[valuesById[11] = "CCOMP"] = 11;
                            values[valuesById[12] = "CONJ"] = 12;
                            values[valuesById[13] = "CSUBJ"] = 13;
                            values[valuesById[14] = "CSUBJPASS"] = 14;
                            values[valuesById[15] = "DEP"] = 15;
                            values[valuesById[16] = "DET"] = 16;
                            values[valuesById[17] = "DISCOURSE"] = 17;
                            values[valuesById[18] = "DOBJ"] = 18;
                            values[valuesById[19] = "EXPL"] = 19;
                            values[valuesById[20] = "GOESWITH"] = 20;
                            values[valuesById[21] = "IOBJ"] = 21;
                            values[valuesById[22] = "MARK"] = 22;
                            values[valuesById[23] = "MWE"] = 23;
                            values[valuesById[24] = "MWV"] = 24;
                            values[valuesById[25] = "NEG"] = 25;
                            values[valuesById[26] = "NN"] = 26;
                            values[valuesById[27] = "NPADVMOD"] = 27;
                            values[valuesById[28] = "NSUBJ"] = 28;
                            values[valuesById[29] = "NSUBJPASS"] = 29;
                            values[valuesById[30] = "NUM"] = 30;
                            values[valuesById[31] = "NUMBER"] = 31;
                            values[valuesById[32] = "P"] = 32;
                            values[valuesById[33] = "PARATAXIS"] = 33;
                            values[valuesById[34] = "PARTMOD"] = 34;
                            values[valuesById[35] = "PCOMP"] = 35;
                            values[valuesById[36] = "POBJ"] = 36;
                            values[valuesById[37] = "POSS"] = 37;
                            values[valuesById[38] = "POSTNEG"] = 38;
                            values[valuesById[39] = "PRECOMP"] = 39;
                            values[valuesById[40] = "PRECONJ"] = 40;
                            values[valuesById[41] = "PREDET"] = 41;
                            values[valuesById[42] = "PREF"] = 42;
                            values[valuesById[43] = "PREP"] = 43;
                            values[valuesById[44] = "PRONL"] = 44;
                            values[valuesById[45] = "PRT"] = 45;
                            values[valuesById[46] = "PS"] = 46;
                            values[valuesById[47] = "QUANTMOD"] = 47;
                            values[valuesById[48] = "RCMOD"] = 48;
                            values[valuesById[49] = "RCMODREL"] = 49;
                            values[valuesById[50] = "RDROP"] = 50;
                            values[valuesById[51] = "REF"] = 51;
                            values[valuesById[52] = "REMNANT"] = 52;
                            values[valuesById[53] = "REPARANDUM"] = 53;
                            values[valuesById[54] = "ROOT"] = 54;
                            values[valuesById[55] = "SNUM"] = 55;
                            values[valuesById[56] = "SUFF"] = 56;
                            values[valuesById[57] = "TMOD"] = 57;
                            values[valuesById[58] = "TOPIC"] = 58;
                            values[valuesById[59] = "VMOD"] = 59;
                            values[valuesById[60] = "VOCATIVE"] = 60;
                            values[valuesById[61] = "XCOMP"] = 61;
                            values[valuesById[62] = "SUFFIX"] = 62;
                            values[valuesById[63] = "TITLE"] = 63;
                            values[valuesById[64] = "ADVPHMOD"] = 64;
                            values[valuesById[65] = "AUXCAUS"] = 65;
                            values[valuesById[66] = "AUXVV"] = 66;
                            values[valuesById[67] = "DTMOD"] = 67;
                            values[valuesById[68] = "FOREIGN"] = 68;
                            values[valuesById[69] = "KW"] = 69;
                            values[valuesById[70] = "LIST"] = 70;
                            values[valuesById[71] = "NOMC"] = 71;
                            values[valuesById[72] = "NOMCSUBJ"] = 72;
                            values[valuesById[73] = "NOMCSUBJPASS"] = 73;
                            values[valuesById[74] = "NUMC"] = 74;
                            values[valuesById[75] = "COP"] = 75;
                            values[valuesById[76] = "DISLOCATED"] = 76;
                            values[valuesById[77] = "ASP"] = 77;
                            values[valuesById[78] = "GMOD"] = 78;
                            values[valuesById[79] = "GOBJ"] = 79;
                            values[valuesById[80] = "INFMOD"] = 80;
                            values[valuesById[81] = "MES"] = 81;
                            values[valuesById[82] = "NCOMP"] = 82;
                            return values;
                        })();
    
                        return DependencyEdge;
                    })();
    
                    v1beta2.EntityMention = (function() {
    
                        /**
                         * Properties of an EntityMention.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IEntityMention
                         * @property {google.cloud.language.v1beta2.ITextSpan|null} [text] EntityMention text
                         * @property {google.cloud.language.v1beta2.EntityMention.Type|null} [type] EntityMention type
                         * @property {google.cloud.language.v1beta2.ISentiment|null} [sentiment] EntityMention sentiment
                         */
    
                        /**
                         * Constructs a new EntityMention.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an EntityMention.
                         * @implements IEntityMention
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IEntityMention=} [properties] Properties to set
                         */
                        function EntityMention(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * EntityMention text.
                         * @member {google.cloud.language.v1beta2.ITextSpan|null|undefined} text
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @instance
                         */
                        EntityMention.prototype.text = null;
    
                        /**
                         * EntityMention type.
                         * @member {google.cloud.language.v1beta2.EntityMention.Type} type
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @instance
                         */
                        EntityMention.prototype.type = 0;
    
                        /**
                         * EntityMention sentiment.
                         * @member {google.cloud.language.v1beta2.ISentiment|null|undefined} sentiment
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @instance
                         */
                        EntityMention.prototype.sentiment = null;
    
                        /**
                         * Creates a new EntityMention instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @static
                         * @param {google.cloud.language.v1beta2.IEntityMention=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.EntityMention} EntityMention instance
                         */
                        EntityMention.create = function create(properties) {
                            return new EntityMention(properties);
                        };
    
                        /**
                         * Encodes the specified EntityMention message. Does not implicitly {@link google.cloud.language.v1beta2.EntityMention.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @static
                         * @param {google.cloud.language.v1beta2.IEntityMention} message EntityMention message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        EntityMention.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                $root.google.cloud.language.v1beta2.TextSpan.encode(message.text, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                            if (message.sentiment != null && Object.hasOwnProperty.call(message, "sentiment"))
                                $root.google.cloud.language.v1beta2.Sentiment.encode(message.sentiment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified EntityMention message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.EntityMention.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @static
                         * @param {google.cloud.language.v1beta2.IEntityMention} message EntityMention message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        EntityMention.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an EntityMention message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.EntityMention} EntityMention
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        EntityMention.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.EntityMention();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = $root.google.cloud.language.v1beta2.TextSpan.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.sentiment = $root.google.cloud.language.v1beta2.Sentiment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an EntityMention message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.EntityMention} EntityMention
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        EntityMention.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an EntityMention message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        EntityMention.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text")) {
                                var error = $root.google.cloud.language.v1beta2.TextSpan.verify(message.text);
                                if (error)
                                    return "text." + error;
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.sentiment != null && message.hasOwnProperty("sentiment")) {
                                var error = $root.google.cloud.language.v1beta2.Sentiment.verify(message.sentiment);
                                if (error)
                                    return "sentiment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an EntityMention message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.EntityMention} EntityMention
                         */
                        EntityMention.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.EntityMention)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.EntityMention();
                            if (object.text != null) {
                                if (typeof object.text !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.EntityMention.text: object expected");
                                message.text = $root.google.cloud.language.v1beta2.TextSpan.fromObject(object.text);
                            }
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "TYPE_UNKNOWN":
                            case 0:
                                message.type = 0;
                                break;
                            case "PROPER":
                            case 1:
                                message.type = 1;
                                break;
                            case "COMMON":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.sentiment != null) {
                                if (typeof object.sentiment !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.EntityMention.sentiment: object expected");
                                message.sentiment = $root.google.cloud.language.v1beta2.Sentiment.fromObject(object.sentiment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an EntityMention message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @static
                         * @param {google.cloud.language.v1beta2.EntityMention} message EntityMention
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        EntityMention.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.text = null;
                                object.type = options.enums === String ? "TYPE_UNKNOWN" : 0;
                                object.sentiment = null;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = $root.google.cloud.language.v1beta2.TextSpan.toObject(message.text, options);
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.google.cloud.language.v1beta2.EntityMention.Type[message.type] === undefined ? message.type : $root.google.cloud.language.v1beta2.EntityMention.Type[message.type] : message.type;
                            if (message.sentiment != null && message.hasOwnProperty("sentiment"))
                                object.sentiment = $root.google.cloud.language.v1beta2.Sentiment.toObject(message.sentiment, options);
                            return object;
                        };
    
                        /**
                         * Converts this EntityMention to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        EntityMention.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for EntityMention
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.EntityMention
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        EntityMention.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.EntityMention";
                        };
    
                        /**
                         * Type enum.
                         * @name google.cloud.language.v1beta2.EntityMention.Type
                         * @enum {number}
                         * @property {number} TYPE_UNKNOWN=0 TYPE_UNKNOWN value
                         * @property {number} PROPER=1 PROPER value
                         * @property {number} COMMON=2 COMMON value
                         */
                        EntityMention.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TYPE_UNKNOWN"] = 0;
                            values[valuesById[1] = "PROPER"] = 1;
                            values[valuesById[2] = "COMMON"] = 2;
                            return values;
                        })();
    
                        return EntityMention;
                    })();
    
                    v1beta2.TextSpan = (function() {
    
                        /**
                         * Properties of a TextSpan.
                         * @memberof google.cloud.language.v1beta2
                         * @interface ITextSpan
                         * @property {string|null} [content] TextSpan content
                         * @property {number|null} [beginOffset] TextSpan beginOffset
                         */
    
                        /**
                         * Constructs a new TextSpan.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a TextSpan.
                         * @implements ITextSpan
                         * @constructor
                         * @param {google.cloud.language.v1beta2.ITextSpan=} [properties] Properties to set
                         */
                        function TextSpan(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextSpan content.
                         * @member {string} content
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @instance
                         */
                        TextSpan.prototype.content = "";
    
                        /**
                         * TextSpan beginOffset.
                         * @member {number} beginOffset
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @instance
                         */
                        TextSpan.prototype.beginOffset = 0;
    
                        /**
                         * Creates a new TextSpan instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @static
                         * @param {google.cloud.language.v1beta2.ITextSpan=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.TextSpan} TextSpan instance
                         */
                        TextSpan.create = function create(properties) {
                            return new TextSpan(properties);
                        };
    
                        /**
                         * Encodes the specified TextSpan message. Does not implicitly {@link google.cloud.language.v1beta2.TextSpan.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @static
                         * @param {google.cloud.language.v1beta2.ITextSpan} message TextSpan message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextSpan.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
                            if (message.beginOffset != null && Object.hasOwnProperty.call(message, "beginOffset"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.beginOffset);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextSpan message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.TextSpan.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @static
                         * @param {google.cloud.language.v1beta2.ITextSpan} message TextSpan message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextSpan.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextSpan message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.TextSpan} TextSpan
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextSpan.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.TextSpan();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.content = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.beginOffset = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextSpan message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.TextSpan} TextSpan
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextSpan.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextSpan message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextSpan.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.content != null && message.hasOwnProperty("content"))
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            if (message.beginOffset != null && message.hasOwnProperty("beginOffset"))
                                if (!$util.isInteger(message.beginOffset))
                                    return "beginOffset: integer expected";
                            return null;
                        };
    
                        /**
                         * Creates a TextSpan message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.TextSpan} TextSpan
                         */
                        TextSpan.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.TextSpan)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.TextSpan();
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.beginOffset != null)
                                message.beginOffset = object.beginOffset | 0;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextSpan message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @static
                         * @param {google.cloud.language.v1beta2.TextSpan} message TextSpan
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextSpan.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.content = "";
                                object.beginOffset = 0;
                            }
                            if (message.content != null && message.hasOwnProperty("content"))
                                object.content = message.content;
                            if (message.beginOffset != null && message.hasOwnProperty("beginOffset"))
                                object.beginOffset = message.beginOffset;
                            return object;
                        };
    
                        /**
                         * Converts this TextSpan to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextSpan.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextSpan
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.TextSpan
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextSpan.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.TextSpan";
                        };
    
                        return TextSpan;
                    })();
    
                    v1beta2.ClassificationCategory = (function() {
    
                        /**
                         * Properties of a ClassificationCategory.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IClassificationCategory
                         * @property {string|null} [name] ClassificationCategory name
                         * @property {number|null} [confidence] ClassificationCategory confidence
                         */
    
                        /**
                         * Constructs a new ClassificationCategory.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a ClassificationCategory.
                         * @implements IClassificationCategory
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IClassificationCategory=} [properties] Properties to set
                         */
                        function ClassificationCategory(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClassificationCategory name.
                         * @member {string} name
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @instance
                         */
                        ClassificationCategory.prototype.name = "";
    
                        /**
                         * ClassificationCategory confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @instance
                         */
                        ClassificationCategory.prototype.confidence = 0;
    
                        /**
                         * Creates a new ClassificationCategory instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassificationCategory=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.ClassificationCategory} ClassificationCategory instance
                         */
                        ClassificationCategory.create = function create(properties) {
                            return new ClassificationCategory(properties);
                        };
    
                        /**
                         * Encodes the specified ClassificationCategory message. Does not implicitly {@link google.cloud.language.v1beta2.ClassificationCategory.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassificationCategory} message ClassificationCategory message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassificationCategory.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClassificationCategory message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.ClassificationCategory.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassificationCategory} message ClassificationCategory message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassificationCategory.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClassificationCategory message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.ClassificationCategory} ClassificationCategory
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassificationCategory.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.ClassificationCategory();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClassificationCategory message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.ClassificationCategory} ClassificationCategory
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassificationCategory.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClassificationCategory message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClassificationCategory.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a ClassificationCategory message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.ClassificationCategory} ClassificationCategory
                         */
                        ClassificationCategory.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.ClassificationCategory)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.ClassificationCategory();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClassificationCategory message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @static
                         * @param {google.cloud.language.v1beta2.ClassificationCategory} message ClassificationCategory
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClassificationCategory.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.confidence = 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this ClassificationCategory to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClassificationCategory.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ClassificationCategory
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.ClassificationCategory
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ClassificationCategory.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.ClassificationCategory";
                        };
    
                        return ClassificationCategory;
                    })();
    
                    v1beta2.ClassificationModelOptions = (function() {
    
                        /**
                         * Properties of a ClassificationModelOptions.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IClassificationModelOptions
                         * @property {google.cloud.language.v1beta2.ClassificationModelOptions.IV1Model|null} [v1Model] ClassificationModelOptions v1Model
                         * @property {google.cloud.language.v1beta2.ClassificationModelOptions.IV2Model|null} [v2Model] ClassificationModelOptions v2Model
                         */
    
                        /**
                         * Constructs a new ClassificationModelOptions.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a ClassificationModelOptions.
                         * @implements IClassificationModelOptions
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IClassificationModelOptions=} [properties] Properties to set
                         */
                        function ClassificationModelOptions(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClassificationModelOptions v1Model.
                         * @member {google.cloud.language.v1beta2.ClassificationModelOptions.IV1Model|null|undefined} v1Model
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @instance
                         */
                        ClassificationModelOptions.prototype.v1Model = null;
    
                        /**
                         * ClassificationModelOptions v2Model.
                         * @member {google.cloud.language.v1beta2.ClassificationModelOptions.IV2Model|null|undefined} v2Model
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @instance
                         */
                        ClassificationModelOptions.prototype.v2Model = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * ClassificationModelOptions modelType.
                         * @member {"v1Model"|"v2Model"|undefined} modelType
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @instance
                         */
                        Object.defineProperty(ClassificationModelOptions.prototype, "modelType", {
                            get: $util.oneOfGetter($oneOfFields = ["v1Model", "v2Model"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new ClassificationModelOptions instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassificationModelOptions=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.ClassificationModelOptions} ClassificationModelOptions instance
                         */
                        ClassificationModelOptions.create = function create(properties) {
                            return new ClassificationModelOptions(properties);
                        };
    
                        /**
                         * Encodes the specified ClassificationModelOptions message. Does not implicitly {@link google.cloud.language.v1beta2.ClassificationModelOptions.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassificationModelOptions} message ClassificationModelOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassificationModelOptions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.v1Model != null && Object.hasOwnProperty.call(message, "v1Model"))
                                $root.google.cloud.language.v1beta2.ClassificationModelOptions.V1Model.encode(message.v1Model, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.v2Model != null && Object.hasOwnProperty.call(message, "v2Model"))
                                $root.google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.encode(message.v2Model, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClassificationModelOptions message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.ClassificationModelOptions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassificationModelOptions} message ClassificationModelOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassificationModelOptions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClassificationModelOptions message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.ClassificationModelOptions} ClassificationModelOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassificationModelOptions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.ClassificationModelOptions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.v1Model = $root.google.cloud.language.v1beta2.ClassificationModelOptions.V1Model.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.v2Model = $root.google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClassificationModelOptions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.ClassificationModelOptions} ClassificationModelOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassificationModelOptions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClassificationModelOptions message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClassificationModelOptions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.v1Model != null && message.hasOwnProperty("v1Model")) {
                                properties.modelType = 1;
                                {
                                    var error = $root.google.cloud.language.v1beta2.ClassificationModelOptions.V1Model.verify(message.v1Model);
                                    if (error)
                                        return "v1Model." + error;
                                }
                            }
                            if (message.v2Model != null && message.hasOwnProperty("v2Model")) {
                                if (properties.modelType === 1)
                                    return "modelType: multiple values";
                                properties.modelType = 1;
                                {
                                    var error = $root.google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.verify(message.v2Model);
                                    if (error)
                                        return "v2Model." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ClassificationModelOptions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.ClassificationModelOptions} ClassificationModelOptions
                         */
                        ClassificationModelOptions.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.ClassificationModelOptions)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.ClassificationModelOptions();
                            if (object.v1Model != null) {
                                if (typeof object.v1Model !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.ClassificationModelOptions.v1Model: object expected");
                                message.v1Model = $root.google.cloud.language.v1beta2.ClassificationModelOptions.V1Model.fromObject(object.v1Model);
                            }
                            if (object.v2Model != null) {
                                if (typeof object.v2Model !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.ClassificationModelOptions.v2Model: object expected");
                                message.v2Model = $root.google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.fromObject(object.v2Model);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClassificationModelOptions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @static
                         * @param {google.cloud.language.v1beta2.ClassificationModelOptions} message ClassificationModelOptions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClassificationModelOptions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.v1Model != null && message.hasOwnProperty("v1Model")) {
                                object.v1Model = $root.google.cloud.language.v1beta2.ClassificationModelOptions.V1Model.toObject(message.v1Model, options);
                                if (options.oneofs)
                                    object.modelType = "v1Model";
                            }
                            if (message.v2Model != null && message.hasOwnProperty("v2Model")) {
                                object.v2Model = $root.google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.toObject(message.v2Model, options);
                                if (options.oneofs)
                                    object.modelType = "v2Model";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ClassificationModelOptions to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClassificationModelOptions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ClassificationModelOptions
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ClassificationModelOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.ClassificationModelOptions";
                        };
    
                        ClassificationModelOptions.V1Model = (function() {
    
                            /**
                             * Properties of a V1Model.
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                             * @interface IV1Model
                             */
    
                            /**
                             * Constructs a new V1Model.
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                             * @classdesc Represents a V1Model.
                             * @implements IV1Model
                             * @constructor
                             * @param {google.cloud.language.v1beta2.ClassificationModelOptions.IV1Model=} [properties] Properties to set
                             */
                            function V1Model(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Creates a new V1Model instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V1Model
                             * @static
                             * @param {google.cloud.language.v1beta2.ClassificationModelOptions.IV1Model=} [properties] Properties to set
                             * @returns {google.cloud.language.v1beta2.ClassificationModelOptions.V1Model} V1Model instance
                             */
                            V1Model.create = function create(properties) {
                                return new V1Model(properties);
                            };
    
                            /**
                             * Encodes the specified V1Model message. Does not implicitly {@link google.cloud.language.v1beta2.ClassificationModelOptions.V1Model.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V1Model
                             * @static
                             * @param {google.cloud.language.v1beta2.ClassificationModelOptions.IV1Model} message V1Model message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            V1Model.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified V1Model message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.ClassificationModelOptions.V1Model.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V1Model
                             * @static
                             * @param {google.cloud.language.v1beta2.ClassificationModelOptions.IV1Model} message V1Model message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            V1Model.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a V1Model message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V1Model
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.language.v1beta2.ClassificationModelOptions.V1Model} V1Model
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            V1Model.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.ClassificationModelOptions.V1Model();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a V1Model message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V1Model
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.language.v1beta2.ClassificationModelOptions.V1Model} V1Model
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            V1Model.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a V1Model message.
                             * @function verify
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V1Model
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            V1Model.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                return null;
                            };
    
                            /**
                             * Creates a V1Model message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V1Model
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.language.v1beta2.ClassificationModelOptions.V1Model} V1Model
                             */
                            V1Model.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.language.v1beta2.ClassificationModelOptions.V1Model)
                                    return object;
                                return new $root.google.cloud.language.v1beta2.ClassificationModelOptions.V1Model();
                            };
    
                            /**
                             * Creates a plain object from a V1Model message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V1Model
                             * @static
                             * @param {google.cloud.language.v1beta2.ClassificationModelOptions.V1Model} message V1Model
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            V1Model.toObject = function toObject() {
                                return {};
                            };
    
                            /**
                             * Converts this V1Model to JSON.
                             * @function toJSON
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V1Model
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            V1Model.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for V1Model
                             * @function getTypeUrl
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V1Model
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            V1Model.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.language.v1beta2.ClassificationModelOptions.V1Model";
                            };
    
                            return V1Model;
                        })();
    
                        ClassificationModelOptions.V2Model = (function() {
    
                            /**
                             * Properties of a V2Model.
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                             * @interface IV2Model
                             * @property {google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.ContentCategoriesVersion|null} [contentCategoriesVersion] V2Model contentCategoriesVersion
                             */
    
                            /**
                             * Constructs a new V2Model.
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions
                             * @classdesc Represents a V2Model.
                             * @implements IV2Model
                             * @constructor
                             * @param {google.cloud.language.v1beta2.ClassificationModelOptions.IV2Model=} [properties] Properties to set
                             */
                            function V2Model(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * V2Model contentCategoriesVersion.
                             * @member {google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.ContentCategoriesVersion} contentCategoriesVersion
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @instance
                             */
                            V2Model.prototype.contentCategoriesVersion = 0;
    
                            /**
                             * Creates a new V2Model instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @static
                             * @param {google.cloud.language.v1beta2.ClassificationModelOptions.IV2Model=} [properties] Properties to set
                             * @returns {google.cloud.language.v1beta2.ClassificationModelOptions.V2Model} V2Model instance
                             */
                            V2Model.create = function create(properties) {
                                return new V2Model(properties);
                            };
    
                            /**
                             * Encodes the specified V2Model message. Does not implicitly {@link google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @static
                             * @param {google.cloud.language.v1beta2.ClassificationModelOptions.IV2Model} message V2Model message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            V2Model.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.contentCategoriesVersion != null && Object.hasOwnProperty.call(message, "contentCategoriesVersion"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.contentCategoriesVersion);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified V2Model message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @static
                             * @param {google.cloud.language.v1beta2.ClassificationModelOptions.IV2Model} message V2Model message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            V2Model.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a V2Model message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.language.v1beta2.ClassificationModelOptions.V2Model} V2Model
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            V2Model.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.ClassificationModelOptions.V2Model();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.contentCategoriesVersion = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a V2Model message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.language.v1beta2.ClassificationModelOptions.V2Model} V2Model
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            V2Model.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a V2Model message.
                             * @function verify
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            V2Model.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.contentCategoriesVersion != null && message.hasOwnProperty("contentCategoriesVersion"))
                                    switch (message.contentCategoriesVersion) {
                                    default:
                                        return "contentCategoriesVersion: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates a V2Model message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.language.v1beta2.ClassificationModelOptions.V2Model} V2Model
                             */
                            V2Model.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.language.v1beta2.ClassificationModelOptions.V2Model)
                                    return object;
                                var message = new $root.google.cloud.language.v1beta2.ClassificationModelOptions.V2Model();
                                switch (object.contentCategoriesVersion) {
                                default:
                                    if (typeof object.contentCategoriesVersion === "number") {
                                        message.contentCategoriesVersion = object.contentCategoriesVersion;
                                        break;
                                    }
                                    break;
                                case "CONTENT_CATEGORIES_VERSION_UNSPECIFIED":
                                case 0:
                                    message.contentCategoriesVersion = 0;
                                    break;
                                case "V1":
                                case 1:
                                    message.contentCategoriesVersion = 1;
                                    break;
                                case "V2":
                                case 2:
                                    message.contentCategoriesVersion = 2;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a V2Model message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @static
                             * @param {google.cloud.language.v1beta2.ClassificationModelOptions.V2Model} message V2Model
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            V2Model.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.contentCategoriesVersion = options.enums === String ? "CONTENT_CATEGORIES_VERSION_UNSPECIFIED" : 0;
                                if (message.contentCategoriesVersion != null && message.hasOwnProperty("contentCategoriesVersion"))
                                    object.contentCategoriesVersion = options.enums === String ? $root.google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.ContentCategoriesVersion[message.contentCategoriesVersion] === undefined ? message.contentCategoriesVersion : $root.google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.ContentCategoriesVersion[message.contentCategoriesVersion] : message.contentCategoriesVersion;
                                return object;
                            };
    
                            /**
                             * Converts this V2Model to JSON.
                             * @function toJSON
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            V2Model.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for V2Model
                             * @function getTypeUrl
                             * @memberof google.cloud.language.v1beta2.ClassificationModelOptions.V2Model
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            V2Model.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.language.v1beta2.ClassificationModelOptions.V2Model";
                            };
    
                            /**
                             * ContentCategoriesVersion enum.
                             * @name google.cloud.language.v1beta2.ClassificationModelOptions.V2Model.ContentCategoriesVersion
                             * @enum {number}
                             * @property {number} CONTENT_CATEGORIES_VERSION_UNSPECIFIED=0 CONTENT_CATEGORIES_VERSION_UNSPECIFIED value
                             * @property {number} V1=1 V1 value
                             * @property {number} V2=2 V2 value
                             */
                            V2Model.ContentCategoriesVersion = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "CONTENT_CATEGORIES_VERSION_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "V1"] = 1;
                                values[valuesById[2] = "V2"] = 2;
                                return values;
                            })();
    
                            return V2Model;
                        })();
    
                        return ClassificationModelOptions;
                    })();
    
                    v1beta2.AnalyzeSentimentRequest = (function() {
    
                        /**
                         * Properties of an AnalyzeSentimentRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IAnalyzeSentimentRequest
                         * @property {google.cloud.language.v1beta2.IDocument|null} [document] AnalyzeSentimentRequest document
                         * @property {google.cloud.language.v1beta2.EncodingType|null} [encodingType] AnalyzeSentimentRequest encodingType
                         */
    
                        /**
                         * Constructs a new AnalyzeSentimentRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an AnalyzeSentimentRequest.
                         * @implements IAnalyzeSentimentRequest
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IAnalyzeSentimentRequest=} [properties] Properties to set
                         */
                        function AnalyzeSentimentRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeSentimentRequest document.
                         * @member {google.cloud.language.v1beta2.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @instance
                         */
                        AnalyzeSentimentRequest.prototype.document = null;
    
                        /**
                         * AnalyzeSentimentRequest encodingType.
                         * @member {google.cloud.language.v1beta2.EncodingType} encodingType
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @instance
                         */
                        AnalyzeSentimentRequest.prototype.encodingType = 0;
    
                        /**
                         * Creates a new AnalyzeSentimentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSentimentRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.AnalyzeSentimentRequest} AnalyzeSentimentRequest instance
                         */
                        AnalyzeSentimentRequest.create = function create(properties) {
                            return new AnalyzeSentimentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeSentimentRequest message. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeSentimentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSentimentRequest} message AnalyzeSentimentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSentimentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1beta2.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.encodingType != null && Object.hasOwnProperty.call(message, "encodingType"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeSentimentRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeSentimentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSentimentRequest} message AnalyzeSentimentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSentimentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeSentimentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.AnalyzeSentimentRequest} AnalyzeSentimentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSentimentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnalyzeSentimentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1beta2.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.encodingType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeSentimentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.AnalyzeSentimentRequest} AnalyzeSentimentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSentimentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeSentimentRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeSentimentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1beta2.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                switch (message.encodingType) {
                                default:
                                    return "encodingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeSentimentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.AnalyzeSentimentRequest} AnalyzeSentimentRequest
                         */
                        AnalyzeSentimentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.AnalyzeSentimentRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.AnalyzeSentimentRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.AnalyzeSentimentRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1beta2.Document.fromObject(object.document);
                            }
                            switch (object.encodingType) {
                            default:
                                if (typeof object.encodingType === "number") {
                                    message.encodingType = object.encodingType;
                                    break;
                                }
                                break;
                            case "NONE":
                            case 0:
                                message.encodingType = 0;
                                break;
                            case "UTF8":
                            case 1:
                                message.encodingType = 1;
                                break;
                            case "UTF16":
                            case 2:
                                message.encodingType = 2;
                                break;
                            case "UTF32":
                            case 3:
                                message.encodingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeSentimentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.AnalyzeSentimentRequest} message AnalyzeSentimentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeSentimentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.encodingType = options.enums === String ? "NONE" : 0;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1beta2.Document.toObject(message.document, options);
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                object.encodingType = options.enums === String ? $root.google.cloud.language.v1beta2.EncodingType[message.encodingType] === undefined ? message.encodingType : $root.google.cloud.language.v1beta2.EncodingType[message.encodingType] : message.encodingType;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeSentimentRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeSentimentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeSentimentRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeSentimentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.AnalyzeSentimentRequest";
                        };
    
                        return AnalyzeSentimentRequest;
                    })();
    
                    v1beta2.AnalyzeSentimentResponse = (function() {
    
                        /**
                         * Properties of an AnalyzeSentimentResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IAnalyzeSentimentResponse
                         * @property {google.cloud.language.v1beta2.ISentiment|null} [documentSentiment] AnalyzeSentimentResponse documentSentiment
                         * @property {string|null} [language] AnalyzeSentimentResponse language
                         * @property {Array.<google.cloud.language.v1beta2.ISentence>|null} [sentences] AnalyzeSentimentResponse sentences
                         */
    
                        /**
                         * Constructs a new AnalyzeSentimentResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an AnalyzeSentimentResponse.
                         * @implements IAnalyzeSentimentResponse
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IAnalyzeSentimentResponse=} [properties] Properties to set
                         */
                        function AnalyzeSentimentResponse(properties) {
                            this.sentences = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeSentimentResponse documentSentiment.
                         * @member {google.cloud.language.v1beta2.ISentiment|null|undefined} documentSentiment
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @instance
                         */
                        AnalyzeSentimentResponse.prototype.documentSentiment = null;
    
                        /**
                         * AnalyzeSentimentResponse language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @instance
                         */
                        AnalyzeSentimentResponse.prototype.language = "";
    
                        /**
                         * AnalyzeSentimentResponse sentences.
                         * @member {Array.<google.cloud.language.v1beta2.ISentence>} sentences
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @instance
                         */
                        AnalyzeSentimentResponse.prototype.sentences = $util.emptyArray;
    
                        /**
                         * Creates a new AnalyzeSentimentResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSentimentResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.AnalyzeSentimentResponse} AnalyzeSentimentResponse instance
                         */
                        AnalyzeSentimentResponse.create = function create(properties) {
                            return new AnalyzeSentimentResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeSentimentResponse message. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeSentimentResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSentimentResponse} message AnalyzeSentimentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSentimentResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.documentSentiment != null && Object.hasOwnProperty.call(message, "documentSentiment"))
                                $root.google.cloud.language.v1beta2.Sentiment.encode(message.documentSentiment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
                            if (message.sentences != null && message.sentences.length)
                                for (var i = 0; i < message.sentences.length; ++i)
                                    $root.google.cloud.language.v1beta2.Sentence.encode(message.sentences[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeSentimentResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeSentimentResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSentimentResponse} message AnalyzeSentimentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSentimentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeSentimentResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.AnalyzeSentimentResponse} AnalyzeSentimentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSentimentResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnalyzeSentimentResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.documentSentiment = $root.google.cloud.language.v1beta2.Sentiment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.language = reader.string();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.sentences && message.sentences.length))
                                            message.sentences = [];
                                        message.sentences.push($root.google.cloud.language.v1beta2.Sentence.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeSentimentResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.AnalyzeSentimentResponse} AnalyzeSentimentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSentimentResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeSentimentResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeSentimentResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.documentSentiment != null && message.hasOwnProperty("documentSentiment")) {
                                var error = $root.google.cloud.language.v1beta2.Sentiment.verify(message.documentSentiment);
                                if (error)
                                    return "documentSentiment." + error;
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            if (message.sentences != null && message.hasOwnProperty("sentences")) {
                                if (!Array.isArray(message.sentences))
                                    return "sentences: array expected";
                                for (var i = 0; i < message.sentences.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.Sentence.verify(message.sentences[i]);
                                    if (error)
                                        return "sentences." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeSentimentResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.AnalyzeSentimentResponse} AnalyzeSentimentResponse
                         */
                        AnalyzeSentimentResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.AnalyzeSentimentResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.AnalyzeSentimentResponse();
                            if (object.documentSentiment != null) {
                                if (typeof object.documentSentiment !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.AnalyzeSentimentResponse.documentSentiment: object expected");
                                message.documentSentiment = $root.google.cloud.language.v1beta2.Sentiment.fromObject(object.documentSentiment);
                            }
                            if (object.language != null)
                                message.language = String(object.language);
                            if (object.sentences) {
                                if (!Array.isArray(object.sentences))
                                    throw TypeError(".google.cloud.language.v1beta2.AnalyzeSentimentResponse.sentences: array expected");
                                message.sentences = [];
                                for (var i = 0; i < object.sentences.length; ++i) {
                                    if (typeof object.sentences[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.AnalyzeSentimentResponse.sentences: object expected");
                                    message.sentences[i] = $root.google.cloud.language.v1beta2.Sentence.fromObject(object.sentences[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeSentimentResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.AnalyzeSentimentResponse} message AnalyzeSentimentResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeSentimentResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.sentences = [];
                            if (options.defaults) {
                                object.documentSentiment = null;
                                object.language = "";
                            }
                            if (message.documentSentiment != null && message.hasOwnProperty("documentSentiment"))
                                object.documentSentiment = $root.google.cloud.language.v1beta2.Sentiment.toObject(message.documentSentiment, options);
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            if (message.sentences && message.sentences.length) {
                                object.sentences = [];
                                for (var j = 0; j < message.sentences.length; ++j)
                                    object.sentences[j] = $root.google.cloud.language.v1beta2.Sentence.toObject(message.sentences[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeSentimentResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeSentimentResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeSentimentResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.AnalyzeSentimentResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeSentimentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.AnalyzeSentimentResponse";
                        };
    
                        return AnalyzeSentimentResponse;
                    })();
    
                    v1beta2.AnalyzeEntitySentimentRequest = (function() {
    
                        /**
                         * Properties of an AnalyzeEntitySentimentRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IAnalyzeEntitySentimentRequest
                         * @property {google.cloud.language.v1beta2.IDocument|null} [document] AnalyzeEntitySentimentRequest document
                         * @property {google.cloud.language.v1beta2.EncodingType|null} [encodingType] AnalyzeEntitySentimentRequest encodingType
                         */
    
                        /**
                         * Constructs a new AnalyzeEntitySentimentRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an AnalyzeEntitySentimentRequest.
                         * @implements IAnalyzeEntitySentimentRequest
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitySentimentRequest=} [properties] Properties to set
                         */
                        function AnalyzeEntitySentimentRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeEntitySentimentRequest document.
                         * @member {google.cloud.language.v1beta2.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @instance
                         */
                        AnalyzeEntitySentimentRequest.prototype.document = null;
    
                        /**
                         * AnalyzeEntitySentimentRequest encodingType.
                         * @member {google.cloud.language.v1beta2.EncodingType} encodingType
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @instance
                         */
                        AnalyzeEntitySentimentRequest.prototype.encodingType = 0;
    
                        /**
                         * Creates a new AnalyzeEntitySentimentRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitySentimentRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest} AnalyzeEntitySentimentRequest instance
                         */
                        AnalyzeEntitySentimentRequest.create = function create(properties) {
                            return new AnalyzeEntitySentimentRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitySentimentRequest message. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitySentimentRequest} message AnalyzeEntitySentimentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitySentimentRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1beta2.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.encodingType != null && Object.hasOwnProperty.call(message, "encodingType"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitySentimentRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitySentimentRequest} message AnalyzeEntitySentimentRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitySentimentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeEntitySentimentRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest} AnalyzeEntitySentimentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitySentimentRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1beta2.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.encodingType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeEntitySentimentRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest} AnalyzeEntitySentimentRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitySentimentRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeEntitySentimentRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeEntitySentimentRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1beta2.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                switch (message.encodingType) {
                                default:
                                    return "encodingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeEntitySentimentRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest} AnalyzeEntitySentimentRequest
                         */
                        AnalyzeEntitySentimentRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1beta2.Document.fromObject(object.document);
                            }
                            switch (object.encodingType) {
                            default:
                                if (typeof object.encodingType === "number") {
                                    message.encodingType = object.encodingType;
                                    break;
                                }
                                break;
                            case "NONE":
                            case 0:
                                message.encodingType = 0;
                                break;
                            case "UTF8":
                            case 1:
                                message.encodingType = 1;
                                break;
                            case "UTF16":
                            case 2:
                                message.encodingType = 2;
                                break;
                            case "UTF32":
                            case 3:
                                message.encodingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeEntitySentimentRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest} message AnalyzeEntitySentimentRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeEntitySentimentRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.encodingType = options.enums === String ? "NONE" : 0;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1beta2.Document.toObject(message.document, options);
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                object.encodingType = options.enums === String ? $root.google.cloud.language.v1beta2.EncodingType[message.encodingType] === undefined ? message.encodingType : $root.google.cloud.language.v1beta2.EncodingType[message.encodingType] : message.encodingType;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeEntitySentimentRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeEntitySentimentRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeEntitySentimentRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeEntitySentimentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.AnalyzeEntitySentimentRequest";
                        };
    
                        return AnalyzeEntitySentimentRequest;
                    })();
    
                    v1beta2.AnalyzeEntitySentimentResponse = (function() {
    
                        /**
                         * Properties of an AnalyzeEntitySentimentResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IAnalyzeEntitySentimentResponse
                         * @property {Array.<google.cloud.language.v1beta2.IEntity>|null} [entities] AnalyzeEntitySentimentResponse entities
                         * @property {string|null} [language] AnalyzeEntitySentimentResponse language
                         */
    
                        /**
                         * Constructs a new AnalyzeEntitySentimentResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an AnalyzeEntitySentimentResponse.
                         * @implements IAnalyzeEntitySentimentResponse
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitySentimentResponse=} [properties] Properties to set
                         */
                        function AnalyzeEntitySentimentResponse(properties) {
                            this.entities = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeEntitySentimentResponse entities.
                         * @member {Array.<google.cloud.language.v1beta2.IEntity>} entities
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @instance
                         */
                        AnalyzeEntitySentimentResponse.prototype.entities = $util.emptyArray;
    
                        /**
                         * AnalyzeEntitySentimentResponse language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @instance
                         */
                        AnalyzeEntitySentimentResponse.prototype.language = "";
    
                        /**
                         * Creates a new AnalyzeEntitySentimentResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitySentimentResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse} AnalyzeEntitySentimentResponse instance
                         */
                        AnalyzeEntitySentimentResponse.create = function create(properties) {
                            return new AnalyzeEntitySentimentResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitySentimentResponse message. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitySentimentResponse} message AnalyzeEntitySentimentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitySentimentResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entities != null && message.entities.length)
                                for (var i = 0; i < message.entities.length; ++i)
                                    $root.google.cloud.language.v1beta2.Entity.encode(message.entities[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitySentimentResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitySentimentResponse} message AnalyzeEntitySentimentResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitySentimentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeEntitySentimentResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse} AnalyzeEntitySentimentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitySentimentResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.entities && message.entities.length))
                                            message.entities = [];
                                        message.entities.push($root.google.cloud.language.v1beta2.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.language = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeEntitySentimentResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse} AnalyzeEntitySentimentResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitySentimentResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeEntitySentimentResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeEntitySentimentResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entities != null && message.hasOwnProperty("entities")) {
                                if (!Array.isArray(message.entities))
                                    return "entities: array expected";
                                for (var i = 0; i < message.entities.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.Entity.verify(message.entities[i]);
                                    if (error)
                                        return "entities." + error;
                                }
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeEntitySentimentResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse} AnalyzeEntitySentimentResponse
                         */
                        AnalyzeEntitySentimentResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse();
                            if (object.entities) {
                                if (!Array.isArray(object.entities))
                                    throw TypeError(".google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse.entities: array expected");
                                message.entities = [];
                                for (var i = 0; i < object.entities.length; ++i) {
                                    if (typeof object.entities[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse.entities: object expected");
                                    message.entities[i] = $root.google.cloud.language.v1beta2.Entity.fromObject(object.entities[i]);
                                }
                            }
                            if (object.language != null)
                                message.language = String(object.language);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeEntitySentimentResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse} message AnalyzeEntitySentimentResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeEntitySentimentResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.entities = [];
                            if (options.defaults)
                                object.language = "";
                            if (message.entities && message.entities.length) {
                                object.entities = [];
                                for (var j = 0; j < message.entities.length; ++j)
                                    object.entities[j] = $root.google.cloud.language.v1beta2.Entity.toObject(message.entities[j], options);
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeEntitySentimentResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeEntitySentimentResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeEntitySentimentResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeEntitySentimentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.AnalyzeEntitySentimentResponse";
                        };
    
                        return AnalyzeEntitySentimentResponse;
                    })();
    
                    v1beta2.AnalyzeEntitiesRequest = (function() {
    
                        /**
                         * Properties of an AnalyzeEntitiesRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IAnalyzeEntitiesRequest
                         * @property {google.cloud.language.v1beta2.IDocument|null} [document] AnalyzeEntitiesRequest document
                         * @property {google.cloud.language.v1beta2.EncodingType|null} [encodingType] AnalyzeEntitiesRequest encodingType
                         */
    
                        /**
                         * Constructs a new AnalyzeEntitiesRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an AnalyzeEntitiesRequest.
                         * @implements IAnalyzeEntitiesRequest
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitiesRequest=} [properties] Properties to set
                         */
                        function AnalyzeEntitiesRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeEntitiesRequest document.
                         * @member {google.cloud.language.v1beta2.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @instance
                         */
                        AnalyzeEntitiesRequest.prototype.document = null;
    
                        /**
                         * AnalyzeEntitiesRequest encodingType.
                         * @member {google.cloud.language.v1beta2.EncodingType} encodingType
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @instance
                         */
                        AnalyzeEntitiesRequest.prototype.encodingType = 0;
    
                        /**
                         * Creates a new AnalyzeEntitiesRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitiesRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitiesRequest} AnalyzeEntitiesRequest instance
                         */
                        AnalyzeEntitiesRequest.create = function create(properties) {
                            return new AnalyzeEntitiesRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitiesRequest message. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeEntitiesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitiesRequest} message AnalyzeEntitiesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitiesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1beta2.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.encodingType != null && Object.hasOwnProperty.call(message, "encodingType"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitiesRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeEntitiesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitiesRequest} message AnalyzeEntitiesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitiesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeEntitiesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitiesRequest} AnalyzeEntitiesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitiesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnalyzeEntitiesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1beta2.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.encodingType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeEntitiesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitiesRequest} AnalyzeEntitiesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitiesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeEntitiesRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeEntitiesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1beta2.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                switch (message.encodingType) {
                                default:
                                    return "encodingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeEntitiesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitiesRequest} AnalyzeEntitiesRequest
                         */
                        AnalyzeEntitiesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.AnalyzeEntitiesRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.AnalyzeEntitiesRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.AnalyzeEntitiesRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1beta2.Document.fromObject(object.document);
                            }
                            switch (object.encodingType) {
                            default:
                                if (typeof object.encodingType === "number") {
                                    message.encodingType = object.encodingType;
                                    break;
                                }
                                break;
                            case "NONE":
                            case 0:
                                message.encodingType = 0;
                                break;
                            case "UTF8":
                            case 1:
                                message.encodingType = 1;
                                break;
                            case "UTF16":
                            case 2:
                                message.encodingType = 2;
                                break;
                            case "UTF32":
                            case 3:
                                message.encodingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeEntitiesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.AnalyzeEntitiesRequest} message AnalyzeEntitiesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeEntitiesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.encodingType = options.enums === String ? "NONE" : 0;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1beta2.Document.toObject(message.document, options);
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                object.encodingType = options.enums === String ? $root.google.cloud.language.v1beta2.EncodingType[message.encodingType] === undefined ? message.encodingType : $root.google.cloud.language.v1beta2.EncodingType[message.encodingType] : message.encodingType;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeEntitiesRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeEntitiesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeEntitiesRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeEntitiesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.AnalyzeEntitiesRequest";
                        };
    
                        return AnalyzeEntitiesRequest;
                    })();
    
                    v1beta2.AnalyzeEntitiesResponse = (function() {
    
                        /**
                         * Properties of an AnalyzeEntitiesResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IAnalyzeEntitiesResponse
                         * @property {Array.<google.cloud.language.v1beta2.IEntity>|null} [entities] AnalyzeEntitiesResponse entities
                         * @property {string|null} [language] AnalyzeEntitiesResponse language
                         */
    
                        /**
                         * Constructs a new AnalyzeEntitiesResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an AnalyzeEntitiesResponse.
                         * @implements IAnalyzeEntitiesResponse
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitiesResponse=} [properties] Properties to set
                         */
                        function AnalyzeEntitiesResponse(properties) {
                            this.entities = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeEntitiesResponse entities.
                         * @member {Array.<google.cloud.language.v1beta2.IEntity>} entities
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @instance
                         */
                        AnalyzeEntitiesResponse.prototype.entities = $util.emptyArray;
    
                        /**
                         * AnalyzeEntitiesResponse language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @instance
                         */
                        AnalyzeEntitiesResponse.prototype.language = "";
    
                        /**
                         * Creates a new AnalyzeEntitiesResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitiesResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitiesResponse} AnalyzeEntitiesResponse instance
                         */
                        AnalyzeEntitiesResponse.create = function create(properties) {
                            return new AnalyzeEntitiesResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitiesResponse message. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeEntitiesResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitiesResponse} message AnalyzeEntitiesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitiesResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entities != null && message.entities.length)
                                for (var i = 0; i < message.entities.length; ++i)
                                    $root.google.cloud.language.v1beta2.Entity.encode(message.entities[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeEntitiesResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeEntitiesResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeEntitiesResponse} message AnalyzeEntitiesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeEntitiesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeEntitiesResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitiesResponse} AnalyzeEntitiesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitiesResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnalyzeEntitiesResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.entities && message.entities.length))
                                            message.entities = [];
                                        message.entities.push($root.google.cloud.language.v1beta2.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.language = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeEntitiesResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitiesResponse} AnalyzeEntitiesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeEntitiesResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeEntitiesResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeEntitiesResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entities != null && message.hasOwnProperty("entities")) {
                                if (!Array.isArray(message.entities))
                                    return "entities: array expected";
                                for (var i = 0; i < message.entities.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.Entity.verify(message.entities[i]);
                                    if (error)
                                        return "entities." + error;
                                }
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeEntitiesResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.AnalyzeEntitiesResponse} AnalyzeEntitiesResponse
                         */
                        AnalyzeEntitiesResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.AnalyzeEntitiesResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.AnalyzeEntitiesResponse();
                            if (object.entities) {
                                if (!Array.isArray(object.entities))
                                    throw TypeError(".google.cloud.language.v1beta2.AnalyzeEntitiesResponse.entities: array expected");
                                message.entities = [];
                                for (var i = 0; i < object.entities.length; ++i) {
                                    if (typeof object.entities[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.AnalyzeEntitiesResponse.entities: object expected");
                                    message.entities[i] = $root.google.cloud.language.v1beta2.Entity.fromObject(object.entities[i]);
                                }
                            }
                            if (object.language != null)
                                message.language = String(object.language);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeEntitiesResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.AnalyzeEntitiesResponse} message AnalyzeEntitiesResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeEntitiesResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.entities = [];
                            if (options.defaults)
                                object.language = "";
                            if (message.entities && message.entities.length) {
                                object.entities = [];
                                for (var j = 0; j < message.entities.length; ++j)
                                    object.entities[j] = $root.google.cloud.language.v1beta2.Entity.toObject(message.entities[j], options);
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeEntitiesResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeEntitiesResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeEntitiesResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.AnalyzeEntitiesResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeEntitiesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.AnalyzeEntitiesResponse";
                        };
    
                        return AnalyzeEntitiesResponse;
                    })();
    
                    v1beta2.AnalyzeSyntaxRequest = (function() {
    
                        /**
                         * Properties of an AnalyzeSyntaxRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IAnalyzeSyntaxRequest
                         * @property {google.cloud.language.v1beta2.IDocument|null} [document] AnalyzeSyntaxRequest document
                         * @property {google.cloud.language.v1beta2.EncodingType|null} [encodingType] AnalyzeSyntaxRequest encodingType
                         */
    
                        /**
                         * Constructs a new AnalyzeSyntaxRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an AnalyzeSyntaxRequest.
                         * @implements IAnalyzeSyntaxRequest
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IAnalyzeSyntaxRequest=} [properties] Properties to set
                         */
                        function AnalyzeSyntaxRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeSyntaxRequest document.
                         * @member {google.cloud.language.v1beta2.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @instance
                         */
                        AnalyzeSyntaxRequest.prototype.document = null;
    
                        /**
                         * AnalyzeSyntaxRequest encodingType.
                         * @member {google.cloud.language.v1beta2.EncodingType} encodingType
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @instance
                         */
                        AnalyzeSyntaxRequest.prototype.encodingType = 0;
    
                        /**
                         * Creates a new AnalyzeSyntaxRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSyntaxRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.AnalyzeSyntaxRequest} AnalyzeSyntaxRequest instance
                         */
                        AnalyzeSyntaxRequest.create = function create(properties) {
                            return new AnalyzeSyntaxRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeSyntaxRequest message. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeSyntaxRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSyntaxRequest} message AnalyzeSyntaxRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSyntaxRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1beta2.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.encodingType != null && Object.hasOwnProperty.call(message, "encodingType"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeSyntaxRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeSyntaxRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSyntaxRequest} message AnalyzeSyntaxRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSyntaxRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeSyntaxRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.AnalyzeSyntaxRequest} AnalyzeSyntaxRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSyntaxRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnalyzeSyntaxRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1beta2.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.encodingType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeSyntaxRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.AnalyzeSyntaxRequest} AnalyzeSyntaxRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSyntaxRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeSyntaxRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeSyntaxRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1beta2.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                switch (message.encodingType) {
                                default:
                                    return "encodingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeSyntaxRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.AnalyzeSyntaxRequest} AnalyzeSyntaxRequest
                         */
                        AnalyzeSyntaxRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.AnalyzeSyntaxRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.AnalyzeSyntaxRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.AnalyzeSyntaxRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1beta2.Document.fromObject(object.document);
                            }
                            switch (object.encodingType) {
                            default:
                                if (typeof object.encodingType === "number") {
                                    message.encodingType = object.encodingType;
                                    break;
                                }
                                break;
                            case "NONE":
                            case 0:
                                message.encodingType = 0;
                                break;
                            case "UTF8":
                            case 1:
                                message.encodingType = 1;
                                break;
                            case "UTF16":
                            case 2:
                                message.encodingType = 2;
                                break;
                            case "UTF32":
                            case 3:
                                message.encodingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeSyntaxRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.AnalyzeSyntaxRequest} message AnalyzeSyntaxRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeSyntaxRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.encodingType = options.enums === String ? "NONE" : 0;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1beta2.Document.toObject(message.document, options);
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                object.encodingType = options.enums === String ? $root.google.cloud.language.v1beta2.EncodingType[message.encodingType] === undefined ? message.encodingType : $root.google.cloud.language.v1beta2.EncodingType[message.encodingType] : message.encodingType;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeSyntaxRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeSyntaxRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeSyntaxRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeSyntaxRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.AnalyzeSyntaxRequest";
                        };
    
                        return AnalyzeSyntaxRequest;
                    })();
    
                    v1beta2.AnalyzeSyntaxResponse = (function() {
    
                        /**
                         * Properties of an AnalyzeSyntaxResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IAnalyzeSyntaxResponse
                         * @property {Array.<google.cloud.language.v1beta2.ISentence>|null} [sentences] AnalyzeSyntaxResponse sentences
                         * @property {Array.<google.cloud.language.v1beta2.IToken>|null} [tokens] AnalyzeSyntaxResponse tokens
                         * @property {string|null} [language] AnalyzeSyntaxResponse language
                         */
    
                        /**
                         * Constructs a new AnalyzeSyntaxResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an AnalyzeSyntaxResponse.
                         * @implements IAnalyzeSyntaxResponse
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IAnalyzeSyntaxResponse=} [properties] Properties to set
                         */
                        function AnalyzeSyntaxResponse(properties) {
                            this.sentences = [];
                            this.tokens = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnalyzeSyntaxResponse sentences.
                         * @member {Array.<google.cloud.language.v1beta2.ISentence>} sentences
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @instance
                         */
                        AnalyzeSyntaxResponse.prototype.sentences = $util.emptyArray;
    
                        /**
                         * AnalyzeSyntaxResponse tokens.
                         * @member {Array.<google.cloud.language.v1beta2.IToken>} tokens
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @instance
                         */
                        AnalyzeSyntaxResponse.prototype.tokens = $util.emptyArray;
    
                        /**
                         * AnalyzeSyntaxResponse language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @instance
                         */
                        AnalyzeSyntaxResponse.prototype.language = "";
    
                        /**
                         * Creates a new AnalyzeSyntaxResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSyntaxResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.AnalyzeSyntaxResponse} AnalyzeSyntaxResponse instance
                         */
                        AnalyzeSyntaxResponse.create = function create(properties) {
                            return new AnalyzeSyntaxResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnalyzeSyntaxResponse message. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeSyntaxResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSyntaxResponse} message AnalyzeSyntaxResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSyntaxResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.sentences != null && message.sentences.length)
                                for (var i = 0; i < message.sentences.length; ++i)
                                    $root.google.cloud.language.v1beta2.Sentence.encode(message.sentences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.tokens != null && message.tokens.length)
                                for (var i = 0; i < message.tokens.length; ++i)
                                    $root.google.cloud.language.v1beta2.Token.encode(message.tokens[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.language);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnalyzeSyntaxResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnalyzeSyntaxResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnalyzeSyntaxResponse} message AnalyzeSyntaxResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnalyzeSyntaxResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnalyzeSyntaxResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.AnalyzeSyntaxResponse} AnalyzeSyntaxResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSyntaxResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnalyzeSyntaxResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.sentences && message.sentences.length))
                                            message.sentences = [];
                                        message.sentences.push($root.google.cloud.language.v1beta2.Sentence.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        if (!(message.tokens && message.tokens.length))
                                            message.tokens = [];
                                        message.tokens.push($root.google.cloud.language.v1beta2.Token.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.language = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnalyzeSyntaxResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.AnalyzeSyntaxResponse} AnalyzeSyntaxResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnalyzeSyntaxResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnalyzeSyntaxResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnalyzeSyntaxResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.sentences != null && message.hasOwnProperty("sentences")) {
                                if (!Array.isArray(message.sentences))
                                    return "sentences: array expected";
                                for (var i = 0; i < message.sentences.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.Sentence.verify(message.sentences[i]);
                                    if (error)
                                        return "sentences." + error;
                                }
                            }
                            if (message.tokens != null && message.hasOwnProperty("tokens")) {
                                if (!Array.isArray(message.tokens))
                                    return "tokens: array expected";
                                for (var i = 0; i < message.tokens.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.Token.verify(message.tokens[i]);
                                    if (error)
                                        return "tokens." + error;
                                }
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnalyzeSyntaxResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.AnalyzeSyntaxResponse} AnalyzeSyntaxResponse
                         */
                        AnalyzeSyntaxResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.AnalyzeSyntaxResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.AnalyzeSyntaxResponse();
                            if (object.sentences) {
                                if (!Array.isArray(object.sentences))
                                    throw TypeError(".google.cloud.language.v1beta2.AnalyzeSyntaxResponse.sentences: array expected");
                                message.sentences = [];
                                for (var i = 0; i < object.sentences.length; ++i) {
                                    if (typeof object.sentences[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.AnalyzeSyntaxResponse.sentences: object expected");
                                    message.sentences[i] = $root.google.cloud.language.v1beta2.Sentence.fromObject(object.sentences[i]);
                                }
                            }
                            if (object.tokens) {
                                if (!Array.isArray(object.tokens))
                                    throw TypeError(".google.cloud.language.v1beta2.AnalyzeSyntaxResponse.tokens: array expected");
                                message.tokens = [];
                                for (var i = 0; i < object.tokens.length; ++i) {
                                    if (typeof object.tokens[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.AnalyzeSyntaxResponse.tokens: object expected");
                                    message.tokens[i] = $root.google.cloud.language.v1beta2.Token.fromObject(object.tokens[i]);
                                }
                            }
                            if (object.language != null)
                                message.language = String(object.language);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnalyzeSyntaxResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.AnalyzeSyntaxResponse} message AnalyzeSyntaxResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnalyzeSyntaxResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.sentences = [];
                                object.tokens = [];
                            }
                            if (options.defaults)
                                object.language = "";
                            if (message.sentences && message.sentences.length) {
                                object.sentences = [];
                                for (var j = 0; j < message.sentences.length; ++j)
                                    object.sentences[j] = $root.google.cloud.language.v1beta2.Sentence.toObject(message.sentences[j], options);
                            }
                            if (message.tokens && message.tokens.length) {
                                object.tokens = [];
                                for (var j = 0; j < message.tokens.length; ++j)
                                    object.tokens[j] = $root.google.cloud.language.v1beta2.Token.toObject(message.tokens[j], options);
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            return object;
                        };
    
                        /**
                         * Converts this AnalyzeSyntaxResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnalyzeSyntaxResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnalyzeSyntaxResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.AnalyzeSyntaxResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnalyzeSyntaxResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.AnalyzeSyntaxResponse";
                        };
    
                        return AnalyzeSyntaxResponse;
                    })();
    
                    v1beta2.ClassifyTextRequest = (function() {
    
                        /**
                         * Properties of a ClassifyTextRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IClassifyTextRequest
                         * @property {google.cloud.language.v1beta2.IDocument|null} [document] ClassifyTextRequest document
                         * @property {google.cloud.language.v1beta2.IClassificationModelOptions|null} [classificationModelOptions] ClassifyTextRequest classificationModelOptions
                         */
    
                        /**
                         * Constructs a new ClassifyTextRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a ClassifyTextRequest.
                         * @implements IClassifyTextRequest
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IClassifyTextRequest=} [properties] Properties to set
                         */
                        function ClassifyTextRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClassifyTextRequest document.
                         * @member {google.cloud.language.v1beta2.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @instance
                         */
                        ClassifyTextRequest.prototype.document = null;
    
                        /**
                         * ClassifyTextRequest classificationModelOptions.
                         * @member {google.cloud.language.v1beta2.IClassificationModelOptions|null|undefined} classificationModelOptions
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @instance
                         */
                        ClassifyTextRequest.prototype.classificationModelOptions = null;
    
                        /**
                         * Creates a new ClassifyTextRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassifyTextRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.ClassifyTextRequest} ClassifyTextRequest instance
                         */
                        ClassifyTextRequest.create = function create(properties) {
                            return new ClassifyTextRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ClassifyTextRequest message. Does not implicitly {@link google.cloud.language.v1beta2.ClassifyTextRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassifyTextRequest} message ClassifyTextRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassifyTextRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1beta2.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.classificationModelOptions != null && Object.hasOwnProperty.call(message, "classificationModelOptions"))
                                $root.google.cloud.language.v1beta2.ClassificationModelOptions.encode(message.classificationModelOptions, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClassifyTextRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.ClassifyTextRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassifyTextRequest} message ClassifyTextRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassifyTextRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClassifyTextRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.ClassifyTextRequest} ClassifyTextRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassifyTextRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.ClassifyTextRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1beta2.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.classificationModelOptions = $root.google.cloud.language.v1beta2.ClassificationModelOptions.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClassifyTextRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.ClassifyTextRequest} ClassifyTextRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassifyTextRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClassifyTextRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClassifyTextRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1beta2.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.classificationModelOptions != null && message.hasOwnProperty("classificationModelOptions")) {
                                var error = $root.google.cloud.language.v1beta2.ClassificationModelOptions.verify(message.classificationModelOptions);
                                if (error)
                                    return "classificationModelOptions." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ClassifyTextRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.ClassifyTextRequest} ClassifyTextRequest
                         */
                        ClassifyTextRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.ClassifyTextRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.ClassifyTextRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.ClassifyTextRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1beta2.Document.fromObject(object.document);
                            }
                            if (object.classificationModelOptions != null) {
                                if (typeof object.classificationModelOptions !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.ClassifyTextRequest.classificationModelOptions: object expected");
                                message.classificationModelOptions = $root.google.cloud.language.v1beta2.ClassificationModelOptions.fromObject(object.classificationModelOptions);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClassifyTextRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.ClassifyTextRequest} message ClassifyTextRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClassifyTextRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.classificationModelOptions = null;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1beta2.Document.toObject(message.document, options);
                            if (message.classificationModelOptions != null && message.hasOwnProperty("classificationModelOptions"))
                                object.classificationModelOptions = $root.google.cloud.language.v1beta2.ClassificationModelOptions.toObject(message.classificationModelOptions, options);
                            return object;
                        };
    
                        /**
                         * Converts this ClassifyTextRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClassifyTextRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ClassifyTextRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.ClassifyTextRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ClassifyTextRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.ClassifyTextRequest";
                        };
    
                        return ClassifyTextRequest;
                    })();
    
                    v1beta2.ClassifyTextResponse = (function() {
    
                        /**
                         * Properties of a ClassifyTextResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IClassifyTextResponse
                         * @property {Array.<google.cloud.language.v1beta2.IClassificationCategory>|null} [categories] ClassifyTextResponse categories
                         */
    
                        /**
                         * Constructs a new ClassifyTextResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents a ClassifyTextResponse.
                         * @implements IClassifyTextResponse
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IClassifyTextResponse=} [properties] Properties to set
                         */
                        function ClassifyTextResponse(properties) {
                            this.categories = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClassifyTextResponse categories.
                         * @member {Array.<google.cloud.language.v1beta2.IClassificationCategory>} categories
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @instance
                         */
                        ClassifyTextResponse.prototype.categories = $util.emptyArray;
    
                        /**
                         * Creates a new ClassifyTextResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassifyTextResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.ClassifyTextResponse} ClassifyTextResponse instance
                         */
                        ClassifyTextResponse.create = function create(properties) {
                            return new ClassifyTextResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ClassifyTextResponse message. Does not implicitly {@link google.cloud.language.v1beta2.ClassifyTextResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassifyTextResponse} message ClassifyTextResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassifyTextResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.categories != null && message.categories.length)
                                for (var i = 0; i < message.categories.length; ++i)
                                    $root.google.cloud.language.v1beta2.ClassificationCategory.encode(message.categories[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClassifyTextResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.ClassifyTextResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IClassifyTextResponse} message ClassifyTextResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassifyTextResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClassifyTextResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.ClassifyTextResponse} ClassifyTextResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassifyTextResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.ClassifyTextResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.categories && message.categories.length))
                                            message.categories = [];
                                        message.categories.push($root.google.cloud.language.v1beta2.ClassificationCategory.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClassifyTextResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.ClassifyTextResponse} ClassifyTextResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassifyTextResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClassifyTextResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClassifyTextResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.categories != null && message.hasOwnProperty("categories")) {
                                if (!Array.isArray(message.categories))
                                    return "categories: array expected";
                                for (var i = 0; i < message.categories.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.ClassificationCategory.verify(message.categories[i]);
                                    if (error)
                                        return "categories." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ClassifyTextResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.ClassifyTextResponse} ClassifyTextResponse
                         */
                        ClassifyTextResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.ClassifyTextResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.ClassifyTextResponse();
                            if (object.categories) {
                                if (!Array.isArray(object.categories))
                                    throw TypeError(".google.cloud.language.v1beta2.ClassifyTextResponse.categories: array expected");
                                message.categories = [];
                                for (var i = 0; i < object.categories.length; ++i) {
                                    if (typeof object.categories[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.ClassifyTextResponse.categories: object expected");
                                    message.categories[i] = $root.google.cloud.language.v1beta2.ClassificationCategory.fromObject(object.categories[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClassifyTextResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.ClassifyTextResponse} message ClassifyTextResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClassifyTextResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.categories = [];
                            if (message.categories && message.categories.length) {
                                object.categories = [];
                                for (var j = 0; j < message.categories.length; ++j)
                                    object.categories[j] = $root.google.cloud.language.v1beta2.ClassificationCategory.toObject(message.categories[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ClassifyTextResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClassifyTextResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ClassifyTextResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.ClassifyTextResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ClassifyTextResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.ClassifyTextResponse";
                        };
    
                        return ClassifyTextResponse;
                    })();
    
                    v1beta2.AnnotateTextRequest = (function() {
    
                        /**
                         * Properties of an AnnotateTextRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IAnnotateTextRequest
                         * @property {google.cloud.language.v1beta2.IDocument|null} [document] AnnotateTextRequest document
                         * @property {google.cloud.language.v1beta2.AnnotateTextRequest.IFeatures|null} [features] AnnotateTextRequest features
                         * @property {google.cloud.language.v1beta2.EncodingType|null} [encodingType] AnnotateTextRequest encodingType
                         */
    
                        /**
                         * Constructs a new AnnotateTextRequest.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an AnnotateTextRequest.
                         * @implements IAnnotateTextRequest
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IAnnotateTextRequest=} [properties] Properties to set
                         */
                        function AnnotateTextRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateTextRequest document.
                         * @member {google.cloud.language.v1beta2.IDocument|null|undefined} document
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @instance
                         */
                        AnnotateTextRequest.prototype.document = null;
    
                        /**
                         * AnnotateTextRequest features.
                         * @member {google.cloud.language.v1beta2.AnnotateTextRequest.IFeatures|null|undefined} features
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @instance
                         */
                        AnnotateTextRequest.prototype.features = null;
    
                        /**
                         * AnnotateTextRequest encodingType.
                         * @member {google.cloud.language.v1beta2.EncodingType} encodingType
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @instance
                         */
                        AnnotateTextRequest.prototype.encodingType = 0;
    
                        /**
                         * Creates a new AnnotateTextRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnnotateTextRequest=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.AnnotateTextRequest} AnnotateTextRequest instance
                         */
                        AnnotateTextRequest.create = function create(properties) {
                            return new AnnotateTextRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateTextRequest message. Does not implicitly {@link google.cloud.language.v1beta2.AnnotateTextRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnnotateTextRequest} message AnnotateTextRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateTextRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.document != null && Object.hasOwnProperty.call(message, "document"))
                                $root.google.cloud.language.v1beta2.Document.encode(message.document, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                                $root.google.cloud.language.v1beta2.AnnotateTextRequest.Features.encode(message.features, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.encodingType != null && Object.hasOwnProperty.call(message, "encodingType"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.encodingType);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateTextRequest message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnnotateTextRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnnotateTextRequest} message AnnotateTextRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateTextRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateTextRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.AnnotateTextRequest} AnnotateTextRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateTextRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnnotateTextRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.document = $root.google.cloud.language.v1beta2.Document.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.features = $root.google.cloud.language.v1beta2.AnnotateTextRequest.Features.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.encodingType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateTextRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.AnnotateTextRequest} AnnotateTextRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateTextRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateTextRequest message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateTextRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.document != null && message.hasOwnProperty("document")) {
                                var error = $root.google.cloud.language.v1beta2.Document.verify(message.document);
                                if (error)
                                    return "document." + error;
                            }
                            if (message.features != null && message.hasOwnProperty("features")) {
                                var error = $root.google.cloud.language.v1beta2.AnnotateTextRequest.Features.verify(message.features);
                                if (error)
                                    return "features." + error;
                            }
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                switch (message.encodingType) {
                                default:
                                    return "encodingType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateTextRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.AnnotateTextRequest} AnnotateTextRequest
                         */
                        AnnotateTextRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.AnnotateTextRequest)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.AnnotateTextRequest();
                            if (object.document != null) {
                                if (typeof object.document !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.AnnotateTextRequest.document: object expected");
                                message.document = $root.google.cloud.language.v1beta2.Document.fromObject(object.document);
                            }
                            if (object.features != null) {
                                if (typeof object.features !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.AnnotateTextRequest.features: object expected");
                                message.features = $root.google.cloud.language.v1beta2.AnnotateTextRequest.Features.fromObject(object.features);
                            }
                            switch (object.encodingType) {
                            default:
                                if (typeof object.encodingType === "number") {
                                    message.encodingType = object.encodingType;
                                    break;
                                }
                                break;
                            case "NONE":
                            case 0:
                                message.encodingType = 0;
                                break;
                            case "UTF8":
                            case 1:
                                message.encodingType = 1;
                                break;
                            case "UTF16":
                            case 2:
                                message.encodingType = 2;
                                break;
                            case "UTF32":
                            case 3:
                                message.encodingType = 3;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateTextRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @static
                         * @param {google.cloud.language.v1beta2.AnnotateTextRequest} message AnnotateTextRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateTextRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.document = null;
                                object.features = null;
                                object.encodingType = options.enums === String ? "NONE" : 0;
                            }
                            if (message.document != null && message.hasOwnProperty("document"))
                                object.document = $root.google.cloud.language.v1beta2.Document.toObject(message.document, options);
                            if (message.features != null && message.hasOwnProperty("features"))
                                object.features = $root.google.cloud.language.v1beta2.AnnotateTextRequest.Features.toObject(message.features, options);
                            if (message.encodingType != null && message.hasOwnProperty("encodingType"))
                                object.encodingType = options.enums === String ? $root.google.cloud.language.v1beta2.EncodingType[message.encodingType] === undefined ? message.encodingType : $root.google.cloud.language.v1beta2.EncodingType[message.encodingType] : message.encodingType;
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateTextRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateTextRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateTextRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateTextRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.AnnotateTextRequest";
                        };
    
                        AnnotateTextRequest.Features = (function() {
    
                            /**
                             * Properties of a Features.
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                             * @interface IFeatures
                             * @property {boolean|null} [extractSyntax] Features extractSyntax
                             * @property {boolean|null} [extractEntities] Features extractEntities
                             * @property {boolean|null} [extractDocumentSentiment] Features extractDocumentSentiment
                             * @property {boolean|null} [extractEntitySentiment] Features extractEntitySentiment
                             * @property {boolean|null} [classifyText] Features classifyText
                             * @property {google.cloud.language.v1beta2.IClassificationModelOptions|null} [classificationModelOptions] Features classificationModelOptions
                             */
    
                            /**
                             * Constructs a new Features.
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest
                             * @classdesc Represents a Features.
                             * @implements IFeatures
                             * @constructor
                             * @param {google.cloud.language.v1beta2.AnnotateTextRequest.IFeatures=} [properties] Properties to set
                             */
                            function Features(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Features extractSyntax.
                             * @member {boolean} extractSyntax
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.extractSyntax = false;
    
                            /**
                             * Features extractEntities.
                             * @member {boolean} extractEntities
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.extractEntities = false;
    
                            /**
                             * Features extractDocumentSentiment.
                             * @member {boolean} extractDocumentSentiment
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.extractDocumentSentiment = false;
    
                            /**
                             * Features extractEntitySentiment.
                             * @member {boolean} extractEntitySentiment
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.extractEntitySentiment = false;
    
                            /**
                             * Features classifyText.
                             * @member {boolean} classifyText
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.classifyText = false;
    
                            /**
                             * Features classificationModelOptions.
                             * @member {google.cloud.language.v1beta2.IClassificationModelOptions|null|undefined} classificationModelOptions
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @instance
                             */
                            Features.prototype.classificationModelOptions = null;
    
                            /**
                             * Creates a new Features instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @static
                             * @param {google.cloud.language.v1beta2.AnnotateTextRequest.IFeatures=} [properties] Properties to set
                             * @returns {google.cloud.language.v1beta2.AnnotateTextRequest.Features} Features instance
                             */
                            Features.create = function create(properties) {
                                return new Features(properties);
                            };
    
                            /**
                             * Encodes the specified Features message. Does not implicitly {@link google.cloud.language.v1beta2.AnnotateTextRequest.Features.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @static
                             * @param {google.cloud.language.v1beta2.AnnotateTextRequest.IFeatures} message Features message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Features.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.extractSyntax != null && Object.hasOwnProperty.call(message, "extractSyntax"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.extractSyntax);
                                if (message.extractEntities != null && Object.hasOwnProperty.call(message, "extractEntities"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.extractEntities);
                                if (message.extractDocumentSentiment != null && Object.hasOwnProperty.call(message, "extractDocumentSentiment"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.extractDocumentSentiment);
                                if (message.extractEntitySentiment != null && Object.hasOwnProperty.call(message, "extractEntitySentiment"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.extractEntitySentiment);
                                if (message.classifyText != null && Object.hasOwnProperty.call(message, "classifyText"))
                                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.classifyText);
                                if (message.classificationModelOptions != null && Object.hasOwnProperty.call(message, "classificationModelOptions"))
                                    $root.google.cloud.language.v1beta2.ClassificationModelOptions.encode(message.classificationModelOptions, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Features message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnnotateTextRequest.Features.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @static
                             * @param {google.cloud.language.v1beta2.AnnotateTextRequest.IFeatures} message Features message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Features.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Features message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.language.v1beta2.AnnotateTextRequest.Features} Features
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Features.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnnotateTextRequest.Features();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.extractSyntax = reader.bool();
                                            break;
                                        }
                                    case 2: {
                                            message.extractEntities = reader.bool();
                                            break;
                                        }
                                    case 3: {
                                            message.extractDocumentSentiment = reader.bool();
                                            break;
                                        }
                                    case 4: {
                                            message.extractEntitySentiment = reader.bool();
                                            break;
                                        }
                                    case 6: {
                                            message.classifyText = reader.bool();
                                            break;
                                        }
                                    case 10: {
                                            message.classificationModelOptions = $root.google.cloud.language.v1beta2.ClassificationModelOptions.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Features message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.language.v1beta2.AnnotateTextRequest.Features} Features
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Features.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Features message.
                             * @function verify
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Features.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.extractSyntax != null && message.hasOwnProperty("extractSyntax"))
                                    if (typeof message.extractSyntax !== "boolean")
                                        return "extractSyntax: boolean expected";
                                if (message.extractEntities != null && message.hasOwnProperty("extractEntities"))
                                    if (typeof message.extractEntities !== "boolean")
                                        return "extractEntities: boolean expected";
                                if (message.extractDocumentSentiment != null && message.hasOwnProperty("extractDocumentSentiment"))
                                    if (typeof message.extractDocumentSentiment !== "boolean")
                                        return "extractDocumentSentiment: boolean expected";
                                if (message.extractEntitySentiment != null && message.hasOwnProperty("extractEntitySentiment"))
                                    if (typeof message.extractEntitySentiment !== "boolean")
                                        return "extractEntitySentiment: boolean expected";
                                if (message.classifyText != null && message.hasOwnProperty("classifyText"))
                                    if (typeof message.classifyText !== "boolean")
                                        return "classifyText: boolean expected";
                                if (message.classificationModelOptions != null && message.hasOwnProperty("classificationModelOptions")) {
                                    var error = $root.google.cloud.language.v1beta2.ClassificationModelOptions.verify(message.classificationModelOptions);
                                    if (error)
                                        return "classificationModelOptions." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Features message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.language.v1beta2.AnnotateTextRequest.Features} Features
                             */
                            Features.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.language.v1beta2.AnnotateTextRequest.Features)
                                    return object;
                                var message = new $root.google.cloud.language.v1beta2.AnnotateTextRequest.Features();
                                if (object.extractSyntax != null)
                                    message.extractSyntax = Boolean(object.extractSyntax);
                                if (object.extractEntities != null)
                                    message.extractEntities = Boolean(object.extractEntities);
                                if (object.extractDocumentSentiment != null)
                                    message.extractDocumentSentiment = Boolean(object.extractDocumentSentiment);
                                if (object.extractEntitySentiment != null)
                                    message.extractEntitySentiment = Boolean(object.extractEntitySentiment);
                                if (object.classifyText != null)
                                    message.classifyText = Boolean(object.classifyText);
                                if (object.classificationModelOptions != null) {
                                    if (typeof object.classificationModelOptions !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.AnnotateTextRequest.Features.classificationModelOptions: object expected");
                                    message.classificationModelOptions = $root.google.cloud.language.v1beta2.ClassificationModelOptions.fromObject(object.classificationModelOptions);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Features message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @static
                             * @param {google.cloud.language.v1beta2.AnnotateTextRequest.Features} message Features
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Features.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.extractSyntax = false;
                                    object.extractEntities = false;
                                    object.extractDocumentSentiment = false;
                                    object.extractEntitySentiment = false;
                                    object.classifyText = false;
                                    object.classificationModelOptions = null;
                                }
                                if (message.extractSyntax != null && message.hasOwnProperty("extractSyntax"))
                                    object.extractSyntax = message.extractSyntax;
                                if (message.extractEntities != null && message.hasOwnProperty("extractEntities"))
                                    object.extractEntities = message.extractEntities;
                                if (message.extractDocumentSentiment != null && message.hasOwnProperty("extractDocumentSentiment"))
                                    object.extractDocumentSentiment = message.extractDocumentSentiment;
                                if (message.extractEntitySentiment != null && message.hasOwnProperty("extractEntitySentiment"))
                                    object.extractEntitySentiment = message.extractEntitySentiment;
                                if (message.classifyText != null && message.hasOwnProperty("classifyText"))
                                    object.classifyText = message.classifyText;
                                if (message.classificationModelOptions != null && message.hasOwnProperty("classificationModelOptions"))
                                    object.classificationModelOptions = $root.google.cloud.language.v1beta2.ClassificationModelOptions.toObject(message.classificationModelOptions, options);
                                return object;
                            };
    
                            /**
                             * Converts this Features to JSON.
                             * @function toJSON
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Features.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Features
                             * @function getTypeUrl
                             * @memberof google.cloud.language.v1beta2.AnnotateTextRequest.Features
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Features.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.language.v1beta2.AnnotateTextRequest.Features";
                            };
    
                            return Features;
                        })();
    
                        return AnnotateTextRequest;
                    })();
    
                    v1beta2.AnnotateTextResponse = (function() {
    
                        /**
                         * Properties of an AnnotateTextResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @interface IAnnotateTextResponse
                         * @property {Array.<google.cloud.language.v1beta2.ISentence>|null} [sentences] AnnotateTextResponse sentences
                         * @property {Array.<google.cloud.language.v1beta2.IToken>|null} [tokens] AnnotateTextResponse tokens
                         * @property {Array.<google.cloud.language.v1beta2.IEntity>|null} [entities] AnnotateTextResponse entities
                         * @property {google.cloud.language.v1beta2.ISentiment|null} [documentSentiment] AnnotateTextResponse documentSentiment
                         * @property {string|null} [language] AnnotateTextResponse language
                         * @property {Array.<google.cloud.language.v1beta2.IClassificationCategory>|null} [categories] AnnotateTextResponse categories
                         */
    
                        /**
                         * Constructs a new AnnotateTextResponse.
                         * @memberof google.cloud.language.v1beta2
                         * @classdesc Represents an AnnotateTextResponse.
                         * @implements IAnnotateTextResponse
                         * @constructor
                         * @param {google.cloud.language.v1beta2.IAnnotateTextResponse=} [properties] Properties to set
                         */
                        function AnnotateTextResponse(properties) {
                            this.sentences = [];
                            this.tokens = [];
                            this.entities = [];
                            this.categories = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateTextResponse sentences.
                         * @member {Array.<google.cloud.language.v1beta2.ISentence>} sentences
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.sentences = $util.emptyArray;
    
                        /**
                         * AnnotateTextResponse tokens.
                         * @member {Array.<google.cloud.language.v1beta2.IToken>} tokens
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.tokens = $util.emptyArray;
    
                        /**
                         * AnnotateTextResponse entities.
                         * @member {Array.<google.cloud.language.v1beta2.IEntity>} entities
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.entities = $util.emptyArray;
    
                        /**
                         * AnnotateTextResponse documentSentiment.
                         * @member {google.cloud.language.v1beta2.ISentiment|null|undefined} documentSentiment
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.documentSentiment = null;
    
                        /**
                         * AnnotateTextResponse language.
                         * @member {string} language
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.language = "";
    
                        /**
                         * AnnotateTextResponse categories.
                         * @member {Array.<google.cloud.language.v1beta2.IClassificationCategory>} categories
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @instance
                         */
                        AnnotateTextResponse.prototype.categories = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateTextResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnnotateTextResponse=} [properties] Properties to set
                         * @returns {google.cloud.language.v1beta2.AnnotateTextResponse} AnnotateTextResponse instance
                         */
                        AnnotateTextResponse.create = function create(properties) {
                            return new AnnotateTextResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateTextResponse message. Does not implicitly {@link google.cloud.language.v1beta2.AnnotateTextResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnnotateTextResponse} message AnnotateTextResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateTextResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.sentences != null && message.sentences.length)
                                for (var i = 0; i < message.sentences.length; ++i)
                                    $root.google.cloud.language.v1beta2.Sentence.encode(message.sentences[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.tokens != null && message.tokens.length)
                                for (var i = 0; i < message.tokens.length; ++i)
                                    $root.google.cloud.language.v1beta2.Token.encode(message.tokens[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.entities != null && message.entities.length)
                                for (var i = 0; i < message.entities.length; ++i)
                                    $root.google.cloud.language.v1beta2.Entity.encode(message.entities[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.documentSentiment != null && Object.hasOwnProperty.call(message, "documentSentiment"))
                                $root.google.cloud.language.v1beta2.Sentiment.encode(message.documentSentiment, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.language);
                            if (message.categories != null && message.categories.length)
                                for (var i = 0; i < message.categories.length; ++i)
                                    $root.google.cloud.language.v1beta2.ClassificationCategory.encode(message.categories[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateTextResponse message, length delimited. Does not implicitly {@link google.cloud.language.v1beta2.AnnotateTextResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.IAnnotateTextResponse} message AnnotateTextResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateTextResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateTextResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.language.v1beta2.AnnotateTextResponse} AnnotateTextResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateTextResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.language.v1beta2.AnnotateTextResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.sentences && message.sentences.length))
                                            message.sentences = [];
                                        message.sentences.push($root.google.cloud.language.v1beta2.Sentence.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        if (!(message.tokens && message.tokens.length))
                                            message.tokens = [];
                                        message.tokens.push($root.google.cloud.language.v1beta2.Token.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.entities && message.entities.length))
                                            message.entities = [];
                                        message.entities.push($root.google.cloud.language.v1beta2.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        message.documentSentiment = $root.google.cloud.language.v1beta2.Sentiment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.language = reader.string();
                                        break;
                                    }
                                case 6: {
                                        if (!(message.categories && message.categories.length))
                                            message.categories = [];
                                        message.categories.push($root.google.cloud.language.v1beta2.ClassificationCategory.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateTextResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.language.v1beta2.AnnotateTextResponse} AnnotateTextResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateTextResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateTextResponse message.
                         * @function verify
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateTextResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.sentences != null && message.hasOwnProperty("sentences")) {
                                if (!Array.isArray(message.sentences))
                                    return "sentences: array expected";
                                for (var i = 0; i < message.sentences.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.Sentence.verify(message.sentences[i]);
                                    if (error)
                                        return "sentences." + error;
                                }
                            }
                            if (message.tokens != null && message.hasOwnProperty("tokens")) {
                                if (!Array.isArray(message.tokens))
                                    return "tokens: array expected";
                                for (var i = 0; i < message.tokens.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.Token.verify(message.tokens[i]);
                                    if (error)
                                        return "tokens." + error;
                                }
                            }
                            if (message.entities != null && message.hasOwnProperty("entities")) {
                                if (!Array.isArray(message.entities))
                                    return "entities: array expected";
                                for (var i = 0; i < message.entities.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.Entity.verify(message.entities[i]);
                                    if (error)
                                        return "entities." + error;
                                }
                            }
                            if (message.documentSentiment != null && message.hasOwnProperty("documentSentiment")) {
                                var error = $root.google.cloud.language.v1beta2.Sentiment.verify(message.documentSentiment);
                                if (error)
                                    return "documentSentiment." + error;
                            }
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            if (message.categories != null && message.hasOwnProperty("categories")) {
                                if (!Array.isArray(message.categories))
                                    return "categories: array expected";
                                for (var i = 0; i < message.categories.length; ++i) {
                                    var error = $root.google.cloud.language.v1beta2.ClassificationCategory.verify(message.categories[i]);
                                    if (error)
                                        return "categories." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateTextResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.language.v1beta2.AnnotateTextResponse} AnnotateTextResponse
                         */
                        AnnotateTextResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.language.v1beta2.AnnotateTextResponse)
                                return object;
                            var message = new $root.google.cloud.language.v1beta2.AnnotateTextResponse();
                            if (object.sentences) {
                                if (!Array.isArray(object.sentences))
                                    throw TypeError(".google.cloud.language.v1beta2.AnnotateTextResponse.sentences: array expected");
                                message.sentences = [];
                                for (var i = 0; i < object.sentences.length; ++i) {
                                    if (typeof object.sentences[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.AnnotateTextResponse.sentences: object expected");
                                    message.sentences[i] = $root.google.cloud.language.v1beta2.Sentence.fromObject(object.sentences[i]);
                                }
                            }
                            if (object.tokens) {
                                if (!Array.isArray(object.tokens))
                                    throw TypeError(".google.cloud.language.v1beta2.AnnotateTextResponse.tokens: array expected");
                                message.tokens = [];
                                for (var i = 0; i < object.tokens.length; ++i) {
                                    if (typeof object.tokens[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.AnnotateTextResponse.tokens: object expected");
                                    message.tokens[i] = $root.google.cloud.language.v1beta2.Token.fromObject(object.tokens[i]);
                                }
                            }
                            if (object.entities) {
                                if (!Array.isArray(object.entities))
                                    throw TypeError(".google.cloud.language.v1beta2.AnnotateTextResponse.entities: array expected");
                                message.entities = [];
                                for (var i = 0; i < object.entities.length; ++i) {
                                    if (typeof object.entities[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.AnnotateTextResponse.entities: object expected");
                                    message.entities[i] = $root.google.cloud.language.v1beta2.Entity.fromObject(object.entities[i]);
                                }
                            }
                            if (object.documentSentiment != null) {
                                if (typeof object.documentSentiment !== "object")
                                    throw TypeError(".google.cloud.language.v1beta2.AnnotateTextResponse.documentSentiment: object expected");
                                message.documentSentiment = $root.google.cloud.language.v1beta2.Sentiment.fromObject(object.documentSentiment);
                            }
                            if (object.language != null)
                                message.language = String(object.language);
                            if (object.categories) {
                                if (!Array.isArray(object.categories))
                                    throw TypeError(".google.cloud.language.v1beta2.AnnotateTextResponse.categories: array expected");
                                message.categories = [];
                                for (var i = 0; i < object.categories.length; ++i) {
                                    if (typeof object.categories[i] !== "object")
                                        throw TypeError(".google.cloud.language.v1beta2.AnnotateTextResponse.categories: object expected");
                                    message.categories[i] = $root.google.cloud.language.v1beta2.ClassificationCategory.fromObject(object.categories[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateTextResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @static
                         * @param {google.cloud.language.v1beta2.AnnotateTextResponse} message AnnotateTextResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateTextResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.sentences = [];
                                object.tokens = [];
                                object.entities = [];
                                object.categories = [];
                            }
                            if (options.defaults) {
                                object.documentSentiment = null;
                                object.language = "";
                            }
                            if (message.sentences && message.sentences.length) {
                                object.sentences = [];
                                for (var j = 0; j < message.sentences.length; ++j)
                                    object.sentences[j] = $root.google.cloud.language.v1beta2.Sentence.toObject(message.sentences[j], options);
                            }
                            if (message.tokens && message.tokens.length) {
                                object.tokens = [];
                                for (var j = 0; j < message.tokens.length; ++j)
                                    object.tokens[j] = $root.google.cloud.language.v1beta2.Token.toObject(message.tokens[j], options);
                            }
                            if (message.entities && message.entities.length) {
                                object.entities = [];
                                for (var j = 0; j < message.entities.length; ++j)
                                    object.entities[j] = $root.google.cloud.language.v1beta2.Entity.toObject(message.entities[j], options);
                            }
                            if (message.documentSentiment != null && message.hasOwnProperty("documentSentiment"))
                                object.documentSentiment = $root.google.cloud.language.v1beta2.Sentiment.toObject(message.documentSentiment, options);
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            if (message.categories && message.categories.length) {
                                object.categories = [];
                                for (var j = 0; j < message.categories.length; ++j)
                                    object.categories[j] = $root.google.cloud.language.v1beta2.ClassificationCategory.toObject(message.categories[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateTextResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateTextResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateTextResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.language.v1beta2.AnnotateTextResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateTextResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.language.v1beta2.AnnotateTextResponse";
                        };
    
                        return AnnotateTextResponse;
                    })();
    
                    return v1beta2;
                })();
    
                return language;
            })();
    
            return cloud;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.rules && message.rules.length))
                                    message.rules = [];
                                message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.fullyDecodeReservedExpansion = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Http
                 * @function getTypeUrl
                 * @memberof google.api.Http
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Http";
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.get = reader.string();
                                break;
                            }
                        case 3: {
                                message.put = reader.string();
                                break;
                            }
                        case 4: {
                                message.post = reader.string();
                                break;
                            }
                        case 5: {
                                message["delete"] = reader.string();
                                break;
                            }
                        case 6: {
                                message.patch = reader.string();
                                break;
                            }
                        case 8: {
                                message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.body = reader.string();
                                break;
                            }
                        case 12: {
                                message.responseBody = reader.string();
                                break;
                            }
                        case 11: {
                                if (!(message.additionalBindings && message.additionalBindings.length))
                                    message.additionalBindings = [];
                                message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for HttpRule
                 * @function getTypeUrl
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.HttpRule";
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.kind = reader.string();
                                break;
                            }
                        case 2: {
                                message.path = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CustomHttpPattern
                 * @function getTypeUrl
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CustomHttpPattern";
                };
    
                return CustomHttpPattern;
            })();
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             * @property {number} NON_EMPTY_DEFAULT=7 NON_EMPTY_DEFAULT value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
                return values;
            })();
    
            return api;
        })();
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.file && message.file.length))
                                    message.file = [];
                                message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 * @property {string|null} [edition] FileDescriptorProto edition
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * FileDescriptorProto edition.
                 * @member {string} edition
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.edition = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.edition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.dependency && message.dependency.length))
                                    message.dependency = [];
                                message.dependency.push(reader.string());
                                break;
                            }
                        case 10: {
                                if (!(message.publicDependency && message.publicDependency.length))
                                    message.publicDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.publicDependency.push(reader.int32());
                                } else
                                    message.publicDependency.push(reader.int32());
                                break;
                            }
                        case 11: {
                                if (!(message.weakDependency && message.weakDependency.length))
                                    message.weakDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.weakDependency.push(reader.int32());
                                } else
                                    message.weakDependency.push(reader.int32());
                                break;
                            }
                        case 4: {
                                if (!(message.messageType && message.messageType.length))
                                    message.messageType = [];
                                message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.syntax = reader.string();
                                break;
                            }
                        case 13: {
                                message.edition = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        if (!$util.isString(message.edition))
                            return "edition: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    if (object.edition != null)
                        message.edition = String(object.edition);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                        object.edition = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = message.edition;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.field && message.field.length))
                                    message.field = [];
                                message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.nestedType && message.nestedType.length))
                                    message.nestedType = [];
                                message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.extensionRange && message.extensionRange.length))
                                    message.extensionRange = [];
                                message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                if (!(message.oneofDecl && message.oneofDecl.length))
                                    message.oneofDecl = [];
                                message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 10: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto";
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ExtensionRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ExtensionRangeOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.number = reader.int32();
                                break;
                            }
                        case 4: {
                                message.label = reader.int32();
                                break;
                            }
                        case 5: {
                                message.type = reader.int32();
                                break;
                            }
                        case 6: {
                                message.typeName = reader.string();
                                break;
                            }
                        case 2: {
                                message.extendee = reader.string();
                                break;
                            }
                        case 7: {
                                message.defaultValue = reader.string();
                                break;
                            }
                        case 9: {
                                message.oneofIndex = reader.int32();
                                break;
                            }
                        case 10: {
                                message.jsonName = reader.string();
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.proto3Optional = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    default:
                        if (typeof object.label === "number") {
                            message.label = object.label;
                            break;
                        }
                        break;
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.value && message.value.length))
                                    message.value = [];
                                message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EnumReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.method && message.method.length))
                                    message.method = [];
                                message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.inputType = reader.string();
                                break;
                            }
                        case 3: {
                                message.outputType = reader.string();
                                break;
                            }
                        case 4: {
                                message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.clientStreaming = reader.bool();
                                break;
                            }
                        case 6: {
                                message.serverStreaming = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.javaPackage = reader.string();
                                break;
                            }
                        case 8: {
                                message.javaOuterClassname = reader.string();
                                break;
                            }
                        case 10: {
                                message.javaMultipleFiles = reader.bool();
                                break;
                            }
                        case 20: {
                                message.javaGenerateEqualsAndHash = reader.bool();
                                break;
                            }
                        case 27: {
                                message.javaStringCheckUtf8 = reader.bool();
                                break;
                            }
                        case 9: {
                                message.optimizeFor = reader.int32();
                                break;
                            }
                        case 11: {
                                message.goPackage = reader.string();
                                break;
                            }
                        case 16: {
                                message.ccGenericServices = reader.bool();
                                break;
                            }
                        case 17: {
                                message.javaGenericServices = reader.bool();
                                break;
                            }
                        case 18: {
                                message.pyGenericServices = reader.bool();
                                break;
                            }
                        case 42: {
                                message.phpGenericServices = reader.bool();
                                break;
                            }
                        case 23: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 31: {
                                message.ccEnableArenas = reader.bool();
                                break;
                            }
                        case 36: {
                                message.objcClassPrefix = reader.string();
                                break;
                            }
                        case 37: {
                                message.csharpNamespace = reader.string();
                                break;
                            }
                        case 39: {
                                message.swiftPrefix = reader.string();
                                break;
                            }
                        case 40: {
                                message.phpClassPrefix = reader.string();
                                break;
                            }
                        case 41: {
                                message.phpNamespace = reader.string();
                                break;
                            }
                        case 44: {
                                message.phpMetadataNamespace = reader.string();
                                break;
                            }
                        case 45: {
                                message.rubyPackage = reader.string();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    default:
                        if (typeof object.optimizeFor === "number") {
                            message.optimizeFor = object.optimizeFor;
                            break;
                        }
                        break;
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileOptions";
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageSetWireFormat = reader.bool();
                                break;
                            }
                        case 2: {
                                message.noStandardDescriptorAccessor = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 7: {
                                message.mapEntry = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MessageOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MessageOptions";
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ctype = reader.int32();
                                break;
                            }
                        case 2: {
                                message.packed = reader.bool();
                                break;
                            }
                        case 6: {
                                message.jstype = reader.int32();
                                break;
                            }
                        case 5: {
                                message.lazy = reader.bool();
                                break;
                            }
                        case 15: {
                                message.unverifiedLazy = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 10: {
                                message.weak = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1052: {
                                if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                    message[".google.api.fieldBehavior"] = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message[".google.api.fieldBehavior"].push(reader.int32());
                                } else
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    default:
                        if (typeof object.ctype === "number") {
                            message.ctype = object.ctype;
                            break;
                        }
                        break;
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    default:
                        if (typeof object.jstype === "number") {
                            message.jstype = object.jstype;
                            break;
                        }
                        break;
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                                if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                                    message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                                    break;
                                }
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            case "NON_EMPTY_DEFAULT":
                            case 7:
                                message[".google.api.fieldBehavior"][i] = 7;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === undefined ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions";
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofOptions";
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.allowAlias = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumOptions";
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1049: {
                                message[".google.api.defaultHost"] = reader.string();
                                break;
                            }
                        case 1050: {
                                message[".google.api.oauthScopes"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceOptions";
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 34: {
                                message.idempotencyLevel = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 72295728: {
                                message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                                break;
                            }
                        case 1051: {
                                if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                    message[".google.api.methodSignature"] = [];
                                message[".google.api.methodSignature"].push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    default:
                        if (typeof object.idempotencyLevel === "number") {
                            message.idempotencyLevel = object.idempotencyLevel;
                            break;
                        }
                        break;
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodOptions";
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.name && message.name.length))
                                    message.name = [];
                                message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.identifierValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.positiveIntValue = reader.uint64();
                                break;
                            }
                        case 5: {
                                message.negativeIntValue = reader.int64();
                                break;
                            }
                        case 6: {
                                message.doubleValue = reader.double();
                                break;
                            }
                        case 7: {
                                message.stringValue = reader.bytes();
                                break;
                            }
                        case 8: {
                                message.aggregateValue = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length >= 0)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UninterpretedOption
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.namePart = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.isExtension = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NamePart
                     * @function getTypeUrl
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    if (!(message.span && message.span.length))
                                        message.span = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.span.push(reader.int32());
                                    } else
                                        message.span.push(reader.int32());
                                    break;
                                }
                            case 3: {
                                    message.leadingComments = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.trailingComments = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                        message.leadingDetachedComments = [];
                                    message.leadingDetachedComments.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.annotation && message.annotation.length))
                                    message.annotation = [];
                                message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GeneratedCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Annotation semantic.
                     * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.semantic = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    message.sourceFile = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.begin = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 5: {
                                    message.semantic = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            switch (message.semantic) {
                            default:
                                return "semantic: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        switch (object.semantic) {
                        default:
                            if (typeof object.semantic === "number") {
                                message.semantic = object.semantic;
                                break;
                            }
                            break;
                        case "NONE":
                        case 0:
                            message.semantic = 0;
                            break;
                        case "SET":
                        case 1:
                            message.semantic = 1;
                            break;
                        case "ALIAS":
                        case 2:
                            message.semantic = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                            object.semantic = options.enums === String ? "NONE" : 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                    };
    
                    /**
                     * Semantic enum.
                     * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} SET=1 SET value
                     * @property {number} ALIAS=2 ALIAS value
                     */
                    Annotation.Semantic = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "SET"] = 1;
                        values[valuesById[2] = "ALIAS"] = 2;
                        return values;
                    })();
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();

    return $root;
});
