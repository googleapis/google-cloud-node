// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/dlp_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './dlp_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The Cloud Data Loss Prevention (DLP) API is a service that allows clients
 *  to detect the presence of Personally Identifiable Information (PII) and other
 *  privacy-sensitive data in user-supplied, unstructured data streams, like text
 *  blocks or images.
 *  The service also includes methods for sensitive data redaction and
 *  scheduling of data scans on Google Cloud Platform based data sets.
 *
 *  To learn more about concepts and find how-to guides see
 *  https://cloud.google.com/dlp/docs/.
 * @class
 * @memberof v2
 */
export class DlpServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  dlpServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DlpServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DlpServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DlpServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      findingPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/findings/{finding}'
      ),
      organizationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}'
      ),
      organizationDeidentifyTemplatePathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/deidentifyTemplates/{deidentify_template}'
        ),
      organizationInspectTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/inspectTemplates/{inspect_template}'
      ),
      organizationLocationDeidentifyTemplatePathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/locations/{location}/deidentifyTemplates/{deidentify_template}'
        ),
      organizationLocationInspectTemplatePathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/locations/{location}/inspectTemplates/{inspect_template}'
        ),
      organizationLocationStoredInfoTypePathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/locations/{location}/storedInfoTypes/{stored_info_type}'
        ),
      organizationStoredInfoTypePathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/storedInfoTypes/{stored_info_type}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectDeidentifyTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/deidentifyTemplates/{deidentify_template}'
      ),
      projectDlpContentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/dlpContent'
      ),
      projectDlpJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/dlpJobs/{dlp_job}'
      ),
      projectInspectTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/inspectTemplates/{inspect_template}'
      ),
      projectJobTriggerPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/jobTriggers/{job_trigger}'
      ),
      projectLocationDeidentifyTemplatePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}'
        ),
      projectLocationDlpJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dlpJobs/{dlp_job}'
      ),
      projectLocationInspectTemplatePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/inspectTemplates/{inspect_template}'
        ),
      projectLocationJobTriggerPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/jobTriggers/{job_trigger}'
      ),
      projectLocationStoredInfoTypePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/storedInfoTypes/{stored_info_type}'
        ),
      projectStoredInfoTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/storedInfoTypes/{stored_info_type}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listInspectTemplates: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'inspectTemplates'
      ),
      listDeidentifyTemplates: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'deidentifyTemplates'
      ),
      listJobTriggers: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'jobTriggers'
      ),
      listDlpJobs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'jobs'
      ),
      listStoredInfoTypes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'storedInfoTypes'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.privacy.dlp.v2.DlpService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.dlpServiceStub) {
      return this.dlpServiceStub;
    }

    // Put together the "service stub" for
    // google.privacy.dlp.v2.DlpService.
    this.dlpServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.privacy.dlp.v2.DlpService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.privacy.dlp.v2.DlpService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const dlpServiceStubMethods = [
      'inspectContent',
      'redactImage',
      'deidentifyContent',
      'reidentifyContent',
      'listInfoTypes',
      'createInspectTemplate',
      'updateInspectTemplate',
      'getInspectTemplate',
      'listInspectTemplates',
      'deleteInspectTemplate',
      'createDeidentifyTemplate',
      'updateDeidentifyTemplate',
      'getDeidentifyTemplate',
      'listDeidentifyTemplates',
      'deleteDeidentifyTemplate',
      'createJobTrigger',
      'updateJobTrigger',
      'hybridInspectJobTrigger',
      'getJobTrigger',
      'listJobTriggers',
      'deleteJobTrigger',
      'activateJobTrigger',
      'createDlpJob',
      'listDlpJobs',
      'getDlpJob',
      'deleteDlpJob',
      'cancelDlpJob',
      'createStoredInfoType',
      'updateStoredInfoType',
      'getStoredInfoType',
      'listStoredInfoTypes',
      'deleteStoredInfoType',
      'hybridInspectDlpJob',
      'finishDlpJob',
    ];
    for (const methodName of dlpServiceStubMethods) {
      const callPromise = this.dlpServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.dlpServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'dlp.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'dlp.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Finds potentially sensitive info in content.
   * This method has limits on input size, processing time, and output size.
   *
   * When no InfoTypes or CustomInfoTypes are specified in this request, the
   * system will automatically choose what detectors to run. By default this may
   * be all types, but may change over time as detectors are updated.
   *
   * For how to guides, see https://cloud.google.com/dlp/docs/inspecting-images
   * and https://cloud.google.com/dlp/docs/inspecting-text,
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {google.privacy.dlp.v2.InspectConfig} request.inspectConfig
   *   Configuration for the inspector. What specified here will override
   *   the template referenced by the inspect_template_name argument.
   * @param {google.privacy.dlp.v2.ContentItem} request.item
   *   The item to inspect.
   * @param {string} request.inspectTemplateName
   *   Template to use. Any configuration directly specified in
   *   inspect_config will override those set in the template. Singular fields
   *   that are set in this request will replace their corresponding fields in the
   *   template. Repeated fields are appended. Singular sub-messages and groups
   *   are recursively merged.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [InspectContentResponse]{@link google.privacy.dlp.v2.InspectContentResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.inspect_content.js</caption>
   * region_tag:dlp_v2_generated_DlpService_InspectContent_async
   */
  inspectContent(
    request?: protos.google.privacy.dlp.v2.IInspectContentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IInspectContentResponse,
      protos.google.privacy.dlp.v2.IInspectContentRequest | undefined,
      {} | undefined
    ]
  >;
  inspectContent(
    request: protos.google.privacy.dlp.v2.IInspectContentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IInspectContentResponse,
      protos.google.privacy.dlp.v2.IInspectContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  inspectContent(
    request: protos.google.privacy.dlp.v2.IInspectContentRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IInspectContentResponse,
      protos.google.privacy.dlp.v2.IInspectContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  inspectContent(
    request?: protos.google.privacy.dlp.v2.IInspectContentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IInspectContentResponse,
          | protos.google.privacy.dlp.v2.IInspectContentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IInspectContentResponse,
      protos.google.privacy.dlp.v2.IInspectContentRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IInspectContentResponse,
      protos.google.privacy.dlp.v2.IInspectContentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.inspectContent(request, options, callback);
  }
  /**
   * Redacts potentially sensitive info from an image.
   * This method has limits on input size, processing time, and output size.
   * See https://cloud.google.com/dlp/docs/redacting-sensitive-data-images to
   * learn more.
   *
   * When no InfoTypes or CustomInfoTypes are specified in this request, the
   * system will automatically choose what detectors to run. By default this may
   * be all types, but may change over time as detectors are updated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {google.privacy.dlp.v2.InspectConfig} request.inspectConfig
   *   Configuration for the inspector.
   * @param {number[]} request.imageRedactionConfigs
   *   The configuration for specifying what content to redact from images.
   * @param {boolean} request.includeFindings
   *   Whether the response should include findings along with the redacted
   *   image.
   * @param {google.privacy.dlp.v2.ByteContentItem} request.byteItem
   *   The content must be PNG, JPEG, SVG or BMP.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [RedactImageResponse]{@link google.privacy.dlp.v2.RedactImageResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.redact_image.js</caption>
   * region_tag:dlp_v2_generated_DlpService_RedactImage_async
   */
  redactImage(
    request?: protos.google.privacy.dlp.v2.IRedactImageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IRedactImageResponse,
      protos.google.privacy.dlp.v2.IRedactImageRequest | undefined,
      {} | undefined
    ]
  >;
  redactImage(
    request: protos.google.privacy.dlp.v2.IRedactImageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IRedactImageResponse,
      protos.google.privacy.dlp.v2.IRedactImageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  redactImage(
    request: protos.google.privacy.dlp.v2.IRedactImageRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IRedactImageResponse,
      protos.google.privacy.dlp.v2.IRedactImageRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  redactImage(
    request?: protos.google.privacy.dlp.v2.IRedactImageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IRedactImageResponse,
          protos.google.privacy.dlp.v2.IRedactImageRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IRedactImageResponse,
      protos.google.privacy.dlp.v2.IRedactImageRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IRedactImageResponse,
      protos.google.privacy.dlp.v2.IRedactImageRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.redactImage(request, options, callback);
  }
  /**
   * De-identifies potentially sensitive info from a ContentItem.
   * This method has limits on input size and output size.
   * See https://cloud.google.com/dlp/docs/deidentify-sensitive-data to
   * learn more.
   *
   * When no InfoTypes or CustomInfoTypes are specified in this request, the
   * system will automatically choose what detectors to run. By default this may
   * be all types, but may change over time as detectors are updated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {google.privacy.dlp.v2.DeidentifyConfig} request.deidentifyConfig
   *   Configuration for the de-identification of the content item.
   *   Items specified here will override the template referenced by the
   *   deidentify_template_name argument.
   * @param {google.privacy.dlp.v2.InspectConfig} request.inspectConfig
   *   Configuration for the inspector.
   *   Items specified here will override the template referenced by the
   *   inspect_template_name argument.
   * @param {google.privacy.dlp.v2.ContentItem} request.item
   *   The item to de-identify. Will be treated as text.
   *
   *   This value must be of type
   *   {@link google.privacy.dlp.v2.Table|Table} if your
   *   {@link google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_config|deidentify_config}
   *   is a
   *   {@link google.privacy.dlp.v2.RecordTransformations|RecordTransformations}
   *   object.
   * @param {string} request.inspectTemplateName
   *   Template to use. Any configuration directly specified in
   *   inspect_config will override those set in the template. Singular fields
   *   that are set in this request will replace their corresponding fields in the
   *   template. Repeated fields are appended. Singular sub-messages and groups
   *   are recursively merged.
   * @param {string} request.deidentifyTemplateName
   *   Template to use. Any configuration directly specified in
   *   deidentify_config will override those set in the template. Singular fields
   *   that are set in this request will replace their corresponding fields in the
   *   template. Repeated fields are appended. Singular sub-messages and groups
   *   are recursively merged.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DeidentifyContentResponse]{@link google.privacy.dlp.v2.DeidentifyContentResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.deidentify_content.js</caption>
   * region_tag:dlp_v2_generated_DlpService_DeidentifyContent_async
   */
  deidentifyContent(
    request?: protos.google.privacy.dlp.v2.IDeidentifyContentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDeidentifyContentResponse,
      protos.google.privacy.dlp.v2.IDeidentifyContentRequest | undefined,
      {} | undefined
    ]
  >;
  deidentifyContent(
    request: protos.google.privacy.dlp.v2.IDeidentifyContentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyContentResponse,
      protos.google.privacy.dlp.v2.IDeidentifyContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deidentifyContent(
    request: protos.google.privacy.dlp.v2.IDeidentifyContentRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyContentResponse,
      protos.google.privacy.dlp.v2.IDeidentifyContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deidentifyContent(
    request?: protos.google.privacy.dlp.v2.IDeidentifyContentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IDeidentifyContentResponse,
          | protos.google.privacy.dlp.v2.IDeidentifyContentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyContentResponse,
      protos.google.privacy.dlp.v2.IDeidentifyContentRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDeidentifyContentResponse,
      protos.google.privacy.dlp.v2.IDeidentifyContentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deidentifyContent(request, options, callback);
  }
  /**
   * Re-identifies content that has been de-identified.
   * See
   * https://cloud.google.com/dlp/docs/pseudonymization#re-identification_in_free_text_code_example
   * to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {google.privacy.dlp.v2.DeidentifyConfig} request.reidentifyConfig
   *   Configuration for the re-identification of the content item.
   *   This field shares the same proto message type that is used for
   *   de-identification, however its usage here is for the reversal of the
   *   previous de-identification. Re-identification is performed by examining
   *   the transformations used to de-identify the items and executing the
   *   reverse. This requires that only reversible transformations
   *   be provided here. The reversible transformations are:
   *
   *    - `CryptoDeterministicConfig`
   *    - `CryptoReplaceFfxFpeConfig`
   * @param {google.privacy.dlp.v2.InspectConfig} request.inspectConfig
   *   Configuration for the inspector.
   * @param {google.privacy.dlp.v2.ContentItem} request.item
   *   The item to re-identify. Will be treated as text.
   * @param {string} request.inspectTemplateName
   *   Template to use. Any configuration directly specified in
   *   `inspect_config` will override those set in the template. Singular fields
   *   that are set in this request will replace their corresponding fields in the
   *   template. Repeated fields are appended. Singular sub-messages and groups
   *   are recursively merged.
   * @param {string} request.reidentifyTemplateName
   *   Template to use. References an instance of `DeidentifyTemplate`.
   *   Any configuration directly specified in `reidentify_config` or
   *   `inspect_config` will override those set in the template. The
   *   `DeidentifyTemplate` used must include only reversible transformations.
   *   Singular fields that are set in this request will replace their
   *   corresponding fields in the template. Repeated fields are appended.
   *   Singular sub-messages and groups are recursively merged.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ReidentifyContentResponse]{@link google.privacy.dlp.v2.ReidentifyContentResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.reidentify_content.js</caption>
   * region_tag:dlp_v2_generated_DlpService_ReidentifyContent_async
   */
  reidentifyContent(
    request?: protos.google.privacy.dlp.v2.IReidentifyContentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IReidentifyContentResponse,
      protos.google.privacy.dlp.v2.IReidentifyContentRequest | undefined,
      {} | undefined
    ]
  >;
  reidentifyContent(
    request: protos.google.privacy.dlp.v2.IReidentifyContentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IReidentifyContentResponse,
      protos.google.privacy.dlp.v2.IReidentifyContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  reidentifyContent(
    request: protos.google.privacy.dlp.v2.IReidentifyContentRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IReidentifyContentResponse,
      protos.google.privacy.dlp.v2.IReidentifyContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  reidentifyContent(
    request?: protos.google.privacy.dlp.v2.IReidentifyContentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IReidentifyContentResponse,
          | protos.google.privacy.dlp.v2.IReidentifyContentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IReidentifyContentResponse,
      protos.google.privacy.dlp.v2.IReidentifyContentRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IReidentifyContentResponse,
      protos.google.privacy.dlp.v2.IReidentifyContentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.reidentifyContent(request, options, callback);
  }
  /**
   * Returns a list of the sensitive information types that DLP API
   * supports. See https://cloud.google.com/dlp/docs/infotypes-reference to
   * learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The parent resource name.
   *
   *   The format of this value is as follows:
   *
   *       locations/<var>LOCATION_ID</var>
   * @param {string} request.languageCode
   *   BCP-47 language code for localized infoType friendly
   *   names. If omitted, or if localized strings are not available,
   *   en-US strings will be returned.
   * @param {string} request.filter
   *   filter to only return infoTypes supported by certain parts of the
   *   API. Defaults to supported_by=INSPECT.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ListInfoTypesResponse]{@link google.privacy.dlp.v2.ListInfoTypesResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.list_info_types.js</caption>
   * region_tag:dlp_v2_generated_DlpService_ListInfoTypes_async
   */
  listInfoTypes(
    request?: protos.google.privacy.dlp.v2.IListInfoTypesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IListInfoTypesResponse,
      protos.google.privacy.dlp.v2.IListInfoTypesRequest | undefined,
      {} | undefined
    ]
  >;
  listInfoTypes(
    request: protos.google.privacy.dlp.v2.IListInfoTypesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IListInfoTypesResponse,
      protos.google.privacy.dlp.v2.IListInfoTypesRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  listInfoTypes(
    request: protos.google.privacy.dlp.v2.IListInfoTypesRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IListInfoTypesResponse,
      protos.google.privacy.dlp.v2.IListInfoTypesRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  listInfoTypes(
    request?: protos.google.privacy.dlp.v2.IListInfoTypesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IListInfoTypesResponse,
          protos.google.privacy.dlp.v2.IListInfoTypesRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IListInfoTypesResponse,
      protos.google.privacy.dlp.v2.IListInfoTypesRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IListInfoTypesResponse,
      protos.google.privacy.dlp.v2.IListInfoTypesRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listInfoTypes(request, options, callback);
  }
  /**
   * Creates an InspectTemplate for reusing frequently used configuration
   * for inspecting content, images, and storage.
   * See https://cloud.google.com/dlp/docs/creating-templates to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *   + Organizations scope, location specified:<br/>
   *     `organizations/`<var>ORG_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Organizations scope, no location specified (defaults to global):<br/>
   *     `organizations/`<var>ORG_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {google.privacy.dlp.v2.InspectTemplate} request.inspectTemplate
   *   Required. The InspectTemplate to create.
   * @param {string} request.templateId
   *   The template id can contain uppercase and lowercase letters,
   *   numbers, and hyphens; that is, it must match the regular
   *   expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   *   characters. Can be empty to allow the system to generate one.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [InspectTemplate]{@link google.privacy.dlp.v2.InspectTemplate}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.create_inspect_template.js</caption>
   * region_tag:dlp_v2_generated_DlpService_CreateInspectTemplate_async
   */
  createInspectTemplate(
    request?: protos.google.privacy.dlp.v2.ICreateInspectTemplateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IInspectTemplate,
      protos.google.privacy.dlp.v2.ICreateInspectTemplateRequest | undefined,
      {} | undefined
    ]
  >;
  createInspectTemplate(
    request: protos.google.privacy.dlp.v2.ICreateInspectTemplateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IInspectTemplate,
      | protos.google.privacy.dlp.v2.ICreateInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createInspectTemplate(
    request: protos.google.privacy.dlp.v2.ICreateInspectTemplateRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IInspectTemplate,
      | protos.google.privacy.dlp.v2.ICreateInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createInspectTemplate(
    request?: protos.google.privacy.dlp.v2.ICreateInspectTemplateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IInspectTemplate,
          | protos.google.privacy.dlp.v2.ICreateInspectTemplateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IInspectTemplate,
      | protos.google.privacy.dlp.v2.ICreateInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IInspectTemplate,
      protos.google.privacy.dlp.v2.ICreateInspectTemplateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createInspectTemplate(request, options, callback);
  }
  /**
   * Updates the InspectTemplate.
   * See https://cloud.google.com/dlp/docs/creating-templates to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of organization and inspectTemplate to be updated, for
   *   example `organizations/433245324/inspectTemplates/432452342` or
   *   projects/project-id/inspectTemplates/432452342.
   * @param {google.privacy.dlp.v2.InspectTemplate} request.inspectTemplate
   *   New InspectTemplate value.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Mask to control which fields get updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [InspectTemplate]{@link google.privacy.dlp.v2.InspectTemplate}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.update_inspect_template.js</caption>
   * region_tag:dlp_v2_generated_DlpService_UpdateInspectTemplate_async
   */
  updateInspectTemplate(
    request?: protos.google.privacy.dlp.v2.IUpdateInspectTemplateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IInspectTemplate,
      protos.google.privacy.dlp.v2.IUpdateInspectTemplateRequest | undefined,
      {} | undefined
    ]
  >;
  updateInspectTemplate(
    request: protos.google.privacy.dlp.v2.IUpdateInspectTemplateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IInspectTemplate,
      | protos.google.privacy.dlp.v2.IUpdateInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateInspectTemplate(
    request: protos.google.privacy.dlp.v2.IUpdateInspectTemplateRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IInspectTemplate,
      | protos.google.privacy.dlp.v2.IUpdateInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateInspectTemplate(
    request?: protos.google.privacy.dlp.v2.IUpdateInspectTemplateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IInspectTemplate,
          | protos.google.privacy.dlp.v2.IUpdateInspectTemplateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IInspectTemplate,
      | protos.google.privacy.dlp.v2.IUpdateInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IInspectTemplate,
      protos.google.privacy.dlp.v2.IUpdateInspectTemplateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateInspectTemplate(request, options, callback);
  }
  /**
   * Gets an InspectTemplate.
   * See https://cloud.google.com/dlp/docs/creating-templates to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the organization and inspectTemplate to be read, for
   *   example `organizations/433245324/inspectTemplates/432452342` or
   *   projects/project-id/inspectTemplates/432452342.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [InspectTemplate]{@link google.privacy.dlp.v2.InspectTemplate}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.get_inspect_template.js</caption>
   * region_tag:dlp_v2_generated_DlpService_GetInspectTemplate_async
   */
  getInspectTemplate(
    request?: protos.google.privacy.dlp.v2.IGetInspectTemplateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IInspectTemplate,
      protos.google.privacy.dlp.v2.IGetInspectTemplateRequest | undefined,
      {} | undefined
    ]
  >;
  getInspectTemplate(
    request: protos.google.privacy.dlp.v2.IGetInspectTemplateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IInspectTemplate,
      | protos.google.privacy.dlp.v2.IGetInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInspectTemplate(
    request: protos.google.privacy.dlp.v2.IGetInspectTemplateRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IInspectTemplate,
      | protos.google.privacy.dlp.v2.IGetInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInspectTemplate(
    request?: protos.google.privacy.dlp.v2.IGetInspectTemplateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IInspectTemplate,
          | protos.google.privacy.dlp.v2.IGetInspectTemplateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IInspectTemplate,
      | protos.google.privacy.dlp.v2.IGetInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IInspectTemplate,
      protos.google.privacy.dlp.v2.IGetInspectTemplateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getInspectTemplate(request, options, callback);
  }
  /**
   * Deletes an InspectTemplate.
   * See https://cloud.google.com/dlp/docs/creating-templates to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the organization and inspectTemplate to be deleted, for
   *   example `organizations/433245324/inspectTemplates/432452342` or
   *   projects/project-id/inspectTemplates/432452342.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.delete_inspect_template.js</caption>
   * region_tag:dlp_v2_generated_DlpService_DeleteInspectTemplate_async
   */
  deleteInspectTemplate(
    request?: protos.google.privacy.dlp.v2.IDeleteInspectTemplateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteInspectTemplateRequest | undefined,
      {} | undefined
    ]
  >;
  deleteInspectTemplate(
    request: protos.google.privacy.dlp.v2.IDeleteInspectTemplateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.privacy.dlp.v2.IDeleteInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteInspectTemplate(
    request: protos.google.privacy.dlp.v2.IDeleteInspectTemplateRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.privacy.dlp.v2.IDeleteInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteInspectTemplate(
    request?: protos.google.privacy.dlp.v2.IDeleteInspectTemplateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.privacy.dlp.v2.IDeleteInspectTemplateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.privacy.dlp.v2.IDeleteInspectTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteInspectTemplateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteInspectTemplate(request, options, callback);
  }
  /**
   * Creates a DeidentifyTemplate for reusing frequently used configuration
   * for de-identifying content, images, and storage.
   * See https://cloud.google.com/dlp/docs/creating-templates-deid to learn
   * more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *   + Organizations scope, location specified:<br/>
   *     `organizations/`<var>ORG_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Organizations scope, no location specified (defaults to global):<br/>
   *     `organizations/`<var>ORG_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {google.privacy.dlp.v2.DeidentifyTemplate} request.deidentifyTemplate
   *   Required. The DeidentifyTemplate to create.
   * @param {string} request.templateId
   *   The template id can contain uppercase and lowercase letters,
   *   numbers, and hyphens; that is, it must match the regular
   *   expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   *   characters. Can be empty to allow the system to generate one.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DeidentifyTemplate]{@link google.privacy.dlp.v2.DeidentifyTemplate}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.create_deidentify_template.js</caption>
   * region_tag:dlp_v2_generated_DlpService_CreateDeidentifyTemplate_async
   */
  createDeidentifyTemplate(
    request?: protos.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      protos.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest | undefined,
      {} | undefined
    ]
  >;
  createDeidentifyTemplate(
    request: protos.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      | protos.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createDeidentifyTemplate(
    request: protos.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      | protos.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createDeidentifyTemplate(
    request?: protos.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IDeidentifyTemplate,
          | protos.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      | protos.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      protos.google.privacy.dlp.v2.ICreateDeidentifyTemplateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createDeidentifyTemplate(
      request,
      options,
      callback
    );
  }
  /**
   * Updates the DeidentifyTemplate.
   * See https://cloud.google.com/dlp/docs/creating-templates-deid to learn
   * more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of organization and deidentify template to be updated, for
   *   example `organizations/433245324/deidentifyTemplates/432452342` or
   *   projects/project-id/deidentifyTemplates/432452342.
   * @param {google.privacy.dlp.v2.DeidentifyTemplate} request.deidentifyTemplate
   *   New DeidentifyTemplate value.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Mask to control which fields get updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DeidentifyTemplate]{@link google.privacy.dlp.v2.DeidentifyTemplate}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.update_deidentify_template.js</caption>
   * region_tag:dlp_v2_generated_DlpService_UpdateDeidentifyTemplate_async
   */
  updateDeidentifyTemplate(
    request?: protos.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      protos.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest | undefined,
      {} | undefined
    ]
  >;
  updateDeidentifyTemplate(
    request: protos.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      | protos.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateDeidentifyTemplate(
    request: protos.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      | protos.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateDeidentifyTemplate(
    request?: protos.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IDeidentifyTemplate,
          | protos.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      | protos.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      protos.google.privacy.dlp.v2.IUpdateDeidentifyTemplateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateDeidentifyTemplate(
      request,
      options,
      callback
    );
  }
  /**
   * Gets a DeidentifyTemplate.
   * See https://cloud.google.com/dlp/docs/creating-templates-deid to learn
   * more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the organization and deidentify template to be read, for
   *   example `organizations/433245324/deidentifyTemplates/432452342` or
   *   projects/project-id/deidentifyTemplates/432452342.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DeidentifyTemplate]{@link google.privacy.dlp.v2.DeidentifyTemplate}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.get_deidentify_template.js</caption>
   * region_tag:dlp_v2_generated_DlpService_GetDeidentifyTemplate_async
   */
  getDeidentifyTemplate(
    request?: protos.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      protos.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest | undefined,
      {} | undefined
    ]
  >;
  getDeidentifyTemplate(
    request: protos.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      | protos.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDeidentifyTemplate(
    request: protos.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      | protos.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDeidentifyTemplate(
    request?: protos.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IDeidentifyTemplate,
          | protos.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      | protos.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDeidentifyTemplate,
      protos.google.privacy.dlp.v2.IGetDeidentifyTemplateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDeidentifyTemplate(request, options, callback);
  }
  /**
   * Deletes a DeidentifyTemplate.
   * See https://cloud.google.com/dlp/docs/creating-templates-deid to learn
   * more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the organization and deidentify template to be deleted,
   *   for example `organizations/433245324/deidentifyTemplates/432452342` or
   *   projects/project-id/deidentifyTemplates/432452342.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.delete_deidentify_template.js</caption>
   * region_tag:dlp_v2_generated_DlpService_DeleteDeidentifyTemplate_async
   */
  deleteDeidentifyTemplate(
    request?: protos.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest | undefined,
      {} | undefined
    ]
  >;
  deleteDeidentifyTemplate(
    request: protos.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDeidentifyTemplate(
    request: protos.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDeidentifyTemplate(
    request?: protos.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteDeidentifyTemplateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteDeidentifyTemplate(
      request,
      options,
      callback
    );
  }
  /**
   * Creates a job trigger to run DLP actions such as scanning storage for
   * sensitive information on a set schedule.
   * See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {google.privacy.dlp.v2.JobTrigger} request.jobTrigger
   *   Required. The JobTrigger to create.
   * @param {string} request.triggerId
   *   The trigger id can contain uppercase and lowercase letters,
   *   numbers, and hyphens; that is, it must match the regular
   *   expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   *   characters. Can be empty to allow the system to generate one.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [JobTrigger]{@link google.privacy.dlp.v2.JobTrigger}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.create_job_trigger.js</caption>
   * region_tag:dlp_v2_generated_DlpService_CreateJobTrigger_async
   */
  createJobTrigger(
    request?: protos.google.privacy.dlp.v2.ICreateJobTriggerRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.ICreateJobTriggerRequest | undefined,
      {} | undefined
    ]
  >;
  createJobTrigger(
    request: protos.google.privacy.dlp.v2.ICreateJobTriggerRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.ICreateJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createJobTrigger(
    request: protos.google.privacy.dlp.v2.ICreateJobTriggerRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.ICreateJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createJobTrigger(
    request?: protos.google.privacy.dlp.v2.ICreateJobTriggerRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IJobTrigger,
          | protos.google.privacy.dlp.v2.ICreateJobTriggerRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.ICreateJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.ICreateJobTriggerRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createJobTrigger(request, options, callback);
  }
  /**
   * Updates a job trigger.
   * See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the project and the triggeredJob, for example
   *   `projects/dlp-test-project/jobTriggers/53234423`.
   * @param {google.privacy.dlp.v2.JobTrigger} request.jobTrigger
   *   New JobTrigger value.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Mask to control which fields get updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [JobTrigger]{@link google.privacy.dlp.v2.JobTrigger}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.update_job_trigger.js</caption>
   * region_tag:dlp_v2_generated_DlpService_UpdateJobTrigger_async
   */
  updateJobTrigger(
    request?: protos.google.privacy.dlp.v2.IUpdateJobTriggerRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.IUpdateJobTriggerRequest | undefined,
      {} | undefined
    ]
  >;
  updateJobTrigger(
    request: protos.google.privacy.dlp.v2.IUpdateJobTriggerRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.IUpdateJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateJobTrigger(
    request: protos.google.privacy.dlp.v2.IUpdateJobTriggerRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.IUpdateJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateJobTrigger(
    request?: protos.google.privacy.dlp.v2.IUpdateJobTriggerRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IJobTrigger,
          | protos.google.privacy.dlp.v2.IUpdateJobTriggerRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.IUpdateJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.IUpdateJobTriggerRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateJobTrigger(request, options, callback);
  }
  /**
   * Inspect hybrid content and store findings to a trigger. The inspection
   * will be processed asynchronously. To review the findings monitor the
   * jobs within the trigger.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the trigger to execute a hybrid inspect on, for example
   *   `projects/dlp-test-project/jobTriggers/53234423`.
   * @param {google.privacy.dlp.v2.HybridContentItem} request.hybridItem
   *   The item to inspect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [HybridInspectResponse]{@link google.privacy.dlp.v2.HybridInspectResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.hybrid_inspect_job_trigger.js</caption>
   * region_tag:dlp_v2_generated_DlpService_HybridInspectJobTrigger_async
   */
  hybridInspectJobTrigger(
    request?: protos.google.privacy.dlp.v2.IHybridInspectJobTriggerRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IHybridInspectResponse,
      protos.google.privacy.dlp.v2.IHybridInspectJobTriggerRequest | undefined,
      {} | undefined
    ]
  >;
  hybridInspectJobTrigger(
    request: protos.google.privacy.dlp.v2.IHybridInspectJobTriggerRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IHybridInspectResponse,
      | protos.google.privacy.dlp.v2.IHybridInspectJobTriggerRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  hybridInspectJobTrigger(
    request: protos.google.privacy.dlp.v2.IHybridInspectJobTriggerRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IHybridInspectResponse,
      | protos.google.privacy.dlp.v2.IHybridInspectJobTriggerRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  hybridInspectJobTrigger(
    request?: protos.google.privacy.dlp.v2.IHybridInspectJobTriggerRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IHybridInspectResponse,
          | protos.google.privacy.dlp.v2.IHybridInspectJobTriggerRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IHybridInspectResponse,
      | protos.google.privacy.dlp.v2.IHybridInspectJobTriggerRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IHybridInspectResponse,
      protos.google.privacy.dlp.v2.IHybridInspectJobTriggerRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.hybridInspectJobTrigger(
      request,
      options,
      callback
    );
  }
  /**
   * Gets a job trigger.
   * See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the project and the triggeredJob, for example
   *   `projects/dlp-test-project/jobTriggers/53234423`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [JobTrigger]{@link google.privacy.dlp.v2.JobTrigger}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.get_job_trigger.js</caption>
   * region_tag:dlp_v2_generated_DlpService_GetJobTrigger_async
   */
  getJobTrigger(
    request?: protos.google.privacy.dlp.v2.IGetJobTriggerRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.IGetJobTriggerRequest | undefined,
      {} | undefined
    ]
  >;
  getJobTrigger(
    request: protos.google.privacy.dlp.v2.IGetJobTriggerRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.IGetJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getJobTrigger(
    request: protos.google.privacy.dlp.v2.IGetJobTriggerRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.IGetJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getJobTrigger(
    request?: protos.google.privacy.dlp.v2.IGetJobTriggerRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IJobTrigger,
          protos.google.privacy.dlp.v2.IGetJobTriggerRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.IGetJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IJobTrigger,
      protos.google.privacy.dlp.v2.IGetJobTriggerRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getJobTrigger(request, options, callback);
  }
  /**
   * Deletes a job trigger.
   * See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the project and the triggeredJob, for example
   *   `projects/dlp-test-project/jobTriggers/53234423`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.delete_job_trigger.js</caption>
   * region_tag:dlp_v2_generated_DlpService_DeleteJobTrigger_async
   */
  deleteJobTrigger(
    request?: protos.google.privacy.dlp.v2.IDeleteJobTriggerRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteJobTriggerRequest | undefined,
      {} | undefined
    ]
  >;
  deleteJobTrigger(
    request: protos.google.privacy.dlp.v2.IDeleteJobTriggerRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteJobTrigger(
    request: protos.google.privacy.dlp.v2.IDeleteJobTriggerRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteJobTrigger(
    request?: protos.google.privacy.dlp.v2.IDeleteJobTriggerRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.privacy.dlp.v2.IDeleteJobTriggerRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteJobTriggerRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteJobTriggerRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteJobTrigger(request, options, callback);
  }
  /**
   * Activate a job trigger. Causes the immediate execute of a trigger
   * instead of waiting on the trigger event to occur.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the trigger to activate, for example
   *   `projects/dlp-test-project/jobTriggers/53234423`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DlpJob]{@link google.privacy.dlp.v2.DlpJob}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.activate_job_trigger.js</caption>
   * region_tag:dlp_v2_generated_DlpService_ActivateJobTrigger_async
   */
  activateJobTrigger(
    request?: protos.google.privacy.dlp.v2.IActivateJobTriggerRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.IActivateJobTriggerRequest | undefined,
      {} | undefined
    ]
  >;
  activateJobTrigger(
    request: protos.google.privacy.dlp.v2.IActivateJobTriggerRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDlpJob,
      | protos.google.privacy.dlp.v2.IActivateJobTriggerRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  activateJobTrigger(
    request: protos.google.privacy.dlp.v2.IActivateJobTriggerRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDlpJob,
      | protos.google.privacy.dlp.v2.IActivateJobTriggerRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  activateJobTrigger(
    request?: protos.google.privacy.dlp.v2.IActivateJobTriggerRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IDlpJob,
          | protos.google.privacy.dlp.v2.IActivateJobTriggerRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IDlpJob,
      | protos.google.privacy.dlp.v2.IActivateJobTriggerRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.IActivateJobTriggerRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.activateJobTrigger(request, options, callback);
  }
  /**
   * Creates a new job to inspect storage or calculate risk metrics.
   * See https://cloud.google.com/dlp/docs/inspecting-storage and
   * https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
   *
   * When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the
   * system will automatically choose what detectors to run. By default this may
   * be all types, but may change over time as detectors are updated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {google.privacy.dlp.v2.InspectJobConfig} request.inspectJob
   *   An inspection job scans a storage repository for InfoTypes.
   * @param {google.privacy.dlp.v2.RiskAnalysisJobConfig} request.riskJob
   *   A risk analysis job calculates re-identification risk metrics for a
   *   BigQuery table.
   * @param {string} request.jobId
   *   The job id can contain uppercase and lowercase letters,
   *   numbers, and hyphens; that is, it must match the regular
   *   expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   *   characters. Can be empty to allow the system to generate one.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DlpJob]{@link google.privacy.dlp.v2.DlpJob}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.create_dlp_job.js</caption>
   * region_tag:dlp_v2_generated_DlpService_CreateDlpJob_async
   */
  createDlpJob(
    request?: protos.google.privacy.dlp.v2.ICreateDlpJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.ICreateDlpJobRequest | undefined,
      {} | undefined
    ]
  >;
  createDlpJob(
    request: protos.google.privacy.dlp.v2.ICreateDlpJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.ICreateDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDlpJob(
    request: protos.google.privacy.dlp.v2.ICreateDlpJobRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.ICreateDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDlpJob(
    request?: protos.google.privacy.dlp.v2.ICreateDlpJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IDlpJob,
          protos.google.privacy.dlp.v2.ICreateDlpJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.ICreateDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.ICreateDlpJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createDlpJob(request, options, callback);
  }
  /**
   * Gets the latest state of a long-running DlpJob.
   * See https://cloud.google.com/dlp/docs/inspecting-storage and
   * https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the DlpJob resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DlpJob]{@link google.privacy.dlp.v2.DlpJob}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.get_dlp_job.js</caption>
   * region_tag:dlp_v2_generated_DlpService_GetDlpJob_async
   */
  getDlpJob(
    request?: protos.google.privacy.dlp.v2.IGetDlpJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.IGetDlpJobRequest | undefined,
      {} | undefined
    ]
  >;
  getDlpJob(
    request: protos.google.privacy.dlp.v2.IGetDlpJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.IGetDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDlpJob(
    request: protos.google.privacy.dlp.v2.IGetDlpJobRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.IGetDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDlpJob(
    request?: protos.google.privacy.dlp.v2.IGetDlpJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IDlpJob,
          protos.google.privacy.dlp.v2.IGetDlpJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.IGetDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDlpJob,
      protos.google.privacy.dlp.v2.IGetDlpJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDlpJob(request, options, callback);
  }
  /**
   * Deletes a long-running DlpJob. This method indicates that the client is
   * no longer interested in the DlpJob result. The job will be canceled if
   * possible.
   * See https://cloud.google.com/dlp/docs/inspecting-storage and
   * https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the DlpJob resource to be deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.delete_dlp_job.js</caption>
   * region_tag:dlp_v2_generated_DlpService_DeleteDlpJob_async
   */
  deleteDlpJob(
    request?: protos.google.privacy.dlp.v2.IDeleteDlpJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteDlpJobRequest | undefined,
      {} | undefined
    ]
  >;
  deleteDlpJob(
    request: protos.google.privacy.dlp.v2.IDeleteDlpJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDlpJob(
    request: protos.google.privacy.dlp.v2.IDeleteDlpJobRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDlpJob(
    request?: protos.google.privacy.dlp.v2.IDeleteDlpJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.privacy.dlp.v2.IDeleteDlpJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteDlpJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteDlpJob(request, options, callback);
  }
  /**
   * Starts asynchronous cancellation on a long-running DlpJob. The server
   * makes a best effort to cancel the DlpJob, but success is not
   * guaranteed.
   * See https://cloud.google.com/dlp/docs/inspecting-storage and
   * https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the DlpJob resource to be cancelled.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.cancel_dlp_job.js</caption>
   * region_tag:dlp_v2_generated_DlpService_CancelDlpJob_async
   */
  cancelDlpJob(
    request?: protos.google.privacy.dlp.v2.ICancelDlpJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.ICancelDlpJobRequest | undefined,
      {} | undefined
    ]
  >;
  cancelDlpJob(
    request: protos.google.privacy.dlp.v2.ICancelDlpJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.ICancelDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  cancelDlpJob(
    request: protos.google.privacy.dlp.v2.ICancelDlpJobRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.ICancelDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  cancelDlpJob(
    request?: protos.google.privacy.dlp.v2.ICancelDlpJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.privacy.dlp.v2.ICancelDlpJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.ICancelDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.ICancelDlpJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.cancelDlpJob(request, options, callback);
  }
  /**
   * Creates a pre-built stored infoType to be used for inspection.
   * See https://cloud.google.com/dlp/docs/creating-stored-infotypes to
   * learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *   + Organizations scope, location specified:<br/>
   *     `organizations/`<var>ORG_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Organizations scope, no location specified (defaults to global):<br/>
   *     `organizations/`<var>ORG_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {google.privacy.dlp.v2.StoredInfoTypeConfig} request.config
   *   Required. Configuration of the storedInfoType to create.
   * @param {string} request.storedInfoTypeId
   *   The storedInfoType ID can contain uppercase and lowercase letters,
   *   numbers, and hyphens; that is, it must match the regular
   *   expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   *   characters. Can be empty to allow the system to generate one.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [StoredInfoType]{@link google.privacy.dlp.v2.StoredInfoType}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.create_stored_info_type.js</caption>
   * region_tag:dlp_v2_generated_DlpService_CreateStoredInfoType_async
   */
  createStoredInfoType(
    request?: protos.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IStoredInfoType,
      protos.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest | undefined,
      {} | undefined
    ]
  >;
  createStoredInfoType(
    request: protos.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IStoredInfoType,
      | protos.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createStoredInfoType(
    request: protos.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IStoredInfoType,
      | protos.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createStoredInfoType(
    request?: protos.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IStoredInfoType,
          | protos.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IStoredInfoType,
      | protos.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IStoredInfoType,
      protos.google.privacy.dlp.v2.ICreateStoredInfoTypeRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createStoredInfoType(request, options, callback);
  }
  /**
   * Updates the stored infoType by creating a new version. The existing version
   * will continue to be used until the new version is ready.
   * See https://cloud.google.com/dlp/docs/creating-stored-infotypes to
   * learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of organization and storedInfoType to be updated, for
   *   example `organizations/433245324/storedInfoTypes/432452342` or
   *   projects/project-id/storedInfoTypes/432452342.
   * @param {google.privacy.dlp.v2.StoredInfoTypeConfig} request.config
   *   Updated configuration for the storedInfoType. If not provided, a new
   *   version of the storedInfoType will be created with the existing
   *   configuration.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Mask to control which fields get updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [StoredInfoType]{@link google.privacy.dlp.v2.StoredInfoType}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.update_stored_info_type.js</caption>
   * region_tag:dlp_v2_generated_DlpService_UpdateStoredInfoType_async
   */
  updateStoredInfoType(
    request?: protos.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IStoredInfoType,
      protos.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest | undefined,
      {} | undefined
    ]
  >;
  updateStoredInfoType(
    request: protos.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IStoredInfoType,
      | protos.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateStoredInfoType(
    request: protos.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IStoredInfoType,
      | protos.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateStoredInfoType(
    request?: protos.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IStoredInfoType,
          | protos.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IStoredInfoType,
      | protos.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IStoredInfoType,
      protos.google.privacy.dlp.v2.IUpdateStoredInfoTypeRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateStoredInfoType(request, options, callback);
  }
  /**
   * Gets a stored infoType.
   * See https://cloud.google.com/dlp/docs/creating-stored-infotypes to
   * learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the organization and storedInfoType to be read, for
   *   example `organizations/433245324/storedInfoTypes/432452342` or
   *   projects/project-id/storedInfoTypes/432452342.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [StoredInfoType]{@link google.privacy.dlp.v2.StoredInfoType}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.get_stored_info_type.js</caption>
   * region_tag:dlp_v2_generated_DlpService_GetStoredInfoType_async
   */
  getStoredInfoType(
    request?: protos.google.privacy.dlp.v2.IGetStoredInfoTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IStoredInfoType,
      protos.google.privacy.dlp.v2.IGetStoredInfoTypeRequest | undefined,
      {} | undefined
    ]
  >;
  getStoredInfoType(
    request: protos.google.privacy.dlp.v2.IGetStoredInfoTypeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IStoredInfoType,
      protos.google.privacy.dlp.v2.IGetStoredInfoTypeRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getStoredInfoType(
    request: protos.google.privacy.dlp.v2.IGetStoredInfoTypeRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IStoredInfoType,
      protos.google.privacy.dlp.v2.IGetStoredInfoTypeRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getStoredInfoType(
    request?: protos.google.privacy.dlp.v2.IGetStoredInfoTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IStoredInfoType,
          | protos.google.privacy.dlp.v2.IGetStoredInfoTypeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IStoredInfoType,
      protos.google.privacy.dlp.v2.IGetStoredInfoTypeRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IStoredInfoType,
      protos.google.privacy.dlp.v2.IGetStoredInfoTypeRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getStoredInfoType(request, options, callback);
  }
  /**
   * Deletes a stored infoType.
   * See https://cloud.google.com/dlp/docs/creating-stored-infotypes to
   * learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the organization and storedInfoType to be deleted, for
   *   example `organizations/433245324/storedInfoTypes/432452342` or
   *   projects/project-id/storedInfoTypes/432452342.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.delete_stored_info_type.js</caption>
   * region_tag:dlp_v2_generated_DlpService_DeleteStoredInfoType_async
   */
  deleteStoredInfoType(
    request?: protos.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest | undefined,
      {} | undefined
    ]
  >;
  deleteStoredInfoType(
    request: protos.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteStoredInfoType(
    request: protos.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteStoredInfoType(
    request?: protos.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IDeleteStoredInfoTypeRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteStoredInfoType(request, options, callback);
  }
  /**
   * Inspect hybrid content and store findings to a job.
   * To review the findings, inspect the job. Inspection will occur
   * asynchronously.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the job to execute a hybrid inspect on, for example
   *   `projects/dlp-test-project/dlpJob/53234423`.
   * @param {google.privacy.dlp.v2.HybridContentItem} request.hybridItem
   *   The item to inspect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [HybridInspectResponse]{@link google.privacy.dlp.v2.HybridInspectResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.hybrid_inspect_dlp_job.js</caption>
   * region_tag:dlp_v2_generated_DlpService_HybridInspectDlpJob_async
   */
  hybridInspectDlpJob(
    request?: protos.google.privacy.dlp.v2.IHybridInspectDlpJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IHybridInspectResponse,
      protos.google.privacy.dlp.v2.IHybridInspectDlpJobRequest | undefined,
      {} | undefined
    ]
  >;
  hybridInspectDlpJob(
    request: protos.google.privacy.dlp.v2.IHybridInspectDlpJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.privacy.dlp.v2.IHybridInspectResponse,
      | protos.google.privacy.dlp.v2.IHybridInspectDlpJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  hybridInspectDlpJob(
    request: protos.google.privacy.dlp.v2.IHybridInspectDlpJobRequest,
    callback: Callback<
      protos.google.privacy.dlp.v2.IHybridInspectResponse,
      | protos.google.privacy.dlp.v2.IHybridInspectDlpJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  hybridInspectDlpJob(
    request?: protos.google.privacy.dlp.v2.IHybridInspectDlpJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.privacy.dlp.v2.IHybridInspectResponse,
          | protos.google.privacy.dlp.v2.IHybridInspectDlpJobRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.privacy.dlp.v2.IHybridInspectResponse,
      | protos.google.privacy.dlp.v2.IHybridInspectDlpJobRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IHybridInspectResponse,
      protos.google.privacy.dlp.v2.IHybridInspectDlpJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.hybridInspectDlpJob(request, options, callback);
  }
  /**
   * Finish a running hybrid DlpJob. Triggers the finalization steps and running
   * of any enabled actions that have not yet run.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the DlpJob resource to be cancelled.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.finish_dlp_job.js</caption>
   * region_tag:dlp_v2_generated_DlpService_FinishDlpJob_async
   */
  finishDlpJob(
    request?: protos.google.privacy.dlp.v2.IFinishDlpJobRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IFinishDlpJobRequest | undefined,
      {} | undefined
    ]
  >;
  finishDlpJob(
    request: protos.google.privacy.dlp.v2.IFinishDlpJobRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IFinishDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  finishDlpJob(
    request: protos.google.privacy.dlp.v2.IFinishDlpJobRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IFinishDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  finishDlpJob(
    request?: protos.google.privacy.dlp.v2.IFinishDlpJobRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.privacy.dlp.v2.IFinishDlpJobRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IFinishDlpJobRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.privacy.dlp.v2.IFinishDlpJobRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.finishDlpJob(request, options, callback);
  }

  /**
   * Lists InspectTemplates.
   * See https://cloud.google.com/dlp/docs/creating-templates to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *   + Organizations scope, location specified:<br/>
   *     `organizations/`<var>ORG_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Organizations scope, no location specified (defaults to global):<br/>
   *     `organizations/`<var>ORG_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to `ListInspectTemplates`.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by the server. If zero server returns
   *   a page of max size 100.
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc,update_time, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the template was created.
   *   - `update_time`: corresponds to the time the template was last updated.
   *   - `name`: corresponds to the template's name.
   *   - `display_name`: corresponds to the template's display name.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [InspectTemplate]{@link google.privacy.dlp.v2.InspectTemplate}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listInspectTemplatesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listInspectTemplates(
    request?: protos.google.privacy.dlp.v2.IListInspectTemplatesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IInspectTemplate[],
      protos.google.privacy.dlp.v2.IListInspectTemplatesRequest | null,
      protos.google.privacy.dlp.v2.IListInspectTemplatesResponse
    ]
  >;
  listInspectTemplates(
    request: protos.google.privacy.dlp.v2.IListInspectTemplatesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.privacy.dlp.v2.IListInspectTemplatesRequest,
      | protos.google.privacy.dlp.v2.IListInspectTemplatesResponse
      | null
      | undefined,
      protos.google.privacy.dlp.v2.IInspectTemplate
    >
  ): void;
  listInspectTemplates(
    request: protos.google.privacy.dlp.v2.IListInspectTemplatesRequest,
    callback: PaginationCallback<
      protos.google.privacy.dlp.v2.IListInspectTemplatesRequest,
      | protos.google.privacy.dlp.v2.IListInspectTemplatesResponse
      | null
      | undefined,
      protos.google.privacy.dlp.v2.IInspectTemplate
    >
  ): void;
  listInspectTemplates(
    request?: protos.google.privacy.dlp.v2.IListInspectTemplatesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.privacy.dlp.v2.IListInspectTemplatesRequest,
          | protos.google.privacy.dlp.v2.IListInspectTemplatesResponse
          | null
          | undefined,
          protos.google.privacy.dlp.v2.IInspectTemplate
        >,
    callback?: PaginationCallback<
      protos.google.privacy.dlp.v2.IListInspectTemplatesRequest,
      | protos.google.privacy.dlp.v2.IListInspectTemplatesResponse
      | null
      | undefined,
      protos.google.privacy.dlp.v2.IInspectTemplate
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IInspectTemplate[],
      protos.google.privacy.dlp.v2.IListInspectTemplatesRequest | null,
      protos.google.privacy.dlp.v2.IListInspectTemplatesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listInspectTemplates(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *   + Organizations scope, location specified:<br/>
   *     `organizations/`<var>ORG_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Organizations scope, no location specified (defaults to global):<br/>
   *     `organizations/`<var>ORG_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to `ListInspectTemplates`.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by the server. If zero server returns
   *   a page of max size 100.
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc,update_time, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the template was created.
   *   - `update_time`: corresponds to the time the template was last updated.
   *   - `name`: corresponds to the template's name.
   *   - `display_name`: corresponds to the template's display name.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [InspectTemplate]{@link google.privacy.dlp.v2.InspectTemplate} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listInspectTemplatesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listInspectTemplatesStream(
    request?: protos.google.privacy.dlp.v2.IListInspectTemplatesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInspectTemplates'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInspectTemplates.createStream(
      this.innerApiCalls.listInspectTemplates as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listInspectTemplates`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *   + Organizations scope, location specified:<br/>
   *     `organizations/`<var>ORG_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Organizations scope, no location specified (defaults to global):<br/>
   *     `organizations/`<var>ORG_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to `ListInspectTemplates`.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by the server. If zero server returns
   *   a page of max size 100.
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc,update_time, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the template was created.
   *   - `update_time`: corresponds to the time the template was last updated.
   *   - `name`: corresponds to the template's name.
   *   - `display_name`: corresponds to the template's display name.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [InspectTemplate]{@link google.privacy.dlp.v2.InspectTemplate}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.list_inspect_templates.js</caption>
   * region_tag:dlp_v2_generated_DlpService_ListInspectTemplates_async
   */
  listInspectTemplatesAsync(
    request?: protos.google.privacy.dlp.v2.IListInspectTemplatesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.privacy.dlp.v2.IInspectTemplate> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInspectTemplates'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInspectTemplates.asyncIterate(
      this.innerApiCalls['listInspectTemplates'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.privacy.dlp.v2.IInspectTemplate>;
  }
  /**
   * Lists DeidentifyTemplates.
   * See https://cloud.google.com/dlp/docs/creating-templates-deid to learn
   * more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *   + Organizations scope, location specified:<br/>
   *     `organizations/`<var>ORG_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Organizations scope, no location specified (defaults to global):<br/>
   *     `organizations/`<var>ORG_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to `ListDeidentifyTemplates`.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by the server. If zero server returns
   *   a page of max size 100.
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc,update_time, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the template was created.
   *   - `update_time`: corresponds to the time the template was last updated.
   *   - `name`: corresponds to the template's name.
   *   - `display_name`: corresponds to the template's display name.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [DeidentifyTemplate]{@link google.privacy.dlp.v2.DeidentifyTemplate}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDeidentifyTemplatesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDeidentifyTemplates(
    request?: protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDeidentifyTemplate[],
      protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest | null,
      protos.google.privacy.dlp.v2.IListDeidentifyTemplatesResponse
    ]
  >;
  listDeidentifyTemplates(
    request: protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest,
      | protos.google.privacy.dlp.v2.IListDeidentifyTemplatesResponse
      | null
      | undefined,
      protos.google.privacy.dlp.v2.IDeidentifyTemplate
    >
  ): void;
  listDeidentifyTemplates(
    request: protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest,
    callback: PaginationCallback<
      protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest,
      | protos.google.privacy.dlp.v2.IListDeidentifyTemplatesResponse
      | null
      | undefined,
      protos.google.privacy.dlp.v2.IDeidentifyTemplate
    >
  ): void;
  listDeidentifyTemplates(
    request?: protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest,
          | protos.google.privacy.dlp.v2.IListDeidentifyTemplatesResponse
          | null
          | undefined,
          protos.google.privacy.dlp.v2.IDeidentifyTemplate
        >,
    callback?: PaginationCallback<
      protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest,
      | protos.google.privacy.dlp.v2.IListDeidentifyTemplatesResponse
      | null
      | undefined,
      protos.google.privacy.dlp.v2.IDeidentifyTemplate
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDeidentifyTemplate[],
      protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest | null,
      protos.google.privacy.dlp.v2.IListDeidentifyTemplatesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDeidentifyTemplates(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *   + Organizations scope, location specified:<br/>
   *     `organizations/`<var>ORG_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Organizations scope, no location specified (defaults to global):<br/>
   *     `organizations/`<var>ORG_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to `ListDeidentifyTemplates`.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by the server. If zero server returns
   *   a page of max size 100.
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc,update_time, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the template was created.
   *   - `update_time`: corresponds to the time the template was last updated.
   *   - `name`: corresponds to the template's name.
   *   - `display_name`: corresponds to the template's display name.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [DeidentifyTemplate]{@link google.privacy.dlp.v2.DeidentifyTemplate} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDeidentifyTemplatesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDeidentifyTemplatesStream(
    request?: protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDeidentifyTemplates'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeidentifyTemplates.createStream(
      this.innerApiCalls.listDeidentifyTemplates as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDeidentifyTemplates`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *   + Organizations scope, location specified:<br/>
   *     `organizations/`<var>ORG_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Organizations scope, no location specified (defaults to global):<br/>
   *     `organizations/`<var>ORG_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to `ListDeidentifyTemplates`.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by the server. If zero server returns
   *   a page of max size 100.
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc,update_time, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the template was created.
   *   - `update_time`: corresponds to the time the template was last updated.
   *   - `name`: corresponds to the template's name.
   *   - `display_name`: corresponds to the template's display name.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [DeidentifyTemplate]{@link google.privacy.dlp.v2.DeidentifyTemplate}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.list_deidentify_templates.js</caption>
   * region_tag:dlp_v2_generated_DlpService_ListDeidentifyTemplates_async
   */
  listDeidentifyTemplatesAsync(
    request?: protos.google.privacy.dlp.v2.IListDeidentifyTemplatesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.privacy.dlp.v2.IDeidentifyTemplate> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDeidentifyTemplates'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeidentifyTemplates.asyncIterate(
      this.innerApiCalls['listDeidentifyTemplates'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.privacy.dlp.v2.IDeidentifyTemplate>;
  }
  /**
   * Lists job triggers.
   * See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to ListJobTriggers. `order_by` field must not
   *   change for subsequent calls.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by a server.
   * @param {string} request.orderBy
   *   Comma separated list of triggeredJob fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc,update_time, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the JobTrigger was created.
   *   - `update_time`: corresponds to the time the JobTrigger was last updated.
   *   - `last_run_time`: corresponds to the last time the JobTrigger ran.
   *   - `name`: corresponds to the JobTrigger's name.
   *   - `display_name`: corresponds to the JobTrigger's display name.
   *   - `status`: corresponds to JobTrigger's status.
   * @param {string} request.filter
   *   Allows filtering.
   *
   *   Supported syntax:
   *
   *   * Filter expressions are made up of one or more restrictions.
   *   * Restrictions can be combined by `AND` or `OR` logical operators. A
   *   sequence of restrictions implicitly uses `AND`.
   *   * A restriction has the form of `{field} {operator} {value}`.
   *   * Supported fields/values for inspect triggers:
   *       - `status` - HEALTHY|PAUSED|CANCELLED
   *       - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY
   *       - 'last_run_time` - RFC 3339 formatted timestamp, surrounded by
   *       quotation marks. Nanoseconds are ignored.
   *       - 'error_count' - Number of errors that have occurred while running.
   *   * The operator must be `=` or `!=` for status and inspected_storage.
   *
   *   Examples:
   *
   *   * inspected_storage = cloud_storage AND status = HEALTHY
   *   * inspected_storage = cloud_storage OR inspected_storage = bigquery
   *   * inspected_storage = cloud_storage AND (state = PAUSED OR state = HEALTHY)
   *   * last_run_time > \"2017-12-12T00:00:00+00:00\"
   *
   *   The length of this field should be no more than 500 characters.
   * @param {google.privacy.dlp.v2.DlpJobType} request.type
   *   The type of jobs. Will use `DlpJobType.INSPECT` if not set.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [JobTrigger]{@link google.privacy.dlp.v2.JobTrigger}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listJobTriggersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listJobTriggers(
    request?: protos.google.privacy.dlp.v2.IListJobTriggersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IJobTrigger[],
      protos.google.privacy.dlp.v2.IListJobTriggersRequest | null,
      protos.google.privacy.dlp.v2.IListJobTriggersResponse
    ]
  >;
  listJobTriggers(
    request: protos.google.privacy.dlp.v2.IListJobTriggersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.privacy.dlp.v2.IListJobTriggersRequest,
      protos.google.privacy.dlp.v2.IListJobTriggersResponse | null | undefined,
      protos.google.privacy.dlp.v2.IJobTrigger
    >
  ): void;
  listJobTriggers(
    request: protos.google.privacy.dlp.v2.IListJobTriggersRequest,
    callback: PaginationCallback<
      protos.google.privacy.dlp.v2.IListJobTriggersRequest,
      protos.google.privacy.dlp.v2.IListJobTriggersResponse | null | undefined,
      protos.google.privacy.dlp.v2.IJobTrigger
    >
  ): void;
  listJobTriggers(
    request?: protos.google.privacy.dlp.v2.IListJobTriggersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.privacy.dlp.v2.IListJobTriggersRequest,
          | protos.google.privacy.dlp.v2.IListJobTriggersResponse
          | null
          | undefined,
          protos.google.privacy.dlp.v2.IJobTrigger
        >,
    callback?: PaginationCallback<
      protos.google.privacy.dlp.v2.IListJobTriggersRequest,
      protos.google.privacy.dlp.v2.IListJobTriggersResponse | null | undefined,
      protos.google.privacy.dlp.v2.IJobTrigger
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IJobTrigger[],
      protos.google.privacy.dlp.v2.IListJobTriggersRequest | null,
      protos.google.privacy.dlp.v2.IListJobTriggersResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listJobTriggers(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to ListJobTriggers. `order_by` field must not
   *   change for subsequent calls.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by a server.
   * @param {string} request.orderBy
   *   Comma separated list of triggeredJob fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc,update_time, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the JobTrigger was created.
   *   - `update_time`: corresponds to the time the JobTrigger was last updated.
   *   - `last_run_time`: corresponds to the last time the JobTrigger ran.
   *   - `name`: corresponds to the JobTrigger's name.
   *   - `display_name`: corresponds to the JobTrigger's display name.
   *   - `status`: corresponds to JobTrigger's status.
   * @param {string} request.filter
   *   Allows filtering.
   *
   *   Supported syntax:
   *
   *   * Filter expressions are made up of one or more restrictions.
   *   * Restrictions can be combined by `AND` or `OR` logical operators. A
   *   sequence of restrictions implicitly uses `AND`.
   *   * A restriction has the form of `{field} {operator} {value}`.
   *   * Supported fields/values for inspect triggers:
   *       - `status` - HEALTHY|PAUSED|CANCELLED
   *       - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY
   *       - 'last_run_time` - RFC 3339 formatted timestamp, surrounded by
   *       quotation marks. Nanoseconds are ignored.
   *       - 'error_count' - Number of errors that have occurred while running.
   *   * The operator must be `=` or `!=` for status and inspected_storage.
   *
   *   Examples:
   *
   *   * inspected_storage = cloud_storage AND status = HEALTHY
   *   * inspected_storage = cloud_storage OR inspected_storage = bigquery
   *   * inspected_storage = cloud_storage AND (state = PAUSED OR state = HEALTHY)
   *   * last_run_time > \"2017-12-12T00:00:00+00:00\"
   *
   *   The length of this field should be no more than 500 characters.
   * @param {google.privacy.dlp.v2.DlpJobType} request.type
   *   The type of jobs. Will use `DlpJobType.INSPECT` if not set.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [JobTrigger]{@link google.privacy.dlp.v2.JobTrigger} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listJobTriggersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listJobTriggersStream(
    request?: protos.google.privacy.dlp.v2.IListJobTriggersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listJobTriggers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listJobTriggers.createStream(
      this.innerApiCalls.listJobTriggers as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listJobTriggers`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to ListJobTriggers. `order_by` field must not
   *   change for subsequent calls.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by a server.
   * @param {string} request.orderBy
   *   Comma separated list of triggeredJob fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc,update_time, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the JobTrigger was created.
   *   - `update_time`: corresponds to the time the JobTrigger was last updated.
   *   - `last_run_time`: corresponds to the last time the JobTrigger ran.
   *   - `name`: corresponds to the JobTrigger's name.
   *   - `display_name`: corresponds to the JobTrigger's display name.
   *   - `status`: corresponds to JobTrigger's status.
   * @param {string} request.filter
   *   Allows filtering.
   *
   *   Supported syntax:
   *
   *   * Filter expressions are made up of one or more restrictions.
   *   * Restrictions can be combined by `AND` or `OR` logical operators. A
   *   sequence of restrictions implicitly uses `AND`.
   *   * A restriction has the form of `{field} {operator} {value}`.
   *   * Supported fields/values for inspect triggers:
   *       - `status` - HEALTHY|PAUSED|CANCELLED
   *       - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY
   *       - 'last_run_time` - RFC 3339 formatted timestamp, surrounded by
   *       quotation marks. Nanoseconds are ignored.
   *       - 'error_count' - Number of errors that have occurred while running.
   *   * The operator must be `=` or `!=` for status and inspected_storage.
   *
   *   Examples:
   *
   *   * inspected_storage = cloud_storage AND status = HEALTHY
   *   * inspected_storage = cloud_storage OR inspected_storage = bigquery
   *   * inspected_storage = cloud_storage AND (state = PAUSED OR state = HEALTHY)
   *   * last_run_time > \"2017-12-12T00:00:00+00:00\"
   *
   *   The length of this field should be no more than 500 characters.
   * @param {google.privacy.dlp.v2.DlpJobType} request.type
   *   The type of jobs. Will use `DlpJobType.INSPECT` if not set.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [JobTrigger]{@link google.privacy.dlp.v2.JobTrigger}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.list_job_triggers.js</caption>
   * region_tag:dlp_v2_generated_DlpService_ListJobTriggers_async
   */
  listJobTriggersAsync(
    request?: protos.google.privacy.dlp.v2.IListJobTriggersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.privacy.dlp.v2.IJobTrigger> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listJobTriggers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listJobTriggers.asyncIterate(
      this.innerApiCalls['listJobTriggers'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.privacy.dlp.v2.IJobTrigger>;
  }
  /**
   * Lists DlpJobs that match the specified filter in the request.
   * See https://cloud.google.com/dlp/docs/inspecting-storage and
   * https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.filter
   *   Allows filtering.
   *
   *   Supported syntax:
   *
   *   * Filter expressions are made up of one or more restrictions.
   *   * Restrictions can be combined by `AND` or `OR` logical operators. A
   *   sequence of restrictions implicitly uses `AND`.
   *   * A restriction has the form of `{field} {operator} {value}`.
   *   * Supported fields/values for inspect jobs:
   *       - `state` - PENDING|RUNNING|CANCELED|FINISHED|FAILED
   *       - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY
   *       - `trigger_name` - The name of the trigger that created the job.
   *       - 'end_time` - Corresponds to the time the job finished.
   *       - 'start_time` - Corresponds to the time the job finished.
   *   * Supported fields for risk analysis jobs:
   *       - `state` - RUNNING|CANCELED|FINISHED|FAILED
   *       - 'end_time` - Corresponds to the time the job finished.
   *       - 'start_time` - Corresponds to the time the job finished.
   *   * The operator must be `=` or `!=`.
   *
   *   Examples:
   *
   *   * inspected_storage = cloud_storage AND state = done
   *   * inspected_storage = cloud_storage OR inspected_storage = bigquery
   *   * inspected_storage = cloud_storage AND (state = done OR state = canceled)
   *   * end_time > \"2017-12-12T00:00:00+00:00\"
   *
   *   The length of this field should be no more than 500 characters.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {google.privacy.dlp.v2.DlpJobType} request.type
   *   The type of job. Defaults to `DlpJobType.INSPECT`
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc, end_time asc, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the job was created.
   *   - `end_time`: corresponds to the time the job ended.
   *   - `name`: corresponds to the job's name.
   *   - `state`: corresponds to `state`
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [DlpJob]{@link google.privacy.dlp.v2.DlpJob}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDlpJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDlpJobs(
    request?: protos.google.privacy.dlp.v2.IListDlpJobsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDlpJob[],
      protos.google.privacy.dlp.v2.IListDlpJobsRequest | null,
      protos.google.privacy.dlp.v2.IListDlpJobsResponse
    ]
  >;
  listDlpJobs(
    request: protos.google.privacy.dlp.v2.IListDlpJobsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.privacy.dlp.v2.IListDlpJobsRequest,
      protos.google.privacy.dlp.v2.IListDlpJobsResponse | null | undefined,
      protos.google.privacy.dlp.v2.IDlpJob
    >
  ): void;
  listDlpJobs(
    request: protos.google.privacy.dlp.v2.IListDlpJobsRequest,
    callback: PaginationCallback<
      protos.google.privacy.dlp.v2.IListDlpJobsRequest,
      protos.google.privacy.dlp.v2.IListDlpJobsResponse | null | undefined,
      protos.google.privacy.dlp.v2.IDlpJob
    >
  ): void;
  listDlpJobs(
    request?: protos.google.privacy.dlp.v2.IListDlpJobsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.privacy.dlp.v2.IListDlpJobsRequest,
          protos.google.privacy.dlp.v2.IListDlpJobsResponse | null | undefined,
          protos.google.privacy.dlp.v2.IDlpJob
        >,
    callback?: PaginationCallback<
      protos.google.privacy.dlp.v2.IListDlpJobsRequest,
      protos.google.privacy.dlp.v2.IListDlpJobsResponse | null | undefined,
      protos.google.privacy.dlp.v2.IDlpJob
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IDlpJob[],
      protos.google.privacy.dlp.v2.IListDlpJobsRequest | null,
      protos.google.privacy.dlp.v2.IListDlpJobsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDlpJobs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.filter
   *   Allows filtering.
   *
   *   Supported syntax:
   *
   *   * Filter expressions are made up of one or more restrictions.
   *   * Restrictions can be combined by `AND` or `OR` logical operators. A
   *   sequence of restrictions implicitly uses `AND`.
   *   * A restriction has the form of `{field} {operator} {value}`.
   *   * Supported fields/values for inspect jobs:
   *       - `state` - PENDING|RUNNING|CANCELED|FINISHED|FAILED
   *       - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY
   *       - `trigger_name` - The name of the trigger that created the job.
   *       - 'end_time` - Corresponds to the time the job finished.
   *       - 'start_time` - Corresponds to the time the job finished.
   *   * Supported fields for risk analysis jobs:
   *       - `state` - RUNNING|CANCELED|FINISHED|FAILED
   *       - 'end_time` - Corresponds to the time the job finished.
   *       - 'start_time` - Corresponds to the time the job finished.
   *   * The operator must be `=` or `!=`.
   *
   *   Examples:
   *
   *   * inspected_storage = cloud_storage AND state = done
   *   * inspected_storage = cloud_storage OR inspected_storage = bigquery
   *   * inspected_storage = cloud_storage AND (state = done OR state = canceled)
   *   * end_time > \"2017-12-12T00:00:00+00:00\"
   *
   *   The length of this field should be no more than 500 characters.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {google.privacy.dlp.v2.DlpJobType} request.type
   *   The type of job. Defaults to `DlpJobType.INSPECT`
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc, end_time asc, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the job was created.
   *   - `end_time`: corresponds to the time the job ended.
   *   - `name`: corresponds to the job's name.
   *   - `state`: corresponds to `state`
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [DlpJob]{@link google.privacy.dlp.v2.DlpJob} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDlpJobsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDlpJobsStream(
    request?: protos.google.privacy.dlp.v2.IListDlpJobsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDlpJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDlpJobs.createStream(
      this.innerApiCalls.listDlpJobs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDlpJobs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on whether you have [specified a
   *   processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.filter
   *   Allows filtering.
   *
   *   Supported syntax:
   *
   *   * Filter expressions are made up of one or more restrictions.
   *   * Restrictions can be combined by `AND` or `OR` logical operators. A
   *   sequence of restrictions implicitly uses `AND`.
   *   * A restriction has the form of `{field} {operator} {value}`.
   *   * Supported fields/values for inspect jobs:
   *       - `state` - PENDING|RUNNING|CANCELED|FINISHED|FAILED
   *       - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY
   *       - `trigger_name` - The name of the trigger that created the job.
   *       - 'end_time` - Corresponds to the time the job finished.
   *       - 'start_time` - Corresponds to the time the job finished.
   *   * Supported fields for risk analysis jobs:
   *       - `state` - RUNNING|CANCELED|FINISHED|FAILED
   *       - 'end_time` - Corresponds to the time the job finished.
   *       - 'start_time` - Corresponds to the time the job finished.
   *   * The operator must be `=` or `!=`.
   *
   *   Examples:
   *
   *   * inspected_storage = cloud_storage AND state = done
   *   * inspected_storage = cloud_storage OR inspected_storage = bigquery
   *   * inspected_storage = cloud_storage AND (state = done OR state = canceled)
   *   * end_time > \"2017-12-12T00:00:00+00:00\"
   *
   *   The length of this field should be no more than 500 characters.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {google.privacy.dlp.v2.DlpJobType} request.type
   *   The type of job. Defaults to `DlpJobType.INSPECT`
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc, end_time asc, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the job was created.
   *   - `end_time`: corresponds to the time the job ended.
   *   - `name`: corresponds to the job's name.
   *   - `state`: corresponds to `state`
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [DlpJob]{@link google.privacy.dlp.v2.DlpJob}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.list_dlp_jobs.js</caption>
   * region_tag:dlp_v2_generated_DlpService_ListDlpJobs_async
   */
  listDlpJobsAsync(
    request?: protos.google.privacy.dlp.v2.IListDlpJobsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.privacy.dlp.v2.IDlpJob> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDlpJobs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDlpJobs.asyncIterate(
      this.innerApiCalls['listDlpJobs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.privacy.dlp.v2.IDlpJob>;
  }
  /**
   * Lists stored infoTypes.
   * See https://cloud.google.com/dlp/docs/creating-stored-infotypes to
   * learn more.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to `ListStoredInfoTypes`.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by the server. If zero server returns
   *   a page of max size 100.
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc, display_name, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the most recent version of the
   *   resource was created.
   *   - `state`: corresponds to the state of the resource.
   *   - `name`: corresponds to resource name.
   *   - `display_name`: corresponds to info type's display name.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [StoredInfoType]{@link google.privacy.dlp.v2.StoredInfoType}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listStoredInfoTypesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listStoredInfoTypes(
    request?: protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IStoredInfoType[],
      protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest | null,
      protos.google.privacy.dlp.v2.IListStoredInfoTypesResponse
    ]
  >;
  listStoredInfoTypes(
    request: protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest,
      | protos.google.privacy.dlp.v2.IListStoredInfoTypesResponse
      | null
      | undefined,
      protos.google.privacy.dlp.v2.IStoredInfoType
    >
  ): void;
  listStoredInfoTypes(
    request: protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest,
    callback: PaginationCallback<
      protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest,
      | protos.google.privacy.dlp.v2.IListStoredInfoTypesResponse
      | null
      | undefined,
      protos.google.privacy.dlp.v2.IStoredInfoType
    >
  ): void;
  listStoredInfoTypes(
    request?: protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest,
          | protos.google.privacy.dlp.v2.IListStoredInfoTypesResponse
          | null
          | undefined,
          protos.google.privacy.dlp.v2.IStoredInfoType
        >,
    callback?: PaginationCallback<
      protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest,
      | protos.google.privacy.dlp.v2.IListStoredInfoTypesResponse
      | null
      | undefined,
      protos.google.privacy.dlp.v2.IStoredInfoType
    >
  ): Promise<
    [
      protos.google.privacy.dlp.v2.IStoredInfoType[],
      protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest | null,
      protos.google.privacy.dlp.v2.IListStoredInfoTypesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listStoredInfoTypes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to `ListStoredInfoTypes`.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by the server. If zero server returns
   *   a page of max size 100.
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc, display_name, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the most recent version of the
   *   resource was created.
   *   - `state`: corresponds to the state of the resource.
   *   - `name`: corresponds to resource name.
   *   - `display_name`: corresponds to info type's display name.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [StoredInfoType]{@link google.privacy.dlp.v2.StoredInfoType} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listStoredInfoTypesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listStoredInfoTypesStream(
    request?: protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listStoredInfoTypes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listStoredInfoTypes.createStream(
      this.innerApiCalls.listStoredInfoTypes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listStoredInfoTypes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *
   *   The format of this value varies depending on the scope of the request
   *   (project or organization) and whether you have [specified a processing
   *   location](https://cloud.google.com/dlp/docs/specifying-location):
   *
   *   + Projects scope, location specified:<br/>
   *     `projects/`<var>PROJECT_ID</var>`/locations/`<var>LOCATION_ID</var>
   *   + Projects scope, no location specified (defaults to global):<br/>
   *     `projects/`<var>PROJECT_ID</var>
   *
   *   The following example `parent` string specifies a parent project with the
   *   identifier `example-project`, and specifies the `europe-west3` location
   *   for processing data:
   *
   *       parent=projects/example-project/locations/europe-west3
   * @param {string} request.pageToken
   *   Page token to continue retrieval. Comes from previous call
   *   to `ListStoredInfoTypes`.
   * @param {number} request.pageSize
   *   Size of the page, can be limited by the server. If zero server returns
   *   a page of max size 100.
   * @param {string} request.orderBy
   *   Comma separated list of fields to order by,
   *   followed by `asc` or `desc` postfix. This list is case-insensitive,
   *   default sorting order is ascending, redundant space characters are
   *   insignificant.
   *
   *   Example: `name asc, display_name, create_time desc`
   *
   *   Supported fields are:
   *
   *   - `create_time`: corresponds to the time the most recent version of the
   *   resource was created.
   *   - `state`: corresponds to the state of the resource.
   *   - `name`: corresponds to resource name.
   *   - `display_name`: corresponds to info type's display name.
   * @param {string} request.locationId
   *   Deprecated. This field has no effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [StoredInfoType]{@link google.privacy.dlp.v2.StoredInfoType}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/dlp_service.list_stored_info_types.js</caption>
   * region_tag:dlp_v2_generated_DlpService_ListStoredInfoTypes_async
   */
  listStoredInfoTypesAsync(
    request?: protos.google.privacy.dlp.v2.IListStoredInfoTypesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.privacy.dlp.v2.IStoredInfoType> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listStoredInfoTypes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listStoredInfoTypes.asyncIterate(
      this.innerApiCalls['listStoredInfoTypes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.privacy.dlp.v2.IStoredInfoType>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified finding resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} finding
   * @returns {string} Resource name string.
   */
  findingPath(project: string, location: string, finding: string) {
    return this.pathTemplates.findingPathTemplate.render({
      project: project,
      location: location,
      finding: finding,
    });
  }

  /**
   * Parse the project from Finding resource.
   *
   * @param {string} findingName
   *   A fully-qualified path representing Finding resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFindingName(findingName: string) {
    return this.pathTemplates.findingPathTemplate.match(findingName).project;
  }

  /**
   * Parse the location from Finding resource.
   *
   * @param {string} findingName
   *   A fully-qualified path representing Finding resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFindingName(findingName: string) {
    return this.pathTemplates.findingPathTemplate.match(findingName).location;
  }

  /**
   * Parse the finding from Finding resource.
   *
   * @param {string} findingName
   *   A fully-qualified path representing Finding resource.
   * @returns {string} A string representing the finding.
   */
  matchFindingFromFindingName(findingName: string) {
    return this.pathTemplates.findingPathTemplate.match(findingName).finding;
  }

  /**
   * Return a fully-qualified organization resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationPath(organization: string) {
    return this.pathTemplates.organizationPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from Organization resource.
   *
   * @param {string} organizationName
   *   A fully-qualified path representing Organization resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationName(organizationName: string) {
    return this.pathTemplates.organizationPathTemplate.match(organizationName)
      .organization;
  }

  /**
   * Return a fully-qualified organizationDeidentifyTemplate resource name string.
   *
   * @param {string} organization
   * @param {string} deidentify_template
   * @returns {string} Resource name string.
   */
  organizationDeidentifyTemplatePath(
    organization: string,
    deidentifyTemplate: string
  ) {
    return this.pathTemplates.organizationDeidentifyTemplatePathTemplate.render(
      {
        organization: organization,
        deidentify_template: deidentifyTemplate,
      }
    );
  }

  /**
   * Parse the organization from OrganizationDeidentifyTemplate resource.
   *
   * @param {string} organizationDeidentifyTemplateName
   *   A fully-qualified path representing organization_deidentify_template resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationDeidentifyTemplateName(
    organizationDeidentifyTemplateName: string
  ) {
    return this.pathTemplates.organizationDeidentifyTemplatePathTemplate.match(
      organizationDeidentifyTemplateName
    ).organization;
  }

  /**
   * Parse the deidentify_template from OrganizationDeidentifyTemplate resource.
   *
   * @param {string} organizationDeidentifyTemplateName
   *   A fully-qualified path representing organization_deidentify_template resource.
   * @returns {string} A string representing the deidentify_template.
   */
  matchDeidentifyTemplateFromOrganizationDeidentifyTemplateName(
    organizationDeidentifyTemplateName: string
  ) {
    return this.pathTemplates.organizationDeidentifyTemplatePathTemplate.match(
      organizationDeidentifyTemplateName
    ).deidentify_template;
  }

  /**
   * Return a fully-qualified organizationInspectTemplate resource name string.
   *
   * @param {string} organization
   * @param {string} inspect_template
   * @returns {string} Resource name string.
   */
  organizationInspectTemplatePath(
    organization: string,
    inspectTemplate: string
  ) {
    return this.pathTemplates.organizationInspectTemplatePathTemplate.render({
      organization: organization,
      inspect_template: inspectTemplate,
    });
  }

  /**
   * Parse the organization from OrganizationInspectTemplate resource.
   *
   * @param {string} organizationInspectTemplateName
   *   A fully-qualified path representing organization_inspect_template resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationInspectTemplateName(
    organizationInspectTemplateName: string
  ) {
    return this.pathTemplates.organizationInspectTemplatePathTemplate.match(
      organizationInspectTemplateName
    ).organization;
  }

  /**
   * Parse the inspect_template from OrganizationInspectTemplate resource.
   *
   * @param {string} organizationInspectTemplateName
   *   A fully-qualified path representing organization_inspect_template resource.
   * @returns {string} A string representing the inspect_template.
   */
  matchInspectTemplateFromOrganizationInspectTemplateName(
    organizationInspectTemplateName: string
  ) {
    return this.pathTemplates.organizationInspectTemplatePathTemplate.match(
      organizationInspectTemplateName
    ).inspect_template;
  }

  /**
   * Return a fully-qualified organizationLocationDeidentifyTemplate resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} deidentify_template
   * @returns {string} Resource name string.
   */
  organizationLocationDeidentifyTemplatePath(
    organization: string,
    location: string,
    deidentifyTemplate: string
  ) {
    return this.pathTemplates.organizationLocationDeidentifyTemplatePathTemplate.render(
      {
        organization: organization,
        location: location,
        deidentify_template: deidentifyTemplate,
      }
    );
  }

  /**
   * Parse the organization from OrganizationLocationDeidentifyTemplate resource.
   *
   * @param {string} organizationLocationDeidentifyTemplateName
   *   A fully-qualified path representing organization_location_deidentify_template resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationDeidentifyTemplateName(
    organizationLocationDeidentifyTemplateName: string
  ) {
    return this.pathTemplates.organizationLocationDeidentifyTemplatePathTemplate.match(
      organizationLocationDeidentifyTemplateName
    ).organization;
  }

  /**
   * Parse the location from OrganizationLocationDeidentifyTemplate resource.
   *
   * @param {string} organizationLocationDeidentifyTemplateName
   *   A fully-qualified path representing organization_location_deidentify_template resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationDeidentifyTemplateName(
    organizationLocationDeidentifyTemplateName: string
  ) {
    return this.pathTemplates.organizationLocationDeidentifyTemplatePathTemplate.match(
      organizationLocationDeidentifyTemplateName
    ).location;
  }

  /**
   * Parse the deidentify_template from OrganizationLocationDeidentifyTemplate resource.
   *
   * @param {string} organizationLocationDeidentifyTemplateName
   *   A fully-qualified path representing organization_location_deidentify_template resource.
   * @returns {string} A string representing the deidentify_template.
   */
  matchDeidentifyTemplateFromOrganizationLocationDeidentifyTemplateName(
    organizationLocationDeidentifyTemplateName: string
  ) {
    return this.pathTemplates.organizationLocationDeidentifyTemplatePathTemplate.match(
      organizationLocationDeidentifyTemplateName
    ).deidentify_template;
  }

  /**
   * Return a fully-qualified organizationLocationInspectTemplate resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} inspect_template
   * @returns {string} Resource name string.
   */
  organizationLocationInspectTemplatePath(
    organization: string,
    location: string,
    inspectTemplate: string
  ) {
    return this.pathTemplates.organizationLocationInspectTemplatePathTemplate.render(
      {
        organization: organization,
        location: location,
        inspect_template: inspectTemplate,
      }
    );
  }

  /**
   * Parse the organization from OrganizationLocationInspectTemplate resource.
   *
   * @param {string} organizationLocationInspectTemplateName
   *   A fully-qualified path representing organization_location_inspect_template resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationInspectTemplateName(
    organizationLocationInspectTemplateName: string
  ) {
    return this.pathTemplates.organizationLocationInspectTemplatePathTemplate.match(
      organizationLocationInspectTemplateName
    ).organization;
  }

  /**
   * Parse the location from OrganizationLocationInspectTemplate resource.
   *
   * @param {string} organizationLocationInspectTemplateName
   *   A fully-qualified path representing organization_location_inspect_template resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationInspectTemplateName(
    organizationLocationInspectTemplateName: string
  ) {
    return this.pathTemplates.organizationLocationInspectTemplatePathTemplate.match(
      organizationLocationInspectTemplateName
    ).location;
  }

  /**
   * Parse the inspect_template from OrganizationLocationInspectTemplate resource.
   *
   * @param {string} organizationLocationInspectTemplateName
   *   A fully-qualified path representing organization_location_inspect_template resource.
   * @returns {string} A string representing the inspect_template.
   */
  matchInspectTemplateFromOrganizationLocationInspectTemplateName(
    organizationLocationInspectTemplateName: string
  ) {
    return this.pathTemplates.organizationLocationInspectTemplatePathTemplate.match(
      organizationLocationInspectTemplateName
    ).inspect_template;
  }

  /**
   * Return a fully-qualified organizationLocationStoredInfoType resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} stored_info_type
   * @returns {string} Resource name string.
   */
  organizationLocationStoredInfoTypePath(
    organization: string,
    location: string,
    storedInfoType: string
  ) {
    return this.pathTemplates.organizationLocationStoredInfoTypePathTemplate.render(
      {
        organization: organization,
        location: location,
        stored_info_type: storedInfoType,
      }
    );
  }

  /**
   * Parse the organization from OrganizationLocationStoredInfoType resource.
   *
   * @param {string} organizationLocationStoredInfoTypeName
   *   A fully-qualified path representing organization_location_stored_info_type resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationStoredInfoTypeName(
    organizationLocationStoredInfoTypeName: string
  ) {
    return this.pathTemplates.organizationLocationStoredInfoTypePathTemplate.match(
      organizationLocationStoredInfoTypeName
    ).organization;
  }

  /**
   * Parse the location from OrganizationLocationStoredInfoType resource.
   *
   * @param {string} organizationLocationStoredInfoTypeName
   *   A fully-qualified path representing organization_location_stored_info_type resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationStoredInfoTypeName(
    organizationLocationStoredInfoTypeName: string
  ) {
    return this.pathTemplates.organizationLocationStoredInfoTypePathTemplate.match(
      organizationLocationStoredInfoTypeName
    ).location;
  }

  /**
   * Parse the stored_info_type from OrganizationLocationStoredInfoType resource.
   *
   * @param {string} organizationLocationStoredInfoTypeName
   *   A fully-qualified path representing organization_location_stored_info_type resource.
   * @returns {string} A string representing the stored_info_type.
   */
  matchStoredInfoTypeFromOrganizationLocationStoredInfoTypeName(
    organizationLocationStoredInfoTypeName: string
  ) {
    return this.pathTemplates.organizationLocationStoredInfoTypePathTemplate.match(
      organizationLocationStoredInfoTypeName
    ).stored_info_type;
  }

  /**
   * Return a fully-qualified organizationStoredInfoType resource name string.
   *
   * @param {string} organization
   * @param {string} stored_info_type
   * @returns {string} Resource name string.
   */
  organizationStoredInfoTypePath(organization: string, storedInfoType: string) {
    return this.pathTemplates.organizationStoredInfoTypePathTemplate.render({
      organization: organization,
      stored_info_type: storedInfoType,
    });
  }

  /**
   * Parse the organization from OrganizationStoredInfoType resource.
   *
   * @param {string} organizationStoredInfoTypeName
   *   A fully-qualified path representing organization_stored_info_type resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationStoredInfoTypeName(
    organizationStoredInfoTypeName: string
  ) {
    return this.pathTemplates.organizationStoredInfoTypePathTemplate.match(
      organizationStoredInfoTypeName
    ).organization;
  }

  /**
   * Parse the stored_info_type from OrganizationStoredInfoType resource.
   *
   * @param {string} organizationStoredInfoTypeName
   *   A fully-qualified path representing organization_stored_info_type resource.
   * @returns {string} A string representing the stored_info_type.
   */
  matchStoredInfoTypeFromOrganizationStoredInfoTypeName(
    organizationStoredInfoTypeName: string
  ) {
    return this.pathTemplates.organizationStoredInfoTypePathTemplate.match(
      organizationStoredInfoTypeName
    ).stored_info_type;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectDeidentifyTemplate resource name string.
   *
   * @param {string} project
   * @param {string} deidentify_template
   * @returns {string} Resource name string.
   */
  projectDeidentifyTemplatePath(project: string, deidentifyTemplate: string) {
    return this.pathTemplates.projectDeidentifyTemplatePathTemplate.render({
      project: project,
      deidentify_template: deidentifyTemplate,
    });
  }

  /**
   * Parse the project from ProjectDeidentifyTemplate resource.
   *
   * @param {string} projectDeidentifyTemplateName
   *   A fully-qualified path representing project_deidentify_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectDeidentifyTemplateName(
    projectDeidentifyTemplateName: string
  ) {
    return this.pathTemplates.projectDeidentifyTemplatePathTemplate.match(
      projectDeidentifyTemplateName
    ).project;
  }

  /**
   * Parse the deidentify_template from ProjectDeidentifyTemplate resource.
   *
   * @param {string} projectDeidentifyTemplateName
   *   A fully-qualified path representing project_deidentify_template resource.
   * @returns {string} A string representing the deidentify_template.
   */
  matchDeidentifyTemplateFromProjectDeidentifyTemplateName(
    projectDeidentifyTemplateName: string
  ) {
    return this.pathTemplates.projectDeidentifyTemplatePathTemplate.match(
      projectDeidentifyTemplateName
    ).deidentify_template;
  }

  /**
   * Return a fully-qualified projectDlpContent resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectDlpContentPath(project: string) {
    return this.pathTemplates.projectDlpContentPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from ProjectDlpContent resource.
   *
   * @param {string} projectDlpContentName
   *   A fully-qualified path representing project_dlpContent resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectDlpContentName(projectDlpContentName: string) {
    return this.pathTemplates.projectDlpContentPathTemplate.match(
      projectDlpContentName
    ).project;
  }

  /**
   * Return a fully-qualified projectDlpJob resource name string.
   *
   * @param {string} project
   * @param {string} dlp_job
   * @returns {string} Resource name string.
   */
  projectDlpJobPath(project: string, dlpJob: string) {
    return this.pathTemplates.projectDlpJobPathTemplate.render({
      project: project,
      dlp_job: dlpJob,
    });
  }

  /**
   * Parse the project from ProjectDlpJob resource.
   *
   * @param {string} projectDlpJobName
   *   A fully-qualified path representing project_dlp_job resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectDlpJobName(projectDlpJobName: string) {
    return this.pathTemplates.projectDlpJobPathTemplate.match(projectDlpJobName)
      .project;
  }

  /**
   * Parse the dlp_job from ProjectDlpJob resource.
   *
   * @param {string} projectDlpJobName
   *   A fully-qualified path representing project_dlp_job resource.
   * @returns {string} A string representing the dlp_job.
   */
  matchDlpJobFromProjectDlpJobName(projectDlpJobName: string) {
    return this.pathTemplates.projectDlpJobPathTemplate.match(projectDlpJobName)
      .dlp_job;
  }

  /**
   * Return a fully-qualified projectInspectTemplate resource name string.
   *
   * @param {string} project
   * @param {string} inspect_template
   * @returns {string} Resource name string.
   */
  projectInspectTemplatePath(project: string, inspectTemplate: string) {
    return this.pathTemplates.projectInspectTemplatePathTemplate.render({
      project: project,
      inspect_template: inspectTemplate,
    });
  }

  /**
   * Parse the project from ProjectInspectTemplate resource.
   *
   * @param {string} projectInspectTemplateName
   *   A fully-qualified path representing project_inspect_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectInspectTemplateName(
    projectInspectTemplateName: string
  ) {
    return this.pathTemplates.projectInspectTemplatePathTemplate.match(
      projectInspectTemplateName
    ).project;
  }

  /**
   * Parse the inspect_template from ProjectInspectTemplate resource.
   *
   * @param {string} projectInspectTemplateName
   *   A fully-qualified path representing project_inspect_template resource.
   * @returns {string} A string representing the inspect_template.
   */
  matchInspectTemplateFromProjectInspectTemplateName(
    projectInspectTemplateName: string
  ) {
    return this.pathTemplates.projectInspectTemplatePathTemplate.match(
      projectInspectTemplateName
    ).inspect_template;
  }

  /**
   * Return a fully-qualified projectJobTrigger resource name string.
   *
   * @param {string} project
   * @param {string} job_trigger
   * @returns {string} Resource name string.
   */
  projectJobTriggerPath(project: string, jobTrigger: string) {
    return this.pathTemplates.projectJobTriggerPathTemplate.render({
      project: project,
      job_trigger: jobTrigger,
    });
  }

  /**
   * Parse the project from ProjectJobTrigger resource.
   *
   * @param {string} projectJobTriggerName
   *   A fully-qualified path representing project_job_trigger resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectJobTriggerName(projectJobTriggerName: string) {
    return this.pathTemplates.projectJobTriggerPathTemplate.match(
      projectJobTriggerName
    ).project;
  }

  /**
   * Parse the job_trigger from ProjectJobTrigger resource.
   *
   * @param {string} projectJobTriggerName
   *   A fully-qualified path representing project_job_trigger resource.
   * @returns {string} A string representing the job_trigger.
   */
  matchJobTriggerFromProjectJobTriggerName(projectJobTriggerName: string) {
    return this.pathTemplates.projectJobTriggerPathTemplate.match(
      projectJobTriggerName
    ).job_trigger;
  }

  /**
   * Return a fully-qualified projectLocationDeidentifyTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deidentify_template
   * @returns {string} Resource name string.
   */
  projectLocationDeidentifyTemplatePath(
    project: string,
    location: string,
    deidentifyTemplate: string
  ) {
    return this.pathTemplates.projectLocationDeidentifyTemplatePathTemplate.render(
      {
        project: project,
        location: location,
        deidentify_template: deidentifyTemplate,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDeidentifyTemplate resource.
   *
   * @param {string} projectLocationDeidentifyTemplateName
   *   A fully-qualified path representing project_location_deidentify_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDeidentifyTemplateName(
    projectLocationDeidentifyTemplateName: string
  ) {
    return this.pathTemplates.projectLocationDeidentifyTemplatePathTemplate.match(
      projectLocationDeidentifyTemplateName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDeidentifyTemplate resource.
   *
   * @param {string} projectLocationDeidentifyTemplateName
   *   A fully-qualified path representing project_location_deidentify_template resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDeidentifyTemplateName(
    projectLocationDeidentifyTemplateName: string
  ) {
    return this.pathTemplates.projectLocationDeidentifyTemplatePathTemplate.match(
      projectLocationDeidentifyTemplateName
    ).location;
  }

  /**
   * Parse the deidentify_template from ProjectLocationDeidentifyTemplate resource.
   *
   * @param {string} projectLocationDeidentifyTemplateName
   *   A fully-qualified path representing project_location_deidentify_template resource.
   * @returns {string} A string representing the deidentify_template.
   */
  matchDeidentifyTemplateFromProjectLocationDeidentifyTemplateName(
    projectLocationDeidentifyTemplateName: string
  ) {
    return this.pathTemplates.projectLocationDeidentifyTemplatePathTemplate.match(
      projectLocationDeidentifyTemplateName
    ).deidentify_template;
  }

  /**
   * Return a fully-qualified projectLocationDlpJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dlp_job
   * @returns {string} Resource name string.
   */
  projectLocationDlpJobPath(project: string, location: string, dlpJob: string) {
    return this.pathTemplates.projectLocationDlpJobPathTemplate.render({
      project: project,
      location: location,
      dlp_job: dlpJob,
    });
  }

  /**
   * Parse the project from ProjectLocationDlpJob resource.
   *
   * @param {string} projectLocationDlpJobName
   *   A fully-qualified path representing project_location_dlp_job resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDlpJobName(projectLocationDlpJobName: string) {
    return this.pathTemplates.projectLocationDlpJobPathTemplate.match(
      projectLocationDlpJobName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDlpJob resource.
   *
   * @param {string} projectLocationDlpJobName
   *   A fully-qualified path representing project_location_dlp_job resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDlpJobName(
    projectLocationDlpJobName: string
  ) {
    return this.pathTemplates.projectLocationDlpJobPathTemplate.match(
      projectLocationDlpJobName
    ).location;
  }

  /**
   * Parse the dlp_job from ProjectLocationDlpJob resource.
   *
   * @param {string} projectLocationDlpJobName
   *   A fully-qualified path representing project_location_dlp_job resource.
   * @returns {string} A string representing the dlp_job.
   */
  matchDlpJobFromProjectLocationDlpJobName(projectLocationDlpJobName: string) {
    return this.pathTemplates.projectLocationDlpJobPathTemplate.match(
      projectLocationDlpJobName
    ).dlp_job;
  }

  /**
   * Return a fully-qualified projectLocationInspectTemplate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} inspect_template
   * @returns {string} Resource name string.
   */
  projectLocationInspectTemplatePath(
    project: string,
    location: string,
    inspectTemplate: string
  ) {
    return this.pathTemplates.projectLocationInspectTemplatePathTemplate.render(
      {
        project: project,
        location: location,
        inspect_template: inspectTemplate,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationInspectTemplate resource.
   *
   * @param {string} projectLocationInspectTemplateName
   *   A fully-qualified path representing project_location_inspect_template resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationInspectTemplateName(
    projectLocationInspectTemplateName: string
  ) {
    return this.pathTemplates.projectLocationInspectTemplatePathTemplate.match(
      projectLocationInspectTemplateName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationInspectTemplate resource.
   *
   * @param {string} projectLocationInspectTemplateName
   *   A fully-qualified path representing project_location_inspect_template resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationInspectTemplateName(
    projectLocationInspectTemplateName: string
  ) {
    return this.pathTemplates.projectLocationInspectTemplatePathTemplate.match(
      projectLocationInspectTemplateName
    ).location;
  }

  /**
   * Parse the inspect_template from ProjectLocationInspectTemplate resource.
   *
   * @param {string} projectLocationInspectTemplateName
   *   A fully-qualified path representing project_location_inspect_template resource.
   * @returns {string} A string representing the inspect_template.
   */
  matchInspectTemplateFromProjectLocationInspectTemplateName(
    projectLocationInspectTemplateName: string
  ) {
    return this.pathTemplates.projectLocationInspectTemplatePathTemplate.match(
      projectLocationInspectTemplateName
    ).inspect_template;
  }

  /**
   * Return a fully-qualified projectLocationJobTrigger resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} job_trigger
   * @returns {string} Resource name string.
   */
  projectLocationJobTriggerPath(
    project: string,
    location: string,
    jobTrigger: string
  ) {
    return this.pathTemplates.projectLocationJobTriggerPathTemplate.render({
      project: project,
      location: location,
      job_trigger: jobTrigger,
    });
  }

  /**
   * Parse the project from ProjectLocationJobTrigger resource.
   *
   * @param {string} projectLocationJobTriggerName
   *   A fully-qualified path representing project_location_job_trigger resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationJobTriggerName(
    projectLocationJobTriggerName: string
  ) {
    return this.pathTemplates.projectLocationJobTriggerPathTemplate.match(
      projectLocationJobTriggerName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationJobTrigger resource.
   *
   * @param {string} projectLocationJobTriggerName
   *   A fully-qualified path representing project_location_job_trigger resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationJobTriggerName(
    projectLocationJobTriggerName: string
  ) {
    return this.pathTemplates.projectLocationJobTriggerPathTemplate.match(
      projectLocationJobTriggerName
    ).location;
  }

  /**
   * Parse the job_trigger from ProjectLocationJobTrigger resource.
   *
   * @param {string} projectLocationJobTriggerName
   *   A fully-qualified path representing project_location_job_trigger resource.
   * @returns {string} A string representing the job_trigger.
   */
  matchJobTriggerFromProjectLocationJobTriggerName(
    projectLocationJobTriggerName: string
  ) {
    return this.pathTemplates.projectLocationJobTriggerPathTemplate.match(
      projectLocationJobTriggerName
    ).job_trigger;
  }

  /**
   * Return a fully-qualified projectLocationStoredInfoType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} stored_info_type
   * @returns {string} Resource name string.
   */
  projectLocationStoredInfoTypePath(
    project: string,
    location: string,
    storedInfoType: string
  ) {
    return this.pathTemplates.projectLocationStoredInfoTypePathTemplate.render({
      project: project,
      location: location,
      stored_info_type: storedInfoType,
    });
  }

  /**
   * Parse the project from ProjectLocationStoredInfoType resource.
   *
   * @param {string} projectLocationStoredInfoTypeName
   *   A fully-qualified path representing project_location_stored_info_type resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationStoredInfoTypeName(
    projectLocationStoredInfoTypeName: string
  ) {
    return this.pathTemplates.projectLocationStoredInfoTypePathTemplate.match(
      projectLocationStoredInfoTypeName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationStoredInfoType resource.
   *
   * @param {string} projectLocationStoredInfoTypeName
   *   A fully-qualified path representing project_location_stored_info_type resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationStoredInfoTypeName(
    projectLocationStoredInfoTypeName: string
  ) {
    return this.pathTemplates.projectLocationStoredInfoTypePathTemplate.match(
      projectLocationStoredInfoTypeName
    ).location;
  }

  /**
   * Parse the stored_info_type from ProjectLocationStoredInfoType resource.
   *
   * @param {string} projectLocationStoredInfoTypeName
   *   A fully-qualified path representing project_location_stored_info_type resource.
   * @returns {string} A string representing the stored_info_type.
   */
  matchStoredInfoTypeFromProjectLocationStoredInfoTypeName(
    projectLocationStoredInfoTypeName: string
  ) {
    return this.pathTemplates.projectLocationStoredInfoTypePathTemplate.match(
      projectLocationStoredInfoTypeName
    ).stored_info_type;
  }

  /**
   * Return a fully-qualified projectStoredInfoType resource name string.
   *
   * @param {string} project
   * @param {string} stored_info_type
   * @returns {string} Resource name string.
   */
  projectStoredInfoTypePath(project: string, storedInfoType: string) {
    return this.pathTemplates.projectStoredInfoTypePathTemplate.render({
      project: project,
      stored_info_type: storedInfoType,
    });
  }

  /**
   * Parse the project from ProjectStoredInfoType resource.
   *
   * @param {string} projectStoredInfoTypeName
   *   A fully-qualified path representing project_stored_info_type resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectStoredInfoTypeName(projectStoredInfoTypeName: string) {
    return this.pathTemplates.projectStoredInfoTypePathTemplate.match(
      projectStoredInfoTypeName
    ).project;
  }

  /**
   * Parse the stored_info_type from ProjectStoredInfoType resource.
   *
   * @param {string} projectStoredInfoTypeName
   *   A fully-qualified path representing project_stored_info_type resource.
   * @returns {string} A string representing the stored_info_type.
   */
  matchStoredInfoTypeFromProjectStoredInfoTypeName(
    projectStoredInfoTypeName: string
  ) {
    return this.pathTemplates.projectStoredInfoTypePathTemplate.match(
      projectStoredInfoTypeName
    ).stored_info_type;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.dlpServiceStub && !this._terminated) {
      return this.dlpServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
