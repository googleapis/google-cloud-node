// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START dlp_v2_generated_DlpService_ListTableDataProfiles_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Resource name of the organization or project, for
   *  example `organizations/433245324/locations/europe` or
   *  `projects/project-id/locations/asia`.
   */
  // const parent = 'abc123'
  /**
   *  Page token to continue retrieval.
   */
  // const pageToken = 'abc123'
  /**
   *  Size of the page. This value can be limited by the server. If zero, server
   *  returns a page of max size 100.
   */
  // const pageSize = 1234
  /**
   *  Comma separated list of fields to order by, followed by `asc` or `desc`
   *  postfix. This list is case insensitive. The default sorting order is
   *  ascending. Redundant space characters are insignificant. Only one order
   *  field at a time is allowed.
   *  Examples:
   *  * `project_id asc`
   *  * `table_id`
   *  * `sensitivity_level desc`
   *  Supported fields are:
   *  - `project_id`: The Google Cloud project ID.
   *  - `dataset_id`: The ID of a BigQuery dataset.
   *  - `table_id`: The ID of a BigQuery table.
   *  - `sensitivity_level`: How sensitive the data in a table is, at most.
   *  - `data_risk_level`: How much risk is associated with this data.
   *  - `profile_last_generated`: When the profile was last updated in epoch
   *  seconds.
   *  - `last_modified`: The last time the resource was modified.
   *  - `resource_visibility`: Visibility restriction for this resource.
   *  - `row_count`: Number of rows in this resource.
   */
  // const orderBy = 'abc123'
  /**
   *  Allows filtering.
   *  Supported syntax:
   *  * Filter expressions are made up of one or more restrictions.
   *  * Restrictions can be combined by `AND` or `OR` logical operators. A
   *  sequence of restrictions implicitly uses `AND`.
   *  * A restriction has the form of `{field} {operator} {value}`.
   *  * Supported fields/values:
   *      - `project_id` - The Google Cloud project ID.
   *      - `dataset_id` - The BigQuery dataset ID.
   *      - `table_id` - The ID of the BigQuery table.
   *      - `sensitivity_level` - HIGH|MODERATE|LOW
   *      - `data_risk_level` - HIGH|MODERATE|LOW
   *      - `resource_visibility`: PUBLIC|RESTRICTED
   *      - `status_code` - an RPC status code as defined in
   *      https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
   *  * The operator must be `=` or `!=`.
   *  Examples:
   *  * `project_id = 12345 AND status_code = 1`
   *  * `project_id = 12345 AND sensitivity_level = HIGH`
   *  * `project_id = 12345 AND resource_visibility = PUBLIC`
   *  The length of this field should be no more than 500 characters.
   */
  // const filter = 'abc123'

  // Imports the Dlp library
  const {DlpServiceClient} = require('@google-cloud/dlp').v2;

  // Instantiates a client
  const dlpClient = new DlpServiceClient();

  async function callListTableDataProfiles() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = dlpClient.listTableDataProfilesAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListTableDataProfiles();
  // [END dlp_v2_generated_DlpService_ListTableDataProfiles_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
