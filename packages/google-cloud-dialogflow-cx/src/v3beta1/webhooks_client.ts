// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v3beta1/webhooks_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './webhooks_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for managing {@link google.cloud.dialogflow.cx.v3beta1.Webhook|Webhooks}.
 * @class
 * @memberof v3beta1
 */
export class WebhooksClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  webhooksStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of WebhooksClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new WebhooksClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof WebhooksClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      agentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}'
      ),
      agentValidationResultPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/validationResult'
      ),
      changelogPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/changelogs/{changelog}'
      ),
      continuousTestResultPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/continuousTestResults/{continuous_test_result}'
      ),
      deploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/deployments/{deployment}'
      ),
      entityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/entityTypes/{entity_type}'
      ),
      environmentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/environments/{environment}'
      ),
      experimentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/experiments/{experiment}'
      ),
      flowPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/flows/{flow}'
      ),
      flowValidationResultPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/validationResult'
      ),
      intentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/intents/{intent}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      pagePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/pages/{page}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationAgentEnvironmentSessionPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/sessions/{session}'
        ),
      projectLocationAgentEnvironmentSessionEntityTypePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/agents/{agent}/environments/{environment}/sessions/{session}/entityTypes/{entity_type}'
        ),
      projectLocationAgentSessionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/sessions/{session}'
      ),
      projectLocationAgentSessionEntityTypePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/agents/{agent}/sessions/{session}/entityTypes/{entity_type}'
        ),
      securitySettingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/securitySettings/{security_settings}'
      ),
      testCasePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/testCases/{test_case}'
      ),
      testCaseResultPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/testCases/{test_case}/results/{result}'
      ),
      transitionRouteGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/transitionRouteGroups/{transition_route_group}'
      ),
      versionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/flows/{flow}/versions/{version}'
      ),
      webhookPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/agents/{agent}/webhooks/{webhook}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listWebhooks: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'webhooks'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.dialogflow.cx.v3beta1.Webhooks',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.webhooksStub) {
      return this.webhooksStub;
    }

    // Put together the "service stub" for
    // google.cloud.dialogflow.cx.v3beta1.Webhooks.
    this.webhooksStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.dialogflow.cx.v3beta1.Webhooks'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.dialogflow.cx.v3beta1.Webhooks,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const webhooksStubMethods = [
      'listWebhooks',
      'getWebhook',
      'createWebhook',
      'updateWebhook',
      'deleteWebhook',
    ];
    for (const methodName of webhooksStubMethods) {
      const callPromise = this.webhooksStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.webhooksStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'dialogflow.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'dialogflow.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/dialogflow',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Retrieves the specified webhook.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the webhook.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   *   ID>/webhooks/<Webhook ID>`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Webhook]{@link google.cloud.dialogflow.cx.v3beta1.Webhook}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3beta1/webhooks.get_webhook.js</caption>
   * region_tag:dialogflow_v3beta1_generated_Webhooks_GetWebhook_async
   */
  getWebhook(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IGetWebhookRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      protos.google.cloud.dialogflow.cx.v3beta1.IGetWebhookRequest | undefined,
      {} | undefined
    ]
  >;
  getWebhook(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IGetWebhookRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      | protos.google.cloud.dialogflow.cx.v3beta1.IGetWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWebhook(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IGetWebhookRequest,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      | protos.google.cloud.dialogflow.cx.v3beta1.IGetWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWebhook(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IGetWebhookRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
          | protos.google.cloud.dialogflow.cx.v3beta1.IGetWebhookRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      | protos.google.cloud.dialogflow.cx.v3beta1.IGetWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      protos.google.cloud.dialogflow.cx.v3beta1.IGetWebhookRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getWebhook(request, options, callback);
  }
  /**
   * Creates a webhook in the specified agent.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent to create a webhook for.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   * @param {google.cloud.dialogflow.cx.v3beta1.Webhook} request.webhook
   *   Required. The webhook to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Webhook]{@link google.cloud.dialogflow.cx.v3beta1.Webhook}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3beta1/webhooks.create_webhook.js</caption>
   * region_tag:dialogflow_v3beta1_generated_Webhooks_CreateWebhook_async
   */
  createWebhook(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.ICreateWebhookRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      (
        | protos.google.cloud.dialogflow.cx.v3beta1.ICreateWebhookRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createWebhook(
    request: protos.google.cloud.dialogflow.cx.v3beta1.ICreateWebhookRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      | protos.google.cloud.dialogflow.cx.v3beta1.ICreateWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createWebhook(
    request: protos.google.cloud.dialogflow.cx.v3beta1.ICreateWebhookRequest,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      | protos.google.cloud.dialogflow.cx.v3beta1.ICreateWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createWebhook(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.ICreateWebhookRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
          | protos.google.cloud.dialogflow.cx.v3beta1.ICreateWebhookRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      | protos.google.cloud.dialogflow.cx.v3beta1.ICreateWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      (
        | protos.google.cloud.dialogflow.cx.v3beta1.ICreateWebhookRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createWebhook(request, options, callback);
  }
  /**
   * Updates the specified webhook.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.dialogflow.cx.v3beta1.Webhook} request.webhook
   *   Required. The webhook to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The mask to control which fields get updated. If the mask is not present,
   *   all fields will be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Webhook]{@link google.cloud.dialogflow.cx.v3beta1.Webhook}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3beta1/webhooks.update_webhook.js</caption>
   * region_tag:dialogflow_v3beta1_generated_Webhooks_UpdateWebhook_async
   */
  updateWebhook(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IUpdateWebhookRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      (
        | protos.google.cloud.dialogflow.cx.v3beta1.IUpdateWebhookRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateWebhook(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IUpdateWebhookRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      | protos.google.cloud.dialogflow.cx.v3beta1.IUpdateWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateWebhook(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IUpdateWebhookRequest,
    callback: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      | protos.google.cloud.dialogflow.cx.v3beta1.IUpdateWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateWebhook(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IUpdateWebhookRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
          | protos.google.cloud.dialogflow.cx.v3beta1.IUpdateWebhookRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      | protos.google.cloud.dialogflow.cx.v3beta1.IUpdateWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook,
      (
        | protos.google.cloud.dialogflow.cx.v3beta1.IUpdateWebhookRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'webhook.name': request.webhook!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateWebhook(request, options, callback);
  }
  /**
   * Deletes the specified webhook.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the webhook to delete.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   *   ID>/webhooks/<Webhook ID>`.
   * @param {boolean} request.force
   *   This field has no effect for webhook not being used.
   *   For webhooks that are used by pages/flows/transition route groups:
   *
   *   *  If `force` is set to false, an error will be returned with message
   *      indicating the referenced resources.
   *   *  If `force` is set to true, Dialogflow will remove the webhook, as well
   *      as any references to the webhook (i.e.
   *      {@link google.cloud.dialogflow.cx.v3beta1.Fulfillment.webhook|Webhook} and
   *      {@link google.cloud.dialogflow.cx.v3beta1.Fulfillment.tag|tag}in fulfillments
   *      that point to this webhook will be removed).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3beta1/webhooks.delete_webhook.js</caption>
   * region_tag:dialogflow_v3beta1_generated_Webhooks_DeleteWebhook_async
   */
  deleteWebhook(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IDeleteWebhookRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.dialogflow.cx.v3beta1.IDeleteWebhookRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteWebhook(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IDeleteWebhookRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.dialogflow.cx.v3beta1.IDeleteWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteWebhook(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IDeleteWebhookRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.dialogflow.cx.v3beta1.IDeleteWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteWebhook(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IDeleteWebhookRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.dialogflow.cx.v3beta1.IDeleteWebhookRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.dialogflow.cx.v3beta1.IDeleteWebhookRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.dialogflow.cx.v3beta1.IDeleteWebhookRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteWebhook(request, options, callback);
  }

  /**
   * Returns the list of all webhooks in the specified agent.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent to list all webhooks for.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   * @param {number} request.pageSize
   *   The maximum number of items to return in a single page. By default 100 and
   *   at most 1000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Webhook]{@link google.cloud.dialogflow.cx.v3beta1.Webhook}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listWebhooksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWebhooks(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook[],
      protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest | null,
      protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksResponse
    ]
  >;
  listWebhooks(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest,
      | protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksResponse
      | null
      | undefined,
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook
    >
  ): void;
  listWebhooks(
    request: protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest,
    callback: PaginationCallback<
      protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest,
      | protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksResponse
      | null
      | undefined,
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook
    >
  ): void;
  listWebhooks(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest,
          | protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksResponse
          | null
          | undefined,
          protos.google.cloud.dialogflow.cx.v3beta1.IWebhook
        >,
    callback?: PaginationCallback<
      protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest,
      | protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksResponse
      | null
      | undefined,
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook
    >
  ): Promise<
    [
      protos.google.cloud.dialogflow.cx.v3beta1.IWebhook[],
      protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest | null,
      protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listWebhooks(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent to list all webhooks for.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   * @param {number} request.pageSize
   *   The maximum number of items to return in a single page. By default 100 and
   *   at most 1000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Webhook]{@link google.cloud.dialogflow.cx.v3beta1.Webhook} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listWebhooksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWebhooksStream(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listWebhooks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWebhooks.createStream(
      this.innerApiCalls.listWebhooks as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listWebhooks`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent to list all webhooks for.
   *   Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   * @param {number} request.pageSize
   *   The maximum number of items to return in a single page. By default 100 and
   *   at most 1000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Webhook]{@link google.cloud.dialogflow.cx.v3beta1.Webhook}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3beta1/webhooks.list_webhooks.js</caption>
   * region_tag:dialogflow_v3beta1_generated_Webhooks_ListWebhooks_async
   */
  listWebhooksAsync(
    request?: protos.google.cloud.dialogflow.cx.v3beta1.IListWebhooksRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.dialogflow.cx.v3beta1.IWebhook> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listWebhooks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWebhooks.asyncIterate(
      this.innerApiCalls['listWebhooks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dialogflow.cx.v3beta1.IWebhook>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified agent resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @returns {string} Resource name string.
   */
  agentPath(project: string, location: string, agent: string) {
    return this.pathTemplates.agentPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
    });
  }

  /**
   * Parse the project from Agent resource.
   *
   * @param {string} agentName
   *   A fully-qualified path representing Agent resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAgentName(agentName: string) {
    return this.pathTemplates.agentPathTemplate.match(agentName).project;
  }

  /**
   * Parse the location from Agent resource.
   *
   * @param {string} agentName
   *   A fully-qualified path representing Agent resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAgentName(agentName: string) {
    return this.pathTemplates.agentPathTemplate.match(agentName).location;
  }

  /**
   * Parse the agent from Agent resource.
   *
   * @param {string} agentName
   *   A fully-qualified path representing Agent resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromAgentName(agentName: string) {
    return this.pathTemplates.agentPathTemplate.match(agentName).agent;
  }

  /**
   * Return a fully-qualified agentValidationResult resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @returns {string} Resource name string.
   */
  agentValidationResultPath(project: string, location: string, agent: string) {
    return this.pathTemplates.agentValidationResultPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
    });
  }

  /**
   * Parse the project from AgentValidationResult resource.
   *
   * @param {string} agentValidationResultName
   *   A fully-qualified path representing AgentValidationResult resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAgentValidationResultName(agentValidationResultName: string) {
    return this.pathTemplates.agentValidationResultPathTemplate.match(
      agentValidationResultName
    ).project;
  }

  /**
   * Parse the location from AgentValidationResult resource.
   *
   * @param {string} agentValidationResultName
   *   A fully-qualified path representing AgentValidationResult resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAgentValidationResultName(
    agentValidationResultName: string
  ) {
    return this.pathTemplates.agentValidationResultPathTemplate.match(
      agentValidationResultName
    ).location;
  }

  /**
   * Parse the agent from AgentValidationResult resource.
   *
   * @param {string} agentValidationResultName
   *   A fully-qualified path representing AgentValidationResult resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromAgentValidationResultName(agentValidationResultName: string) {
    return this.pathTemplates.agentValidationResultPathTemplate.match(
      agentValidationResultName
    ).agent;
  }

  /**
   * Return a fully-qualified changelog resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} changelog
   * @returns {string} Resource name string.
   */
  changelogPath(
    project: string,
    location: string,
    agent: string,
    changelog: string
  ) {
    return this.pathTemplates.changelogPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      changelog: changelog,
    });
  }

  /**
   * Parse the project from Changelog resource.
   *
   * @param {string} changelogName
   *   A fully-qualified path representing Changelog resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromChangelogName(changelogName: string) {
    return this.pathTemplates.changelogPathTemplate.match(changelogName)
      .project;
  }

  /**
   * Parse the location from Changelog resource.
   *
   * @param {string} changelogName
   *   A fully-qualified path representing Changelog resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromChangelogName(changelogName: string) {
    return this.pathTemplates.changelogPathTemplate.match(changelogName)
      .location;
  }

  /**
   * Parse the agent from Changelog resource.
   *
   * @param {string} changelogName
   *   A fully-qualified path representing Changelog resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromChangelogName(changelogName: string) {
    return this.pathTemplates.changelogPathTemplate.match(changelogName).agent;
  }

  /**
   * Parse the changelog from Changelog resource.
   *
   * @param {string} changelogName
   *   A fully-qualified path representing Changelog resource.
   * @returns {string} A string representing the changelog.
   */
  matchChangelogFromChangelogName(changelogName: string) {
    return this.pathTemplates.changelogPathTemplate.match(changelogName)
      .changelog;
  }

  /**
   * Return a fully-qualified continuousTestResult resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} environment
   * @param {string} continuous_test_result
   * @returns {string} Resource name string.
   */
  continuousTestResultPath(
    project: string,
    location: string,
    agent: string,
    environment: string,
    continuousTestResult: string
  ) {
    return this.pathTemplates.continuousTestResultPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      environment: environment,
      continuous_test_result: continuousTestResult,
    });
  }

  /**
   * Parse the project from ContinuousTestResult resource.
   *
   * @param {string} continuousTestResultName
   *   A fully-qualified path representing ContinuousTestResult resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromContinuousTestResultName(continuousTestResultName: string) {
    return this.pathTemplates.continuousTestResultPathTemplate.match(
      continuousTestResultName
    ).project;
  }

  /**
   * Parse the location from ContinuousTestResult resource.
   *
   * @param {string} continuousTestResultName
   *   A fully-qualified path representing ContinuousTestResult resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromContinuousTestResultName(continuousTestResultName: string) {
    return this.pathTemplates.continuousTestResultPathTemplate.match(
      continuousTestResultName
    ).location;
  }

  /**
   * Parse the agent from ContinuousTestResult resource.
   *
   * @param {string} continuousTestResultName
   *   A fully-qualified path representing ContinuousTestResult resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromContinuousTestResultName(continuousTestResultName: string) {
    return this.pathTemplates.continuousTestResultPathTemplate.match(
      continuousTestResultName
    ).agent;
  }

  /**
   * Parse the environment from ContinuousTestResult resource.
   *
   * @param {string} continuousTestResultName
   *   A fully-qualified path representing ContinuousTestResult resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromContinuousTestResultName(
    continuousTestResultName: string
  ) {
    return this.pathTemplates.continuousTestResultPathTemplate.match(
      continuousTestResultName
    ).environment;
  }

  /**
   * Parse the continuous_test_result from ContinuousTestResult resource.
   *
   * @param {string} continuousTestResultName
   *   A fully-qualified path representing ContinuousTestResult resource.
   * @returns {string} A string representing the continuous_test_result.
   */
  matchContinuousTestResultFromContinuousTestResultName(
    continuousTestResultName: string
  ) {
    return this.pathTemplates.continuousTestResultPathTemplate.match(
      continuousTestResultName
    ).continuous_test_result;
  }

  /**
   * Return a fully-qualified deployment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} environment
   * @param {string} deployment
   * @returns {string} Resource name string.
   */
  deploymentPath(
    project: string,
    location: string,
    agent: string,
    environment: string,
    deployment: string
  ) {
    return this.pathTemplates.deploymentPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      environment: environment,
      deployment: deployment,
    });
  }

  /**
   * Parse the project from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .project;
  }

  /**
   * Parse the location from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .location;
  }

  /**
   * Parse the agent from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .agent;
  }

  /**
   * Parse the environment from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .environment;
  }

  /**
   * Parse the deployment from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .deployment;
  }

  /**
   * Return a fully-qualified entityType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  entityTypePath(
    project: string,
    location: string,
    agent: string,
    entityType: string
  ) {
    return this.pathTemplates.entityTypePathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      entity_type: entityType,
    });
  }

  /**
   * Parse the project from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .project;
  }

  /**
   * Parse the location from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .location;
  }

  /**
   * Parse the agent from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .agent;
  }

  /**
   * Parse the entity_type from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromEntityTypeName(entityTypeName: string) {
    return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .entity_type;
  }

  /**
   * Return a fully-qualified environment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} environment
   * @returns {string} Resource name string.
   */
  environmentPath(
    project: string,
    location: string,
    agent: string,
    environment: string
  ) {
    return this.pathTemplates.environmentPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      environment: environment,
    });
  }

  /**
   * Parse the project from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .project;
  }

  /**
   * Parse the location from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .location;
  }

  /**
   * Parse the agent from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .agent;
  }

  /**
   * Parse the environment from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .environment;
  }

  /**
   * Return a fully-qualified experiment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} environment
   * @param {string} experiment
   * @returns {string} Resource name string.
   */
  experimentPath(
    project: string,
    location: string,
    agent: string,
    environment: string,
    experiment: string
  ) {
    return this.pathTemplates.experimentPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      environment: environment,
      experiment: experiment,
    });
  }

  /**
   * Parse the project from Experiment resource.
   *
   * @param {string} experimentName
   *   A fully-qualified path representing Experiment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExperimentName(experimentName: string) {
    return this.pathTemplates.experimentPathTemplate.match(experimentName)
      .project;
  }

  /**
   * Parse the location from Experiment resource.
   *
   * @param {string} experimentName
   *   A fully-qualified path representing Experiment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExperimentName(experimentName: string) {
    return this.pathTemplates.experimentPathTemplate.match(experimentName)
      .location;
  }

  /**
   * Parse the agent from Experiment resource.
   *
   * @param {string} experimentName
   *   A fully-qualified path representing Experiment resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromExperimentName(experimentName: string) {
    return this.pathTemplates.experimentPathTemplate.match(experimentName)
      .agent;
  }

  /**
   * Parse the environment from Experiment resource.
   *
   * @param {string} experimentName
   *   A fully-qualified path representing Experiment resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromExperimentName(experimentName: string) {
    return this.pathTemplates.experimentPathTemplate.match(experimentName)
      .environment;
  }

  /**
   * Parse the experiment from Experiment resource.
   *
   * @param {string} experimentName
   *   A fully-qualified path representing Experiment resource.
   * @returns {string} A string representing the experiment.
   */
  matchExperimentFromExperimentName(experimentName: string) {
    return this.pathTemplates.experimentPathTemplate.match(experimentName)
      .experiment;
  }

  /**
   * Return a fully-qualified flow resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} flow
   * @returns {string} Resource name string.
   */
  flowPath(project: string, location: string, agent: string, flow: string) {
    return this.pathTemplates.flowPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      flow: flow,
    });
  }

  /**
   * Parse the project from Flow resource.
   *
   * @param {string} flowName
   *   A fully-qualified path representing Flow resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFlowName(flowName: string) {
    return this.pathTemplates.flowPathTemplate.match(flowName).project;
  }

  /**
   * Parse the location from Flow resource.
   *
   * @param {string} flowName
   *   A fully-qualified path representing Flow resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFlowName(flowName: string) {
    return this.pathTemplates.flowPathTemplate.match(flowName).location;
  }

  /**
   * Parse the agent from Flow resource.
   *
   * @param {string} flowName
   *   A fully-qualified path representing Flow resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromFlowName(flowName: string) {
    return this.pathTemplates.flowPathTemplate.match(flowName).agent;
  }

  /**
   * Parse the flow from Flow resource.
   *
   * @param {string} flowName
   *   A fully-qualified path representing Flow resource.
   * @returns {string} A string representing the flow.
   */
  matchFlowFromFlowName(flowName: string) {
    return this.pathTemplates.flowPathTemplate.match(flowName).flow;
  }

  /**
   * Return a fully-qualified flowValidationResult resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} flow
   * @returns {string} Resource name string.
   */
  flowValidationResultPath(
    project: string,
    location: string,
    agent: string,
    flow: string
  ) {
    return this.pathTemplates.flowValidationResultPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      flow: flow,
    });
  }

  /**
   * Parse the project from FlowValidationResult resource.
   *
   * @param {string} flowValidationResultName
   *   A fully-qualified path representing FlowValidationResult resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFlowValidationResultName(flowValidationResultName: string) {
    return this.pathTemplates.flowValidationResultPathTemplate.match(
      flowValidationResultName
    ).project;
  }

  /**
   * Parse the location from FlowValidationResult resource.
   *
   * @param {string} flowValidationResultName
   *   A fully-qualified path representing FlowValidationResult resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFlowValidationResultName(flowValidationResultName: string) {
    return this.pathTemplates.flowValidationResultPathTemplate.match(
      flowValidationResultName
    ).location;
  }

  /**
   * Parse the agent from FlowValidationResult resource.
   *
   * @param {string} flowValidationResultName
   *   A fully-qualified path representing FlowValidationResult resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromFlowValidationResultName(flowValidationResultName: string) {
    return this.pathTemplates.flowValidationResultPathTemplate.match(
      flowValidationResultName
    ).agent;
  }

  /**
   * Parse the flow from FlowValidationResult resource.
   *
   * @param {string} flowValidationResultName
   *   A fully-qualified path representing FlowValidationResult resource.
   * @returns {string} A string representing the flow.
   */
  matchFlowFromFlowValidationResultName(flowValidationResultName: string) {
    return this.pathTemplates.flowValidationResultPathTemplate.match(
      flowValidationResultName
    ).flow;
  }

  /**
   * Return a fully-qualified intent resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} intent
   * @returns {string} Resource name string.
   */
  intentPath(project: string, location: string, agent: string, intent: string) {
    return this.pathTemplates.intentPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      intent: intent,
    });
  }

  /**
   * Parse the project from Intent resource.
   *
   * @param {string} intentName
   *   A fully-qualified path representing Intent resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIntentName(intentName: string) {
    return this.pathTemplates.intentPathTemplate.match(intentName).project;
  }

  /**
   * Parse the location from Intent resource.
   *
   * @param {string} intentName
   *   A fully-qualified path representing Intent resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromIntentName(intentName: string) {
    return this.pathTemplates.intentPathTemplate.match(intentName).location;
  }

  /**
   * Parse the agent from Intent resource.
   *
   * @param {string} intentName
   *   A fully-qualified path representing Intent resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromIntentName(intentName: string) {
    return this.pathTemplates.intentPathTemplate.match(intentName).agent;
  }

  /**
   * Parse the intent from Intent resource.
   *
   * @param {string} intentName
   *   A fully-qualified path representing Intent resource.
   * @returns {string} A string representing the intent.
   */
  matchIntentFromIntentName(intentName: string) {
    return this.pathTemplates.intentPathTemplate.match(intentName).intent;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified page resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} flow
   * @param {string} page
   * @returns {string} Resource name string.
   */
  pagePath(
    project: string,
    location: string,
    agent: string,
    flow: string,
    page: string
  ) {
    return this.pathTemplates.pagePathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      flow: flow,
      page: page,
    });
  }

  /**
   * Parse the project from Page resource.
   *
   * @param {string} pageName
   *   A fully-qualified path representing Page resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPageName(pageName: string) {
    return this.pathTemplates.pagePathTemplate.match(pageName).project;
  }

  /**
   * Parse the location from Page resource.
   *
   * @param {string} pageName
   *   A fully-qualified path representing Page resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPageName(pageName: string) {
    return this.pathTemplates.pagePathTemplate.match(pageName).location;
  }

  /**
   * Parse the agent from Page resource.
   *
   * @param {string} pageName
   *   A fully-qualified path representing Page resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromPageName(pageName: string) {
    return this.pathTemplates.pagePathTemplate.match(pageName).agent;
  }

  /**
   * Parse the flow from Page resource.
   *
   * @param {string} pageName
   *   A fully-qualified path representing Page resource.
   * @returns {string} A string representing the flow.
   */
  matchFlowFromPageName(pageName: string) {
    return this.pathTemplates.pagePathTemplate.match(pageName).flow;
  }

  /**
   * Parse the page from Page resource.
   *
   * @param {string} pageName
   *   A fully-qualified path representing Page resource.
   * @returns {string} A string representing the page.
   */
  matchPageFromPageName(pageName: string) {
    return this.pathTemplates.pagePathTemplate.match(pageName).page;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectLocationAgentEnvironmentSession resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} environment
   * @param {string} session
   * @returns {string} Resource name string.
   */
  projectLocationAgentEnvironmentSessionPath(
    project: string,
    location: string,
    agent: string,
    environment: string,
    session: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionPathTemplate.render(
      {
        project: project,
        location: location,
        agent: agent,
        environment: environment,
        session: session,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationAgentEnvironmentSession resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionName
   *   A fully-qualified path representing project_location_agent_environment_session resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationAgentEnvironmentSessionName(
    projectLocationAgentEnvironmentSessionName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionPathTemplate.match(
      projectLocationAgentEnvironmentSessionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationAgentEnvironmentSession resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionName
   *   A fully-qualified path representing project_location_agent_environment_session resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationAgentEnvironmentSessionName(
    projectLocationAgentEnvironmentSessionName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionPathTemplate.match(
      projectLocationAgentEnvironmentSessionName
    ).location;
  }

  /**
   * Parse the agent from ProjectLocationAgentEnvironmentSession resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionName
   *   A fully-qualified path representing project_location_agent_environment_session resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromProjectLocationAgentEnvironmentSessionName(
    projectLocationAgentEnvironmentSessionName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionPathTemplate.match(
      projectLocationAgentEnvironmentSessionName
    ).agent;
  }

  /**
   * Parse the environment from ProjectLocationAgentEnvironmentSession resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionName
   *   A fully-qualified path representing project_location_agent_environment_session resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromProjectLocationAgentEnvironmentSessionName(
    projectLocationAgentEnvironmentSessionName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionPathTemplate.match(
      projectLocationAgentEnvironmentSessionName
    ).environment;
  }

  /**
   * Parse the session from ProjectLocationAgentEnvironmentSession resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionName
   *   A fully-qualified path representing project_location_agent_environment_session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationAgentEnvironmentSessionName(
    projectLocationAgentEnvironmentSessionName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionPathTemplate.match(
      projectLocationAgentEnvironmentSessionName
    ).session;
  }

  /**
   * Return a fully-qualified projectLocationAgentEnvironmentSessionEntityType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} environment
   * @param {string} session
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  projectLocationAgentEnvironmentSessionEntityTypePath(
    project: string,
    location: string,
    agent: string,
    environment: string,
    session: string,
    entityType: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.render(
      {
        project: project,
        location: location,
        agent: agent,
        environment: environment,
        session: session,
        entity_type: entityType,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).location;
  }

  /**
   * Parse the agent from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).agent;
  }

  /**
   * Parse the environment from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).environment;
  }

  /**
   * Parse the session from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).session;
  }

  /**
   * Parse the entity_type from ProjectLocationAgentEnvironmentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentEnvironmentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_environment_session_entity_type resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromProjectLocationAgentEnvironmentSessionEntityTypeName(
    projectLocationAgentEnvironmentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentEnvironmentSessionEntityTypePathTemplate.match(
      projectLocationAgentEnvironmentSessionEntityTypeName
    ).entity_type;
  }

  /**
   * Return a fully-qualified projectLocationAgentSession resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} session
   * @returns {string} Resource name string.
   */
  projectLocationAgentSessionPath(
    project: string,
    location: string,
    agent: string,
    session: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      session: session,
    });
  }

  /**
   * Parse the project from ProjectLocationAgentSession resource.
   *
   * @param {string} projectLocationAgentSessionName
   *   A fully-qualified path representing project_location_agent_session resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationAgentSessionName(
    projectLocationAgentSessionName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionPathTemplate.match(
      projectLocationAgentSessionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationAgentSession resource.
   *
   * @param {string} projectLocationAgentSessionName
   *   A fully-qualified path representing project_location_agent_session resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationAgentSessionName(
    projectLocationAgentSessionName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionPathTemplate.match(
      projectLocationAgentSessionName
    ).location;
  }

  /**
   * Parse the agent from ProjectLocationAgentSession resource.
   *
   * @param {string} projectLocationAgentSessionName
   *   A fully-qualified path representing project_location_agent_session resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromProjectLocationAgentSessionName(
    projectLocationAgentSessionName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionPathTemplate.match(
      projectLocationAgentSessionName
    ).agent;
  }

  /**
   * Parse the session from ProjectLocationAgentSession resource.
   *
   * @param {string} projectLocationAgentSessionName
   *   A fully-qualified path representing project_location_agent_session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationAgentSessionName(
    projectLocationAgentSessionName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionPathTemplate.match(
      projectLocationAgentSessionName
    ).session;
  }

  /**
   * Return a fully-qualified projectLocationAgentSessionEntityType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} session
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  projectLocationAgentSessionEntityTypePath(
    project: string,
    location: string,
    agent: string,
    session: string,
    entityType: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.render(
      {
        project: project,
        location: location,
        agent: agent,
        session: session,
        entity_type: entityType,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationAgentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_session_entity_type resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationAgentSessionEntityTypeName(
    projectLocationAgentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(
      projectLocationAgentSessionEntityTypeName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationAgentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_session_entity_type resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationAgentSessionEntityTypeName(
    projectLocationAgentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(
      projectLocationAgentSessionEntityTypeName
    ).location;
  }

  /**
   * Parse the agent from ProjectLocationAgentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_session_entity_type resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromProjectLocationAgentSessionEntityTypeName(
    projectLocationAgentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(
      projectLocationAgentSessionEntityTypeName
    ).agent;
  }

  /**
   * Parse the session from ProjectLocationAgentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_session_entity_type resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationAgentSessionEntityTypeName(
    projectLocationAgentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(
      projectLocationAgentSessionEntityTypeName
    ).session;
  }

  /**
   * Parse the entity_type from ProjectLocationAgentSessionEntityType resource.
   *
   * @param {string} projectLocationAgentSessionEntityTypeName
   *   A fully-qualified path representing project_location_agent_session_entity_type resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromProjectLocationAgentSessionEntityTypeName(
    projectLocationAgentSessionEntityTypeName: string
  ) {
    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(
      projectLocationAgentSessionEntityTypeName
    ).entity_type;
  }

  /**
   * Return a fully-qualified securitySettings resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} security_settings
   * @returns {string} Resource name string.
   */
  securitySettingsPath(
    project: string,
    location: string,
    securitySettings: string
  ) {
    return this.pathTemplates.securitySettingsPathTemplate.render({
      project: project,
      location: location,
      security_settings: securitySettings,
    });
  }

  /**
   * Parse the project from SecuritySettings resource.
   *
   * @param {string} securitySettingsName
   *   A fully-qualified path representing SecuritySettings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSecuritySettingsName(securitySettingsName: string) {
    return this.pathTemplates.securitySettingsPathTemplate.match(
      securitySettingsName
    ).project;
  }

  /**
   * Parse the location from SecuritySettings resource.
   *
   * @param {string} securitySettingsName
   *   A fully-qualified path representing SecuritySettings resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSecuritySettingsName(securitySettingsName: string) {
    return this.pathTemplates.securitySettingsPathTemplate.match(
      securitySettingsName
    ).location;
  }

  /**
   * Parse the security_settings from SecuritySettings resource.
   *
   * @param {string} securitySettingsName
   *   A fully-qualified path representing SecuritySettings resource.
   * @returns {string} A string representing the security_settings.
   */
  matchSecuritySettingsFromSecuritySettingsName(securitySettingsName: string) {
    return this.pathTemplates.securitySettingsPathTemplate.match(
      securitySettingsName
    ).security_settings;
  }

  /**
   * Return a fully-qualified testCase resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} test_case
   * @returns {string} Resource name string.
   */
  testCasePath(
    project: string,
    location: string,
    agent: string,
    testCase: string
  ) {
    return this.pathTemplates.testCasePathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      test_case: testCase,
    });
  }

  /**
   * Parse the project from TestCase resource.
   *
   * @param {string} testCaseName
   *   A fully-qualified path representing TestCase resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTestCaseName(testCaseName: string) {
    return this.pathTemplates.testCasePathTemplate.match(testCaseName).project;
  }

  /**
   * Parse the location from TestCase resource.
   *
   * @param {string} testCaseName
   *   A fully-qualified path representing TestCase resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTestCaseName(testCaseName: string) {
    return this.pathTemplates.testCasePathTemplate.match(testCaseName).location;
  }

  /**
   * Parse the agent from TestCase resource.
   *
   * @param {string} testCaseName
   *   A fully-qualified path representing TestCase resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromTestCaseName(testCaseName: string) {
    return this.pathTemplates.testCasePathTemplate.match(testCaseName).agent;
  }

  /**
   * Parse the test_case from TestCase resource.
   *
   * @param {string} testCaseName
   *   A fully-qualified path representing TestCase resource.
   * @returns {string} A string representing the test_case.
   */
  matchTestCaseFromTestCaseName(testCaseName: string) {
    return this.pathTemplates.testCasePathTemplate.match(testCaseName)
      .test_case;
  }

  /**
   * Return a fully-qualified testCaseResult resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} test_case
   * @param {string} result
   * @returns {string} Resource name string.
   */
  testCaseResultPath(
    project: string,
    location: string,
    agent: string,
    testCase: string,
    result: string
  ) {
    return this.pathTemplates.testCaseResultPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      test_case: testCase,
      result: result,
    });
  }

  /**
   * Parse the project from TestCaseResult resource.
   *
   * @param {string} testCaseResultName
   *   A fully-qualified path representing TestCaseResult resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTestCaseResultName(testCaseResultName: string) {
    return this.pathTemplates.testCaseResultPathTemplate.match(
      testCaseResultName
    ).project;
  }

  /**
   * Parse the location from TestCaseResult resource.
   *
   * @param {string} testCaseResultName
   *   A fully-qualified path representing TestCaseResult resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTestCaseResultName(testCaseResultName: string) {
    return this.pathTemplates.testCaseResultPathTemplate.match(
      testCaseResultName
    ).location;
  }

  /**
   * Parse the agent from TestCaseResult resource.
   *
   * @param {string} testCaseResultName
   *   A fully-qualified path representing TestCaseResult resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromTestCaseResultName(testCaseResultName: string) {
    return this.pathTemplates.testCaseResultPathTemplate.match(
      testCaseResultName
    ).agent;
  }

  /**
   * Parse the test_case from TestCaseResult resource.
   *
   * @param {string} testCaseResultName
   *   A fully-qualified path representing TestCaseResult resource.
   * @returns {string} A string representing the test_case.
   */
  matchTestCaseFromTestCaseResultName(testCaseResultName: string) {
    return this.pathTemplates.testCaseResultPathTemplate.match(
      testCaseResultName
    ).test_case;
  }

  /**
   * Parse the result from TestCaseResult resource.
   *
   * @param {string} testCaseResultName
   *   A fully-qualified path representing TestCaseResult resource.
   * @returns {string} A string representing the result.
   */
  matchResultFromTestCaseResultName(testCaseResultName: string) {
    return this.pathTemplates.testCaseResultPathTemplate.match(
      testCaseResultName
    ).result;
  }

  /**
   * Return a fully-qualified transitionRouteGroup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} flow
   * @param {string} transition_route_group
   * @returns {string} Resource name string.
   */
  transitionRouteGroupPath(
    project: string,
    location: string,
    agent: string,
    flow: string,
    transitionRouteGroup: string
  ) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      flow: flow,
      transition_route_group: transitionRouteGroup,
    });
  }

  /**
   * Parse the project from TransitionRouteGroup resource.
   *
   * @param {string} transitionRouteGroupName
   *   A fully-qualified path representing TransitionRouteGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTransitionRouteGroupName(transitionRouteGroupName: string) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.match(
      transitionRouteGroupName
    ).project;
  }

  /**
   * Parse the location from TransitionRouteGroup resource.
   *
   * @param {string} transitionRouteGroupName
   *   A fully-qualified path representing TransitionRouteGroup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTransitionRouteGroupName(transitionRouteGroupName: string) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.match(
      transitionRouteGroupName
    ).location;
  }

  /**
   * Parse the agent from TransitionRouteGroup resource.
   *
   * @param {string} transitionRouteGroupName
   *   A fully-qualified path representing TransitionRouteGroup resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromTransitionRouteGroupName(transitionRouteGroupName: string) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.match(
      transitionRouteGroupName
    ).agent;
  }

  /**
   * Parse the flow from TransitionRouteGroup resource.
   *
   * @param {string} transitionRouteGroupName
   *   A fully-qualified path representing TransitionRouteGroup resource.
   * @returns {string} A string representing the flow.
   */
  matchFlowFromTransitionRouteGroupName(transitionRouteGroupName: string) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.match(
      transitionRouteGroupName
    ).flow;
  }

  /**
   * Parse the transition_route_group from TransitionRouteGroup resource.
   *
   * @param {string} transitionRouteGroupName
   *   A fully-qualified path representing TransitionRouteGroup resource.
   * @returns {string} A string representing the transition_route_group.
   */
  matchTransitionRouteGroupFromTransitionRouteGroupName(
    transitionRouteGroupName: string
  ) {
    return this.pathTemplates.transitionRouteGroupPathTemplate.match(
      transitionRouteGroupName
    ).transition_route_group;
  }

  /**
   * Return a fully-qualified version resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} flow
   * @param {string} version
   * @returns {string} Resource name string.
   */
  versionPath(
    project: string,
    location: string,
    agent: string,
    flow: string,
    version: string
  ) {
    return this.pathTemplates.versionPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      flow: flow,
      version: version,
    });
  }

  /**
   * Parse the project from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).project;
  }

  /**
   * Parse the location from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).location;
  }

  /**
   * Parse the agent from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).agent;
  }

  /**
   * Parse the flow from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the flow.
   */
  matchFlowFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).flow;
  }

  /**
   * Parse the version from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).version;
  }

  /**
   * Return a fully-qualified webhook resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} agent
   * @param {string} webhook
   * @returns {string} Resource name string.
   */
  webhookPath(
    project: string,
    location: string,
    agent: string,
    webhook: string
  ) {
    return this.pathTemplates.webhookPathTemplate.render({
      project: project,
      location: location,
      agent: agent,
      webhook: webhook,
    });
  }

  /**
   * Parse the project from Webhook resource.
   *
   * @param {string} webhookName
   *   A fully-qualified path representing Webhook resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromWebhookName(webhookName: string) {
    return this.pathTemplates.webhookPathTemplate.match(webhookName).project;
  }

  /**
   * Parse the location from Webhook resource.
   *
   * @param {string} webhookName
   *   A fully-qualified path representing Webhook resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromWebhookName(webhookName: string) {
    return this.pathTemplates.webhookPathTemplate.match(webhookName).location;
  }

  /**
   * Parse the agent from Webhook resource.
   *
   * @param {string} webhookName
   *   A fully-qualified path representing Webhook resource.
   * @returns {string} A string representing the agent.
   */
  matchAgentFromWebhookName(webhookName: string) {
    return this.pathTemplates.webhookPathTemplate.match(webhookName).agent;
  }

  /**
   * Parse the webhook from Webhook resource.
   *
   * @param {string} webhookName
   *   A fully-qualified path representing Webhook resource.
   * @returns {string} A string representing the webhook.
   */
  matchWebhookFromWebhookName(webhookName: string) {
    return this.pathTemplates.webhookPathTemplate.match(webhookName).webhook;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.webhooksStub && !this._terminated) {
      return this.webhooksStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
