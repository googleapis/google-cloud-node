// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta/game_server_deployments_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './game_server_deployments_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The game server deployment is used to control the deployment of Agones
 *  fleets.
 * @class
 * @memberof v1beta
 */
export class GameServerDeploymentsServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  gameServerDeploymentsServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of GameServerDeploymentsServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new GameServerDeploymentsServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof GameServerDeploymentsServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      gameServerClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/realms/{realm}/gameServerClusters/{cluster}'
      ),
      gameServerConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/gameServerDeployments/{deployment}/configs/{config}'
      ),
      gameServerDeploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/gameServerDeployments/{deployment}'
      ),
      gameServerDeploymentRolloutPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/gameServerDeployments/{deployment}/rollout'
      ),
      realmPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/realms/{realm}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listGameServerDeployments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'gameServerDeployments'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1beta/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1beta/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1beta/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1beta/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createGameServerDeploymentResponse = protoFilesRoot.lookup(
      '.google.cloud.gaming.v1beta.GameServerDeployment'
    ) as gax.protobuf.Type;
    const createGameServerDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.gaming.v1beta.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteGameServerDeploymentResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteGameServerDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.gaming.v1beta.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateGameServerDeploymentResponse = protoFilesRoot.lookup(
      '.google.cloud.gaming.v1beta.GameServerDeployment'
    ) as gax.protobuf.Type;
    const updateGameServerDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.gaming.v1beta.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateGameServerDeploymentRolloutResponse = protoFilesRoot.lookup(
      '.google.cloud.gaming.v1beta.GameServerDeployment'
    ) as gax.protobuf.Type;
    const updateGameServerDeploymentRolloutMetadata = protoFilesRoot.lookup(
      '.google.cloud.gaming.v1beta.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createGameServerDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createGameServerDeploymentResponse.decode.bind(
          createGameServerDeploymentResponse
        ),
        createGameServerDeploymentMetadata.decode.bind(
          createGameServerDeploymentMetadata
        )
      ),
      deleteGameServerDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteGameServerDeploymentResponse.decode.bind(
          deleteGameServerDeploymentResponse
        ),
        deleteGameServerDeploymentMetadata.decode.bind(
          deleteGameServerDeploymentMetadata
        )
      ),
      updateGameServerDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateGameServerDeploymentResponse.decode.bind(
          updateGameServerDeploymentResponse
        ),
        updateGameServerDeploymentMetadata.decode.bind(
          updateGameServerDeploymentMetadata
        )
      ),
      updateGameServerDeploymentRollout:
        new this._gaxModule.LongrunningDescriptor(
          this.operationsClient,
          updateGameServerDeploymentRolloutResponse.decode.bind(
            updateGameServerDeploymentRolloutResponse
          ),
          updateGameServerDeploymentRolloutMetadata.decode.bind(
            updateGameServerDeploymentRolloutMetadata
          )
        ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.gaming.v1beta.GameServerDeploymentsService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.gameServerDeploymentsServiceStub) {
      return this.gameServerDeploymentsServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.gaming.v1beta.GameServerDeploymentsService.
    this.gameServerDeploymentsServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.gaming.v1beta.GameServerDeploymentsService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.gaming.v1beta
            .GameServerDeploymentsService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const gameServerDeploymentsServiceStubMethods = [
      'listGameServerDeployments',
      'getGameServerDeployment',
      'createGameServerDeployment',
      'deleteGameServerDeployment',
      'updateGameServerDeployment',
      'getGameServerDeploymentRollout',
      'updateGameServerDeploymentRollout',
      'previewGameServerDeploymentRollout',
      'fetchDeploymentState',
    ];
    for (const methodName of gameServerDeploymentsServiceStubMethods) {
      const callPromise = this.gameServerDeploymentsServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.gameServerDeploymentsServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'gameservices.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'gameservices.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of a single game server deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the game server delpoyment to retrieve. Uses the
   *   form:
   *
   *   `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GameServerDeployment]{@link google.cloud.gaming.v1beta.GameServerDeployment}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.get_game_server_deployment.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_GetGameServerDeployment_async
   */
  getGameServerDeployment(
    request?: protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gaming.v1beta.IGameServerDeployment,
      (
        | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getGameServerDeployment(
    request: protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gaming.v1beta.IGameServerDeployment,
      | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGameServerDeployment(
    request: protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRequest,
    callback: Callback<
      protos.google.cloud.gaming.v1beta.IGameServerDeployment,
      | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGameServerDeployment(
    request?: protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gaming.v1beta.IGameServerDeployment,
          | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gaming.v1beta.IGameServerDeployment,
      | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gaming.v1beta.IGameServerDeployment,
      (
        | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGameServerDeployment(
      request,
      options,
      callback
    );
  }
  /**
   * Gets details a single game server deployment rollout.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the game server delpoyment to retrieve. Uses the
   *   form:
   *
   *   `projects/{project}/locations/{location}/gameServerDeployments/{deployment}/rollout`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GameServerDeploymentRollout]{@link google.cloud.gaming.v1beta.GameServerDeploymentRollout}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.get_game_server_deployment_rollout.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_GetGameServerDeploymentRollout_async
   */
  getGameServerDeploymentRollout(
    request?: protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRolloutRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gaming.v1beta.IGameServerDeploymentRollout,
      (
        | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRolloutRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getGameServerDeploymentRollout(
    request: protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRolloutRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gaming.v1beta.IGameServerDeploymentRollout,
      | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRolloutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGameServerDeploymentRollout(
    request: protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRolloutRequest,
    callback: Callback<
      protos.google.cloud.gaming.v1beta.IGameServerDeploymentRollout,
      | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRolloutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGameServerDeploymentRollout(
    request?: protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRolloutRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gaming.v1beta.IGameServerDeploymentRollout,
          | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRolloutRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gaming.v1beta.IGameServerDeploymentRollout,
      | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRolloutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gaming.v1beta.IGameServerDeploymentRollout,
      (
        | protos.google.cloud.gaming.v1beta.IGetGameServerDeploymentRolloutRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGameServerDeploymentRollout(
      request,
      options,
      callback
    );
  }
  /**
   * Previews the game server deployment rollout. This API does not mutate the
   * rollout resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.gaming.v1beta.GameServerDeploymentRollout} request.rollout
   *   Required. The game server deployment rollout to be updated.
   *   Only fields specified in update_mask are updated.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Mask of fields to update. At least one path must be supplied in
   *   this field. For the `FieldMask` definition, see
   *
   *   https:
   *   //developers.google.com/protocol-buffers
   *   // /docs/reference/google.protobuf#fieldmask
   * @param {google.protobuf.Timestamp} [request.previewTime]
   *   Optional. The target timestamp to compute the preview. Defaults to the
   *   immediately after the proposed rollout completes.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PreviewGameServerDeploymentRolloutResponse]{@link google.cloud.gaming.v1beta.PreviewGameServerDeploymentRolloutResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.preview_game_server_deployment_rollout.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_PreviewGameServerDeploymentRollout_async
   */
  previewGameServerDeploymentRollout(
    request?: protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutResponse,
      (
        | protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  previewGameServerDeploymentRollout(
    request: protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutResponse,
      | protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  previewGameServerDeploymentRollout(
    request: protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutRequest,
    callback: Callback<
      protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutResponse,
      | protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  previewGameServerDeploymentRollout(
    request?: protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutResponse,
          | protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutResponse,
      | protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutResponse,
      (
        | protos.google.cloud.gaming.v1beta.IPreviewGameServerDeploymentRolloutRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'rollout.name': request.rollout!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.previewGameServerDeploymentRollout(
      request,
      options,
      callback
    );
  }
  /**
   * Retrieves information about the current state of the game server
   * deployment. Gathers all the Agones fleets and Agones autoscalers,
   * including fleets running an older version of the game server deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the game server delpoyment. Uses the form:
   *
   *   `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [FetchDeploymentStateResponse]{@link google.cloud.gaming.v1beta.FetchDeploymentStateResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.fetch_deployment_state.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_FetchDeploymentState_async
   */
  fetchDeploymentState(
    request?: protos.google.cloud.gaming.v1beta.IFetchDeploymentStateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gaming.v1beta.IFetchDeploymentStateResponse,
      (
        | protos.google.cloud.gaming.v1beta.IFetchDeploymentStateRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  fetchDeploymentState(
    request: protos.google.cloud.gaming.v1beta.IFetchDeploymentStateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gaming.v1beta.IFetchDeploymentStateResponse,
      | protos.google.cloud.gaming.v1beta.IFetchDeploymentStateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchDeploymentState(
    request: protos.google.cloud.gaming.v1beta.IFetchDeploymentStateRequest,
    callback: Callback<
      protos.google.cloud.gaming.v1beta.IFetchDeploymentStateResponse,
      | protos.google.cloud.gaming.v1beta.IFetchDeploymentStateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchDeploymentState(
    request?: protos.google.cloud.gaming.v1beta.IFetchDeploymentStateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gaming.v1beta.IFetchDeploymentStateResponse,
          | protos.google.cloud.gaming.v1beta.IFetchDeploymentStateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gaming.v1beta.IFetchDeploymentStateResponse,
      | protos.google.cloud.gaming.v1beta.IFetchDeploymentStateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gaming.v1beta.IFetchDeploymentStateResponse,
      (
        | protos.google.cloud.gaming.v1beta.IFetchDeploymentStateRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchDeploymentState(request, options, callback);
  }

  /**
   * Creates a new game server deployment in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource name. Uses the form:
   *   `projects/{project}/locations/{location}`.
   * @param {string} request.deploymentId
   *   Required. The ID of the game server delpoyment resource to be created.
   * @param {google.cloud.gaming.v1beta.GameServerDeployment} request.gameServerDeployment
   *   Required. The game server delpoyment resource to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.create_game_server_deployment.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_CreateGameServerDeployment_async
   */
  createGameServerDeployment(
    request?: protos.google.cloud.gaming.v1beta.ICreateGameServerDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createGameServerDeployment(
    request: protos.google.cloud.gaming.v1beta.ICreateGameServerDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGameServerDeployment(
    request: protos.google.cloud.gaming.v1beta.ICreateGameServerDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGameServerDeployment(
    request?: protos.google.cloud.gaming.v1beta.ICreateGameServerDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gaming.v1beta.IGameServerDeployment,
            protos.google.cloud.gaming.v1beta.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createGameServerDeployment(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createGameServerDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.create_game_server_deployment.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_CreateGameServerDeployment_async
   */
  async checkCreateGameServerDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gaming.v1beta.GameServerDeployment,
      protos.google.cloud.gaming.v1beta.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createGameServerDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gaming.v1beta.GameServerDeployment,
      protos.google.cloud.gaming.v1beta.OperationMetadata
    >;
  }
  /**
   * Deletes a single game server deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the game server delpoyment to delete. Uses the form:
   *
   *   `projects/{project}/locations/{location}/gameServerDeployments/{deployment}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.delete_game_server_deployment.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_DeleteGameServerDeployment_async
   */
  deleteGameServerDeployment(
    request?: protos.google.cloud.gaming.v1beta.IDeleteGameServerDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteGameServerDeployment(
    request: protos.google.cloud.gaming.v1beta.IDeleteGameServerDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGameServerDeployment(
    request: protos.google.cloud.gaming.v1beta.IDeleteGameServerDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGameServerDeployment(
    request?: protos.google.cloud.gaming.v1beta.IDeleteGameServerDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gaming.v1beta.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteGameServerDeployment(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteGameServerDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.delete_game_server_deployment.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_DeleteGameServerDeployment_async
   */
  async checkDeleteGameServerDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gaming.v1beta.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteGameServerDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gaming.v1beta.OperationMetadata
    >;
  }
  /**
   * Patches a game server deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.gaming.v1beta.GameServerDeployment} request.gameServerDeployment
   *   Required. The game server delpoyment to be updated.
   *   Only fields specified in update_mask are updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update. At least one path must be supplied in
   *   this field. For the `FieldMask` definition, see
   *
   *   https:
   *   //developers.google.com/protocol-buffers
   *   // /docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.update_game_server_deployment.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_UpdateGameServerDeployment_async
   */
  updateGameServerDeployment(
    request?: protos.google.cloud.gaming.v1beta.IUpdateGameServerDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateGameServerDeployment(
    request: protos.google.cloud.gaming.v1beta.IUpdateGameServerDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGameServerDeployment(
    request: protos.google.cloud.gaming.v1beta.IUpdateGameServerDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGameServerDeployment(
    request?: protos.google.cloud.gaming.v1beta.IUpdateGameServerDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gaming.v1beta.IGameServerDeployment,
            protos.google.cloud.gaming.v1beta.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'game_server_deployment.name': request.gameServerDeployment!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateGameServerDeployment(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateGameServerDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.update_game_server_deployment.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_UpdateGameServerDeployment_async
   */
  async checkUpdateGameServerDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gaming.v1beta.GameServerDeployment,
      protos.google.cloud.gaming.v1beta.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateGameServerDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gaming.v1beta.GameServerDeployment,
      protos.google.cloud.gaming.v1beta.OperationMetadata
    >;
  }
  /**
   * Patches a single game server deployment rollout.
   * The method will not return an error if the update does not affect any
   * existing realms. For example - if the default_game_server_config is changed
   * but all existing realms use the override, that is valid. Similarly, if a
   * non existing realm is explicitly called out in game_server_config_overrides
   * field, that will also not result in an error.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.gaming.v1beta.GameServerDeploymentRollout} request.rollout
   *   Required. The game server delpoyment rollout to be updated.
   *   Only fields specified in update_mask are updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update. At least one path must be supplied in
   *   this field. For the `FieldMask` definition, see
   *
   *   https:
   *   //developers.google.com/protocol-buffers
   *   // /docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.update_game_server_deployment_rollout.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_UpdateGameServerDeploymentRollout_async
   */
  updateGameServerDeploymentRollout(
    request?: protos.google.cloud.gaming.v1beta.IUpdateGameServerDeploymentRolloutRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateGameServerDeploymentRollout(
    request: protos.google.cloud.gaming.v1beta.IUpdateGameServerDeploymentRolloutRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGameServerDeploymentRollout(
    request: protos.google.cloud.gaming.v1beta.IUpdateGameServerDeploymentRolloutRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGameServerDeploymentRollout(
    request?: protos.google.cloud.gaming.v1beta.IUpdateGameServerDeploymentRolloutRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gaming.v1beta.IGameServerDeployment,
            protos.google.cloud.gaming.v1beta.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gaming.v1beta.IGameServerDeployment,
        protos.google.cloud.gaming.v1beta.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'rollout.name': request.rollout!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateGameServerDeploymentRollout(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateGameServerDeploymentRollout()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.update_game_server_deployment_rollout.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_UpdateGameServerDeploymentRollout_async
   */
  async checkUpdateGameServerDeploymentRolloutProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gaming.v1beta.GameServerDeployment,
      protos.google.cloud.gaming.v1beta.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateGameServerDeploymentRollout,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gaming.v1beta.GameServerDeployment,
      protos.google.cloud.gaming.v1beta.OperationMetadata
    >;
  }
  /**
   * Lists game server deployments in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource name. Uses the form:
   *   `projects/{project}/locations/{location}`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.  If unspecified, the
   *   server will pick an appropriate default. The server may return fewer items
   *   than requested. A caller should only rely on response's
   *   {@link google.cloud.gaming.v1beta.ListGameServerDeploymentsResponse.next_page_token|next_page_token}
   *   to determine if there are more GameServerDeployments left to be queried.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request,
   *   if any.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specifies the ordering of results following syntax at
   *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [GameServerDeployment]{@link google.cloud.gaming.v1beta.GameServerDeployment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listGameServerDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listGameServerDeployments(
    request?: protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gaming.v1beta.IGameServerDeployment[],
      protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest | null,
      protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsResponse
    ]
  >;
  listGameServerDeployments(
    request: protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest,
      | protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.gaming.v1beta.IGameServerDeployment
    >
  ): void;
  listGameServerDeployments(
    request: protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest,
      | protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.gaming.v1beta.IGameServerDeployment
    >
  ): void;
  listGameServerDeployments(
    request?: protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest,
          | protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsResponse
          | null
          | undefined,
          protos.google.cloud.gaming.v1beta.IGameServerDeployment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest,
      | protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.gaming.v1beta.IGameServerDeployment
    >
  ): Promise<
    [
      protos.google.cloud.gaming.v1beta.IGameServerDeployment[],
      protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest | null,
      protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listGameServerDeployments(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource name. Uses the form:
   *   `projects/{project}/locations/{location}`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.  If unspecified, the
   *   server will pick an appropriate default. The server may return fewer items
   *   than requested. A caller should only rely on response's
   *   {@link google.cloud.gaming.v1beta.ListGameServerDeploymentsResponse.next_page_token|next_page_token}
   *   to determine if there are more GameServerDeployments left to be queried.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request,
   *   if any.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specifies the ordering of results following syntax at
   *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [GameServerDeployment]{@link google.cloud.gaming.v1beta.GameServerDeployment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listGameServerDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listGameServerDeploymentsStream(
    request?: protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGameServerDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGameServerDeployments.createStream(
      this.innerApiCalls.listGameServerDeployments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listGameServerDeployments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource name. Uses the form:
   *   `projects/{project}/locations/{location}`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.  If unspecified, the
   *   server will pick an appropriate default. The server may return fewer items
   *   than requested. A caller should only rely on response's
   *   {@link google.cloud.gaming.v1beta.ListGameServerDeploymentsResponse.next_page_token|next_page_token}
   *   to determine if there are more GameServerDeployments left to be queried.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous List request,
   *   if any.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specifies the ordering of results following syntax at
   *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [GameServerDeployment]{@link google.cloud.gaming.v1beta.GameServerDeployment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/game_server_deployments_service.list_game_server_deployments.js</caption>
   * region_tag:gameservices_v1beta_generated_GameServerDeploymentsService_ListGameServerDeployments_async
   */
  listGameServerDeploymentsAsync(
    request?: protos.google.cloud.gaming.v1beta.IListGameServerDeploymentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gaming.v1beta.IGameServerDeployment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGameServerDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGameServerDeployments.asyncIterate(
      this.innerApiCalls['listGameServerDeployments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gaming.v1beta.IGameServerDeployment>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified gameServerCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} realm
   * @param {string} cluster
   * @returns {string} Resource name string.
   */
  gameServerClusterPath(
    project: string,
    location: string,
    realm: string,
    cluster: string
  ) {
    return this.pathTemplates.gameServerClusterPathTemplate.render({
      project: project,
      location: location,
      realm: realm,
      cluster: cluster,
    });
  }

  /**
   * Parse the project from GameServerCluster resource.
   *
   * @param {string} gameServerClusterName
   *   A fully-qualified path representing GameServerCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGameServerClusterName(gameServerClusterName: string) {
    return this.pathTemplates.gameServerClusterPathTemplate.match(
      gameServerClusterName
    ).project;
  }

  /**
   * Parse the location from GameServerCluster resource.
   *
   * @param {string} gameServerClusterName
   *   A fully-qualified path representing GameServerCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGameServerClusterName(gameServerClusterName: string) {
    return this.pathTemplates.gameServerClusterPathTemplate.match(
      gameServerClusterName
    ).location;
  }

  /**
   * Parse the realm from GameServerCluster resource.
   *
   * @param {string} gameServerClusterName
   *   A fully-qualified path representing GameServerCluster resource.
   * @returns {string} A string representing the realm.
   */
  matchRealmFromGameServerClusterName(gameServerClusterName: string) {
    return this.pathTemplates.gameServerClusterPathTemplate.match(
      gameServerClusterName
    ).realm;
  }

  /**
   * Parse the cluster from GameServerCluster resource.
   *
   * @param {string} gameServerClusterName
   *   A fully-qualified path representing GameServerCluster resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromGameServerClusterName(gameServerClusterName: string) {
    return this.pathTemplates.gameServerClusterPathTemplate.match(
      gameServerClusterName
    ).cluster;
  }

  /**
   * Return a fully-qualified gameServerConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment
   * @param {string} config
   * @returns {string} Resource name string.
   */
  gameServerConfigPath(
    project: string,
    location: string,
    deployment: string,
    config: string
  ) {
    return this.pathTemplates.gameServerConfigPathTemplate.render({
      project: project,
      location: location,
      deployment: deployment,
      config: config,
    });
  }

  /**
   * Parse the project from GameServerConfig resource.
   *
   * @param {string} gameServerConfigName
   *   A fully-qualified path representing GameServerConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGameServerConfigName(gameServerConfigName: string) {
    return this.pathTemplates.gameServerConfigPathTemplate.match(
      gameServerConfigName
    ).project;
  }

  /**
   * Parse the location from GameServerConfig resource.
   *
   * @param {string} gameServerConfigName
   *   A fully-qualified path representing GameServerConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGameServerConfigName(gameServerConfigName: string) {
    return this.pathTemplates.gameServerConfigPathTemplate.match(
      gameServerConfigName
    ).location;
  }

  /**
   * Parse the deployment from GameServerConfig resource.
   *
   * @param {string} gameServerConfigName
   *   A fully-qualified path representing GameServerConfig resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromGameServerConfigName(gameServerConfigName: string) {
    return this.pathTemplates.gameServerConfigPathTemplate.match(
      gameServerConfigName
    ).deployment;
  }

  /**
   * Parse the config from GameServerConfig resource.
   *
   * @param {string} gameServerConfigName
   *   A fully-qualified path representing GameServerConfig resource.
   * @returns {string} A string representing the config.
   */
  matchConfigFromGameServerConfigName(gameServerConfigName: string) {
    return this.pathTemplates.gameServerConfigPathTemplate.match(
      gameServerConfigName
    ).config;
  }

  /**
   * Return a fully-qualified gameServerDeployment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment
   * @returns {string} Resource name string.
   */
  gameServerDeploymentPath(
    project: string,
    location: string,
    deployment: string
  ) {
    return this.pathTemplates.gameServerDeploymentPathTemplate.render({
      project: project,
      location: location,
      deployment: deployment,
    });
  }

  /**
   * Parse the project from GameServerDeployment resource.
   *
   * @param {string} gameServerDeploymentName
   *   A fully-qualified path representing GameServerDeployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGameServerDeploymentName(gameServerDeploymentName: string) {
    return this.pathTemplates.gameServerDeploymentPathTemplate.match(
      gameServerDeploymentName
    ).project;
  }

  /**
   * Parse the location from GameServerDeployment resource.
   *
   * @param {string} gameServerDeploymentName
   *   A fully-qualified path representing GameServerDeployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGameServerDeploymentName(gameServerDeploymentName: string) {
    return this.pathTemplates.gameServerDeploymentPathTemplate.match(
      gameServerDeploymentName
    ).location;
  }

  /**
   * Parse the deployment from GameServerDeployment resource.
   *
   * @param {string} gameServerDeploymentName
   *   A fully-qualified path representing GameServerDeployment resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromGameServerDeploymentName(
    gameServerDeploymentName: string
  ) {
    return this.pathTemplates.gameServerDeploymentPathTemplate.match(
      gameServerDeploymentName
    ).deployment;
  }

  /**
   * Return a fully-qualified gameServerDeploymentRollout resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment
   * @returns {string} Resource name string.
   */
  gameServerDeploymentRolloutPath(
    project: string,
    location: string,
    deployment: string
  ) {
    return this.pathTemplates.gameServerDeploymentRolloutPathTemplate.render({
      project: project,
      location: location,
      deployment: deployment,
    });
  }

  /**
   * Parse the project from GameServerDeploymentRollout resource.
   *
   * @param {string} gameServerDeploymentRolloutName
   *   A fully-qualified path representing GameServerDeploymentRollout resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGameServerDeploymentRolloutName(
    gameServerDeploymentRolloutName: string
  ) {
    return this.pathTemplates.gameServerDeploymentRolloutPathTemplate.match(
      gameServerDeploymentRolloutName
    ).project;
  }

  /**
   * Parse the location from GameServerDeploymentRollout resource.
   *
   * @param {string} gameServerDeploymentRolloutName
   *   A fully-qualified path representing GameServerDeploymentRollout resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGameServerDeploymentRolloutName(
    gameServerDeploymentRolloutName: string
  ) {
    return this.pathTemplates.gameServerDeploymentRolloutPathTemplate.match(
      gameServerDeploymentRolloutName
    ).location;
  }

  /**
   * Parse the deployment from GameServerDeploymentRollout resource.
   *
   * @param {string} gameServerDeploymentRolloutName
   *   A fully-qualified path representing GameServerDeploymentRollout resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromGameServerDeploymentRolloutName(
    gameServerDeploymentRolloutName: string
  ) {
    return this.pathTemplates.gameServerDeploymentRolloutPathTemplate.match(
      gameServerDeploymentRolloutName
    ).deployment;
  }

  /**
   * Return a fully-qualified realm resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} realm
   * @returns {string} Resource name string.
   */
  realmPath(project: string, location: string, realm: string) {
    return this.pathTemplates.realmPathTemplate.render({
      project: project,
      location: location,
      realm: realm,
    });
  }

  /**
   * Parse the project from Realm resource.
   *
   * @param {string} realmName
   *   A fully-qualified path representing Realm resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRealmName(realmName: string) {
    return this.pathTemplates.realmPathTemplate.match(realmName).project;
  }

  /**
   * Parse the location from Realm resource.
   *
   * @param {string} realmName
   *   A fully-qualified path representing Realm resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRealmName(realmName: string) {
    return this.pathTemplates.realmPathTemplate.match(realmName).location;
  }

  /**
   * Parse the realm from Realm resource.
   *
   * @param {string} realmName
   *   A fully-qualified path representing Realm resource.
   * @returns {string} A string representing the realm.
   */
  matchRealmFromRealmName(realmName: string) {
    return this.pathTemplates.realmPathTemplate.match(realmName).realm;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.gameServerDeploymentsServiceStub && !this._terminated) {
      return this.gameServerDeploymentsServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
