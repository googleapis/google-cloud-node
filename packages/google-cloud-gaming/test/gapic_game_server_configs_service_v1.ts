// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as gameserverconfigsserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.GameServerConfigsServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient
          .servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient
          .apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port =
        gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          fallback: true,
        });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.gameServerConfigsServiceStub, undefined);
      await client.initialize();
      assert(client.gameServerConfigsServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      assert(client.gameServerConfigsServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.gameServerConfigsServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getGameServerConfig', () => {
    it('invokes getGameServerConfig without error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.GetGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.GetGameServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gaming.v1.GameServerConfig()
      );
      client.innerApiCalls.getGameServerConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getGameServerConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGameServerConfig without error using callback', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.GetGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.GetGameServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gaming.v1.GameServerConfig()
      );
      client.innerApiCalls.getGameServerConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getGameServerConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gaming.v1.IGameServerConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGameServerConfig with error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.GetGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.GetGameServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getGameServerConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getGameServerConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGameServerConfig with closed client', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.GetGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.GetGameServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getGameServerConfig(request), expectedError);
    });
  });

  describe('createGameServerConfig', () => {
    it('invokes createGameServerConfig without error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.CreateGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.CreateGameServerConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createGameServerConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createGameServerConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGameServerConfig without error using callback', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.CreateGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.CreateGameServerConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createGameServerConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createGameServerConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gaming.v1.IGameServerConfig,
              protos.google.cloud.gaming.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gaming.v1.IGameServerConfig,
        protos.google.cloud.gaming.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGameServerConfig with call error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.CreateGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.CreateGameServerConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGameServerConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createGameServerConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGameServerConfig with LRO error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.CreateGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.CreateGameServerConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGameServerConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createGameServerConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateGameServerConfigProgress without error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateGameServerConfigProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateGameServerConfigProgress with error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateGameServerConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteGameServerConfig', () => {
    it('invokes deleteGameServerConfig without error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.DeleteGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.DeleteGameServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteGameServerConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteGameServerConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGameServerConfig without error using callback', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.DeleteGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.DeleteGameServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteGameServerConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteGameServerConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.gaming.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gaming.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGameServerConfig with call error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.DeleteGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.DeleteGameServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGameServerConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteGameServerConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGameServerConfig with LRO error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.DeleteGameServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.DeleteGameServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGameServerConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteGameServerConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGameServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGameServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteGameServerConfigProgress without error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteGameServerConfigProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteGameServerConfigProgress with error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteGameServerConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listGameServerConfigs', () => {
    it('invokes listGameServerConfigs without error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.ListGameServerConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.ListGameServerConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
      ];
      client.innerApiCalls.listGameServerConfigs =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listGameServerConfigs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGameServerConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGameServerConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGameServerConfigs without error using callback', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.ListGameServerConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.ListGameServerConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
      ];
      client.innerApiCalls.listGameServerConfigs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listGameServerConfigs(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gaming.v1.IGameServerConfig[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGameServerConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGameServerConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGameServerConfigs with error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.ListGameServerConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.ListGameServerConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listGameServerConfigs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listGameServerConfigs(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listGameServerConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGameServerConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGameServerConfigsStream without error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.ListGameServerConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.ListGameServerConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
      ];
      client.descriptors.page.listGameServerConfigs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listGameServerConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gaming.v1.GameServerConfig[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gaming.v1.GameServerConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listGameServerConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listGameServerConfigs, request)
      );
      assert(
        (
          client.descriptors.page.listGameServerConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listGameServerConfigsStream with error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.ListGameServerConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.ListGameServerConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGameServerConfigs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listGameServerConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gaming.v1.GameServerConfig[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gaming.v1.GameServerConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listGameServerConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listGameServerConfigs, request)
      );
      assert(
        (
          client.descriptors.page.listGameServerConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listGameServerConfigs without error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.ListGameServerConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.ListGameServerConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.gaming.v1.GameServerConfig()
        ),
      ];
      client.descriptors.page.listGameServerConfigs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gaming.v1.IGameServerConfig[] = [];
      const iterable = client.listGameServerConfigsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGameServerConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listGameServerConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listGameServerConfigs with error', async () => {
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gaming.v1.ListGameServerConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gaming.v1.ListGameServerConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGameServerConfigs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listGameServerConfigsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gaming.v1.IGameServerConfig[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGameServerConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listGameServerConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('gameServerCluster', () => {
      const fakePath = '/rendered/path/gameServerCluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        realm: 'realmValue',
        cluster: 'clusterValue',
      };
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.gameServerClusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.gameServerClusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('gameServerClusterPath', () => {
        const result = client.gameServerClusterPath(
          'projectValue',
          'locationValue',
          'realmValue',
          'clusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.gameServerClusterPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGameServerClusterName', () => {
        const result = client.matchProjectFromGameServerClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.gameServerClusterPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGameServerClusterName', () => {
        const result = client.matchLocationFromGameServerClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.gameServerClusterPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRealmFromGameServerClusterName', () => {
        const result = client.matchRealmFromGameServerClusterName(fakePath);
        assert.strictEqual(result, 'realmValue');
        assert(
          (
            client.pathTemplates.gameServerClusterPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClusterFromGameServerClusterName', () => {
        const result = client.matchClusterFromGameServerClusterName(fakePath);
        assert.strictEqual(result, 'clusterValue');
        assert(
          (
            client.pathTemplates.gameServerClusterPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('gameServerConfig', () => {
      const fakePath = '/rendered/path/gameServerConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        deployment: 'deploymentValue',
        config: 'configValue',
      };
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.gameServerConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.gameServerConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('gameServerConfigPath', () => {
        const result = client.gameServerConfigPath(
          'projectValue',
          'locationValue',
          'deploymentValue',
          'configValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.gameServerConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGameServerConfigName', () => {
        const result = client.matchProjectFromGameServerConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.gameServerConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGameServerConfigName', () => {
        const result = client.matchLocationFromGameServerConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.gameServerConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDeploymentFromGameServerConfigName', () => {
        const result = client.matchDeploymentFromGameServerConfigName(fakePath);
        assert.strictEqual(result, 'deploymentValue');
        assert(
          (client.pathTemplates.gameServerConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConfigFromGameServerConfigName', () => {
        const result = client.matchConfigFromGameServerConfigName(fakePath);
        assert.strictEqual(result, 'configValue');
        assert(
          (client.pathTemplates.gameServerConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('gameServerDeployment', () => {
      const fakePath = '/rendered/path/gameServerDeployment';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        deployment: 'deploymentValue',
      };
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.gameServerDeploymentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.gameServerDeploymentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('gameServerDeploymentPath', () => {
        const result = client.gameServerDeploymentPath(
          'projectValue',
          'locationValue',
          'deploymentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.gameServerDeploymentPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGameServerDeploymentName', () => {
        const result =
          client.matchProjectFromGameServerDeploymentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.gameServerDeploymentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGameServerDeploymentName', () => {
        const result =
          client.matchLocationFromGameServerDeploymentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.gameServerDeploymentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDeploymentFromGameServerDeploymentName', () => {
        const result =
          client.matchDeploymentFromGameServerDeploymentName(fakePath);
        assert.strictEqual(result, 'deploymentValue');
        assert(
          (
            client.pathTemplates.gameServerDeploymentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('gameServerDeploymentRollout', () => {
      const fakePath = '/rendered/path/gameServerDeploymentRollout';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        deployment: 'deploymentValue',
      };
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.gameServerDeploymentRolloutPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.gameServerDeploymentRolloutPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('gameServerDeploymentRolloutPath', () => {
        const result = client.gameServerDeploymentRolloutPath(
          'projectValue',
          'locationValue',
          'deploymentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.gameServerDeploymentRolloutPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGameServerDeploymentRolloutName', () => {
        const result =
          client.matchProjectFromGameServerDeploymentRolloutName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.gameServerDeploymentRolloutPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGameServerDeploymentRolloutName', () => {
        const result =
          client.matchLocationFromGameServerDeploymentRolloutName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.gameServerDeploymentRolloutPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDeploymentFromGameServerDeploymentRolloutName', () => {
        const result =
          client.matchDeploymentFromGameServerDeploymentRolloutName(fakePath);
        assert.strictEqual(result, 'deploymentValue');
        assert(
          (
            client.pathTemplates.gameServerDeploymentRolloutPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('realm', () => {
      const fakePath = '/rendered/path/realm';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        realm: 'realmValue',
      };
      const client =
        new gameserverconfigsserviceModule.v1.GameServerConfigsServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.realmPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.realmPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('realmPath', () => {
        const result = client.realmPath(
          'projectValue',
          'locationValue',
          'realmValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.realmPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRealmName', () => {
        const result = client.matchProjectFromRealmName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.realmPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromRealmName', () => {
        const result = client.matchLocationFromRealmName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.realmPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRealmFromRealmName', () => {
        const result = client.matchRealmFromRealmName(fakePath);
        assert.strictEqual(result, 'realmValue');
        assert(
          (client.pathTemplates.realmPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
