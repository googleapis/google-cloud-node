// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as projectserviceModule from '../src';

import {
  protobuf,
  LROperation,
  operationsProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v2alpha.ProjectServiceClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'retail.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          projectserviceModule.v2alpha.ProjectServiceClient.servicePath;
        assert.strictEqual(servicePath, 'retail.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          projectserviceModule.v2alpha.ProjectServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'retail.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'retail.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'retail.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new projectserviceModule.v2alpha.ProjectServiceClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'retail.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new projectserviceModule.v2alpha.ProjectServiceClient({
            universeDomain: 'configured.example.com',
          });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'retail.configured.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new projectserviceModule.v2alpha.ProjectServiceClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = projectserviceModule.v2alpha.ProjectServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.projectServiceStub, undefined);
      await client.initialize();
      assert(client.projectServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.projectServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.projectServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getProject', () => {
    it('invokes getProject without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.Project()
      );
      client.innerApiCalls.getProject = stubSimpleCall(expectedResponse);
      const [response] = await client.getProject(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProject without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.Project()
      );
      client.innerApiCalls.getProject =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getProject(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.retail.v2alpha.IProject | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProject with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getProject = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getProject(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProject with closed client', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getProject(request), expectedError);
    });
  });

  describe('acceptTerms', () => {
    it('invokes acceptTerms without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.AcceptTermsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.AcceptTermsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.Project()
      );
      client.innerApiCalls.acceptTerms = stubSimpleCall(expectedResponse);
      const [response] = await client.acceptTerms(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.acceptTerms as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.acceptTerms as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes acceptTerms without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.AcceptTermsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.AcceptTermsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.Project()
      );
      client.innerApiCalls.acceptTerms =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.acceptTerms(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.retail.v2alpha.IProject | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.acceptTerms as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.acceptTerms as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes acceptTerms with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.AcceptTermsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.AcceptTermsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.acceptTerms = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.acceptTerms(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.acceptTerms as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.acceptTerms as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes acceptTerms with closed client', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.AcceptTermsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.AcceptTermsRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.acceptTerms(request), expectedError);
    });
  });

  describe('listEnrolledSolutions', () => {
    it('invokes listEnrolledSolutions without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.ListEnrolledSolutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.ListEnrolledSolutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.ListEnrolledSolutionsResponse()
      );
      client.innerApiCalls.listEnrolledSolutions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listEnrolledSolutions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEnrolledSolutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEnrolledSolutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEnrolledSolutions without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.ListEnrolledSolutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.ListEnrolledSolutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.ListEnrolledSolutionsResponse()
      );
      client.innerApiCalls.listEnrolledSolutions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEnrolledSolutions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.retail.v2alpha.IListEnrolledSolutionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEnrolledSolutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEnrolledSolutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEnrolledSolutions with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.ListEnrolledSolutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.ListEnrolledSolutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEnrolledSolutions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listEnrolledSolutions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listEnrolledSolutions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEnrolledSolutions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEnrolledSolutions with closed client', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.ListEnrolledSolutionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.ListEnrolledSolutionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.listEnrolledSolutions(request),
        expectedError
      );
    });
  });

  describe('getLoggingConfig', () => {
    it('invokes getLoggingConfig without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetLoggingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetLoggingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.LoggingConfig()
      );
      client.innerApiCalls.getLoggingConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.getLoggingConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getLoggingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getLoggingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getLoggingConfig without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetLoggingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetLoggingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.LoggingConfig()
      );
      client.innerApiCalls.getLoggingConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLoggingConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.retail.v2alpha.ILoggingConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getLoggingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getLoggingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getLoggingConfig with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetLoggingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetLoggingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getLoggingConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getLoggingConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getLoggingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getLoggingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getLoggingConfig with closed client', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetLoggingConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetLoggingConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getLoggingConfig(request), expectedError);
    });
  });

  describe('updateLoggingConfig', () => {
    it('invokes updateLoggingConfig without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.UpdateLoggingConfigRequest()
      );
      request.loggingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.UpdateLoggingConfigRequest',
        ['loggingConfig', 'name']
      );
      request.loggingConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `logging_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.LoggingConfig()
      );
      client.innerApiCalls.updateLoggingConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateLoggingConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateLoggingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateLoggingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateLoggingConfig without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.UpdateLoggingConfigRequest()
      );
      request.loggingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.UpdateLoggingConfigRequest',
        ['loggingConfig', 'name']
      );
      request.loggingConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `logging_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.LoggingConfig()
      );
      client.innerApiCalls.updateLoggingConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateLoggingConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.retail.v2alpha.ILoggingConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateLoggingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateLoggingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateLoggingConfig with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.UpdateLoggingConfigRequest()
      );
      request.loggingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.UpdateLoggingConfigRequest',
        ['loggingConfig', 'name']
      );
      request.loggingConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `logging_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateLoggingConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateLoggingConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateLoggingConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateLoggingConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateLoggingConfig with closed client', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.UpdateLoggingConfigRequest()
      );
      request.loggingConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.UpdateLoggingConfigRequest',
        ['loggingConfig', 'name']
      );
      request.loggingConfig.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateLoggingConfig(request), expectedError);
    });
  });

  describe('getAlertConfig', () => {
    it('invokes getAlertConfig without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetAlertConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetAlertConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.AlertConfig()
      );
      client.innerApiCalls.getAlertConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.getAlertConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAlertConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAlertConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAlertConfig without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetAlertConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetAlertConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.AlertConfig()
      );
      client.innerApiCalls.getAlertConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAlertConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.retail.v2alpha.IAlertConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAlertConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAlertConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAlertConfig with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetAlertConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetAlertConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAlertConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAlertConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAlertConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAlertConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAlertConfig with closed client', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.GetAlertConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.GetAlertConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAlertConfig(request), expectedError);
    });
  });

  describe('updateAlertConfig', () => {
    it('invokes updateAlertConfig without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.UpdateAlertConfigRequest()
      );
      request.alertConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.UpdateAlertConfigRequest',
        ['alertConfig', 'name']
      );
      request.alertConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `alert_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.AlertConfig()
      );
      client.innerApiCalls.updateAlertConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.updateAlertConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAlertConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAlertConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAlertConfig without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.UpdateAlertConfigRequest()
      );
      request.alertConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.UpdateAlertConfigRequest',
        ['alertConfig', 'name']
      );
      request.alertConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `alert_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.AlertConfig()
      );
      client.innerApiCalls.updateAlertConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAlertConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.retail.v2alpha.IAlertConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAlertConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAlertConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAlertConfig with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.UpdateAlertConfigRequest()
      );
      request.alertConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.UpdateAlertConfigRequest',
        ['alertConfig', 'name']
      );
      request.alertConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `alert_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAlertConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAlertConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAlertConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAlertConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAlertConfig with closed client', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.UpdateAlertConfigRequest()
      );
      request.alertConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.UpdateAlertConfigRequest',
        ['alertConfig', 'name']
      );
      request.alertConfig.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateAlertConfig(request), expectedError);
    });
  });

  describe('enrollSolution', () => {
    it('invokes enrollSolution without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.EnrollSolutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.EnrollSolutionRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.enrollSolution =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.enrollSolution(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.enrollSolution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.enrollSolution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes enrollSolution without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.EnrollSolutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.EnrollSolutionRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.enrollSolution =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.enrollSolution(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.retail.v2alpha.IEnrollSolutionResponse,
              protos.google.cloud.retail.v2alpha.IEnrollSolutionMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.retail.v2alpha.IEnrollSolutionResponse,
        protos.google.cloud.retail.v2alpha.IEnrollSolutionMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.enrollSolution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.enrollSolution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes enrollSolution with call error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.EnrollSolutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.EnrollSolutionRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.enrollSolution = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.enrollSolution(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.enrollSolution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.enrollSolution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes enrollSolution with LRO error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.retail.v2alpha.EnrollSolutionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.retail.v2alpha.EnrollSolutionRequest',
        ['project']
      );
      request.project = defaultValue1;
      const expectedHeaderRequestParams = `project=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.enrollSolution = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.enrollSolution(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.enrollSolution as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.enrollSolution as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkEnrollSolutionProgress without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkEnrollSolutionProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkEnrollSolutionProgress with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkEnrollSolutionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('alertConfig', () => {
      const fakePath = '/rendered/path/alertConfig';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.alertConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.alertConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('alertConfigPath', () => {
        const result = client.alertConfigPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.alertConfigPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAlertConfigName', () => {
        const result = client.matchProjectFromAlertConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.alertConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('attributesConfig', () => {
      const fakePath = '/rendered/path/attributesConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        catalog: 'catalogValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.attributesConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.attributesConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('attributesConfigPath', () => {
        const result = client.attributesConfigPath(
          'projectValue',
          'locationValue',
          'catalogValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.attributesConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAttributesConfigName', () => {
        const result = client.matchProjectFromAttributesConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.attributesConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAttributesConfigName', () => {
        const result = client.matchLocationFromAttributesConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.attributesConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCatalogFromAttributesConfigName', () => {
        const result = client.matchCatalogFromAttributesConfigName(fakePath);
        assert.strictEqual(result, 'catalogValue');
        assert(
          (client.pathTemplates.attributesConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('branch', () => {
      const fakePath = '/rendered/path/branch';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        catalog: 'catalogValue',
        branch: 'branchValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.branchPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.branchPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('branchPath', () => {
        const result = client.branchPath(
          'projectValue',
          'locationValue',
          'catalogValue',
          'branchValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.branchPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBranchName', () => {
        const result = client.matchProjectFromBranchName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.branchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBranchName', () => {
        const result = client.matchLocationFromBranchName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.branchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCatalogFromBranchName', () => {
        const result = client.matchCatalogFromBranchName(fakePath);
        assert.strictEqual(result, 'catalogValue');
        assert(
          (client.pathTemplates.branchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBranchFromBranchName', () => {
        const result = client.matchBranchFromBranchName(fakePath);
        assert.strictEqual(result, 'branchValue');
        assert(
          (client.pathTemplates.branchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('catalog', () => {
      const fakePath = '/rendered/path/catalog';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        catalog: 'catalogValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.catalogPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.catalogPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('catalogPath', () => {
        const result = client.catalogPath(
          'projectValue',
          'locationValue',
          'catalogValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.catalogPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCatalogName', () => {
        const result = client.matchProjectFromCatalogName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.catalogPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCatalogName', () => {
        const result = client.matchLocationFromCatalogName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.catalogPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCatalogFromCatalogName', () => {
        const result = client.matchCatalogFromCatalogName(fakePath);
        assert.strictEqual(result, 'catalogValue');
        assert(
          (client.pathTemplates.catalogPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('completionConfig', () => {
      const fakePath = '/rendered/path/completionConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        catalog: 'catalogValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.completionConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.completionConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('completionConfigPath', () => {
        const result = client.completionConfigPath(
          'projectValue',
          'locationValue',
          'catalogValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.completionConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCompletionConfigName', () => {
        const result = client.matchProjectFromCompletionConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.completionConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCompletionConfigName', () => {
        const result = client.matchLocationFromCompletionConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.completionConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCatalogFromCompletionConfigName', () => {
        const result = client.matchCatalogFromCompletionConfigName(fakePath);
        assert.strictEqual(result, 'catalogValue');
        assert(
          (client.pathTemplates.completionConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('control', () => {
      const fakePath = '/rendered/path/control';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        catalog: 'catalogValue',
        control: 'controlValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.controlPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.controlPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('controlPath', () => {
        const result = client.controlPath(
          'projectValue',
          'locationValue',
          'catalogValue',
          'controlValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.controlPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromControlName', () => {
        const result = client.matchProjectFromControlName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.controlPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromControlName', () => {
        const result = client.matchLocationFromControlName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.controlPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCatalogFromControlName', () => {
        const result = client.matchCatalogFromControlName(fakePath);
        assert.strictEqual(result, 'catalogValue');
        assert(
          (client.pathTemplates.controlPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchControlFromControlName', () => {
        const result = client.matchControlFromControlName(fakePath);
        assert.strictEqual(result, 'controlValue');
        assert(
          (client.pathTemplates.controlPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('loggingConfig', () => {
      const fakePath = '/rendered/path/loggingConfig';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.loggingConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.loggingConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('loggingConfigPath', () => {
        const result = client.loggingConfigPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.loggingConfigPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLoggingConfigName', () => {
        const result = client.matchProjectFromLoggingConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.loggingConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('merchantCenterAccountLink', () => {
      const fakePath = '/rendered/path/merchantCenterAccountLink';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        catalog: 'catalogValue',
        merchant_center_account_link: 'merchantCenterAccountLinkValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.merchantCenterAccountLinkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.merchantCenterAccountLinkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('merchantCenterAccountLinkPath', () => {
        const result = client.merchantCenterAccountLinkPath(
          'projectValue',
          'locationValue',
          'catalogValue',
          'merchantCenterAccountLinkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.merchantCenterAccountLinkPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromMerchantCenterAccountLinkName', () => {
        const result =
          client.matchProjectFromMerchantCenterAccountLinkName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.merchantCenterAccountLinkPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromMerchantCenterAccountLinkName', () => {
        const result =
          client.matchLocationFromMerchantCenterAccountLinkName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.merchantCenterAccountLinkPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCatalogFromMerchantCenterAccountLinkName', () => {
        const result =
          client.matchCatalogFromMerchantCenterAccountLinkName(fakePath);
        assert.strictEqual(result, 'catalogValue');
        assert(
          (
            client.pathTemplates.merchantCenterAccountLinkPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMerchantCenterAccountLinkFromMerchantCenterAccountLinkName', () => {
        const result =
          client.matchMerchantCenterAccountLinkFromMerchantCenterAccountLinkName(
            fakePath
          );
        assert.strictEqual(result, 'merchantCenterAccountLinkValue');
        assert(
          (
            client.pathTemplates.merchantCenterAccountLinkPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('model', () => {
      const fakePath = '/rendered/path/model';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        catalog: 'catalogValue',
        model: 'modelValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.modelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelPath', () => {
        const result = client.modelPath(
          'projectValue',
          'locationValue',
          'catalogValue',
          'modelValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.modelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromModelName', () => {
        const result = client.matchProjectFromModelName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromModelName', () => {
        const result = client.matchLocationFromModelName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCatalogFromModelName', () => {
        const result = client.matchCatalogFromModelName(fakePath);
        assert.strictEqual(result, 'catalogValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchModelFromModelName', () => {
        const result = client.matchModelFromModelName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('product', () => {
      const fakePath = '/rendered/path/product';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        catalog: 'catalogValue',
        branch: 'branchValue',
        product: 'productValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.productPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.productPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('productPath', () => {
        const result = client.productPath(
          'projectValue',
          'locationValue',
          'catalogValue',
          'branchValue',
          'productValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.productPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProductName', () => {
        const result = client.matchProjectFromProductName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.productPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProductName', () => {
        const result = client.matchLocationFromProductName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.productPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCatalogFromProductName', () => {
        const result = client.matchCatalogFromProductName(fakePath);
        assert.strictEqual(result, 'catalogValue');
        assert(
          (client.pathTemplates.productPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBranchFromProductName', () => {
        const result = client.matchBranchFromProductName(fakePath);
        assert.strictEqual(result, 'branchValue');
        assert(
          (client.pathTemplates.productPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProductFromProductName', () => {
        const result = client.matchProductFromProductName(fakePath);
        assert.strictEqual(result, 'productValue');
        assert(
          (client.pathTemplates.productPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('retailProject', () => {
      const fakePath = '/rendered/path/retailProject';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.retailProjectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.retailProjectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('retailProjectPath', () => {
        const result = client.retailProjectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.retailProjectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRetailProjectName', () => {
        const result = client.matchProjectFromRetailProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.retailProjectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('servingConfig', () => {
      const fakePath = '/rendered/path/servingConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        catalog: 'catalogValue',
        serving_config: 'servingConfigValue',
      };
      const client = new projectserviceModule.v2alpha.ProjectServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.servingConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.servingConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('servingConfigPath', () => {
        const result = client.servingConfigPath(
          'projectValue',
          'locationValue',
          'catalogValue',
          'servingConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.servingConfigPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServingConfigName', () => {
        const result = client.matchProjectFromServingConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServingConfigName', () => {
        const result = client.matchLocationFromServingConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCatalogFromServingConfigName', () => {
        const result = client.matchCatalogFromServingConfigName(fakePath);
        assert.strictEqual(result, 'catalogValue');
        assert(
          (client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServingConfigFromServingConfigName', () => {
        const result = client.matchServingConfigFromServingConfigName(fakePath);
        assert.strictEqual(result, 'servingConfigValue');
        assert(
          (client.pathTemplates.servingConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
