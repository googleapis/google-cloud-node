// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, inputConfig) {
  // [START retail_v2_generated_ProductService_ImportProducts_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required.
   *  `projects/1234/locations/global/catalogs/default_catalog/branches/default_branch`
   *  If no updateMask is specified, requires products.create permission.
   *  If updateMask is specified, requires products.update permission.
   */
  // const parent = 'abc123'
  /**
   *  Required. The desired input location of the data.
   */
  // const inputConfig = {}
  /**
   *  The desired location of errors incurred during the Import.
   */
  // const errorsConfig = {}
  /**
   *  Indicates which fields in the provided imported `products` to update. If
   *  not set, all fields are updated.
   */
  // const updateMask = {}
  /**
   *  The mode of reconciliation between existing products and the products to be
   *  imported. Defaults to
   *  ReconciliationMode.INCREMENTAL google.cloud.retail.v2.ImportProductsRequest.ReconciliationMode.INCREMENTAL.
   */
  // const reconciliationMode = {}
  /**
   *  Full Pub/Sub topic name for receiving notification. If this field is set,
   *  when the import is finished, a notification is sent to
   *  specified Pub/Sub topic. The message data is JSON string of a
   *  Operation google.longrunning.Operation.
   *  Format of the Pub/Sub topic is `projects/{project}/topics/{topic}`. It has
   *  to be within the same project as
   *  ImportProductsRequest.parent google.cloud.retail.v2.ImportProductsRequest.parent.
   *  Make sure that `service-<project
   *  number>@gcp-sa-retail.iam.gserviceaccount.com` has the
   *  `pubsub.topics.publish` IAM permission on the topic.
   */
  // const notificationPubsubTopic = 'abc123'

  // Imports the Retail library
  const {ProductServiceClient} = require('@google-cloud/retail').v2;

  // Instantiates a client
  const retailClient = new ProductServiceClient();

  async function callImportProducts() {
    // Construct request
    const request = {
      parent,
      inputConfig,
    };

    // Run request
    const [operation] = await retailClient.importProducts(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callImportProducts();
  // [END retail_v2_generated_ProductService_ImportProducts_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
