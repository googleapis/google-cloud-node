// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/search_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './search_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for search.
 *
 *  This feature is only available for users who have Retail Search enabled.
 *  Enable Retail Search on Cloud Console before using this feature.
 * @class
 * @memberof v2
 */
export class SearchServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  searchServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SearchServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SearchServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SearchServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      attributesConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/attributesConfig'
      ),
      branchPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/branches/{branch}'
      ),
      catalogPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}'
      ),
      completionConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/completionConfig'
      ),
      controlPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/controls/{control}'
      ),
      productPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/branches/{branch}/products/{product}'
      ),
      servingConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/catalogs/{catalog}/servingConfigs/{serving_config}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      search: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'results'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v2/{name=projects/*/locations/*/operations/*}',
          additional_bindings: [
            {
              get: '/v2/{name=projects/*/locations/*/catalogs/*/branches/*/operations/*}',
            },
            {get: '/v2/{name=projects/*/locations/*/catalogs/*/operations/*}'},
            {get: '/v2/{name=projects/*/operations/*}'},
          ],
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v2/{name=projects/*/locations/*}/operations',
          additional_bindings: [
            {get: '/v2/{name=projects/*/locations/*/catalogs/*}/operations'},
            {get: '/v2/{name=projects/*}/operations'},
          ],
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);

    this.descriptors.longrunning = {};

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.retail.v2.SearchService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.searchServiceStub) {
      return this.searchServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.retail.v2.SearchService.
    this.searchServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.retail.v2.SearchService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.retail.v2.SearchService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const searchServiceStubMethods = ['search'];
    for (const methodName of searchServiceStubMethods) {
      const callPromise = this.searchServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.searchServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'retail.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'retail.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------

  /**
   * Performs a search.
   *
   * This feature is only available for users who have Retail Search enabled.
   * Enable Retail Search on Cloud Console before using this feature.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.placement
   *   Required. The resource name of the Retail Search serving config, such as
   *   `projects/* /locations/global/catalogs/default_catalog/servingConfigs/default_serving_config`
   *   or the name of the legacy placement resource, such as
   *   `projects/* /locations/global/catalogs/default_catalog/placements/default_search`.
   *   This field is used to identify the serving config name and the set
   *   of models that will be used to make the search.
   * @param {string} request.branch
   *   The branch resource name, such as
   *   `projects/* /locations/global/catalogs/default_catalog/branches/0`.
   *
   *   Use "default_branch" as the branch ID or leave this field empty, to search
   *   products under the default branch.
   * @param {string} request.query
   *   Raw search query.
   *
   *   If this field is empty, the request is considered a category browsing
   *   request and returned results are based on
   *   {@link google.cloud.retail.v2.SearchRequest.filter|filter} and
   *   {@link google.cloud.retail.v2.SearchRequest.page_categories|page_categories}.
   * @param {string} request.visitorId
   *   Required. A unique identifier for tracking visitors. For example, this
   *   could be implemented with an HTTP cookie, which should be able to uniquely
   *   identify a visitor on a single device. This unique identifier should not
   *   change if the visitor logs in or out of the website.
   *
   *   This should be the same identifier as
   *   {@link google.cloud.retail.v2.UserEvent.visitor_id|UserEvent.visitor_id}.
   *
   *   The field must be a UTF-8 encoded string with a length limit of 128
   *   characters. Otherwise, an INVALID_ARGUMENT error is returned.
   * @param {google.cloud.retail.v2.UserInfo} request.userInfo
   *   User information.
   * @param {number} request.pageSize
   *   Maximum number of {@link google.cloud.retail.v2.Product|Product}s to return. If
   *   unspecified, defaults to a reasonable value. The maximum allowed value is
   *   120. Values above 120 will be coerced to 120.
   *
   *   If this field is negative, an INVALID_ARGUMENT is returned.
   * @param {string} request.pageToken
   *   A page token
   *   {@link google.cloud.retail.v2.SearchResponse.next_page_token|SearchResponse.next_page_token},
   *   received from a previous
   *   {@link google.cloud.retail.v2.SearchService.Search|SearchService.Search} call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.retail.v2.SearchService.Search|SearchService.Search} must
   *   match the call that provided the page token. Otherwise, an INVALID_ARGUMENT
   *   error is returned.
   * @param {number} request.offset
   *   A 0-indexed integer that specifies the current offset (that is, starting
   *   result location, amongst the {@link google.cloud.retail.v2.Product|Product}s
   *   deemed by the API as relevant) in search results. This field is only
   *   considered if {@link google.cloud.retail.v2.SearchRequest.page_token|page_token}
   *   is unset.
   *
   *   If this field is negative, an INVALID_ARGUMENT is returned.
   * @param {string} request.filter
   *   The filter syntax consists of an expression language for constructing a
   *   predicate from one or more fields of the products being filtered. Filter
   *   expression is case-sensitive. See more details at this [user
   *   guide](https://cloud.google.com/retail/docs/filter-and-order#filter).
   *
   *   If this field is unrecognizable, an INVALID_ARGUMENT is returned.
   * @param {string} request.canonicalFilter
   *   The default filter that is applied when a user performs a search without
   *   checking any filters on the search page.
   *
   *   The filter applied to every search request when quality improvement such as
   *   query expansion is needed. For example, if a query does not have enough
   *   results, an expanded query with
   *   {@link google.cloud.retail.v2.SearchRequest.canonical_filter|SearchRequest.canonical_filter}
   *   will be returned as a supplement of the original query. This field is
   *   strongly recommended to achieve high search quality.
   *
   *   See {@link google.cloud.retail.v2.SearchRequest.filter|SearchRequest.filter} for
   *   more details about filter syntax.
   * @param {string} request.orderBy
   *   The order in which products are returned. Products can be ordered by
   *   a field in an {@link google.cloud.retail.v2.Product|Product} object. Leave it
   *   unset if ordered by relevance. OrderBy expression is case-sensitive. See
   *   more details at this [user
   *   guide](https://cloud.google.com/retail/docs/filter-and-order#order).
   *
   *   If this field is unrecognizable, an INVALID_ARGUMENT is returned.
   * @param {number[]} request.facetSpecs
   *   Facet specifications for faceted search. If empty, no facets are returned.
   *
   *   A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error
   *   is returned.
   * @param {google.cloud.retail.v2.SearchRequest.DynamicFacetSpec} request.dynamicFacetSpec
   *   Deprecated. Refer to https://cloud.google.com/retail/docs/configs#dynamic
   *   to enable dynamic facets. Do not set this field.
   *
   *   The specification for dynamically generated facets. Notice that only
   *   textual facets can be dynamically generated.
   * @param {google.cloud.retail.v2.SearchRequest.BoostSpec} request.boostSpec
   *   Boost specification to boost certain products. See more details at this
   *   [user guide](https://cloud.google.com/retail/docs/boosting).
   *
   *   Notice that if both
   *   {@link google.cloud.retail.v2.ServingConfig.boost_control_ids|ServingConfig.boost_control_ids}
   *   and
   *   {@link google.cloud.retail.v2.SearchRequest.boost_spec|SearchRequest.boost_spec}
   *   are set, the boost conditions from both places are evaluated. If a search
   *   request matches multiple boost conditions, the final boost score is equal
   *   to the sum of the boost scores from all matched boost conditions.
   * @param {google.cloud.retail.v2.SearchRequest.QueryExpansionSpec} request.queryExpansionSpec
   *   The query expansion specification that specifies the conditions under which
   *   query expansion will occur. See more details at this [user
   *   guide](https://cloud.google.com/retail/docs/result-size#query_expansion).
   * @param {string[]} request.variantRollupKeys
   *   The keys to fetch and rollup the matching
   *   {@link google.cloud.retail.v2.Product.Type.VARIANT|variant}
   *   {@link google.cloud.retail.v2.Product|Product}s attributes,
   *   {@link google.cloud.retail.v2.FulfillmentInfo|FulfillmentInfo} or
   *   {@link google.cloud.retail.v2.LocalInventory|LocalInventory}s attributes. The
   *   attributes from all the matching
   *   {@link google.cloud.retail.v2.Product.Type.VARIANT|variant}
   *   {@link google.cloud.retail.v2.Product|Product}s or
   *   {@link google.cloud.retail.v2.LocalInventory|LocalInventory}s are merged and
   *   de-duplicated. Notice that rollup attributes will lead to extra query
   *   latency. Maximum number of keys is 30.
   *
   *   For {@link google.cloud.retail.v2.FulfillmentInfo|FulfillmentInfo}, a
   *   fulfillment type and a fulfillment ID must be provided in the format of
   *   "fulfillmentType.fulfillmentId". E.g., in "pickupInStore.store123",
   *   "pickupInStore" is fulfillment type and "store123" is the store ID.
   *
   *   Supported keys are:
   *
   *   * colorFamilies
   *   * price
   *   * originalPrice
   *   * discount
   *   * variantId
   *   * inventory(place_id,price)
   *   * inventory(place_id,original_price)
   *   * inventory(place_id,attributes.key), where key is any key in the
   *     {@link google.cloud.retail.v2.LocalInventory.attributes|Product.local_inventories.attributes}
   *     map.
   *   * attributes.key, where key is any key in the
   *     {@link google.cloud.retail.v2.Product.attributes|Product.attributes} map.
   *   * pickupInStore.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "pickup-in-store".
   *   * shipToStore.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "ship-to-store".
   *   * sameDayDelivery.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "same-day-delivery".
   *   * nextDayDelivery.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "next-day-delivery".
   *   * customFulfillment1.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-1".
   *   * customFulfillment2.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-2".
   *   * customFulfillment3.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-3".
   *   * customFulfillment4.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-4".
   *   * customFulfillment5.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-5".
   *
   *   If this field is set to an invalid value other than these, an
   *   INVALID_ARGUMENT error is returned.
   * @param {string[]} request.pageCategories
   *   The categories associated with a category page. Required for category
   *   navigation queries to achieve good search quality. The format should be
   *   the same as
   *   {@link google.cloud.retail.v2.UserEvent.page_categories|UserEvent.page_categories};
   *
   *   To represent full path of category, use '>' sign to separate different
   *   hierarchies. If '>' is part of the category name, replace it with
   *   other character(s).
   *
   *   Category pages include special pages such as sales or promotions. For
   *   instance, a special sale page may have the category hierarchy:
   *   "pageCategories" : ["Sales > 2017 Black Friday Deals"].
   * @param {google.cloud.retail.v2.SearchRequest.SearchMode} request.searchMode
   *   The search mode of the search request. If not specified, a single search
   *   request triggers both product search and faceted search.
   * @param {google.cloud.retail.v2.SearchRequest.PersonalizationSpec} request.personalizationSpec
   *   The specification for personalization.
   *
   *   Notice that if both
   *   {@link google.cloud.retail.v2.ServingConfig.personalization_spec|ServingConfig.personalization_spec}
   *   and
   *   {@link google.cloud.retail.v2.SearchRequest.personalization_spec|SearchRequest.personalization_spec}
   *   are set.
   *   {@link google.cloud.retail.v2.SearchRequest.personalization_spec|SearchRequest.personalization_spec}
   *   will override
   *   {@link google.cloud.retail.v2.ServingConfig.personalization_spec|ServingConfig.personalization_spec}.
   * @param {number[]} request.labels
   *   The labels applied to a resource must meet the following requirements:
   *
   *   * Each resource can have multiple labels, up to a maximum of 64.
   *   * Each label must be a key-value pair.
   *   * Keys have a minimum length of 1 character and a maximum length of 63
   *     characters and cannot be empty. Values can be empty and have a maximum
   *     length of 63 characters.
   *   * Keys and values can contain only lowercase letters, numeric characters,
   *     underscores, and dashes. All characters must use UTF-8 encoding, and
   *     international characters are allowed.
   *   * The key portion of a label must be unique. However, you can use the same
   *     key with multiple resources.
   *   * Keys must start with a lowercase letter or international character.
   *
   *   See [Google Cloud
   *   Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   *   for more details.
   * @param {google.cloud.retail.v2.SearchRequest.SpellCorrectionSpec} request.spellCorrectionSpec
   *   The spell correction specification that specifies the mode under
   *   which spell correction will take effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [SearchResult]{@link google.cloud.retail.v2.SearchResponse.SearchResult}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `searchAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  search(
    request?: protos.google.cloud.retail.v2.ISearchRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.retail.v2.SearchResponse.ISearchResult[],
      protos.google.cloud.retail.v2.ISearchRequest | null,
      protos.google.cloud.retail.v2.ISearchResponse
    ]
  >;
  search(
    request: protos.google.cloud.retail.v2.ISearchRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.retail.v2.ISearchRequest,
      protos.google.cloud.retail.v2.ISearchResponse | null | undefined,
      protos.google.cloud.retail.v2.SearchResponse.ISearchResult
    >
  ): void;
  search(
    request: protos.google.cloud.retail.v2.ISearchRequest,
    callback: PaginationCallback<
      protos.google.cloud.retail.v2.ISearchRequest,
      protos.google.cloud.retail.v2.ISearchResponse | null | undefined,
      protos.google.cloud.retail.v2.SearchResponse.ISearchResult
    >
  ): void;
  search(
    request?: protos.google.cloud.retail.v2.ISearchRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.retail.v2.ISearchRequest,
          protos.google.cloud.retail.v2.ISearchResponse | null | undefined,
          protos.google.cloud.retail.v2.SearchResponse.ISearchResult
        >,
    callback?: PaginationCallback<
      protos.google.cloud.retail.v2.ISearchRequest,
      protos.google.cloud.retail.v2.ISearchResponse | null | undefined,
      protos.google.cloud.retail.v2.SearchResponse.ISearchResult
    >
  ): Promise<
    [
      protos.google.cloud.retail.v2.SearchResponse.ISearchResult[],
      protos.google.cloud.retail.v2.ISearchRequest | null,
      protos.google.cloud.retail.v2.ISearchResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        placement: request.placement ?? '',
      });
    this.initialize();
    return this.innerApiCalls.search(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.placement
   *   Required. The resource name of the Retail Search serving config, such as
   *   `projects/* /locations/global/catalogs/default_catalog/servingConfigs/default_serving_config`
   *   or the name of the legacy placement resource, such as
   *   `projects/* /locations/global/catalogs/default_catalog/placements/default_search`.
   *   This field is used to identify the serving config name and the set
   *   of models that will be used to make the search.
   * @param {string} request.branch
   *   The branch resource name, such as
   *   `projects/* /locations/global/catalogs/default_catalog/branches/0`.
   *
   *   Use "default_branch" as the branch ID or leave this field empty, to search
   *   products under the default branch.
   * @param {string} request.query
   *   Raw search query.
   *
   *   If this field is empty, the request is considered a category browsing
   *   request and returned results are based on
   *   {@link google.cloud.retail.v2.SearchRequest.filter|filter} and
   *   {@link google.cloud.retail.v2.SearchRequest.page_categories|page_categories}.
   * @param {string} request.visitorId
   *   Required. A unique identifier for tracking visitors. For example, this
   *   could be implemented with an HTTP cookie, which should be able to uniquely
   *   identify a visitor on a single device. This unique identifier should not
   *   change if the visitor logs in or out of the website.
   *
   *   This should be the same identifier as
   *   {@link google.cloud.retail.v2.UserEvent.visitor_id|UserEvent.visitor_id}.
   *
   *   The field must be a UTF-8 encoded string with a length limit of 128
   *   characters. Otherwise, an INVALID_ARGUMENT error is returned.
   * @param {google.cloud.retail.v2.UserInfo} request.userInfo
   *   User information.
   * @param {number} request.pageSize
   *   Maximum number of {@link google.cloud.retail.v2.Product|Product}s to return. If
   *   unspecified, defaults to a reasonable value. The maximum allowed value is
   *   120. Values above 120 will be coerced to 120.
   *
   *   If this field is negative, an INVALID_ARGUMENT is returned.
   * @param {string} request.pageToken
   *   A page token
   *   {@link google.cloud.retail.v2.SearchResponse.next_page_token|SearchResponse.next_page_token},
   *   received from a previous
   *   {@link google.cloud.retail.v2.SearchService.Search|SearchService.Search} call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.retail.v2.SearchService.Search|SearchService.Search} must
   *   match the call that provided the page token. Otherwise, an INVALID_ARGUMENT
   *   error is returned.
   * @param {number} request.offset
   *   A 0-indexed integer that specifies the current offset (that is, starting
   *   result location, amongst the {@link google.cloud.retail.v2.Product|Product}s
   *   deemed by the API as relevant) in search results. This field is only
   *   considered if {@link google.cloud.retail.v2.SearchRequest.page_token|page_token}
   *   is unset.
   *
   *   If this field is negative, an INVALID_ARGUMENT is returned.
   * @param {string} request.filter
   *   The filter syntax consists of an expression language for constructing a
   *   predicate from one or more fields of the products being filtered. Filter
   *   expression is case-sensitive. See more details at this [user
   *   guide](https://cloud.google.com/retail/docs/filter-and-order#filter).
   *
   *   If this field is unrecognizable, an INVALID_ARGUMENT is returned.
   * @param {string} request.canonicalFilter
   *   The default filter that is applied when a user performs a search without
   *   checking any filters on the search page.
   *
   *   The filter applied to every search request when quality improvement such as
   *   query expansion is needed. For example, if a query does not have enough
   *   results, an expanded query with
   *   {@link google.cloud.retail.v2.SearchRequest.canonical_filter|SearchRequest.canonical_filter}
   *   will be returned as a supplement of the original query. This field is
   *   strongly recommended to achieve high search quality.
   *
   *   See {@link google.cloud.retail.v2.SearchRequest.filter|SearchRequest.filter} for
   *   more details about filter syntax.
   * @param {string} request.orderBy
   *   The order in which products are returned. Products can be ordered by
   *   a field in an {@link google.cloud.retail.v2.Product|Product} object. Leave it
   *   unset if ordered by relevance. OrderBy expression is case-sensitive. See
   *   more details at this [user
   *   guide](https://cloud.google.com/retail/docs/filter-and-order#order).
   *
   *   If this field is unrecognizable, an INVALID_ARGUMENT is returned.
   * @param {number[]} request.facetSpecs
   *   Facet specifications for faceted search. If empty, no facets are returned.
   *
   *   A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error
   *   is returned.
   * @param {google.cloud.retail.v2.SearchRequest.DynamicFacetSpec} request.dynamicFacetSpec
   *   Deprecated. Refer to https://cloud.google.com/retail/docs/configs#dynamic
   *   to enable dynamic facets. Do not set this field.
   *
   *   The specification for dynamically generated facets. Notice that only
   *   textual facets can be dynamically generated.
   * @param {google.cloud.retail.v2.SearchRequest.BoostSpec} request.boostSpec
   *   Boost specification to boost certain products. See more details at this
   *   [user guide](https://cloud.google.com/retail/docs/boosting).
   *
   *   Notice that if both
   *   {@link google.cloud.retail.v2.ServingConfig.boost_control_ids|ServingConfig.boost_control_ids}
   *   and
   *   {@link google.cloud.retail.v2.SearchRequest.boost_spec|SearchRequest.boost_spec}
   *   are set, the boost conditions from both places are evaluated. If a search
   *   request matches multiple boost conditions, the final boost score is equal
   *   to the sum of the boost scores from all matched boost conditions.
   * @param {google.cloud.retail.v2.SearchRequest.QueryExpansionSpec} request.queryExpansionSpec
   *   The query expansion specification that specifies the conditions under which
   *   query expansion will occur. See more details at this [user
   *   guide](https://cloud.google.com/retail/docs/result-size#query_expansion).
   * @param {string[]} request.variantRollupKeys
   *   The keys to fetch and rollup the matching
   *   {@link google.cloud.retail.v2.Product.Type.VARIANT|variant}
   *   {@link google.cloud.retail.v2.Product|Product}s attributes,
   *   {@link google.cloud.retail.v2.FulfillmentInfo|FulfillmentInfo} or
   *   {@link google.cloud.retail.v2.LocalInventory|LocalInventory}s attributes. The
   *   attributes from all the matching
   *   {@link google.cloud.retail.v2.Product.Type.VARIANT|variant}
   *   {@link google.cloud.retail.v2.Product|Product}s or
   *   {@link google.cloud.retail.v2.LocalInventory|LocalInventory}s are merged and
   *   de-duplicated. Notice that rollup attributes will lead to extra query
   *   latency. Maximum number of keys is 30.
   *
   *   For {@link google.cloud.retail.v2.FulfillmentInfo|FulfillmentInfo}, a
   *   fulfillment type and a fulfillment ID must be provided in the format of
   *   "fulfillmentType.fulfillmentId". E.g., in "pickupInStore.store123",
   *   "pickupInStore" is fulfillment type and "store123" is the store ID.
   *
   *   Supported keys are:
   *
   *   * colorFamilies
   *   * price
   *   * originalPrice
   *   * discount
   *   * variantId
   *   * inventory(place_id,price)
   *   * inventory(place_id,original_price)
   *   * inventory(place_id,attributes.key), where key is any key in the
   *     {@link google.cloud.retail.v2.LocalInventory.attributes|Product.local_inventories.attributes}
   *     map.
   *   * attributes.key, where key is any key in the
   *     {@link google.cloud.retail.v2.Product.attributes|Product.attributes} map.
   *   * pickupInStore.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "pickup-in-store".
   *   * shipToStore.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "ship-to-store".
   *   * sameDayDelivery.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "same-day-delivery".
   *   * nextDayDelivery.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "next-day-delivery".
   *   * customFulfillment1.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-1".
   *   * customFulfillment2.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-2".
   *   * customFulfillment3.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-3".
   *   * customFulfillment4.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-4".
   *   * customFulfillment5.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-5".
   *
   *   If this field is set to an invalid value other than these, an
   *   INVALID_ARGUMENT error is returned.
   * @param {string[]} request.pageCategories
   *   The categories associated with a category page. Required for category
   *   navigation queries to achieve good search quality. The format should be
   *   the same as
   *   {@link google.cloud.retail.v2.UserEvent.page_categories|UserEvent.page_categories};
   *
   *   To represent full path of category, use '>' sign to separate different
   *   hierarchies. If '>' is part of the category name, replace it with
   *   other character(s).
   *
   *   Category pages include special pages such as sales or promotions. For
   *   instance, a special sale page may have the category hierarchy:
   *   "pageCategories" : ["Sales > 2017 Black Friday Deals"].
   * @param {google.cloud.retail.v2.SearchRequest.SearchMode} request.searchMode
   *   The search mode of the search request. If not specified, a single search
   *   request triggers both product search and faceted search.
   * @param {google.cloud.retail.v2.SearchRequest.PersonalizationSpec} request.personalizationSpec
   *   The specification for personalization.
   *
   *   Notice that if both
   *   {@link google.cloud.retail.v2.ServingConfig.personalization_spec|ServingConfig.personalization_spec}
   *   and
   *   {@link google.cloud.retail.v2.SearchRequest.personalization_spec|SearchRequest.personalization_spec}
   *   are set.
   *   {@link google.cloud.retail.v2.SearchRequest.personalization_spec|SearchRequest.personalization_spec}
   *   will override
   *   {@link google.cloud.retail.v2.ServingConfig.personalization_spec|ServingConfig.personalization_spec}.
   * @param {number[]} request.labels
   *   The labels applied to a resource must meet the following requirements:
   *
   *   * Each resource can have multiple labels, up to a maximum of 64.
   *   * Each label must be a key-value pair.
   *   * Keys have a minimum length of 1 character and a maximum length of 63
   *     characters and cannot be empty. Values can be empty and have a maximum
   *     length of 63 characters.
   *   * Keys and values can contain only lowercase letters, numeric characters,
   *     underscores, and dashes. All characters must use UTF-8 encoding, and
   *     international characters are allowed.
   *   * The key portion of a label must be unique. However, you can use the same
   *     key with multiple resources.
   *   * Keys must start with a lowercase letter or international character.
   *
   *   See [Google Cloud
   *   Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   *   for more details.
   * @param {google.cloud.retail.v2.SearchRequest.SpellCorrectionSpec} request.spellCorrectionSpec
   *   The spell correction specification that specifies the mode under
   *   which spell correction will take effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [SearchResult]{@link google.cloud.retail.v2.SearchResponse.SearchResult} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `searchAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  searchStream(
    request?: protos.google.cloud.retail.v2.ISearchRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        placement: request.placement ?? '',
      });
    const defaultCallSettings = this._defaults['search'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.search.createStream(
      this.innerApiCalls.search as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `search`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.placement
   *   Required. The resource name of the Retail Search serving config, such as
   *   `projects/* /locations/global/catalogs/default_catalog/servingConfigs/default_serving_config`
   *   or the name of the legacy placement resource, such as
   *   `projects/* /locations/global/catalogs/default_catalog/placements/default_search`.
   *   This field is used to identify the serving config name and the set
   *   of models that will be used to make the search.
   * @param {string} request.branch
   *   The branch resource name, such as
   *   `projects/* /locations/global/catalogs/default_catalog/branches/0`.
   *
   *   Use "default_branch" as the branch ID or leave this field empty, to search
   *   products under the default branch.
   * @param {string} request.query
   *   Raw search query.
   *
   *   If this field is empty, the request is considered a category browsing
   *   request and returned results are based on
   *   {@link google.cloud.retail.v2.SearchRequest.filter|filter} and
   *   {@link google.cloud.retail.v2.SearchRequest.page_categories|page_categories}.
   * @param {string} request.visitorId
   *   Required. A unique identifier for tracking visitors. For example, this
   *   could be implemented with an HTTP cookie, which should be able to uniquely
   *   identify a visitor on a single device. This unique identifier should not
   *   change if the visitor logs in or out of the website.
   *
   *   This should be the same identifier as
   *   {@link google.cloud.retail.v2.UserEvent.visitor_id|UserEvent.visitor_id}.
   *
   *   The field must be a UTF-8 encoded string with a length limit of 128
   *   characters. Otherwise, an INVALID_ARGUMENT error is returned.
   * @param {google.cloud.retail.v2.UserInfo} request.userInfo
   *   User information.
   * @param {number} request.pageSize
   *   Maximum number of {@link google.cloud.retail.v2.Product|Product}s to return. If
   *   unspecified, defaults to a reasonable value. The maximum allowed value is
   *   120. Values above 120 will be coerced to 120.
   *
   *   If this field is negative, an INVALID_ARGUMENT is returned.
   * @param {string} request.pageToken
   *   A page token
   *   {@link google.cloud.retail.v2.SearchResponse.next_page_token|SearchResponse.next_page_token},
   *   received from a previous
   *   {@link google.cloud.retail.v2.SearchService.Search|SearchService.Search} call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.retail.v2.SearchService.Search|SearchService.Search} must
   *   match the call that provided the page token. Otherwise, an INVALID_ARGUMENT
   *   error is returned.
   * @param {number} request.offset
   *   A 0-indexed integer that specifies the current offset (that is, starting
   *   result location, amongst the {@link google.cloud.retail.v2.Product|Product}s
   *   deemed by the API as relevant) in search results. This field is only
   *   considered if {@link google.cloud.retail.v2.SearchRequest.page_token|page_token}
   *   is unset.
   *
   *   If this field is negative, an INVALID_ARGUMENT is returned.
   * @param {string} request.filter
   *   The filter syntax consists of an expression language for constructing a
   *   predicate from one or more fields of the products being filtered. Filter
   *   expression is case-sensitive. See more details at this [user
   *   guide](https://cloud.google.com/retail/docs/filter-and-order#filter).
   *
   *   If this field is unrecognizable, an INVALID_ARGUMENT is returned.
   * @param {string} request.canonicalFilter
   *   The default filter that is applied when a user performs a search without
   *   checking any filters on the search page.
   *
   *   The filter applied to every search request when quality improvement such as
   *   query expansion is needed. For example, if a query does not have enough
   *   results, an expanded query with
   *   {@link google.cloud.retail.v2.SearchRequest.canonical_filter|SearchRequest.canonical_filter}
   *   will be returned as a supplement of the original query. This field is
   *   strongly recommended to achieve high search quality.
   *
   *   See {@link google.cloud.retail.v2.SearchRequest.filter|SearchRequest.filter} for
   *   more details about filter syntax.
   * @param {string} request.orderBy
   *   The order in which products are returned. Products can be ordered by
   *   a field in an {@link google.cloud.retail.v2.Product|Product} object. Leave it
   *   unset if ordered by relevance. OrderBy expression is case-sensitive. See
   *   more details at this [user
   *   guide](https://cloud.google.com/retail/docs/filter-and-order#order).
   *
   *   If this field is unrecognizable, an INVALID_ARGUMENT is returned.
   * @param {number[]} request.facetSpecs
   *   Facet specifications for faceted search. If empty, no facets are returned.
   *
   *   A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error
   *   is returned.
   * @param {google.cloud.retail.v2.SearchRequest.DynamicFacetSpec} request.dynamicFacetSpec
   *   Deprecated. Refer to https://cloud.google.com/retail/docs/configs#dynamic
   *   to enable dynamic facets. Do not set this field.
   *
   *   The specification for dynamically generated facets. Notice that only
   *   textual facets can be dynamically generated.
   * @param {google.cloud.retail.v2.SearchRequest.BoostSpec} request.boostSpec
   *   Boost specification to boost certain products. See more details at this
   *   [user guide](https://cloud.google.com/retail/docs/boosting).
   *
   *   Notice that if both
   *   {@link google.cloud.retail.v2.ServingConfig.boost_control_ids|ServingConfig.boost_control_ids}
   *   and
   *   {@link google.cloud.retail.v2.SearchRequest.boost_spec|SearchRequest.boost_spec}
   *   are set, the boost conditions from both places are evaluated. If a search
   *   request matches multiple boost conditions, the final boost score is equal
   *   to the sum of the boost scores from all matched boost conditions.
   * @param {google.cloud.retail.v2.SearchRequest.QueryExpansionSpec} request.queryExpansionSpec
   *   The query expansion specification that specifies the conditions under which
   *   query expansion will occur. See more details at this [user
   *   guide](https://cloud.google.com/retail/docs/result-size#query_expansion).
   * @param {string[]} request.variantRollupKeys
   *   The keys to fetch and rollup the matching
   *   {@link google.cloud.retail.v2.Product.Type.VARIANT|variant}
   *   {@link google.cloud.retail.v2.Product|Product}s attributes,
   *   {@link google.cloud.retail.v2.FulfillmentInfo|FulfillmentInfo} or
   *   {@link google.cloud.retail.v2.LocalInventory|LocalInventory}s attributes. The
   *   attributes from all the matching
   *   {@link google.cloud.retail.v2.Product.Type.VARIANT|variant}
   *   {@link google.cloud.retail.v2.Product|Product}s or
   *   {@link google.cloud.retail.v2.LocalInventory|LocalInventory}s are merged and
   *   de-duplicated. Notice that rollup attributes will lead to extra query
   *   latency. Maximum number of keys is 30.
   *
   *   For {@link google.cloud.retail.v2.FulfillmentInfo|FulfillmentInfo}, a
   *   fulfillment type and a fulfillment ID must be provided in the format of
   *   "fulfillmentType.fulfillmentId". E.g., in "pickupInStore.store123",
   *   "pickupInStore" is fulfillment type and "store123" is the store ID.
   *
   *   Supported keys are:
   *
   *   * colorFamilies
   *   * price
   *   * originalPrice
   *   * discount
   *   * variantId
   *   * inventory(place_id,price)
   *   * inventory(place_id,original_price)
   *   * inventory(place_id,attributes.key), where key is any key in the
   *     {@link google.cloud.retail.v2.LocalInventory.attributes|Product.local_inventories.attributes}
   *     map.
   *   * attributes.key, where key is any key in the
   *     {@link google.cloud.retail.v2.Product.attributes|Product.attributes} map.
   *   * pickupInStore.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "pickup-in-store".
   *   * shipToStore.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "ship-to-store".
   *   * sameDayDelivery.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "same-day-delivery".
   *   * nextDayDelivery.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "next-day-delivery".
   *   * customFulfillment1.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-1".
   *   * customFulfillment2.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-2".
   *   * customFulfillment3.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-3".
   *   * customFulfillment4.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-4".
   *   * customFulfillment5.id, where id is any
   *   {@link google.cloud.retail.v2.FulfillmentInfo.place_ids|FulfillmentInfo.place_ids}
   *   for {@link google.cloud.retail.v2.FulfillmentInfo.type|FulfillmentInfo.type}
   *     "custom-type-5".
   *
   *   If this field is set to an invalid value other than these, an
   *   INVALID_ARGUMENT error is returned.
   * @param {string[]} request.pageCategories
   *   The categories associated with a category page. Required for category
   *   navigation queries to achieve good search quality. The format should be
   *   the same as
   *   {@link google.cloud.retail.v2.UserEvent.page_categories|UserEvent.page_categories};
   *
   *   To represent full path of category, use '>' sign to separate different
   *   hierarchies. If '>' is part of the category name, replace it with
   *   other character(s).
   *
   *   Category pages include special pages such as sales or promotions. For
   *   instance, a special sale page may have the category hierarchy:
   *   "pageCategories" : ["Sales > 2017 Black Friday Deals"].
   * @param {google.cloud.retail.v2.SearchRequest.SearchMode} request.searchMode
   *   The search mode of the search request. If not specified, a single search
   *   request triggers both product search and faceted search.
   * @param {google.cloud.retail.v2.SearchRequest.PersonalizationSpec} request.personalizationSpec
   *   The specification for personalization.
   *
   *   Notice that if both
   *   {@link google.cloud.retail.v2.ServingConfig.personalization_spec|ServingConfig.personalization_spec}
   *   and
   *   {@link google.cloud.retail.v2.SearchRequest.personalization_spec|SearchRequest.personalization_spec}
   *   are set.
   *   {@link google.cloud.retail.v2.SearchRequest.personalization_spec|SearchRequest.personalization_spec}
   *   will override
   *   {@link google.cloud.retail.v2.ServingConfig.personalization_spec|ServingConfig.personalization_spec}.
   * @param {number[]} request.labels
   *   The labels applied to a resource must meet the following requirements:
   *
   *   * Each resource can have multiple labels, up to a maximum of 64.
   *   * Each label must be a key-value pair.
   *   * Keys have a minimum length of 1 character and a maximum length of 63
   *     characters and cannot be empty. Values can be empty and have a maximum
   *     length of 63 characters.
   *   * Keys and values can contain only lowercase letters, numeric characters,
   *     underscores, and dashes. All characters must use UTF-8 encoding, and
   *     international characters are allowed.
   *   * The key portion of a label must be unique. However, you can use the same
   *     key with multiple resources.
   *   * Keys must start with a lowercase letter or international character.
   *
   *   See [Google Cloud
   *   Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   *   for more details.
   * @param {google.cloud.retail.v2.SearchRequest.SpellCorrectionSpec} request.spellCorrectionSpec
   *   The spell correction specification that specifies the mode under
   *   which spell correction will take effect.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [SearchResult]{@link google.cloud.retail.v2.SearchResponse.SearchResult}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/search_service.search.js</caption>
   * region_tag:retail_v2_generated_SearchService_Search_async
   */
  searchAsync(
    request?: protos.google.cloud.retail.v2.ISearchRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.retail.v2.SearchResponse.ISearchResult> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        placement: request.placement ?? '',
      });
    const defaultCallSettings = this._defaults['search'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.search.asyncIterate(
      this.innerApiCalls['search'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.retail.v2.SearchResponse.ISearchResult>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified attributesConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @returns {string} Resource name string.
   */
  attributesConfigPath(project: string, location: string, catalog: string) {
    return this.pathTemplates.attributesConfigPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
    });
  }

  /**
   * Parse the project from AttributesConfig resource.
   *
   * @param {string} attributesConfigName
   *   A fully-qualified path representing AttributesConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAttributesConfigName(attributesConfigName: string) {
    return this.pathTemplates.attributesConfigPathTemplate.match(
      attributesConfigName
    ).project;
  }

  /**
   * Parse the location from AttributesConfig resource.
   *
   * @param {string} attributesConfigName
   *   A fully-qualified path representing AttributesConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAttributesConfigName(attributesConfigName: string) {
    return this.pathTemplates.attributesConfigPathTemplate.match(
      attributesConfigName
    ).location;
  }

  /**
   * Parse the catalog from AttributesConfig resource.
   *
   * @param {string} attributesConfigName
   *   A fully-qualified path representing AttributesConfig resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromAttributesConfigName(attributesConfigName: string) {
    return this.pathTemplates.attributesConfigPathTemplate.match(
      attributesConfigName
    ).catalog;
  }

  /**
   * Return a fully-qualified branch resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} branch
   * @returns {string} Resource name string.
   */
  branchPath(
    project: string,
    location: string,
    catalog: string,
    branch: string
  ) {
    return this.pathTemplates.branchPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      branch: branch,
    });
  }

  /**
   * Parse the project from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).project;
  }

  /**
   * Parse the location from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).location;
  }

  /**
   * Parse the catalog from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).catalog;
  }

  /**
   * Parse the branch from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).branch;
  }

  /**
   * Return a fully-qualified catalog resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @returns {string} Resource name string.
   */
  catalogPath(project: string, location: string, catalog: string) {
    return this.pathTemplates.catalogPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
    });
  }

  /**
   * Parse the project from Catalog resource.
   *
   * @param {string} catalogName
   *   A fully-qualified path representing Catalog resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCatalogName(catalogName: string) {
    return this.pathTemplates.catalogPathTemplate.match(catalogName).project;
  }

  /**
   * Parse the location from Catalog resource.
   *
   * @param {string} catalogName
   *   A fully-qualified path representing Catalog resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCatalogName(catalogName: string) {
    return this.pathTemplates.catalogPathTemplate.match(catalogName).location;
  }

  /**
   * Parse the catalog from Catalog resource.
   *
   * @param {string} catalogName
   *   A fully-qualified path representing Catalog resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromCatalogName(catalogName: string) {
    return this.pathTemplates.catalogPathTemplate.match(catalogName).catalog;
  }

  /**
   * Return a fully-qualified completionConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @returns {string} Resource name string.
   */
  completionConfigPath(project: string, location: string, catalog: string) {
    return this.pathTemplates.completionConfigPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
    });
  }

  /**
   * Parse the project from CompletionConfig resource.
   *
   * @param {string} completionConfigName
   *   A fully-qualified path representing CompletionConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCompletionConfigName(completionConfigName: string) {
    return this.pathTemplates.completionConfigPathTemplate.match(
      completionConfigName
    ).project;
  }

  /**
   * Parse the location from CompletionConfig resource.
   *
   * @param {string} completionConfigName
   *   A fully-qualified path representing CompletionConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCompletionConfigName(completionConfigName: string) {
    return this.pathTemplates.completionConfigPathTemplate.match(
      completionConfigName
    ).location;
  }

  /**
   * Parse the catalog from CompletionConfig resource.
   *
   * @param {string} completionConfigName
   *   A fully-qualified path representing CompletionConfig resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromCompletionConfigName(completionConfigName: string) {
    return this.pathTemplates.completionConfigPathTemplate.match(
      completionConfigName
    ).catalog;
  }

  /**
   * Return a fully-qualified control resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} control
   * @returns {string} Resource name string.
   */
  controlPath(
    project: string,
    location: string,
    catalog: string,
    control: string
  ) {
    return this.pathTemplates.controlPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      control: control,
    });
  }

  /**
   * Parse the project from Control resource.
   *
   * @param {string} controlName
   *   A fully-qualified path representing Control resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromControlName(controlName: string) {
    return this.pathTemplates.controlPathTemplate.match(controlName).project;
  }

  /**
   * Parse the location from Control resource.
   *
   * @param {string} controlName
   *   A fully-qualified path representing Control resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromControlName(controlName: string) {
    return this.pathTemplates.controlPathTemplate.match(controlName).location;
  }

  /**
   * Parse the catalog from Control resource.
   *
   * @param {string} controlName
   *   A fully-qualified path representing Control resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromControlName(controlName: string) {
    return this.pathTemplates.controlPathTemplate.match(controlName).catalog;
  }

  /**
   * Parse the control from Control resource.
   *
   * @param {string} controlName
   *   A fully-qualified path representing Control resource.
   * @returns {string} A string representing the control.
   */
  matchControlFromControlName(controlName: string) {
    return this.pathTemplates.controlPathTemplate.match(controlName).control;
  }

  /**
   * Return a fully-qualified product resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} branch
   * @param {string} product
   * @returns {string} Resource name string.
   */
  productPath(
    project: string,
    location: string,
    catalog: string,
    branch: string,
    product: string
  ) {
    return this.pathTemplates.productPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      branch: branch,
      product: product,
    });
  }

  /**
   * Parse the project from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).project;
  }

  /**
   * Parse the location from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).location;
  }

  /**
   * Parse the catalog from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).catalog;
  }

  /**
   * Parse the branch from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).branch;
  }

  /**
   * Parse the product from Product resource.
   *
   * @param {string} productName
   *   A fully-qualified path representing Product resource.
   * @returns {string} A string representing the product.
   */
  matchProductFromProductName(productName: string) {
    return this.pathTemplates.productPathTemplate.match(productName).product;
  }

  /**
   * Return a fully-qualified servingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} catalog
   * @param {string} serving_config
   * @returns {string} Resource name string.
   */
  servingConfigPath(
    project: string,
    location: string,
    catalog: string,
    servingConfig: string
  ) {
    return this.pathTemplates.servingConfigPathTemplate.render({
      project: project,
      location: location,
      catalog: catalog,
      serving_config: servingConfig,
    });
  }

  /**
   * Parse the project from ServingConfig resource.
   *
   * @param {string} servingConfigName
   *   A fully-qualified path representing ServingConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServingConfigName(servingConfigName: string) {
    return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName)
      .project;
  }

  /**
   * Parse the location from ServingConfig resource.
   *
   * @param {string} servingConfigName
   *   A fully-qualified path representing ServingConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServingConfigName(servingConfigName: string) {
    return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName)
      .location;
  }

  /**
   * Parse the catalog from ServingConfig resource.
   *
   * @param {string} servingConfigName
   *   A fully-qualified path representing ServingConfig resource.
   * @returns {string} A string representing the catalog.
   */
  matchCatalogFromServingConfigName(servingConfigName: string) {
    return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName)
      .catalog;
  }

  /**
   * Parse the serving_config from ServingConfig resource.
   *
   * @param {string} servingConfigName
   *   A fully-qualified path representing ServingConfig resource.
   * @returns {string} A string representing the serving_config.
   */
  matchServingConfigFromServingConfigName(servingConfigName: string) {
    return this.pathTemplates.servingConfigPathTemplate.match(servingConfigName)
      .serving_config;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.searchServiceStub && !this._terminated) {
      return this.searchServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
