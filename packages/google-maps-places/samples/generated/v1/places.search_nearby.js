// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(locationRestriction) {
  // [START places_v1_generated_Places_SearchNearby_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Place details will be displayed with the preferred language if available.
   *  If the language code is unspecified or unrecognized, place details of any
   *  language may be returned, with a preference for English if such details
   *  exist.
   *  Current list of supported languages:
   *  https://developers.google.com/maps/faq#languagesupport.
   */
  // const languageCode = 'abc123'
  /**
   *  The Unicode country/region code (CLDR) of the location where the
   *  request is coming from. This parameter is used to display the place
   *  details, like region-specific place name, if available. The parameter can
   *  affect results based on applicable law.
   *  For more information, see
   *  https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html.
   *  Note that 3-digit region codes are not currently supported.
   */
  // const regionCode = 'abc123'
  /**
   *  Included Place type (eg, "restaurant" or "gas_station") from
   *  https://developers.google.com/maps/documentation/places/web-service/place-types.
   *  Up to 50 types from Table
   *  A (https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
   *  may be specified.
   *  If there are any conflicting types, i.e. a type appears in both
   *  included_types and excluded_types, an INVALID_ARGUMENT error is
   *  returned.
   *  If a Place type is specified with multiple type restrictions, only places
   *  that satisfy all of the restrictions are returned. For example, if we
   *  have {included_types = "restaurant", excluded_primary_types =
   *  "restaurant" }, the returned places provide "restaurant"
   *  related services but do not operate primarily as "restaurants".
   */
  // const includedTypes = ['abc','def']
  /**
   *  Excluded Place type (eg, "restaurant" or "gas_station") from
   *  https://developers.google.com/maps/documentation/places/web-service/place-types.
   *  Up to 50 types from Table
   *  A (https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
   *  may be specified.
   *  If the client provides both included_types (e.g. restaurant) and
   *  excluded_types (e.g. cafe), then the response should include places that
   *  are restaurant but not cafe. The response includes places that match at
   *  least one of the included_types and none of the excluded_types.
   *  If there are any conflicting types, i.e. a type appears in both
   *  included_types and excluded_types, an INVALID_ARGUMENT error is returned.
   *  If a Place type is specified with multiple type restrictions, only places
   *  that satisfy all of the restrictions are returned. For example, if we
   *  have {included_types = "restaurant", excluded_primary_types =
   *  "restaurant" }, the returned places provide "restaurant"
   *  related services but do not operate primarily as "restaurants".
   */
  // const excludedTypes = ['abc','def']
  /**
   *  Included primary Place type (e.g. "restaurant" or "gas_station") from
   *  https://developers.google.com/maps/documentation/places/web-service/place-types.
   *  A place can only have a single primary type from the supported types table
   *  associated with it.
   *  Up to 50 types from Table
   *  A (https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
   *  may be specified.
   *  If there are any conflicting primary types, i.e. a type appears in both
   *  included_primary_types and excluded_primary_types, an INVALID_ARGUMENT
   *  error is returned.
   *  If a Place type is specified with multiple type restrictions, only places
   *  that satisfy all of the restrictions are returned. For example, if we
   *  have {included_types = "restaurant", excluded_primary_types =
   *  "restaurant" }, the returned places provide "restaurant"
   *  related services but do not operate primarily as "restaurants".
   */
  // const includedPrimaryTypes = ['abc','def']
  /**
   *  Excluded primary Place type (e.g. "restaurant" or "gas_station") from
   *  https://developers.google.com/maps/documentation/places/web-service/place-types.
   *  Up to 50 types from Table
   *  A (https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
   *  may be specified.
   *  If there are any conflicting primary types, i.e. a type appears in both
   *  included_primary_types and excluded_primary_types, an INVALID_ARGUMENT
   *  error is returned.
   *  If a Place type is specified with multiple type restrictions, only places
   *  that satisfy all of the restrictions are returned. For example, if we
   *  have {included_types = "restaurant", excluded_primary_types =
   *  "restaurant" }, the returned places provide "restaurant"
   *  related services but do not operate primarily as "restaurants".
   */
  // const excludedPrimaryTypes = ['abc','def']
  /**
   *  Maximum number of results to return. It must be between 1 and 20 (default),
   *  inclusively. If the number is unset, it falls back to the upper limit. If
   *  the number is set to negative or exceeds the upper limit, an
   *  INVALID_ARGUMENT error is returned.
   */
  // const maxResultCount = 1234
  /**
   *  Required. The region to search.
   */
  // const locationRestriction = {}
  /**
   *  How results will be ranked in the response.
   */
  // const rankPreference = {}

  // Imports the Places library
  const {PlacesClient} = require('@googlemaps/places').v1;

  // Instantiates a client
  const placesClient = new PlacesClient();

  async function callSearchNearby() {
    // Construct request
    const request = {
      locationRestriction,
    };

    // Run request
    const response = await placesClient.searchNearby(request);
    console.log(response);
  }

  callSearchNearby();
  // [END places_v1_generated_Places_SearchNearby_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
