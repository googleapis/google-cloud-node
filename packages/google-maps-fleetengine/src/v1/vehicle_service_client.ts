// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/vehicle_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './vehicle_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Vehicle management service.
 * @class
 * @memberof v1
 */
export class VehicleServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  vehicleServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of VehicleServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new VehicleServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof VehicleServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'fleetengine.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      tripPathTemplate: new this._gaxModule.PathTemplate(
        'providers/{provider}/trips/{trip}'
      ),
      vehiclePathTemplate: new this._gaxModule.PathTemplate(
        'providers/{provider}/vehicles/{vehicle}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listVehicles:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'vehicles')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'maps.fleetengine.v1.VehicleService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.vehicleServiceStub) {
      return this.vehicleServiceStub;
    }

    // Put together the "service stub" for
    // maps.fleetengine.v1.VehicleService.
    this.vehicleServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('maps.fleetengine.v1.VehicleService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).maps.fleetengine.v1.VehicleService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const vehicleServiceStubMethods =
        ['createVehicle', 'getVehicle', 'updateVehicle', 'updateVehicleLocation', 'updateVehicleAttributes', 'listVehicles', 'searchVehicles', 'searchFuzzedVehicles'];
    for (const methodName of vehicleServiceStubMethods) {
      const callPromise = this.vehicleServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.vehicleServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'fleetengine.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'fleetengine.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Instantiates a new vehicle associated with an on-demand rideshare or
 * deliveries provider. Each `Vehicle` must have a unique vehicle ID.
 *
 * The following `Vehicle` fields are required when creating a `Vehicle`:
 *
 * * `vehicleState`
 * * `supportedTripTypes`
 * * `maximumCapacity`
 * * `vehicleType`
 *
 * The following `Vehicle` fields are ignored when creating a `Vehicle`:
 *
 * * `name`
 * * `currentTrips`
 * * `availableCapacity`
 * * `current_route_segment`
 * * `current_route_segment_end_point`
 * * `current_route_segment_version`
 * * `current_route_segment_traffic`
 * * `route`
 * * `waypoints`
 * * `waypoints_version`
 * * `remaining_distance_meters`
 * * `remaining_time_seconds`
 * * `eta_to_next_waypoint`
 * * `navigation_status`
 *
 * All other fields are optional and used if provided.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The provider must be the Project ID (for example, `sample-cloud-project`)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {string} request.vehicleId
 *   Required. Unique Vehicle ID.
 *   Subject to the following restrictions:
 *
 *   * Must be a valid Unicode string.
 *   * Limited to a maximum length of 64 characters.
 *   * Normalized according to [Unicode Normalization Form C]
 *   (http://www.unicode.org/reports/tr15/).
 *   * May not contain any of the following ASCII characters: '/', ':', '?',
 *   ',', or '#'.
 * @param {maps.fleetengine.v1.Vehicle} request.vehicle
 *   Required. The Vehicle entity to create. When creating a Vehicle, the
 *   following fields are required:
 *
 *   * `vehicleState`
 *   * `supportedTripTypes`
 *   * `maximumCapacity`
 *   * `vehicleType`
 *
 *   When creating a Vehicle, the following fields are ignored:
 *
 *   * `name`
 *   * `currentTrips`
 *   * `availableCapacity`
 *   * `current_route_segment`
 *   * `current_route_segment_end_point`
 *   * `current_route_segment_version`
 *   * `current_route_segment_traffic`
 *   * `route`
 *   * `waypoints`
 *   * `waypoints_version`
 *   * `remaining_distance_meters`
 *   * `remaining_time_seconds`
 *   * `eta_to_next_waypoint`
 *   * `navigation_status`
 *
 *   All other fields are optional and used if provided.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.v1.Vehicle|Vehicle}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/vehicle_service.create_vehicle.js</caption>
 * region_tag:fleetengine_v1_generated_VehicleService_CreateVehicle_async
 */
  createVehicle(
      request?: protos.maps.fleetengine.v1.ICreateVehicleRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.ICreateVehicleRequest|undefined, {}|undefined
      ]>;
  createVehicle(
      request: protos.maps.fleetengine.v1.ICreateVehicleRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.ICreateVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  createVehicle(
      request: protos.maps.fleetengine.v1.ICreateVehicleRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.ICreateVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  createVehicle(
      request?: protos.maps.fleetengine.v1.ICreateVehicleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.ICreateVehicleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.ICreateVehicleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.ICreateVehicleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.createVehicle(request, options, callback);
  }
/**
 * Returns a vehicle from the Fleet Engine.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.name
 *   Required. Must be in the format
 *   `providers/{provider}/vehicles/{vehicle}`.
 *   The provider must be the Project ID (for example, `sample-cloud-project`)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {google.protobuf.Timestamp} request.currentRouteSegmentVersion
 *   Indicates the minimum timestamp (exclusive) for which
 *   `Vehicle.current_route_segment` is retrieved.
 *   If the route is unchanged since this timestamp, the `current_route_segment`
 *   field is not set in the response. If a minimum is unspecified, the
 *   `current_route_segment` is always retrieved.
 * @param {google.protobuf.Timestamp} request.waypointsVersion
 *   Indicates the minimum timestamp (exclusive) for which `Vehicle.waypoints`
 *   data is retrieved. If the waypoints are unchanged since this timestamp, the
 *   `vehicle.waypoints` data is not set in the response. If this field is
 *   unspecified, `vehicle.waypoints` is always retrieved.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.v1.Vehicle|Vehicle}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/vehicle_service.get_vehicle.js</caption>
 * region_tag:fleetengine_v1_generated_VehicleService_GetVehicle_async
 */
  getVehicle(
      request?: protos.maps.fleetengine.v1.IGetVehicleRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.IGetVehicleRequest|undefined, {}|undefined
      ]>;
  getVehicle(
      request: protos.maps.fleetengine.v1.IGetVehicleRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IGetVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  getVehicle(
      request: protos.maps.fleetengine.v1.IGetVehicleRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IGetVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  getVehicle(
      request?: protos.maps.fleetengine.v1.IGetVehicleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IGetVehicleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IGetVehicleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.IGetVehicleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.getVehicle(request, options, callback);
  }
/**
 * Writes updated vehicle data to the Fleet Engine.
 *
 * When updating a `Vehicle`, the following fields cannot be updated since
 * they are managed by the server:
 *
 * * `currentTrips`
 * * `availableCapacity`
 * * `current_route_segment_version`
 * * `waypoints_version`
 *
 * The vehicle `name` also cannot be updated.
 *
 * If the `attributes` field is updated, **all** the vehicle's attributes are
 * replaced with the attributes provided in the request. If you want to update
 * only some attributes, see the `UpdateVehicleAttributes` method. Likewise,
 * the `waypoints` field can be updated, but must contain all the waypoints
 * currently on the vehicle, and no other waypoints.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.name
 *   Required. Must be in the format
 *   `providers/{provider}/vehicles/{vehicle}`.
 *   The {provider} must be the Project ID (for example, `sample-cloud-project`)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {maps.fleetengine.v1.Vehicle} request.vehicle
 *   Required. The `Vehicle` entity values to apply.  When updating a `Vehicle`,
 *   the following fields may not be updated as they are managed by the
 *   server.
 *
 *   * `available_capacity`
 *   * `current_route_segment_version`
 *   * `current_trips`
 *   * `name`
 *   * `waypoints_version`
 *
 *   If the `attributes` field is updated, **all** the vehicle's attributes are
 *   replaced with the attributes provided in the request. If you want to update
 *   only some attributes, see the `UpdateVehicleAttributes` method.
 *
 *   Likewise, the `waypoints` field can be updated, but must contain all the
 *   waypoints currently on the vehicle, and no other waypoints.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. A field mask indicating which fields of the `Vehicle` to update.
 *   At least one field name must be provided.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.v1.Vehicle|Vehicle}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/vehicle_service.update_vehicle.js</caption>
 * region_tag:fleetengine_v1_generated_VehicleService_UpdateVehicle_async
 */
  updateVehicle(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.IUpdateVehicleRequest|undefined, {}|undefined
      ]>;
  updateVehicle(
      request: protos.maps.fleetengine.v1.IUpdateVehicleRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IUpdateVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  updateVehicle(
      request: protos.maps.fleetengine.v1.IUpdateVehicleRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IUpdateVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  updateVehicle(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IUpdateVehicleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.IVehicle,
          protos.maps.fleetengine.v1.IUpdateVehicleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle,
        protos.maps.fleetengine.v1.IUpdateVehicleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.updateVehicle(request, options, callback);
  }
/**
 * Deprecated: Use the `UpdateVehicle` method instead.
 * UpdateVehicleLocation updates the location of the vehicle.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.name
 *   Required. Must be in the format
 *   `providers/{provider}/vehicles/{vehicle}`.
 *   The {provider} must be the Project ID (for example, `sample-cloud-project`)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {maps.fleetengine.v1.VehicleLocation} request.currentLocation
 *   Required. The vehicle's most recent location.  The `location` and
 *   `update_time` subfields are required.
 * @param {maps.fleetengine.v1.VehicleState} request.currentState
 *   Set the vehicle's state to either `ONLINE` or `OFFLINE`.
 *   If set to `UNKNOWN_VEHICLE_STATE`, the vehicle's state will not be altered.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.v1.VehicleLocation|VehicleLocation}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/vehicle_service.update_vehicle_location.js</caption>
 * region_tag:fleetengine_v1_generated_VehicleService_UpdateVehicleLocation_async
 * @deprecated UpdateVehicleLocation is deprecated and may be removed in a future version.
 */
  updateVehicleLocation(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IVehicleLocation,
        protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|undefined, {}|undefined
      ]>;
  updateVehicleLocation(
      request: protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicleLocation,
          protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|null|undefined,
          {}|null|undefined>): void;
  updateVehicleLocation(
      request: protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.IVehicleLocation,
          protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|null|undefined,
          {}|null|undefined>): void;
  updateVehicleLocation(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.IVehicleLocation,
          protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.IVehicleLocation,
          protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.IVehicleLocation,
        protos.maps.fleetengine.v1.IUpdateVehicleLocationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    this.warn('DEP$VehicleService-$UpdateVehicleLocation','UpdateVehicleLocation is deprecated and may be removed in a future version.', 'DeprecationWarning');
    return this.innerApiCalls.updateVehicleLocation(request, options, callback);
  }
/**
 * Partially updates a vehicle's attributes.
 * Only the attributes mentioned in the request will be updated, other
 * attributes will NOT be altered. Note: this is different in `UpdateVehicle`,
 * where the whole `attributes` field will be replaced by the one in
 * `UpdateVehicleRequest`, attributes not in the request would be removed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.name
 *   Required. Must be in the format `providers/{provider}/vehicles/{vehicle}`.
 *   The provider must be the Project ID (for example, `sample-cloud-project`)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {number[]} request.attributes
 *   Required. The vehicle attributes to update. Unmentioned attributes are not
 *   altered or removed.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.v1.UpdateVehicleAttributesResponse|UpdateVehicleAttributesResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/vehicle_service.update_vehicle_attributes.js</caption>
 * region_tag:fleetengine_v1_generated_VehicleService_UpdateVehicleAttributes_async
 */
  updateVehicleAttributes(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
        protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|undefined, {}|undefined
      ]>;
  updateVehicleAttributes(
      request: protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|null|undefined,
          {}|null|undefined>): void;
  updateVehicleAttributes(
      request: protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|null|undefined,
          {}|null|undefined>): void;
  updateVehicleAttributes(
      request?: protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
          protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.IUpdateVehicleAttributesResponse,
        protos.maps.fleetengine.v1.IUpdateVehicleAttributesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.updateVehicleAttributes(request, options, callback);
  }
/**
 * Returns a list of vehicles that match the request options.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The provider must be the Project ID (for example, `sample-cloud-project`)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {maps.fleetengine.v1.TerminalLocation} request.pickupPoint
 *   Required. The pickup point to search near.
 * @param {maps.fleetengine.v1.TerminalLocation} request.dropoffPoint
 *   The customer's intended dropoff location. The field is required if
 *   `trip_types` contains `TripType.SHARED`.
 * @param {number} request.pickupRadiusMeters
 *   Required. Defines the vehicle search radius around the pickup point. Only
 *   vehicles within the search radius will be returned. Value must be between
 *   400 and 10000 meters (inclusive).
 * @param {number} request.count
 *   Required. Specifies the maximum number of vehicles to return. The value
 *   must be between 1 and 50 (inclusive).
 * @param {number} request.minimumCapacity
 *   Required. Specifies the number of passengers being considered for a trip.
 *   The value must be greater than or equal to one. The driver is not
 *   considered in the capacity value.
 * @param {number[]} request.tripTypes
 *   Required. Represents the type of proposed trip. Must include exactly one
 *   type. `UNKNOWN_TRIP_TYPE` is not allowed. Restricts the search to only
 *   those vehicles that can support that trip type.
 * @param {google.protobuf.Duration} request.maximumStaleness
 *   Restricts the search to only those vehicles that have sent location updates
 *   to Fleet Engine within the specified duration. Stationary vehicles still
 *   transmitting their locations are not considered stale. If this field is not
 *   set, the server uses five minutes as the default value.
 * @param {number[]} request.vehicleTypes
 *   Required. Restricts the search to vehicles with one of the specified types.
 *   At least one vehicle type must be specified. VehicleTypes with a category
 *   of `UNKNOWN` are not allowed.
 * @param {number[]} request.requiredAttributes
 *   Callers can form complex logical operations using any combination of the
 *   `required_attributes`, `required_one_of_attributes`, and
 *   `required_one_of_attribute_sets` fields.
 *
 *   `required_attributes` is a list; `required_one_of_attributes` uses a
 *   message which allows a list of lists. In combination, the two fields allow
 *   the composition of this expression:
 *
 *   ```
 *   (required_attributes[0] AND required_attributes[1] AND ...)
 *   AND
 *   (required_one_of_attributes{@link protos.0|0} OR required_one_of_attributes{@link protos.1|0} OR
 *   ...)
 *   AND
 *   (required_one_of_attributes{@link protos.0|1} OR required_one_of_attributes{@link protos.1|1} OR
 *   ...)
 *   ```
 *
 *   Restricts the search to only those vehicles with the specified attributes.
 *   This field is a conjunction/AND operation. A max of 50 required_attributes
 *   is allowed. This matches the maximum number of attributes allowed on a
 *   vehicle.
 * @param {number[]} request.requiredOneOfAttributes
 *   Restricts the search to only those vehicles with at least one of
 *   the specified attributes in each `VehicleAttributeList`. Within each
 *   list, a vehicle must match at least one of the attributes. This field is an
 *   inclusive disjunction/OR operation in each `VehicleAttributeList` and a
 *   conjunction/AND operation across the collection of `VehicleAttributeList`.
 * @param {number[]} request.requiredOneOfAttributeSets
 *   `required_one_of_attribute_sets` provides additional functionality.
 *
 *   Similar to `required_one_of_attributes`, `required_one_of_attribute_sets`
 *   uses a message which allows a list of lists, allowing expressions such as
 *   this one:
 *
 *   ```
 *   (required_attributes[0] AND required_attributes[1] AND ...)
 *   AND
 *   (
 *     (required_one_of_attribute_sets{@link protos.0|0} AND
 *     required_one_of_attribute_sets{@link protos.1|0} AND
 *     ...)
 *     OR
 *     (required_one_of_attribute_sets{@link protos.0|1} AND
 *     required_one_of_attribute_sets{@link protos.1|1} AND
 *     ...)
 *   )
 *   ```
 *
 *   Restricts the search to only those vehicles with all the attributes in a
 *   `VehicleAttributeList`. Within each list, a
 *   vehicle must match all of the attributes. This field is a conjunction/AND
 *   operation in each `VehicleAttributeList` and inclusive disjunction/OR
 *   operation across the collection of `VehicleAttributeList`.
 * @param {maps.fleetengine.v1.SearchVehiclesRequest.VehicleMatchOrder} request.orderBy
 *   Required. Specifies the desired ordering criterion for results.
 * @param {boolean} request.includeBackToBack
 *   This indicates if vehicles with a single active trip are eligible for this
 *   search. This field is only used when `current_trips_present` is
 *   unspecified. When `current_trips_present` is unspecified  and  this field
 *   is `false`, vehicles with assigned trips are excluded from the search
 *   results. When `current_trips_present` is unspecified and this field is
 *   `true`, search results can include vehicles with one active trip that has a
 *   status of `ENROUTE_TO_DROPOFF`. When `current_trips_present` is specified,
 *   this field cannot be set to true.
 *
 *   The default value is `false`.
 * @param {string} request.tripId
 *   Indicates the trip associated with this `SearchVehicleRequest`.
 * @param {maps.fleetengine.v1.SearchVehiclesRequest.CurrentTripsPresent} request.currentTripsPresent
 *   This indicates if vehicles with active trips are eligible for this search.
 *   This must be set to something other than
 *   `CURRENT_TRIPS_PRESENT_UNSPECIFIED` if `trip_type` includes `SHARED`.
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when searching vehicles. See
 *   http://aip.dev/160 for examples of the filter syntax.
 *
 *   This field is designed to replace the `required_attributes`,
 *   `required_one_of_attributes`, and `required_one_of_attributes_sets` fields.
 *   If a non-empty value is specified here, the following fields must be empty:
 *   `required_attributes`, `required_one_of_attributes`, and
 *   `required_one_of_attributes_sets`.
 *
 *   This filter functions as an AND clause with other constraints,
 *   such as `minimum_capacity` or `vehicle_types`.
 *
 *   Note that the only queries supported are on vehicle attributes (for
 *   example, `attributes.<key> = <value>` or `attributes.<key1> = <value1> AND
 *   attributes.<key2> = <value2>`). The maximum number of restrictions allowed
 *   in a filter query is 50.
 *
 *   Also, all attributes are stored as strings, so the only supported
 *   comparisons against attributes are string comparisons. In order to compare
 *   against number or boolean values, the values must be explicitly quoted to
 *   be treated as strings (for example, `attributes.<key> = "10"` or
 *   `attributes.<key> = "true"`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.v1.SearchVehiclesResponse|SearchVehiclesResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/vehicle_service.search_vehicles.js</caption>
 * region_tag:fleetengine_v1_generated_VehicleService_SearchVehicles_async
 */
  searchVehicles(
      request?: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.ISearchVehiclesResponse,
        protos.maps.fleetengine.v1.ISearchVehiclesRequest|undefined, {}|undefined
      ]>;
  searchVehicles(
      request: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>): void;
  searchVehicles(
      request: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>): void;
  searchVehicles(
      request?: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.ISearchVehiclesResponse,
        protos.maps.fleetengine.v1.ISearchVehiclesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.searchVehicles(request, options, callback);
  }
/**
 * Deprecated: Use `SearchVehicles` instead.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The provider must be the Project ID (for example, `sample-cloud-project`)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {maps.fleetengine.v1.TerminalLocation} request.pickupPoint
 *   Required. The pickup point to search near.
 * @param {maps.fleetengine.v1.TerminalLocation} request.dropoffPoint
 *   The customer's intended dropoff location. The field is required if
 *   `trip_types` contains `TripType.SHARED`.
 * @param {number} request.pickupRadiusMeters
 *   Required. Defines the vehicle search radius around the pickup point. Only
 *   vehicles within the search radius will be returned. Value must be between
 *   400 and 10000 meters (inclusive).
 * @param {number} request.count
 *   Required. Specifies the maximum number of vehicles to return. The value
 *   must be between 1 and 50 (inclusive).
 * @param {number} request.minimumCapacity
 *   Required. Specifies the number of passengers being considered for a trip.
 *   The value must be greater than or equal to one. The driver is not
 *   considered in the capacity value.
 * @param {number[]} request.tripTypes
 *   Required. Represents the type of proposed trip. Must include exactly one
 *   type. `UNKNOWN_TRIP_TYPE` is not allowed. Restricts the search to only
 *   those vehicles that can support that trip type.
 * @param {google.protobuf.Duration} request.maximumStaleness
 *   Restricts the search to only those vehicles that have sent location updates
 *   to Fleet Engine within the specified duration. Stationary vehicles still
 *   transmitting their locations are not considered stale. If this field is not
 *   set, the server uses five minutes as the default value.
 * @param {number[]} request.vehicleTypes
 *   Required. Restricts the search to vehicles with one of the specified types.
 *   At least one vehicle type must be specified. VehicleTypes with a category
 *   of `UNKNOWN` are not allowed.
 * @param {number[]} request.requiredAttributes
 *   Callers can form complex logical operations using any combination of the
 *   `required_attributes`, `required_one_of_attributes`, and
 *   `required_one_of_attribute_sets` fields.
 *
 *   `required_attributes` is a list; `required_one_of_attributes` uses a
 *   message which allows a list of lists. In combination, the two fields allow
 *   the composition of this expression:
 *
 *   ```
 *   (required_attributes[0] AND required_attributes[1] AND ...)
 *   AND
 *   (required_one_of_attributes{@link protos.0|0} OR required_one_of_attributes{@link protos.1|0} OR
 *   ...)
 *   AND
 *   (required_one_of_attributes{@link protos.0|1} OR required_one_of_attributes{@link protos.1|1} OR
 *   ...)
 *   ```
 *
 *   Restricts the search to only those vehicles with the specified attributes.
 *   This field is a conjunction/AND operation. A max of 50 required_attributes
 *   is allowed. This matches the maximum number of attributes allowed on a
 *   vehicle.
 * @param {number[]} request.requiredOneOfAttributes
 *   Restricts the search to only those vehicles with at least one of
 *   the specified attributes in each `VehicleAttributeList`. Within each
 *   list, a vehicle must match at least one of the attributes. This field is an
 *   inclusive disjunction/OR operation in each `VehicleAttributeList` and a
 *   conjunction/AND operation across the collection of `VehicleAttributeList`.
 * @param {number[]} request.requiredOneOfAttributeSets
 *   `required_one_of_attribute_sets` provides additional functionality.
 *
 *   Similar to `required_one_of_attributes`, `required_one_of_attribute_sets`
 *   uses a message which allows a list of lists, allowing expressions such as
 *   this one:
 *
 *   ```
 *   (required_attributes[0] AND required_attributes[1] AND ...)
 *   AND
 *   (
 *     (required_one_of_attribute_sets{@link protos.0|0} AND
 *     required_one_of_attribute_sets{@link protos.1|0} AND
 *     ...)
 *     OR
 *     (required_one_of_attribute_sets{@link protos.0|1} AND
 *     required_one_of_attribute_sets{@link protos.1|1} AND
 *     ...)
 *   )
 *   ```
 *
 *   Restricts the search to only those vehicles with all the attributes in a
 *   `VehicleAttributeList`. Within each list, a
 *   vehicle must match all of the attributes. This field is a conjunction/AND
 *   operation in each `VehicleAttributeList` and inclusive disjunction/OR
 *   operation across the collection of `VehicleAttributeList`.
 * @param {maps.fleetengine.v1.SearchVehiclesRequest.VehicleMatchOrder} request.orderBy
 *   Required. Specifies the desired ordering criterion for results.
 * @param {boolean} request.includeBackToBack
 *   This indicates if vehicles with a single active trip are eligible for this
 *   search. This field is only used when `current_trips_present` is
 *   unspecified. When `current_trips_present` is unspecified  and  this field
 *   is `false`, vehicles with assigned trips are excluded from the search
 *   results. When `current_trips_present` is unspecified and this field is
 *   `true`, search results can include vehicles with one active trip that has a
 *   status of `ENROUTE_TO_DROPOFF`. When `current_trips_present` is specified,
 *   this field cannot be set to true.
 *
 *   The default value is `false`.
 * @param {string} request.tripId
 *   Indicates the trip associated with this `SearchVehicleRequest`.
 * @param {maps.fleetengine.v1.SearchVehiclesRequest.CurrentTripsPresent} request.currentTripsPresent
 *   This indicates if vehicles with active trips are eligible for this search.
 *   This must be set to something other than
 *   `CURRENT_TRIPS_PRESENT_UNSPECIFIED` if `trip_type` includes `SHARED`.
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when searching vehicles. See
 *   http://aip.dev/160 for examples of the filter syntax.
 *
 *   This field is designed to replace the `required_attributes`,
 *   `required_one_of_attributes`, and `required_one_of_attributes_sets` fields.
 *   If a non-empty value is specified here, the following fields must be empty:
 *   `required_attributes`, `required_one_of_attributes`, and
 *   `required_one_of_attributes_sets`.
 *
 *   This filter functions as an AND clause with other constraints,
 *   such as `minimum_capacity` or `vehicle_types`.
 *
 *   Note that the only queries supported are on vehicle attributes (for
 *   example, `attributes.<key> = <value>` or `attributes.<key1> = <value1> AND
 *   attributes.<key2> = <value2>`). The maximum number of restrictions allowed
 *   in a filter query is 50.
 *
 *   Also, all attributes are stored as strings, so the only supported
 *   comparisons against attributes are string comparisons. In order to compare
 *   against number or boolean values, the values must be explicitly quoted to
 *   be treated as strings (for example, `attributes.<key> = "10"` or
 *   `attributes.<key> = "true"`).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.v1.SearchVehiclesResponse|SearchVehiclesResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/vehicle_service.search_fuzzed_vehicles.js</caption>
 * region_tag:fleetengine_v1_generated_VehicleService_SearchFuzzedVehicles_async
 * @deprecated SearchFuzzedVehicles is deprecated and may be removed in a future version.
 */
  searchFuzzedVehicles(
      request?: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.ISearchVehiclesResponse,
        protos.maps.fleetengine.v1.ISearchVehiclesRequest|undefined, {}|undefined
      ]>;
  searchFuzzedVehicles(
      request: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>): void;
  searchFuzzedVehicles(
      request: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      callback: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>): void;
  searchFuzzedVehicles(
      request?: protos.maps.fleetengine.v1.ISearchVehiclesRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.v1.ISearchVehiclesResponse,
          protos.maps.fleetengine.v1.ISearchVehiclesRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.v1.ISearchVehiclesResponse,
        protos.maps.fleetengine.v1.ISearchVehiclesRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    this.warn('DEP$VehicleService-$SearchFuzzedVehicles','SearchFuzzedVehicles is deprecated and may be removed in a future version.', 'DeprecationWarning');
    return this.innerApiCalls.searchFuzzedVehicles(request, options, callback);
  }

 /**
 * Returns a paginated list of vehicles associated with
 * a provider that match the request options.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The provider must be the Project ID (for example, `sample-cloud-project`)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {number} request.pageSize
 *   The maximum number of vehicles to return.
 *   Default value: 100.
 * @param {string} request.pageToken
 *   The value of the `next_page_token` provided by a previous call to
 *   `ListVehicles` so that you can paginate through groups of vehicles. The
 *   value is undefined if the filter criteria of the request is not the same as
 *   the filter criteria for the previous call to `ListVehicles`.
 * @param {google.protobuf.Int32Value} request.minimumCapacity
 *   Specifies the required minimum capacity of the vehicle. All vehicles
 *   returned will have a `maximum_capacity` greater than or equal to this
 *   value. If set, must be greater or equal to 0.
 * @param {number[]} request.tripTypes
 *   Restricts the response to vehicles that support at least one of the
 *   specified trip types.
 * @param {google.protobuf.Duration} request.maximumStaleness
 *   Restricts the response to vehicles that have sent location updates to Fleet
 *   Engine within the specified duration. Stationary vehicles still
 *   transmitting their locations are not considered stale. If present, must be
 *   a valid positive duration.
 * @param {number[]} request.vehicleTypeCategories
 *   Required. Restricts the response to vehicles with one of the specified type
 *   categories. `UNKNOWN` is not allowed.
 * @param {string[]} request.requiredAttributes
 *   Callers can form complex logical operations using any combination of the
 *   `required_attributes`, `required_one_of_attributes`, and
 *   `required_one_of_attribute_sets` fields.
 *
 *   `required_attributes` is a list; `required_one_of_attributes` uses a
 *   message which allows a list of lists. In combination, the two fields allow
 *   the composition of this expression:
 *
 *   ```
 *   (required_attributes[0] AND required_attributes[1] AND ...)
 *   AND
 *   (required_one_of_attributes{@link protos.0|0} OR required_one_of_attributes{@link protos.1|0} OR
 *   ...)
 *   AND
 *   (required_one_of_attributes{@link protos.0|1} OR required_one_of_attributes{@link protos.1|1} OR
 *   ...)
 *   ```
 *
 *   Restricts the response to vehicles with the specified attributes. This
 *   field is a conjunction/AND operation. A max of 50 required_attributes is
 *   allowed. This matches the maximum number of attributes allowed on a
 *   vehicle. Each repeated string should be of the format "key:value".
 * @param {string[]} request.requiredOneOfAttributes
 *   Restricts the response to vehicles with at least one of the specified
 *   attributes in each `VehicleAttributeList`. Within each list, a vehicle must
 *   match at least one of the attributes. This field is an inclusive
 *   disjunction/OR operation in each `VehicleAttributeList` and a
 *   conjunction/AND operation across the collection of `VehicleAttributeList`.
 *   Each repeated string should be of the format
 *   "key1:value1|key2:value2|key3:value3".
 * @param {string[]} request.requiredOneOfAttributeSets
 *   `required_one_of_attribute_sets` provides additional functionality.
 *
 *   Similar to `required_one_of_attributes`, `required_one_of_attribute_sets`
 *   uses a message which allows a list of lists, allowing expressions such as
 *   this one:
 *
 *   ```
 *   (required_attributes[0] AND required_attributes[1] AND ...)
 *   AND
 *   (
 *     (required_one_of_attribute_sets{@link protos.0|0} AND
 *     required_one_of_attribute_sets{@link protos.1|0} AND
 *     ...)
 *     OR
 *     (required_one_of_attribute_sets{@link protos.0|1} AND
 *     required_one_of_attribute_sets{@link protos.1|1} AND
 *     ...)
 *   )
 *   ```
 *
 *   Restricts the response to vehicles that match all the attributes in a
 *   `VehicleAttributeList`. Within each list, a vehicle must match all of the
 *   attributes. This field is a conjunction/AND operation in each
 *   `VehicleAttributeList` and inclusive disjunction/OR operation across the
 *   collection of `VehicleAttributeList`. Each repeated string should be of the
 *   format "key1:value1|key2:value2|key3:value3".
 * @param {maps.fleetengine.v1.VehicleState} request.vehicleState
 *   Restricts the response to vehicles that have this vehicle state.
 * @param {boolean} request.onTripOnly
 *   Only return the vehicles with current trip(s).
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when listing vehicles. See
 *   http://aip.dev/160 for examples of the filter syntax.
 *
 *   This field is designed to replace the `required_attributes`,
 *   `required_one_of_attributes`, and `required_one_of_attributes_sets` fields.
 *   If a non-empty value is specified here, the following fields must be empty:
 *   `required_attributes`, `required_one_of_attributes`, and
 *   `required_one_of_attributes_sets`.
 *
 *   This filter functions as an AND clause with other constraints,
 *   such as `vehicle_state` or `on_trip_only`.
 *
 *   Note that the only queries supported are on vehicle attributes (for
 *   example, `attributes.<key> = <value>` or `attributes.<key1> = <value1> AND
 *   attributes.<key2> = <value2>`). The maximum number of restrictions allowed
 *   in a filter query is 50.
 *
 *   Also, all attributes are stored as strings, so the only supported
 *   comparisons against attributes are string comparisons. In order to compare
 *   against number or boolean values, the values must be explicitly quoted to
 *   be treated as strings (for example, `attributes.<key> = "10"` or
 *   `attributes.<key> = "true"`).
 * @param {google.geo.type.Viewport} [request.viewport]
 *   Optional. A filter that limits the vehicles returned to those whose last
 *   known location was in the rectangular area defined by the viewport.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.maps.fleetengine.v1.Vehicle|Vehicle}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listVehiclesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listVehicles(
      request?: protos.maps.fleetengine.v1.IListVehiclesRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle[],
        protos.maps.fleetengine.v1.IListVehiclesRequest|null,
        protos.maps.fleetengine.v1.IListVehiclesResponse
      ]>;
  listVehicles(
      request: protos.maps.fleetengine.v1.IListVehiclesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.maps.fleetengine.v1.IListVehiclesRequest,
          protos.maps.fleetengine.v1.IListVehiclesResponse|null|undefined,
          protos.maps.fleetengine.v1.IVehicle>): void;
  listVehicles(
      request: protos.maps.fleetengine.v1.IListVehiclesRequest,
      callback: PaginationCallback<
          protos.maps.fleetengine.v1.IListVehiclesRequest,
          protos.maps.fleetengine.v1.IListVehiclesResponse|null|undefined,
          protos.maps.fleetengine.v1.IVehicle>): void;
  listVehicles(
      request?: protos.maps.fleetengine.v1.IListVehiclesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.maps.fleetengine.v1.IListVehiclesRequest,
          protos.maps.fleetengine.v1.IListVehiclesResponse|null|undefined,
          protos.maps.fleetengine.v1.IVehicle>,
      callback?: PaginationCallback<
          protos.maps.fleetengine.v1.IListVehiclesRequest,
          protos.maps.fleetengine.v1.IListVehiclesResponse|null|undefined,
          protos.maps.fleetengine.v1.IVehicle>):
      Promise<[
        protos.maps.fleetengine.v1.IVehicle[],
        protos.maps.fleetengine.v1.IListVehiclesRequest|null,
        protos.maps.fleetengine.v1.IListVehiclesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.listVehicles(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The provider must be the Project ID (for example, `sample-cloud-project`)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {number} request.pageSize
 *   The maximum number of vehicles to return.
 *   Default value: 100.
 * @param {string} request.pageToken
 *   The value of the `next_page_token` provided by a previous call to
 *   `ListVehicles` so that you can paginate through groups of vehicles. The
 *   value is undefined if the filter criteria of the request is not the same as
 *   the filter criteria for the previous call to `ListVehicles`.
 * @param {google.protobuf.Int32Value} request.minimumCapacity
 *   Specifies the required minimum capacity of the vehicle. All vehicles
 *   returned will have a `maximum_capacity` greater than or equal to this
 *   value. If set, must be greater or equal to 0.
 * @param {number[]} request.tripTypes
 *   Restricts the response to vehicles that support at least one of the
 *   specified trip types.
 * @param {google.protobuf.Duration} request.maximumStaleness
 *   Restricts the response to vehicles that have sent location updates to Fleet
 *   Engine within the specified duration. Stationary vehicles still
 *   transmitting their locations are not considered stale. If present, must be
 *   a valid positive duration.
 * @param {number[]} request.vehicleTypeCategories
 *   Required. Restricts the response to vehicles with one of the specified type
 *   categories. `UNKNOWN` is not allowed.
 * @param {string[]} request.requiredAttributes
 *   Callers can form complex logical operations using any combination of the
 *   `required_attributes`, `required_one_of_attributes`, and
 *   `required_one_of_attribute_sets` fields.
 *
 *   `required_attributes` is a list; `required_one_of_attributes` uses a
 *   message which allows a list of lists. In combination, the two fields allow
 *   the composition of this expression:
 *
 *   ```
 *   (required_attributes[0] AND required_attributes[1] AND ...)
 *   AND
 *   (required_one_of_attributes{@link protos.0|0} OR required_one_of_attributes{@link protos.1|0} OR
 *   ...)
 *   AND
 *   (required_one_of_attributes{@link protos.0|1} OR required_one_of_attributes{@link protos.1|1} OR
 *   ...)
 *   ```
 *
 *   Restricts the response to vehicles with the specified attributes. This
 *   field is a conjunction/AND operation. A max of 50 required_attributes is
 *   allowed. This matches the maximum number of attributes allowed on a
 *   vehicle. Each repeated string should be of the format "key:value".
 * @param {string[]} request.requiredOneOfAttributes
 *   Restricts the response to vehicles with at least one of the specified
 *   attributes in each `VehicleAttributeList`. Within each list, a vehicle must
 *   match at least one of the attributes. This field is an inclusive
 *   disjunction/OR operation in each `VehicleAttributeList` and a
 *   conjunction/AND operation across the collection of `VehicleAttributeList`.
 *   Each repeated string should be of the format
 *   "key1:value1|key2:value2|key3:value3".
 * @param {string[]} request.requiredOneOfAttributeSets
 *   `required_one_of_attribute_sets` provides additional functionality.
 *
 *   Similar to `required_one_of_attributes`, `required_one_of_attribute_sets`
 *   uses a message which allows a list of lists, allowing expressions such as
 *   this one:
 *
 *   ```
 *   (required_attributes[0] AND required_attributes[1] AND ...)
 *   AND
 *   (
 *     (required_one_of_attribute_sets{@link protos.0|0} AND
 *     required_one_of_attribute_sets{@link protos.1|0} AND
 *     ...)
 *     OR
 *     (required_one_of_attribute_sets{@link protos.0|1} AND
 *     required_one_of_attribute_sets{@link protos.1|1} AND
 *     ...)
 *   )
 *   ```
 *
 *   Restricts the response to vehicles that match all the attributes in a
 *   `VehicleAttributeList`. Within each list, a vehicle must match all of the
 *   attributes. This field is a conjunction/AND operation in each
 *   `VehicleAttributeList` and inclusive disjunction/OR operation across the
 *   collection of `VehicleAttributeList`. Each repeated string should be of the
 *   format "key1:value1|key2:value2|key3:value3".
 * @param {maps.fleetengine.v1.VehicleState} request.vehicleState
 *   Restricts the response to vehicles that have this vehicle state.
 * @param {boolean} request.onTripOnly
 *   Only return the vehicles with current trip(s).
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when listing vehicles. See
 *   http://aip.dev/160 for examples of the filter syntax.
 *
 *   This field is designed to replace the `required_attributes`,
 *   `required_one_of_attributes`, and `required_one_of_attributes_sets` fields.
 *   If a non-empty value is specified here, the following fields must be empty:
 *   `required_attributes`, `required_one_of_attributes`, and
 *   `required_one_of_attributes_sets`.
 *
 *   This filter functions as an AND clause with other constraints,
 *   such as `vehicle_state` or `on_trip_only`.
 *
 *   Note that the only queries supported are on vehicle attributes (for
 *   example, `attributes.<key> = <value>` or `attributes.<key1> = <value1> AND
 *   attributes.<key2> = <value2>`). The maximum number of restrictions allowed
 *   in a filter query is 50.
 *
 *   Also, all attributes are stored as strings, so the only supported
 *   comparisons against attributes are string comparisons. In order to compare
 *   against number or boolean values, the values must be explicitly quoted to
 *   be treated as strings (for example, `attributes.<key> = "10"` or
 *   `attributes.<key> = "true"`).
 * @param {google.geo.type.Viewport} [request.viewport]
 *   Optional. A filter that limits the vehicles returned to those whose last
 *   known location was in the rectangular area defined by the viewport.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.maps.fleetengine.v1.Vehicle|Vehicle} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listVehiclesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listVehiclesStream(
      request?: protos.maps.fleetengine.v1.IListVehiclesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listVehicles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVehicles.createStream(
      this.innerApiCalls.listVehicles as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listVehicles`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.v1.RequestHeader} request.header
 *   The standard Fleet Engine request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The provider must be the Project ID (for example, `sample-cloud-project`)
 *   of the Google Cloud Project of which the service account making
 *   this call is a member.
 * @param {number} request.pageSize
 *   The maximum number of vehicles to return.
 *   Default value: 100.
 * @param {string} request.pageToken
 *   The value of the `next_page_token` provided by a previous call to
 *   `ListVehicles` so that you can paginate through groups of vehicles. The
 *   value is undefined if the filter criteria of the request is not the same as
 *   the filter criteria for the previous call to `ListVehicles`.
 * @param {google.protobuf.Int32Value} request.minimumCapacity
 *   Specifies the required minimum capacity of the vehicle. All vehicles
 *   returned will have a `maximum_capacity` greater than or equal to this
 *   value. If set, must be greater or equal to 0.
 * @param {number[]} request.tripTypes
 *   Restricts the response to vehicles that support at least one of the
 *   specified trip types.
 * @param {google.protobuf.Duration} request.maximumStaleness
 *   Restricts the response to vehicles that have sent location updates to Fleet
 *   Engine within the specified duration. Stationary vehicles still
 *   transmitting their locations are not considered stale. If present, must be
 *   a valid positive duration.
 * @param {number[]} request.vehicleTypeCategories
 *   Required. Restricts the response to vehicles with one of the specified type
 *   categories. `UNKNOWN` is not allowed.
 * @param {string[]} request.requiredAttributes
 *   Callers can form complex logical operations using any combination of the
 *   `required_attributes`, `required_one_of_attributes`, and
 *   `required_one_of_attribute_sets` fields.
 *
 *   `required_attributes` is a list; `required_one_of_attributes` uses a
 *   message which allows a list of lists. In combination, the two fields allow
 *   the composition of this expression:
 *
 *   ```
 *   (required_attributes[0] AND required_attributes[1] AND ...)
 *   AND
 *   (required_one_of_attributes{@link protos.0|0} OR required_one_of_attributes{@link protos.1|0} OR
 *   ...)
 *   AND
 *   (required_one_of_attributes{@link protos.0|1} OR required_one_of_attributes{@link protos.1|1} OR
 *   ...)
 *   ```
 *
 *   Restricts the response to vehicles with the specified attributes. This
 *   field is a conjunction/AND operation. A max of 50 required_attributes is
 *   allowed. This matches the maximum number of attributes allowed on a
 *   vehicle. Each repeated string should be of the format "key:value".
 * @param {string[]} request.requiredOneOfAttributes
 *   Restricts the response to vehicles with at least one of the specified
 *   attributes in each `VehicleAttributeList`. Within each list, a vehicle must
 *   match at least one of the attributes. This field is an inclusive
 *   disjunction/OR operation in each `VehicleAttributeList` and a
 *   conjunction/AND operation across the collection of `VehicleAttributeList`.
 *   Each repeated string should be of the format
 *   "key1:value1|key2:value2|key3:value3".
 * @param {string[]} request.requiredOneOfAttributeSets
 *   `required_one_of_attribute_sets` provides additional functionality.
 *
 *   Similar to `required_one_of_attributes`, `required_one_of_attribute_sets`
 *   uses a message which allows a list of lists, allowing expressions such as
 *   this one:
 *
 *   ```
 *   (required_attributes[0] AND required_attributes[1] AND ...)
 *   AND
 *   (
 *     (required_one_of_attribute_sets{@link protos.0|0} AND
 *     required_one_of_attribute_sets{@link protos.1|0} AND
 *     ...)
 *     OR
 *     (required_one_of_attribute_sets{@link protos.0|1} AND
 *     required_one_of_attribute_sets{@link protos.1|1} AND
 *     ...)
 *   )
 *   ```
 *
 *   Restricts the response to vehicles that match all the attributes in a
 *   `VehicleAttributeList`. Within each list, a vehicle must match all of the
 *   attributes. This field is a conjunction/AND operation in each
 *   `VehicleAttributeList` and inclusive disjunction/OR operation across the
 *   collection of `VehicleAttributeList`. Each repeated string should be of the
 *   format "key1:value1|key2:value2|key3:value3".
 * @param {maps.fleetengine.v1.VehicleState} request.vehicleState
 *   Restricts the response to vehicles that have this vehicle state.
 * @param {boolean} request.onTripOnly
 *   Only return the vehicles with current trip(s).
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when listing vehicles. See
 *   http://aip.dev/160 for examples of the filter syntax.
 *
 *   This field is designed to replace the `required_attributes`,
 *   `required_one_of_attributes`, and `required_one_of_attributes_sets` fields.
 *   If a non-empty value is specified here, the following fields must be empty:
 *   `required_attributes`, `required_one_of_attributes`, and
 *   `required_one_of_attributes_sets`.
 *
 *   This filter functions as an AND clause with other constraints,
 *   such as `vehicle_state` or `on_trip_only`.
 *
 *   Note that the only queries supported are on vehicle attributes (for
 *   example, `attributes.<key> = <value>` or `attributes.<key1> = <value1> AND
 *   attributes.<key2> = <value2>`). The maximum number of restrictions allowed
 *   in a filter query is 50.
 *
 *   Also, all attributes are stored as strings, so the only supported
 *   comparisons against attributes are string comparisons. In order to compare
 *   against number or boolean values, the values must be explicitly quoted to
 *   be treated as strings (for example, `attributes.<key> = "10"` or
 *   `attributes.<key> = "true"`).
 * @param {google.geo.type.Viewport} [request.viewport]
 *   Optional. A filter that limits the vehicles returned to those whose last
 *   known location was in the rectangular area defined by the viewport.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.maps.fleetengine.v1.Vehicle|Vehicle}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/vehicle_service.list_vehicles.js</caption>
 * region_tag:fleetengine_v1_generated_VehicleService_ListVehicles_async
 */
  listVehiclesAsync(
      request?: protos.maps.fleetengine.v1.IListVehiclesRequest,
      options?: CallOptions):
    AsyncIterable<protos.maps.fleetengine.v1.IVehicle>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listVehicles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVehicles.asyncIterate(
      this.innerApiCalls['listVehicles'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.maps.fleetengine.v1.IVehicle>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified trip resource name string.
   *
   * @param {string} provider
   * @param {string} trip
   * @returns {string} Resource name string.
   */
  tripPath(provider:string,trip:string) {
    return this.pathTemplates.tripPathTemplate.render({
      provider: provider,
      trip: trip,
    });
  }

  /**
   * Parse the provider from Trip resource.
   *
   * @param {string} tripName
   *   A fully-qualified path representing Trip resource.
   * @returns {string} A string representing the provider.
   */
  matchProviderFromTripName(tripName: string) {
    return this.pathTemplates.tripPathTemplate.match(tripName).provider;
  }

  /**
   * Parse the trip from Trip resource.
   *
   * @param {string} tripName
   *   A fully-qualified path representing Trip resource.
   * @returns {string} A string representing the trip.
   */
  matchTripFromTripName(tripName: string) {
    return this.pathTemplates.tripPathTemplate.match(tripName).trip;
  }

  /**
   * Return a fully-qualified vehicle resource name string.
   *
   * @param {string} provider
   * @param {string} vehicle
   * @returns {string} Resource name string.
   */
  vehiclePath(provider:string,vehicle:string) {
    return this.pathTemplates.vehiclePathTemplate.render({
      provider: provider,
      vehicle: vehicle,
    });
  }

  /**
   * Parse the provider from Vehicle resource.
   *
   * @param {string} vehicleName
   *   A fully-qualified path representing Vehicle resource.
   * @returns {string} A string representing the provider.
   */
  matchProviderFromVehicleName(vehicleName: string) {
    return this.pathTemplates.vehiclePathTemplate.match(vehicleName).provider;
  }

  /**
   * Parse the vehicle from Vehicle resource.
   *
   * @param {string} vehicleName
   *   A fully-qualified path representing Vehicle resource.
   * @returns {string} A string representing the vehicle.
   */
  matchVehicleFromVehicleName(vehicleName: string) {
    return this.pathTemplates.vehiclePathTemplate.match(vehicleName).vehicle;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.vehicleServiceStub && !this._terminated) {
      return this.vehicleServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
