// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/delivery_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './delivery_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The Last Mile Delivery service.
 * @class
 * @memberof v1
 */
export class DeliveryServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  deliveryServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DeliveryServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DeliveryServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DeliveryServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'fleetengine.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      deliveryVehiclePathTemplate: new this._gaxModule.PathTemplate(
        'providers/{provider}/deliveryVehicles/{vehicle}'
      ),
      providerPathTemplate: new this._gaxModule.PathTemplate(
        'providers/{provider}'
      ),
      taskPathTemplate: new this._gaxModule.PathTemplate(
        'providers/{provider}/tasks/{task}'
      ),
      taskTrackingInfoPathTemplate: new this._gaxModule.PathTemplate(
        'providers/{provider}/taskTrackingInfo/{tracking}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTasks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'tasks'),
      listDeliveryVehicles:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'deliveryVehicles')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'maps.fleetengine.delivery.v1.DeliveryService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.deliveryServiceStub) {
      return this.deliveryServiceStub;
    }

    // Put together the "service stub" for
    // maps.fleetengine.delivery.v1.DeliveryService.
    this.deliveryServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('maps.fleetengine.delivery.v1.DeliveryService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).maps.fleetengine.delivery.v1.DeliveryService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const deliveryServiceStubMethods =
        ['createDeliveryVehicle', 'getDeliveryVehicle', 'updateDeliveryVehicle', 'batchCreateTasks', 'createTask', 'getTask', 'updateTask', 'listTasks', 'getTaskTrackingInfo', 'listDeliveryVehicles'];
    for (const methodName of deliveryServiceStubMethods) {
      const callPromise = this.deliveryServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.deliveryServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'fleetengine.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'fleetengine.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Creates and returns a new `DeliveryVehicle`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`. The provider must
 *   be the Google Cloud Project ID. For example, `sample-cloud-project`.
 * @param {string} request.deliveryVehicleId
 *   Required. The Delivery Vehicle ID must be unique and subject to the
 *   following restrictions:
 *
 *   * Must be a valid Unicode string.
 *   * Limited to a maximum length of 64 characters.
 *   * Normalized according to [Unicode Normalization Form C]
 *   (http://www.unicode.org/reports/tr15/).
 *   * May not contain any of the following ASCII characters: '/', ':', '?',
 *   ',', or '#'.
 * @param {maps.fleetengine.delivery.v1.DeliveryVehicle} request.deliveryVehicle
 *   Required. The `DeliveryVehicle` entity to create. When creating a new
 *   delivery vehicle, you may set the following optional fields:
 *
 *   * type
 *   * last_location
 *   * attributes
 *
 *   Note: The DeliveryVehicle's `name` field is ignored. All other
 *   DeliveryVehicle fields must not be set; otherwise, an error is returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.delivery.v1.DeliveryVehicle|DeliveryVehicle}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/delivery_service.create_delivery_vehicle.js</caption>
 * region_tag:fleetengine_v1_generated_DeliveryService_CreateDeliveryVehicle_async
 */
  createDeliveryVehicle(
      request?: protos.maps.fleetengine.delivery.v1.ICreateDeliveryVehicleRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
        protos.maps.fleetengine.delivery.v1.ICreateDeliveryVehicleRequest|undefined, {}|undefined
      ]>;
  createDeliveryVehicle(
      request: protos.maps.fleetengine.delivery.v1.ICreateDeliveryVehicleRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.ICreateDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  createDeliveryVehicle(
      request: protos.maps.fleetengine.delivery.v1.ICreateDeliveryVehicleRequest,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.ICreateDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  createDeliveryVehicle(
      request?: protos.maps.fleetengine.delivery.v1.ICreateDeliveryVehicleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.ICreateDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.ICreateDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
        protos.maps.fleetengine.delivery.v1.ICreateDeliveryVehicleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.createDeliveryVehicle(request, options, callback);
  }
/**
 * Returns the specified `DeliveryVehicle` instance.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.name
 *   Required. Must be in the format
 *   `providers/{provider}/deliveryVehicles/{delivery_vehicle}`.
 *   The `provider` must be the Google Cloud Project ID. For example,
 *   `sample-cloud-project`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.delivery.v1.DeliveryVehicle|DeliveryVehicle}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/delivery_service.get_delivery_vehicle.js</caption>
 * region_tag:fleetengine_v1_generated_DeliveryService_GetDeliveryVehicle_async
 */
  getDeliveryVehicle(
      request?: protos.maps.fleetengine.delivery.v1.IGetDeliveryVehicleRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
        protos.maps.fleetengine.delivery.v1.IGetDeliveryVehicleRequest|undefined, {}|undefined
      ]>;
  getDeliveryVehicle(
      request: protos.maps.fleetengine.delivery.v1.IGetDeliveryVehicleRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.IGetDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  getDeliveryVehicle(
      request: protos.maps.fleetengine.delivery.v1.IGetDeliveryVehicleRequest,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.IGetDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  getDeliveryVehicle(
      request?: protos.maps.fleetengine.delivery.v1.IGetDeliveryVehicleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.IGetDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.IGetDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
        protos.maps.fleetengine.delivery.v1.IGetDeliveryVehicleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.getDeliveryVehicle(request, options, callback);
  }
/**
 * Writes updated `DeliveryVehicle` data to Fleet Engine, and assigns
 * `Tasks` to the `DeliveryVehicle`. You cannot update the name of the
 * `DeliveryVehicle`. You *can* update `remaining_vehicle_journey_segments`,
 * but it must contain all of the `VehicleJourneySegment`s to be persisted on
 * the `DeliveryVehicle`. The `task_id`s are retrieved from
 * `remaining_vehicle_journey_segments`, and their corresponding `Tasks` are
 * assigned to the `DeliveryVehicle` if they have not yet been assigned.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {maps.fleetengine.delivery.v1.DeliveryVehicle} request.deliveryVehicle
 *   Required. The `DeliveryVehicle` entity update to apply.
 *   Note: You cannot update the name of the `DeliveryVehicle`.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. A field mask that indicates which `DeliveryVehicle` fields to
 *   update. Note that the update_mask must contain at least one field.
 *
 *   This is a comma-separated list of fully qualified names of fields. Example:
 *   `"remaining_vehicle_journey_segments"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.delivery.v1.DeliveryVehicle|DeliveryVehicle}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/delivery_service.update_delivery_vehicle.js</caption>
 * region_tag:fleetengine_v1_generated_DeliveryService_UpdateDeliveryVehicle_async
 */
  updateDeliveryVehicle(
      request?: protos.maps.fleetengine.delivery.v1.IUpdateDeliveryVehicleRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
        protos.maps.fleetengine.delivery.v1.IUpdateDeliveryVehicleRequest|undefined, {}|undefined
      ]>;
  updateDeliveryVehicle(
      request: protos.maps.fleetengine.delivery.v1.IUpdateDeliveryVehicleRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.IUpdateDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  updateDeliveryVehicle(
      request: protos.maps.fleetengine.delivery.v1.IUpdateDeliveryVehicleRequest,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.IUpdateDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>): void;
  updateDeliveryVehicle(
      request?: protos.maps.fleetengine.delivery.v1.IUpdateDeliveryVehicleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.IUpdateDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
          protos.maps.fleetengine.delivery.v1.IUpdateDeliveryVehicleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.delivery.v1.IDeliveryVehicle,
        protos.maps.fleetengine.delivery.v1.IUpdateDeliveryVehicleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.deliveryVehicle?.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.updateDeliveryVehicle(request, options, callback);
  }
/**
 * Creates and returns a batch of new `Task` objects.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 *   Note: If you set this field, then the header field in the
 *   `CreateTaskRequest` messages must either be empty, or it must match this
 *   field.
 * @param {string} request.parent
 *   Required. The parent resource shared by all tasks. This value must be in
 *   the format `providers/{provider}`. The `provider` must be the Google Cloud
 *   Project ID. For example, `sample-cloud-project`. The parent field in the
 *   `CreateTaskRequest` messages must either  be empty, or it must match this
 *   field.
 * @param {number[]} request.requests
 *   Required. The request message that specifies the resources to create.
 *   Note: You can create a maximum of 500 tasks in a batch.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.delivery.v1.BatchCreateTasksResponse|BatchCreateTasksResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/delivery_service.batch_create_tasks.js</caption>
 * region_tag:fleetengine_v1_generated_DeliveryService_BatchCreateTasks_async
 */
  batchCreateTasks(
      request?: protos.maps.fleetengine.delivery.v1.IBatchCreateTasksRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.delivery.v1.IBatchCreateTasksResponse,
        protos.maps.fleetengine.delivery.v1.IBatchCreateTasksRequest|undefined, {}|undefined
      ]>;
  batchCreateTasks(
      request: protos.maps.fleetengine.delivery.v1.IBatchCreateTasksRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.IBatchCreateTasksResponse,
          protos.maps.fleetengine.delivery.v1.IBatchCreateTasksRequest|null|undefined,
          {}|null|undefined>): void;
  batchCreateTasks(
      request: protos.maps.fleetengine.delivery.v1.IBatchCreateTasksRequest,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.IBatchCreateTasksResponse,
          protos.maps.fleetengine.delivery.v1.IBatchCreateTasksRequest|null|undefined,
          {}|null|undefined>): void;
  batchCreateTasks(
      request?: protos.maps.fleetengine.delivery.v1.IBatchCreateTasksRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.delivery.v1.IBatchCreateTasksResponse,
          protos.maps.fleetengine.delivery.v1.IBatchCreateTasksRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.delivery.v1.IBatchCreateTasksResponse,
          protos.maps.fleetengine.delivery.v1.IBatchCreateTasksRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.delivery.v1.IBatchCreateTasksResponse,
        protos.maps.fleetengine.delivery.v1.IBatchCreateTasksRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.batchCreateTasks(request, options, callback);
  }
/**
 * Creates and returns a new `Task` object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`. The `provider` must
 *   be the Google Cloud Project ID. For example, `sample-cloud-project`.
 * @param {string} request.taskId
 *   Required. The Task ID must be unique, but it should be not a shipment
 *   tracking ID. To store a shipment tracking ID, use the `tracking_id` field.
 *   Note that multiple tasks can have the same `tracking_id`. Task IDs are
 *   subject to the following restrictions:
 *
 *   * Must be a valid Unicode string.
 *   * Limited to a maximum length of 64 characters.
 *   * Normalized according to [Unicode Normalization Form C]
 *   (http://www.unicode.org/reports/tr15/).
 *   * May not contain any of the following ASCII characters: '/', ':', '?',
 *   ',', or '#'.
 * @param {maps.fleetengine.delivery.v1.Task} request.task
 *   Required. The Task entity to create.
 *   When creating a Task, the following fields are required:
 *
 *   * `type`
 *   * `state` (must be set to `OPEN`)
 *   * `tracking_id` (must not be set for `UNAVAILABLE` or `SCHEDULED_STOP`
 *   tasks, but required for all other task types)
 *   * `planned_location` (optional for `UNAVAILABLE` tasks)
 *   * `task_duration`
 *
 *   Note: The Task's `name` field is ignored. All other Task fields must not be
 *   set; otherwise, an error is returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.delivery.v1.Task|Task}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/delivery_service.create_task.js</caption>
 * region_tag:fleetengine_v1_generated_DeliveryService_CreateTask_async
 */
  createTask(
      request?: protos.maps.fleetengine.delivery.v1.ICreateTaskRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.delivery.v1.ITask,
        protos.maps.fleetengine.delivery.v1.ICreateTaskRequest|undefined, {}|undefined
      ]>;
  createTask(
      request: protos.maps.fleetengine.delivery.v1.ICreateTaskRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.ICreateTaskRequest|null|undefined,
          {}|null|undefined>): void;
  createTask(
      request: protos.maps.fleetengine.delivery.v1.ICreateTaskRequest,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.ICreateTaskRequest|null|undefined,
          {}|null|undefined>): void;
  createTask(
      request?: protos.maps.fleetengine.delivery.v1.ICreateTaskRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.ICreateTaskRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.ICreateTaskRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.delivery.v1.ITask,
        protos.maps.fleetengine.delivery.v1.ICreateTaskRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.createTask(request, options, callback);
  }
/**
 * Gets information about a `Task`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.name
 *   Required. Must be in the format `providers/{provider}/tasks/{task}`. The
 *   `provider` must be the Google Cloud Project ID. For example,
 *   `sample-cloud-project`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.delivery.v1.Task|Task}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/delivery_service.get_task.js</caption>
 * region_tag:fleetengine_v1_generated_DeliveryService_GetTask_async
 */
  getTask(
      request?: protos.maps.fleetengine.delivery.v1.IGetTaskRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.delivery.v1.ITask,
        protos.maps.fleetengine.delivery.v1.IGetTaskRequest|undefined, {}|undefined
      ]>;
  getTask(
      request: protos.maps.fleetengine.delivery.v1.IGetTaskRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.IGetTaskRequest|null|undefined,
          {}|null|undefined>): void;
  getTask(
      request: protos.maps.fleetengine.delivery.v1.IGetTaskRequest,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.IGetTaskRequest|null|undefined,
          {}|null|undefined>): void;
  getTask(
      request?: protos.maps.fleetengine.delivery.v1.IGetTaskRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.IGetTaskRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.IGetTaskRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.delivery.v1.ITask,
        protos.maps.fleetengine.delivery.v1.IGetTaskRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.getTask(request, options, callback);
  }
/**
 * Updates `Task` data.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {maps.fleetengine.delivery.v1.Task} request.task
 *   Required. The Task associated with the update.
 *   The following fields are maintained by Fleet Engine. Do not update
 *   them using `Task.update`.
 *
 *     * `last_location`.
 *     * `last_location_snappable`.
 *     * `name`.
 *     * `remaining_vehicle_journey_segments`.
 *     * `task_outcome_location_source`.
 *
 *   Note: You cannot change the value of `task_outcome` once you set it.
 *
 *   If the Task has been assigned to a delivery vehicle, then don't set the
 *   Task state to CLOSED using `Task.update`. Instead, remove the `VehicleStop`
 *   that contains the Task from the delivery vehicle, which automatically sets
 *   the Task state to CLOSED.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The field mask that indicates which Task fields to update.
 *   Note: The `update_mask` must contain at least one field.
 *
 *   This is a comma-separated list of fully qualified names of fields. Example:
 *   `"task_outcome,task_outcome_time,task_outcome_location"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.delivery.v1.Task|Task}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/delivery_service.update_task.js</caption>
 * region_tag:fleetengine_v1_generated_DeliveryService_UpdateTask_async
 */
  updateTask(
      request?: protos.maps.fleetengine.delivery.v1.IUpdateTaskRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.delivery.v1.ITask,
        protos.maps.fleetengine.delivery.v1.IUpdateTaskRequest|undefined, {}|undefined
      ]>;
  updateTask(
      request: protos.maps.fleetengine.delivery.v1.IUpdateTaskRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.IUpdateTaskRequest|null|undefined,
          {}|null|undefined>): void;
  updateTask(
      request: protos.maps.fleetengine.delivery.v1.IUpdateTaskRequest,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.IUpdateTaskRequest|null|undefined,
          {}|null|undefined>): void;
  updateTask(
      request?: protos.maps.fleetengine.delivery.v1.IUpdateTaskRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.IUpdateTaskRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.delivery.v1.ITask,
          protos.maps.fleetengine.delivery.v1.IUpdateTaskRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.delivery.v1.ITask,
        protos.maps.fleetengine.delivery.v1.IUpdateTaskRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.task?.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.updateTask(request, options, callback);
  }
/**
 * Returns the specified `TaskTrackingInfo` instance.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.name
 *   Required. Must be in the format
 *   `providers/{provider}/taskTrackingInfo/{tracking_id}`. The `provider`
 *   must be the Google Cloud Project ID, and the `tracking_id` must be the
 *   tracking ID associated with the task. An example name can be
 *   `providers/sample-cloud-project/taskTrackingInfo/sample-tracking-id`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.maps.fleetengine.delivery.v1.TaskTrackingInfo|TaskTrackingInfo}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/delivery_service.get_task_tracking_info.js</caption>
 * region_tag:fleetengine_v1_generated_DeliveryService_GetTaskTrackingInfo_async
 */
  getTaskTrackingInfo(
      request?: protos.maps.fleetengine.delivery.v1.IGetTaskTrackingInfoRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.delivery.v1.ITaskTrackingInfo,
        protos.maps.fleetengine.delivery.v1.IGetTaskTrackingInfoRequest|undefined, {}|undefined
      ]>;
  getTaskTrackingInfo(
      request: protos.maps.fleetengine.delivery.v1.IGetTaskTrackingInfoRequest,
      options: CallOptions,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.ITaskTrackingInfo,
          protos.maps.fleetengine.delivery.v1.IGetTaskTrackingInfoRequest|null|undefined,
          {}|null|undefined>): void;
  getTaskTrackingInfo(
      request: protos.maps.fleetengine.delivery.v1.IGetTaskTrackingInfoRequest,
      callback: Callback<
          protos.maps.fleetengine.delivery.v1.ITaskTrackingInfo,
          protos.maps.fleetengine.delivery.v1.IGetTaskTrackingInfoRequest|null|undefined,
          {}|null|undefined>): void;
  getTaskTrackingInfo(
      request?: protos.maps.fleetengine.delivery.v1.IGetTaskTrackingInfoRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.maps.fleetengine.delivery.v1.ITaskTrackingInfo,
          protos.maps.fleetengine.delivery.v1.IGetTaskTrackingInfoRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.maps.fleetengine.delivery.v1.ITaskTrackingInfo,
          protos.maps.fleetengine.delivery.v1.IGetTaskTrackingInfoRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.maps.fleetengine.delivery.v1.ITaskTrackingInfo,
        protos.maps.fleetengine.delivery.v1.IGetTaskTrackingInfoRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.getTaskTrackingInfo(request, options, callback);
  }

 /**
 * Gets all `Task`s that meet the specified filtering criteria.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The `provider` must be the Google Cloud Project ID. For example,
 *   `sample-cloud-project`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of Tasks to return. The service may return
 *   fewer than this value. If you don't specify this value, then the server
 *   determines the number of results to return.
 * @param {string} [request.pageToken]
 *   Optional. A page token received from a previous `ListTasks` call.
 *   You can provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListTasks` must match
 *   the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when listing Tasks. See
 *   http://aip.dev/160 for examples of filter syntax. If you don't specify a
 *   value, or if you filter on an empty string, then all Tasks are returned.
 *   For information about the Task properties that you can filter on, see [List
 *   tasks](https://developers.google.com/maps/documentation/transportation-logistics/last-mile-fleet-solution/fleet-performance/fleet-engine/deliveries_api#list-tasks).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.maps.fleetengine.delivery.v1.Task|Task}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listTasksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listTasks(
      request?: protos.maps.fleetengine.delivery.v1.IListTasksRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.delivery.v1.ITask[],
        protos.maps.fleetengine.delivery.v1.IListTasksRequest|null,
        protos.maps.fleetengine.delivery.v1.IListTasksResponse
      ]>;
  listTasks(
      request: protos.maps.fleetengine.delivery.v1.IListTasksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.maps.fleetengine.delivery.v1.IListTasksRequest,
          protos.maps.fleetengine.delivery.v1.IListTasksResponse|null|undefined,
          protos.maps.fleetengine.delivery.v1.ITask>): void;
  listTasks(
      request: protos.maps.fleetengine.delivery.v1.IListTasksRequest,
      callback: PaginationCallback<
          protos.maps.fleetengine.delivery.v1.IListTasksRequest,
          protos.maps.fleetengine.delivery.v1.IListTasksResponse|null|undefined,
          protos.maps.fleetengine.delivery.v1.ITask>): void;
  listTasks(
      request?: protos.maps.fleetengine.delivery.v1.IListTasksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.maps.fleetengine.delivery.v1.IListTasksRequest,
          protos.maps.fleetengine.delivery.v1.IListTasksResponse|null|undefined,
          protos.maps.fleetengine.delivery.v1.ITask>,
      callback?: PaginationCallback<
          protos.maps.fleetengine.delivery.v1.IListTasksRequest,
          protos.maps.fleetengine.delivery.v1.IListTasksResponse|null|undefined,
          protos.maps.fleetengine.delivery.v1.ITask>):
      Promise<[
        protos.maps.fleetengine.delivery.v1.ITask[],
        protos.maps.fleetengine.delivery.v1.IListTasksRequest|null,
        protos.maps.fleetengine.delivery.v1.IListTasksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.listTasks(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The `provider` must be the Google Cloud Project ID. For example,
 *   `sample-cloud-project`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of Tasks to return. The service may return
 *   fewer than this value. If you don't specify this value, then the server
 *   determines the number of results to return.
 * @param {string} [request.pageToken]
 *   Optional. A page token received from a previous `ListTasks` call.
 *   You can provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListTasks` must match
 *   the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when listing Tasks. See
 *   http://aip.dev/160 for examples of filter syntax. If you don't specify a
 *   value, or if you filter on an empty string, then all Tasks are returned.
 *   For information about the Task properties that you can filter on, see [List
 *   tasks](https://developers.google.com/maps/documentation/transportation-logistics/last-mile-fleet-solution/fleet-performance/fleet-engine/deliveries_api#list-tasks).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.maps.fleetengine.delivery.v1.Task|Task} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listTasksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listTasksStream(
      request?: protos.maps.fleetengine.delivery.v1.IListTasksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listTasks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTasks.createStream(
      this.innerApiCalls.listTasks as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listTasks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The `provider` must be the Google Cloud Project ID. For example,
 *   `sample-cloud-project`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of Tasks to return. The service may return
 *   fewer than this value. If you don't specify this value, then the server
 *   determines the number of results to return.
 * @param {string} [request.pageToken]
 *   Optional. A page token received from a previous `ListTasks` call.
 *   You can provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListTasks` must match
 *   the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when listing Tasks. See
 *   http://aip.dev/160 for examples of filter syntax. If you don't specify a
 *   value, or if you filter on an empty string, then all Tasks are returned.
 *   For information about the Task properties that you can filter on, see [List
 *   tasks](https://developers.google.com/maps/documentation/transportation-logistics/last-mile-fleet-solution/fleet-performance/fleet-engine/deliveries_api#list-tasks).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.maps.fleetengine.delivery.v1.Task|Task}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/delivery_service.list_tasks.js</caption>
 * region_tag:fleetengine_v1_generated_DeliveryService_ListTasks_async
 */
  listTasksAsync(
      request?: protos.maps.fleetengine.delivery.v1.IListTasksRequest,
      options?: CallOptions):
    AsyncIterable<protos.maps.fleetengine.delivery.v1.ITask>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listTasks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTasks.asyncIterate(
      this.innerApiCalls['listTasks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.maps.fleetengine.delivery.v1.ITask>;
  }
 /**
 * Gets all `DeliveryVehicle`s that meet the specified filtering criteria.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The `provider` must be the Google Cloud Project ID.
 *   For example, `sample-cloud-project`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of vehicles to return. The service may return
 *   fewer than this number. If you don't specify this number, then the server
 *   determines the number of results to return.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListDeliveryVehicles`
 *   call. You must provide this in order to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListDeliveryVehicles`
 *   must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when listing delivery vehicles. See
 *   http://aip.dev/160 for examples of the filter syntax. If you don't specify
 *   a value, or if you specify an empty string for the filter, then all
 *   delivery vehicles are returned.
 *
 *   Note that the only queries supported for `ListDeliveryVehicles` are
 *   on vehicle attributes (for example, `attributes.<key> = <value>` or
 *   `attributes.<key1> = <value1> AND attributes.<key2> = <value2>`). Also, all
 *   attributes are stored as strings, so the only supported comparisons against
 *   attributes are string comparisons. In order to compare against number or
 *   boolean values, the values must be explicitly quoted to be treated as
 *   strings (for example, `attributes.<key> = "10"` or
 *   `attributes.<key> = "true"`).
 *
 *   The maximum number of restrictions allowed in a filter query is 50. A
 *   restriction is a part of the query of the form
 *   `attribute.<KEY> <COMPARATOR> <VALUE>`, for example `attributes.foo = bar`
 *   is 1 restriction.
 * @param {google.geo.type.Viewport} [request.viewport]
 *   Optional. A filter that limits the vehicles returned to those whose last
 *   known location was in the rectangular area defined by the viewport.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.maps.fleetengine.delivery.v1.DeliveryVehicle|DeliveryVehicle}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDeliveryVehiclesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDeliveryVehicles(
      request?: protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest,
      options?: CallOptions):
      Promise<[
        protos.maps.fleetengine.delivery.v1.IDeliveryVehicle[],
        protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest|null,
        protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesResponse
      ]>;
  listDeliveryVehicles(
      request: protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest,
          protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesResponse|null|undefined,
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle>): void;
  listDeliveryVehicles(
      request: protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest,
      callback: PaginationCallback<
          protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest,
          protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesResponse|null|undefined,
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle>): void;
  listDeliveryVehicles(
      request?: protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest,
          protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesResponse|null|undefined,
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle>,
      callback?: PaginationCallback<
          protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest,
          protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesResponse|null|undefined,
          protos.maps.fleetengine.delivery.v1.IDeliveryVehicle>):
      Promise<[
        protos.maps.fleetengine.delivery.v1.IDeliveryVehicle[],
        protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest|null,
        protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    this.initialize();
    return this.innerApiCalls.listDeliveryVehicles(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The `provider` must be the Google Cloud Project ID.
 *   For example, `sample-cloud-project`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of vehicles to return. The service may return
 *   fewer than this number. If you don't specify this number, then the server
 *   determines the number of results to return.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListDeliveryVehicles`
 *   call. You must provide this in order to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListDeliveryVehicles`
 *   must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when listing delivery vehicles. See
 *   http://aip.dev/160 for examples of the filter syntax. If you don't specify
 *   a value, or if you specify an empty string for the filter, then all
 *   delivery vehicles are returned.
 *
 *   Note that the only queries supported for `ListDeliveryVehicles` are
 *   on vehicle attributes (for example, `attributes.<key> = <value>` or
 *   `attributes.<key1> = <value1> AND attributes.<key2> = <value2>`). Also, all
 *   attributes are stored as strings, so the only supported comparisons against
 *   attributes are string comparisons. In order to compare against number or
 *   boolean values, the values must be explicitly quoted to be treated as
 *   strings (for example, `attributes.<key> = "10"` or
 *   `attributes.<key> = "true"`).
 *
 *   The maximum number of restrictions allowed in a filter query is 50. A
 *   restriction is a part of the query of the form
 *   `attribute.<KEY> <COMPARATOR> <VALUE>`, for example `attributes.foo = bar`
 *   is 1 restriction.
 * @param {google.geo.type.Viewport} [request.viewport]
 *   Optional. A filter that limits the vehicles returned to those whose last
 *   known location was in the rectangular area defined by the viewport.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.maps.fleetengine.delivery.v1.DeliveryVehicle|DeliveryVehicle} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDeliveryVehiclesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDeliveryVehiclesStream(
      request?: protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listDeliveryVehicles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeliveryVehicles.createStream(
      this.innerApiCalls.listDeliveryVehicles as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDeliveryVehicles`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {maps.fleetengine.delivery.v1.DeliveryRequestHeader} [request.header]
 *   Optional. The standard Delivery API request header.
 * @param {string} request.parent
 *   Required. Must be in the format `providers/{provider}`.
 *   The `provider` must be the Google Cloud Project ID.
 *   For example, `sample-cloud-project`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of vehicles to return. The service may return
 *   fewer than this number. If you don't specify this number, then the server
 *   determines the number of results to return.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListDeliveryVehicles`
 *   call. You must provide this in order to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListDeliveryVehicles`
 *   must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. A filter query to apply when listing delivery vehicles. See
 *   http://aip.dev/160 for examples of the filter syntax. If you don't specify
 *   a value, or if you specify an empty string for the filter, then all
 *   delivery vehicles are returned.
 *
 *   Note that the only queries supported for `ListDeliveryVehicles` are
 *   on vehicle attributes (for example, `attributes.<key> = <value>` or
 *   `attributes.<key1> = <value1> AND attributes.<key2> = <value2>`). Also, all
 *   attributes are stored as strings, so the only supported comparisons against
 *   attributes are string comparisons. In order to compare against number or
 *   boolean values, the values must be explicitly quoted to be treated as
 *   strings (for example, `attributes.<key> = "10"` or
 *   `attributes.<key> = "true"`).
 *
 *   The maximum number of restrictions allowed in a filter query is 50. A
 *   restriction is a part of the query of the form
 *   `attribute.<KEY> <COMPARATOR> <VALUE>`, for example `attributes.foo = bar`
 *   is 1 restriction.
 * @param {google.geo.type.Viewport} [request.viewport]
 *   Optional. A filter that limits the vehicles returned to those whose last
 *   known location was in the rectangular area defined by the viewport.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.maps.fleetengine.delivery.v1.DeliveryVehicle|DeliveryVehicle}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/delivery_service.list_delivery_vehicles.js</caption>
 * region_tag:fleetengine_v1_generated_DeliveryService_ListDeliveryVehicles_async
 */
  listDeliveryVehiclesAsync(
      request?: protos.maps.fleetengine.delivery.v1.IListDeliveryVehiclesRequest,
      options?: CallOptions):
    AsyncIterable<protos.maps.fleetengine.delivery.v1.IDeliveryVehicle>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    let routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<provider_id>providers/[^/]+)'));
        if (match) {
          const parameterValue = match.groups?.['provider_id'] ?? fieldValue;
          Object.assign(routingParameter, { provider_id: parameterValue });
        }
      }
    }
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams(
      routingParameter
    );
    const defaultCallSettings = this._defaults['listDeliveryVehicles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeliveryVehicles.asyncIterate(
      this.innerApiCalls['listDeliveryVehicles'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.maps.fleetengine.delivery.v1.IDeliveryVehicle>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified deliveryVehicle resource name string.
   *
   * @param {string} provider
   * @param {string} vehicle
   * @returns {string} Resource name string.
   */
  deliveryVehiclePath(provider:string,vehicle:string) {
    return this.pathTemplates.deliveryVehiclePathTemplate.render({
      provider: provider,
      vehicle: vehicle,
    });
  }

  /**
   * Parse the provider from DeliveryVehicle resource.
   *
   * @param {string} deliveryVehicleName
   *   A fully-qualified path representing DeliveryVehicle resource.
   * @returns {string} A string representing the provider.
   */
  matchProviderFromDeliveryVehicleName(deliveryVehicleName: string) {
    return this.pathTemplates.deliveryVehiclePathTemplate.match(deliveryVehicleName).provider;
  }

  /**
   * Parse the vehicle from DeliveryVehicle resource.
   *
   * @param {string} deliveryVehicleName
   *   A fully-qualified path representing DeliveryVehicle resource.
   * @returns {string} A string representing the vehicle.
   */
  matchVehicleFromDeliveryVehicleName(deliveryVehicleName: string) {
    return this.pathTemplates.deliveryVehiclePathTemplate.match(deliveryVehicleName).vehicle;
  }

  /**
   * Return a fully-qualified provider resource name string.
   *
   * @param {string} provider
   * @returns {string} Resource name string.
   */
  providerPath(provider:string) {
    return this.pathTemplates.providerPathTemplate.render({
      provider: provider,
    });
  }

  /**
   * Parse the provider from Provider resource.
   *
   * @param {string} providerName
   *   A fully-qualified path representing Provider resource.
   * @returns {string} A string representing the provider.
   */
  matchProviderFromProviderName(providerName: string) {
    return this.pathTemplates.providerPathTemplate.match(providerName).provider;
  }

  /**
   * Return a fully-qualified task resource name string.
   *
   * @param {string} provider
   * @param {string} task
   * @returns {string} Resource name string.
   */
  taskPath(provider:string,task:string) {
    return this.pathTemplates.taskPathTemplate.render({
      provider: provider,
      task: task,
    });
  }

  /**
   * Parse the provider from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the provider.
   */
  matchProviderFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).provider;
  }

  /**
   * Parse the task from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the task.
   */
  matchTaskFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).task;
  }

  /**
   * Return a fully-qualified taskTrackingInfo resource name string.
   *
   * @param {string} provider
   * @param {string} tracking
   * @returns {string} Resource name string.
   */
  taskTrackingInfoPath(provider:string,tracking:string) {
    return this.pathTemplates.taskTrackingInfoPathTemplate.render({
      provider: provider,
      tracking: tracking,
    });
  }

  /**
   * Parse the provider from TaskTrackingInfo resource.
   *
   * @param {string} taskTrackingInfoName
   *   A fully-qualified path representing TaskTrackingInfo resource.
   * @returns {string} A string representing the provider.
   */
  matchProviderFromTaskTrackingInfoName(taskTrackingInfoName: string) {
    return this.pathTemplates.taskTrackingInfoPathTemplate.match(taskTrackingInfoName).provider;
  }

  /**
   * Parse the tracking from TaskTrackingInfo resource.
   *
   * @param {string} taskTrackingInfoName
   *   A fully-qualified path representing TaskTrackingInfo resource.
   * @returns {string} A string representing the tracking.
   */
  matchTrackingFromTaskTrackingInfoName(taskTrackingInfoName: string) {
    return this.pathTemplates.taskTrackingInfoPathTemplate.match(taskTrackingInfoName).tracking;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.deliveryServiceStub && !this._terminated) {
      return this.deliveryServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
