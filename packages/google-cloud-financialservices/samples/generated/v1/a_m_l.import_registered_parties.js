// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name, mode, lineOfBusiness) {
  // [START financialservices_v1_generated_AML_ImportRegisteredParties_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The full path to the Instance resource in this API.
   *  format: `projects/{project}/locations/{location}/instances/{instance}`
   */
  // const name = 'abc123'
  /**
   *  Optional. List of BigQuery tables. Union of tables will be taken if there
   *  is more than one table. VPC-SC restrictions apply. format:
   *  `bq://{project}.{bqDatasetID}.{bqTableID}` Use of `datasets` is preferred
   *  over the latter due to its simplicity and the reduced risk of errors
   *  `party_tables` and `datasets` must not be provided at the
   *  same time
   */
  // const partyTables = ['abc','def']
  /**
   *  Required. Mode of the request.
   */
  // const mode = {}
  /**
   *  Optional. If the request will not register the parties, just determine what
   *  would happen.
   */
  // const validateOnly = true
  /**
   *  Required. LineOfBusiness for the specified registered parties.
   */
  // const lineOfBusiness = {}

  // Imports the Financialservices library
  const {AMLClient} = require('@google-cloud/financialservices').v1;

  // Instantiates a client
  const financialservicesClient = new AMLClient();

  async function callImportRegisteredParties() {
    // Construct request
    const request = {
      name,
      mode,
      lineOfBusiness,
    };

    // Run request
    const [operation] = await financialservicesClient.importRegisteredParties(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callImportRegisteredParties();
  // [END financialservices_v1_generated_AML_ImportRegisteredParties_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
