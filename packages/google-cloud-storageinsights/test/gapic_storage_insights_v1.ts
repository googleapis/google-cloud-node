// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as storageinsightsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.StorageInsightsClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'storageinsights.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process !== 'undefined' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          storageinsightsModule.v1.StorageInsightsClient.servicePath;
        assert.strictEqual(servicePath, 'storageinsights.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          storageinsightsModule.v1.StorageInsightsClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'storageinsights.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'storageinsights.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'storageinsights.example.com');
    });
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new storageinsightsModule.v1.StorageInsightsClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = storageinsightsModule.v1.StorageInsightsClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.storageInsightsStub, undefined);
      await client.initialize();
      assert(client.storageInsightsStub);
    });

    it('has close method for the initialized client', done => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.storageInsightsStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.storageInsightsStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getReportConfig', () => {
    it('invokes getReportConfig without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.GetReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.GetReportConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ReportConfig()
      );
      client.innerApiCalls.getReportConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.getReportConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReportConfig without error using callback', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.GetReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.GetReportConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ReportConfig()
      );
      client.innerApiCalls.getReportConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getReportConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.storageinsights.v1.IReportConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReportConfig with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.GetReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.GetReportConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getReportConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getReportConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReportConfig with closed client', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.GetReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.GetReportConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getReportConfig(request), expectedError);
    });
  });

  describe('createReportConfig', () => {
    it('invokes createReportConfig without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.CreateReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.CreateReportConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ReportConfig()
      );
      client.innerApiCalls.createReportConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createReportConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createReportConfig without error using callback', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.CreateReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.CreateReportConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ReportConfig()
      );
      client.innerApiCalls.createReportConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createReportConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.storageinsights.v1.IReportConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createReportConfig with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.CreateReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.CreateReportConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createReportConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createReportConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createReportConfig with closed client', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.CreateReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.CreateReportConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createReportConfig(request), expectedError);
    });
  });

  describe('updateReportConfig', () => {
    it('invokes updateReportConfig without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.UpdateReportConfigRequest()
      );
      request.reportConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.UpdateReportConfigRequest',
        ['reportConfig', 'name']
      );
      request.reportConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `report_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ReportConfig()
      );
      client.innerApiCalls.updateReportConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateReportConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateReportConfig without error using callback', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.UpdateReportConfigRequest()
      );
      request.reportConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.UpdateReportConfigRequest',
        ['reportConfig', 'name']
      );
      request.reportConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `report_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ReportConfig()
      );
      client.innerApiCalls.updateReportConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateReportConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.storageinsights.v1.IReportConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateReportConfig with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.UpdateReportConfigRequest()
      );
      request.reportConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.UpdateReportConfigRequest',
        ['reportConfig', 'name']
      );
      request.reportConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `report_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateReportConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateReportConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateReportConfig with closed client', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.UpdateReportConfigRequest()
      );
      request.reportConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.UpdateReportConfigRequest',
        ['reportConfig', 'name']
      );
      request.reportConfig.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateReportConfig(request), expectedError);
    });
  });

  describe('deleteReportConfig', () => {
    it('invokes deleteReportConfig without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.DeleteReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.DeleteReportConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteReportConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteReportConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteReportConfig without error using callback', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.DeleteReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.DeleteReportConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteReportConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteReportConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteReportConfig with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.DeleteReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.DeleteReportConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteReportConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteReportConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteReportConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteReportConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteReportConfig with closed client', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.DeleteReportConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.DeleteReportConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteReportConfig(request), expectedError);
    });
  });

  describe('getReportDetail', () => {
    it('invokes getReportDetail without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.GetReportDetailRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.GetReportDetailRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ReportDetail()
      );
      client.innerApiCalls.getReportDetail = stubSimpleCall(expectedResponse);
      const [response] = await client.getReportDetail(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getReportDetail as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReportDetail as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReportDetail without error using callback', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.GetReportDetailRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.GetReportDetailRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ReportDetail()
      );
      client.innerApiCalls.getReportDetail =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getReportDetail(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.storageinsights.v1.IReportDetail | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getReportDetail as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReportDetail as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReportDetail with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.GetReportDetailRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.GetReportDetailRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getReportDetail = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getReportDetail(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getReportDetail as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReportDetail as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReportDetail with closed client', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.GetReportDetailRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.GetReportDetailRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getReportDetail(request), expectedError);
    });
  });

  describe('listReportConfigs', () => {
    it('invokes listReportConfigs without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
      ];
      client.innerApiCalls.listReportConfigs = stubSimpleCall(expectedResponse);
      const [response] = await client.listReportConfigs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listReportConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReportConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReportConfigs without error using callback', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
      ];
      client.innerApiCalls.listReportConfigs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listReportConfigs(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.storageinsights.v1.IReportConfig[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listReportConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReportConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReportConfigs with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listReportConfigs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listReportConfigs(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listReportConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReportConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReportConfigsStream without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
      ];
      client.descriptors.page.listReportConfigs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listReportConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.storageinsights.v1.ReportConfig[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.storageinsights.v1.ReportConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listReportConfigs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listReportConfigs, request)
      );
      assert(
        (client.descriptors.page.listReportConfigs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listReportConfigsStream with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listReportConfigs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listReportConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.storageinsights.v1.ReportConfig[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.storageinsights.v1.ReportConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listReportConfigs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listReportConfigs, request)
      );
      assert(
        (client.descriptors.page.listReportConfigs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listReportConfigs without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportConfig()
        ),
      ];
      client.descriptors.page.listReportConfigs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.storageinsights.v1.IReportConfig[] =
        [];
      const iterable = client.listReportConfigsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listReportConfigs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listReportConfigs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listReportConfigs with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listReportConfigs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listReportConfigsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.storageinsights.v1.IReportConfig[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listReportConfigs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listReportConfigs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listReportDetails', () => {
    it('invokes listReportDetails without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportDetailsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportDetailsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
      ];
      client.innerApiCalls.listReportDetails = stubSimpleCall(expectedResponse);
      const [response] = await client.listReportDetails(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listReportDetails as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReportDetails as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReportDetails without error using callback', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportDetailsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportDetailsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
      ];
      client.innerApiCalls.listReportDetails =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listReportDetails(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.storageinsights.v1.IReportDetail[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listReportDetails as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReportDetails as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReportDetails with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportDetailsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportDetailsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listReportDetails = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listReportDetails(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listReportDetails as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReportDetails as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReportDetailsStream without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportDetailsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportDetailsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
      ];
      client.descriptors.page.listReportDetails.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listReportDetailsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.storageinsights.v1.ReportDetail[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.storageinsights.v1.ReportDetail) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listReportDetails.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listReportDetails, request)
      );
      assert(
        (client.descriptors.page.listReportDetails.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listReportDetailsStream with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportDetailsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportDetailsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listReportDetails.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listReportDetailsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.storageinsights.v1.ReportDetail[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.storageinsights.v1.ReportDetail) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listReportDetails.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listReportDetails, request)
      );
      assert(
        (client.descriptors.page.listReportDetails.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listReportDetails without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportDetailsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportDetailsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
        generateSampleMessage(
          new protos.google.cloud.storageinsights.v1.ReportDetail()
        ),
      ];
      client.descriptors.page.listReportDetails.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.storageinsights.v1.IReportDetail[] =
        [];
      const iterable = client.listReportDetailsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listReportDetails.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listReportDetails.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listReportDetails with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.storageinsights.v1.ListReportDetailsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.storageinsights.v1.ListReportDetailsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listReportDetails.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listReportDetailsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.storageinsights.v1.IReportDetail[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listReportDetails.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listReportDetails.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('reportConfig', () => {
      const fakePath = '/rendered/path/reportConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        report_config: 'reportConfigValue',
      };
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.reportConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.reportConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('reportConfigPath', () => {
        const result = client.reportConfigPath(
          'projectValue',
          'locationValue',
          'reportConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.reportConfigPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromReportConfigName', () => {
        const result = client.matchProjectFromReportConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.reportConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromReportConfigName', () => {
        const result = client.matchLocationFromReportConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.reportConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchReportConfigFromReportConfigName', () => {
        const result = client.matchReportConfigFromReportConfigName(fakePath);
        assert.strictEqual(result, 'reportConfigValue');
        assert(
          (client.pathTemplates.reportConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('reportDetail', () => {
      const fakePath = '/rendered/path/reportDetail';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        report_config: 'reportConfigValue',
        report_detail: 'reportDetailValue',
      };
      const client = new storageinsightsModule.v1.StorageInsightsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.reportDetailPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.reportDetailPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('reportDetailPath', () => {
        const result = client.reportDetailPath(
          'projectValue',
          'locationValue',
          'reportConfigValue',
          'reportDetailValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.reportDetailPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromReportDetailName', () => {
        const result = client.matchProjectFromReportDetailName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.reportDetailPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromReportDetailName', () => {
        const result = client.matchLocationFromReportDetailName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.reportDetailPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchReportConfigFromReportDetailName', () => {
        const result = client.matchReportConfigFromReportDetailName(fakePath);
        assert.strictEqual(result, 'reportConfigValue');
        assert(
          (client.pathTemplates.reportDetailPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchReportDetailFromReportDetailName', () => {
        const result = client.matchReportDetailFromReportDetailName(fakePath);
        assert.strictEqual(result, 'reportDetailValue');
        assert(
          (client.pathTemplates.reportDetailPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
