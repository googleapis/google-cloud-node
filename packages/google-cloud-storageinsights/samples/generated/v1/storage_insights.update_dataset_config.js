// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(updateMask, datasetConfig) {
  // [START storageinsights_v1_generated_StorageInsights_UpdateDatasetConfig_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Field mask is used to specify the fields to be overwritten in the
   *  `DatasetConfig` resource by the update.
   *  The fields specified in the `update_mask` are relative to the resource, not
   *  the full request. A field is overwritten if it is in the mask. If the
   *  user does not provide a mask then it returns an "Invalid Argument" error.
   */
  // const updateMask = {}
  /**
   *  Required. The resource being updated
   */
  // const datasetConfig = {}
  /**
   *  Optional. A unique identifier for your request.
   *  Specify the request ID if you need to retry the request.
   *  If you retry the request with the same ID within 60 minutes, the server
   *  ignores the request if it has already completed the original request.
   *  For example, if your initial request times out and you retry the request
   *  using the same request ID, the server recognizes the original request and
   *  does not process the new request.
   *  The request ID must be a valid UUID and cannot be a zero UUID
   *  (00000000-0000-0000-0000-000000000000).
   */
  // const requestId = 'abc123'

  // Imports the Storageinsights library
  const {StorageInsightsClient} = require('@google-cloud/storageinsights').v1;

  // Instantiates a client
  const storageinsightsClient = new StorageInsightsClient();

  async function callUpdateDatasetConfig() {
    // Construct request
    const request = {
      updateMask,
      datasetConfig,
    };

    // Run request
    const [operation] = await storageinsightsClient.updateDatasetConfig(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callUpdateDatasetConfig();
  // [END storageinsights_v1_generated_StorageInsights_UpdateDatasetConfig_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
