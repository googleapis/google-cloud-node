// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/access_approval_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './access_approval_client_config.json';
const version = require('../../../package.json').version;

/**
 *  This API allows a customer to manage accesses to cloud resources by
 *  Google personnel. It defines the following resource model:
 *
 *  - The API has a collection of
 *    {@link google.cloud.accessapproval.v1.ApprovalRequest|ApprovalRequest}
 *    resources, named `approvalRequests/{approval_request}`
 *  - The API has top-level settings per Project/Folder/Organization, named
 *    `accessApprovalSettings`
 *
 *  The service also periodically emails a list of recipients, defined at the
 *  Project/Folder/Organization level in the accessApprovalSettings, when there
 *  is a pending ApprovalRequest for them to act on. The ApprovalRequests can
 *  also optionally be published to a Pub/Sub topic owned by the customer
 *  (contact support if you would like to enable Pub/Sub notifications).
 *
 *  ApprovalRequests can be approved or dismissed. Google personnel can only
 *  access the indicated resource or resources if the request is approved
 *  (subject to some exclusions:
 *  https://cloud.google.com/access-approval/docs/overview#exclusions).
 *
 *  Note: Using Access Approval functionality will mean that Google may not be
 *  able to meet the SLAs for your chosen products, as any support response times
 *  may be dramatically increased. As such the SLAs do not apply to any service
 *  disruption to the extent impacted by Customer's use of Access Approval. Do
 *  not enable Access Approval for projects where you may require high service
 *  availability and rapid response by Google Cloud Support.
 *
 *  After a request is approved or dismissed, no further action may be taken on
 *  it. Requests with the requested_expiration in the past or with no activity
 *  for 14 days are considered dismissed. When an approval expires, the request
 *  is considered dismissed.
 *
 *  If a request is not approved or dismissed, we call it pending.
 * @class
 * @memberof v1
 */
export class AccessApprovalClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  accessApprovalStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AccessApprovalClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new AccessApprovalClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AccessApprovalClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      folderAccessApprovalSettingsPathTemplate:
        new this._gaxModule.PathTemplate(
          'folders/{folder}/accessApprovalSettings'
        ),
      folderApprovalRequestPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/approvalRequests/{approval_request}'
      ),
      folderServiceAccountPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/serviceAccount'
      ),
      organizationAccessApprovalSettingsPathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/accessApprovalSettings'
        ),
      organizationApprovalRequestPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/approvalRequests/{approval_request}'
      ),
      organizationServiceAccountPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/serviceAccount'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectAccessApprovalSettingsPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/accessApprovalSettings'
        ),
      projectApprovalRequestPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/approvalRequests/{approval_request}'
      ),
      projectServiceAccountPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/serviceAccount'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listApprovalRequests: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'approvalRequests'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.accessapproval.v1.AccessApproval',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.accessApprovalStub) {
      return this.accessApprovalStub;
    }

    // Put together the "service stub" for
    // google.cloud.accessapproval.v1.AccessApproval.
    this.accessApprovalStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.accessapproval.v1.AccessApproval'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.accessapproval.v1.AccessApproval,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const accessApprovalStubMethods = [
      'listApprovalRequests',
      'getApprovalRequest',
      'approveApprovalRequest',
      'dismissApprovalRequest',
      'invalidateApprovalRequest',
      'getAccessApprovalSettings',
      'updateAccessApprovalSettings',
      'deleteAccessApprovalSettings',
      'getAccessApprovalServiceAccount',
    ];
    for (const methodName of accessApprovalStubMethods) {
      const callPromise = this.accessApprovalStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.accessApprovalStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'accessapproval.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'accessapproval.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets an approval request. Returns NOT_FOUND if the request does not exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the approval request to retrieve.
   *   Format:
   *   "{projects|folders|organizations}/{id}/approvalRequests/{approval_request}"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ApprovalRequest]{@link google.cloud.accessapproval.v1.ApprovalRequest}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/access_approval.get_approval_request.js</caption>
   * region_tag:accessapproval_v1_generated_AccessApproval_GetApprovalRequest_async
   */
  getApprovalRequest(
    request?: protos.google.cloud.accessapproval.v1.IGetApprovalRequestMessage,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      (
        | protos.google.cloud.accessapproval.v1.IGetApprovalRequestMessage
        | undefined
      ),
      {} | undefined
    ]
  >;
  getApprovalRequest(
    request: protos.google.cloud.accessapproval.v1.IGetApprovalRequestMessage,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IGetApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getApprovalRequest(
    request: protos.google.cloud.accessapproval.v1.IGetApprovalRequestMessage,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IGetApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getApprovalRequest(
    request?: protos.google.cloud.accessapproval.v1.IGetApprovalRequestMessage,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.accessapproval.v1.IApprovalRequest,
          | protos.google.cloud.accessapproval.v1.IGetApprovalRequestMessage
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IGetApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      (
        | protos.google.cloud.accessapproval.v1.IGetApprovalRequestMessage
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getApprovalRequest(request, options, callback);
  }
  /**
   * Approves a request and returns the updated ApprovalRequest.
   *
   * Returns NOT_FOUND if the request does not exist. Returns
   * FAILED_PRECONDITION if the request exists but is not in a pending state.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Name of the approval request to approve.
   * @param {google.protobuf.Timestamp} request.expireTime
   *   The expiration time of this approval.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ApprovalRequest]{@link google.cloud.accessapproval.v1.ApprovalRequest}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/access_approval.approve_approval_request.js</caption>
   * region_tag:accessapproval_v1_generated_AccessApproval_ApproveApprovalRequest_async
   */
  approveApprovalRequest(
    request?: protos.google.cloud.accessapproval.v1.IApproveApprovalRequestMessage,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      (
        | protos.google.cloud.accessapproval.v1.IApproveApprovalRequestMessage
        | undefined
      ),
      {} | undefined
    ]
  >;
  approveApprovalRequest(
    request: protos.google.cloud.accessapproval.v1.IApproveApprovalRequestMessage,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IApproveApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  approveApprovalRequest(
    request: protos.google.cloud.accessapproval.v1.IApproveApprovalRequestMessage,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IApproveApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  approveApprovalRequest(
    request?: protos.google.cloud.accessapproval.v1.IApproveApprovalRequestMessage,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.accessapproval.v1.IApprovalRequest,
          | protos.google.cloud.accessapproval.v1.IApproveApprovalRequestMessage
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IApproveApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      (
        | protos.google.cloud.accessapproval.v1.IApproveApprovalRequestMessage
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.approveApprovalRequest(
      request,
      options,
      callback
    );
  }
  /**
   * Dismisses a request. Returns the updated ApprovalRequest.
   *
   * NOTE: This does not deny access to the resource if another request has been
   * made and approved. It is equivalent in effect to ignoring the request
   * altogether.
   *
   * Returns NOT_FOUND if the request does not exist.
   *
   * Returns FAILED_PRECONDITION if the request exists but is not in a pending
   * state.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Name of the ApprovalRequest to dismiss.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ApprovalRequest]{@link google.cloud.accessapproval.v1.ApprovalRequest}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/access_approval.dismiss_approval_request.js</caption>
   * region_tag:accessapproval_v1_generated_AccessApproval_DismissApprovalRequest_async
   */
  dismissApprovalRequest(
    request?: protos.google.cloud.accessapproval.v1.IDismissApprovalRequestMessage,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      (
        | protos.google.cloud.accessapproval.v1.IDismissApprovalRequestMessage
        | undefined
      ),
      {} | undefined
    ]
  >;
  dismissApprovalRequest(
    request: protos.google.cloud.accessapproval.v1.IDismissApprovalRequestMessage,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IDismissApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  dismissApprovalRequest(
    request: protos.google.cloud.accessapproval.v1.IDismissApprovalRequestMessage,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IDismissApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  dismissApprovalRequest(
    request?: protos.google.cloud.accessapproval.v1.IDismissApprovalRequestMessage,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.accessapproval.v1.IApprovalRequest,
          | protos.google.cloud.accessapproval.v1.IDismissApprovalRequestMessage
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IDismissApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      (
        | protos.google.cloud.accessapproval.v1.IDismissApprovalRequestMessage
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.dismissApprovalRequest(
      request,
      options,
      callback
    );
  }
  /**
   * Invalidates an existing ApprovalRequest. Returns the updated
   * ApprovalRequest.
   *
   * NOTE: This does not deny access to the resource if another request has been
   * made and approved. It only invalidates a single approval.
   *
   * Returns FAILED_PRECONDITION if the request exists but is not in an approved
   * state.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Name of the ApprovalRequest to invalidate.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ApprovalRequest]{@link google.cloud.accessapproval.v1.ApprovalRequest}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/access_approval.invalidate_approval_request.js</caption>
   * region_tag:accessapproval_v1_generated_AccessApproval_InvalidateApprovalRequest_async
   */
  invalidateApprovalRequest(
    request?: protos.google.cloud.accessapproval.v1.IInvalidateApprovalRequestMessage,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      (
        | protos.google.cloud.accessapproval.v1.IInvalidateApprovalRequestMessage
        | undefined
      ),
      {} | undefined
    ]
  >;
  invalidateApprovalRequest(
    request: protos.google.cloud.accessapproval.v1.IInvalidateApprovalRequestMessage,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IInvalidateApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  invalidateApprovalRequest(
    request: protos.google.cloud.accessapproval.v1.IInvalidateApprovalRequestMessage,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IInvalidateApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  invalidateApprovalRequest(
    request?: protos.google.cloud.accessapproval.v1.IInvalidateApprovalRequestMessage,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.accessapproval.v1.IApprovalRequest,
          | protos.google.cloud.accessapproval.v1.IInvalidateApprovalRequestMessage
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      | protos.google.cloud.accessapproval.v1.IInvalidateApprovalRequestMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IApprovalRequest,
      (
        | protos.google.cloud.accessapproval.v1.IInvalidateApprovalRequestMessage
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.invalidateApprovalRequest(
      request,
      options,
      callback
    );
  }
  /**
   * Gets the settings associated with a project, folder, or organization.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the AccessApprovalSettings to retrieve.
   *   Format: "{projects|folders|organizations}/{id}/accessApprovalSettings"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AccessApprovalSettings]{@link google.cloud.accessapproval.v1.AccessApprovalSettings}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/access_approval.get_access_approval_settings.js</caption>
   * region_tag:accessapproval_v1_generated_AccessApproval_GetAccessApprovalSettings_async
   */
  getAccessApprovalSettings(
    request?: protos.google.cloud.accessapproval.v1.IGetAccessApprovalSettingsMessage,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
      (
        | protos.google.cloud.accessapproval.v1.IGetAccessApprovalSettingsMessage
        | undefined
      ),
      {} | undefined
    ]
  >;
  getAccessApprovalSettings(
    request: protos.google.cloud.accessapproval.v1.IGetAccessApprovalSettingsMessage,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
      | protos.google.cloud.accessapproval.v1.IGetAccessApprovalSettingsMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAccessApprovalSettings(
    request: protos.google.cloud.accessapproval.v1.IGetAccessApprovalSettingsMessage,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
      | protos.google.cloud.accessapproval.v1.IGetAccessApprovalSettingsMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAccessApprovalSettings(
    request?: protos.google.cloud.accessapproval.v1.IGetAccessApprovalSettingsMessage,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
          | protos.google.cloud.accessapproval.v1.IGetAccessApprovalSettingsMessage
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
      | protos.google.cloud.accessapproval.v1.IGetAccessApprovalSettingsMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
      (
        | protos.google.cloud.accessapproval.v1.IGetAccessApprovalSettingsMessage
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAccessApprovalSettings(
      request,
      options,
      callback
    );
  }
  /**
   * Updates the settings associated with a project, folder, or organization.
   * Settings to update are determined by the value of field_mask.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.accessapproval.v1.AccessApprovalSettings} request.settings
   *   The new AccessApprovalSettings.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The update mask applies to the settings. Only the top level fields of
   *   AccessApprovalSettings (notification_emails & enrolled_services) are
   *   supported. For each field, if it is included, the currently stored value
   *   will be entirely overwritten with the value of the field passed in this
   *   request.
   *
   *   For the `FieldMask` definition, see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   *   If this field is left unset, only the notification_emails field will be
   *   updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AccessApprovalSettings]{@link google.cloud.accessapproval.v1.AccessApprovalSettings}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/access_approval.update_access_approval_settings.js</caption>
   * region_tag:accessapproval_v1_generated_AccessApproval_UpdateAccessApprovalSettings_async
   */
  updateAccessApprovalSettings(
    request?: protos.google.cloud.accessapproval.v1.IUpdateAccessApprovalSettingsMessage,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
      (
        | protos.google.cloud.accessapproval.v1.IUpdateAccessApprovalSettingsMessage
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateAccessApprovalSettings(
    request: protos.google.cloud.accessapproval.v1.IUpdateAccessApprovalSettingsMessage,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
      | protos.google.cloud.accessapproval.v1.IUpdateAccessApprovalSettingsMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateAccessApprovalSettings(
    request: protos.google.cloud.accessapproval.v1.IUpdateAccessApprovalSettingsMessage,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
      | protos.google.cloud.accessapproval.v1.IUpdateAccessApprovalSettingsMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateAccessApprovalSettings(
    request?: protos.google.cloud.accessapproval.v1.IUpdateAccessApprovalSettingsMessage,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
          | protos.google.cloud.accessapproval.v1.IUpdateAccessApprovalSettingsMessage
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
      | protos.google.cloud.accessapproval.v1.IUpdateAccessApprovalSettingsMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IAccessApprovalSettings,
      (
        | protos.google.cloud.accessapproval.v1.IUpdateAccessApprovalSettingsMessage
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'settings.name': request.settings!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateAccessApprovalSettings(
      request,
      options,
      callback
    );
  }
  /**
   * Deletes the settings associated with a project, folder, or organization.
   * This will have the effect of disabling Access Approval for the project,
   * folder, or organization, but only if all ancestors also have Access
   * Approval disabled. If Access Approval is enabled at a higher level of the
   * hierarchy, then Access Approval will still be enabled at this level as
   * the settings are inherited.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Name of the AccessApprovalSettings to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/access_approval.delete_access_approval_settings.js</caption>
   * region_tag:accessapproval_v1_generated_AccessApproval_DeleteAccessApprovalSettings_async
   */
  deleteAccessApprovalSettings(
    request?: protos.google.cloud.accessapproval.v1.IDeleteAccessApprovalSettingsMessage,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.accessapproval.v1.IDeleteAccessApprovalSettingsMessage
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteAccessApprovalSettings(
    request: protos.google.cloud.accessapproval.v1.IDeleteAccessApprovalSettingsMessage,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.accessapproval.v1.IDeleteAccessApprovalSettingsMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAccessApprovalSettings(
    request: protos.google.cloud.accessapproval.v1.IDeleteAccessApprovalSettingsMessage,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.accessapproval.v1.IDeleteAccessApprovalSettingsMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAccessApprovalSettings(
    request?: protos.google.cloud.accessapproval.v1.IDeleteAccessApprovalSettingsMessage,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.accessapproval.v1.IDeleteAccessApprovalSettingsMessage
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.accessapproval.v1.IDeleteAccessApprovalSettingsMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.accessapproval.v1.IDeleteAccessApprovalSettingsMessage
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAccessApprovalSettings(
      request,
      options,
      callback
    );
  }
  /**
   * Retrieves the service account that is used by Access Approval to access KMS
   * keys for signing approved approval requests.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Name of the AccessApprovalServiceAccount to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AccessApprovalServiceAccount]{@link google.cloud.accessapproval.v1.AccessApprovalServiceAccount}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/access_approval.get_access_approval_service_account.js</caption>
   * region_tag:accessapproval_v1_generated_AccessApproval_GetAccessApprovalServiceAccount_async
   */
  getAccessApprovalServiceAccount(
    request?: protos.google.cloud.accessapproval.v1.IGetAccessApprovalServiceAccountMessage,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IAccessApprovalServiceAccount,
      (
        | protos.google.cloud.accessapproval.v1.IGetAccessApprovalServiceAccountMessage
        | undefined
      ),
      {} | undefined
    ]
  >;
  getAccessApprovalServiceAccount(
    request: protos.google.cloud.accessapproval.v1.IGetAccessApprovalServiceAccountMessage,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IAccessApprovalServiceAccount,
      | protos.google.cloud.accessapproval.v1.IGetAccessApprovalServiceAccountMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAccessApprovalServiceAccount(
    request: protos.google.cloud.accessapproval.v1.IGetAccessApprovalServiceAccountMessage,
    callback: Callback<
      protos.google.cloud.accessapproval.v1.IAccessApprovalServiceAccount,
      | protos.google.cloud.accessapproval.v1.IGetAccessApprovalServiceAccountMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAccessApprovalServiceAccount(
    request?: protos.google.cloud.accessapproval.v1.IGetAccessApprovalServiceAccountMessage,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.accessapproval.v1.IAccessApprovalServiceAccount,
          | protos.google.cloud.accessapproval.v1.IGetAccessApprovalServiceAccountMessage
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.accessapproval.v1.IAccessApprovalServiceAccount,
      | protos.google.cloud.accessapproval.v1.IGetAccessApprovalServiceAccountMessage
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IAccessApprovalServiceAccount,
      (
        | protos.google.cloud.accessapproval.v1.IGetAccessApprovalServiceAccountMessage
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAccessApprovalServiceAccount(
      request,
      options,
      callback
    );
  }

  /**
   * Lists approval requests associated with a project, folder, or organization.
   * Approval requests can be filtered by state (pending, active, dismissed).
   * The order is reverse chronological.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The parent resource. This may be "projects/{project}",
   *   "folders/{folder}", or "organizations/{organization}".
   * @param {string} request.filter
   *   A filter on the type of approval requests to retrieve. Must be one of the
   *   following values:
   *
   *     * [not set]: Requests that are pending or have active approvals.
   *     * ALL: All requests.
   *     * PENDING: Only pending requests.
   *     * ACTIVE: Only active (i.e. currently approved) requests.
   *     * DISMISSED: Only requests that have been dismissed, or requests that
   *       are not approved and past expiration.
   *     * EXPIRED: Only requests that have been approved, and the approval has
   *       expired.
   *     * HISTORY: Active, dismissed and expired requests.
   * @param {number} request.pageSize
   *   Requested page size.
   * @param {string} request.pageToken
   *   A token identifying the page of results to return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [ApprovalRequest]{@link google.cloud.accessapproval.v1.ApprovalRequest}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listApprovalRequestsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listApprovalRequests(
    request?: protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IApprovalRequest[],
      protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage | null,
      protos.google.cloud.accessapproval.v1.IListApprovalRequestsResponse
    ]
  >;
  listApprovalRequests(
    request: protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage,
      | protos.google.cloud.accessapproval.v1.IListApprovalRequestsResponse
      | null
      | undefined,
      protos.google.cloud.accessapproval.v1.IApprovalRequest
    >
  ): void;
  listApprovalRequests(
    request: protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage,
    callback: PaginationCallback<
      protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage,
      | protos.google.cloud.accessapproval.v1.IListApprovalRequestsResponse
      | null
      | undefined,
      protos.google.cloud.accessapproval.v1.IApprovalRequest
    >
  ): void;
  listApprovalRequests(
    request?: protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage,
          | protos.google.cloud.accessapproval.v1.IListApprovalRequestsResponse
          | null
          | undefined,
          protos.google.cloud.accessapproval.v1.IApprovalRequest
        >,
    callback?: PaginationCallback<
      protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage,
      | protos.google.cloud.accessapproval.v1.IListApprovalRequestsResponse
      | null
      | undefined,
      protos.google.cloud.accessapproval.v1.IApprovalRequest
    >
  ): Promise<
    [
      protos.google.cloud.accessapproval.v1.IApprovalRequest[],
      protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage | null,
      protos.google.cloud.accessapproval.v1.IListApprovalRequestsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listApprovalRequests(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The parent resource. This may be "projects/{project}",
   *   "folders/{folder}", or "organizations/{organization}".
   * @param {string} request.filter
   *   A filter on the type of approval requests to retrieve. Must be one of the
   *   following values:
   *
   *     * [not set]: Requests that are pending or have active approvals.
   *     * ALL: All requests.
   *     * PENDING: Only pending requests.
   *     * ACTIVE: Only active (i.e. currently approved) requests.
   *     * DISMISSED: Only requests that have been dismissed, or requests that
   *       are not approved and past expiration.
   *     * EXPIRED: Only requests that have been approved, and the approval has
   *       expired.
   *     * HISTORY: Active, dismissed and expired requests.
   * @param {number} request.pageSize
   *   Requested page size.
   * @param {string} request.pageToken
   *   A token identifying the page of results to return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [ApprovalRequest]{@link google.cloud.accessapproval.v1.ApprovalRequest} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listApprovalRequestsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listApprovalRequestsStream(
    request?: protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listApprovalRequests'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listApprovalRequests.createStream(
      this.innerApiCalls.listApprovalRequests as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listApprovalRequests`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The parent resource. This may be "projects/{project}",
   *   "folders/{folder}", or "organizations/{organization}".
   * @param {string} request.filter
   *   A filter on the type of approval requests to retrieve. Must be one of the
   *   following values:
   *
   *     * [not set]: Requests that are pending or have active approvals.
   *     * ALL: All requests.
   *     * PENDING: Only pending requests.
   *     * ACTIVE: Only active (i.e. currently approved) requests.
   *     * DISMISSED: Only requests that have been dismissed, or requests that
   *       are not approved and past expiration.
   *     * EXPIRED: Only requests that have been approved, and the approval has
   *       expired.
   *     * HISTORY: Active, dismissed and expired requests.
   * @param {number} request.pageSize
   *   Requested page size.
   * @param {string} request.pageToken
   *   A token identifying the page of results to return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [ApprovalRequest]{@link google.cloud.accessapproval.v1.ApprovalRequest}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/access_approval.list_approval_requests.js</caption>
   * region_tag:accessapproval_v1_generated_AccessApproval_ListApprovalRequests_async
   */
  listApprovalRequestsAsync(
    request?: protos.google.cloud.accessapproval.v1.IListApprovalRequestsMessage,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.accessapproval.v1.IApprovalRequest> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listApprovalRequests'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listApprovalRequests.asyncIterate(
      this.innerApiCalls['listApprovalRequests'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.accessapproval.v1.IApprovalRequest>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified folderAccessApprovalSettings resource name string.
   *
   * @param {string} folder
   * @returns {string} Resource name string.
   */
  folderAccessApprovalSettingsPath(folder: string) {
    return this.pathTemplates.folderAccessApprovalSettingsPathTemplate.render({
      folder: folder,
    });
  }

  /**
   * Parse the folder from FolderAccessApprovalSettings resource.
   *
   * @param {string} folderAccessApprovalSettingsName
   *   A fully-qualified path representing folder_accessApprovalSettings resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderAccessApprovalSettingsName(
    folderAccessApprovalSettingsName: string
  ) {
    return this.pathTemplates.folderAccessApprovalSettingsPathTemplate.match(
      folderAccessApprovalSettingsName
    ).folder;
  }

  /**
   * Return a fully-qualified folderApprovalRequest resource name string.
   *
   * @param {string} folder
   * @param {string} approval_request
   * @returns {string} Resource name string.
   */
  folderApprovalRequestPath(folder: string, approvalRequest: string) {
    return this.pathTemplates.folderApprovalRequestPathTemplate.render({
      folder: folder,
      approval_request: approvalRequest,
    });
  }

  /**
   * Parse the folder from FolderApprovalRequest resource.
   *
   * @param {string} folderApprovalRequestName
   *   A fully-qualified path representing folder_approval_request resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderApprovalRequestName(folderApprovalRequestName: string) {
    return this.pathTemplates.folderApprovalRequestPathTemplate.match(
      folderApprovalRequestName
    ).folder;
  }

  /**
   * Parse the approval_request from FolderApprovalRequest resource.
   *
   * @param {string} folderApprovalRequestName
   *   A fully-qualified path representing folder_approval_request resource.
   * @returns {string} A string representing the approval_request.
   */
  matchApprovalRequestFromFolderApprovalRequestName(
    folderApprovalRequestName: string
  ) {
    return this.pathTemplates.folderApprovalRequestPathTemplate.match(
      folderApprovalRequestName
    ).approval_request;
  }

  /**
   * Return a fully-qualified folderServiceAccount resource name string.
   *
   * @param {string} folder
   * @returns {string} Resource name string.
   */
  folderServiceAccountPath(folder: string) {
    return this.pathTemplates.folderServiceAccountPathTemplate.render({
      folder: folder,
    });
  }

  /**
   * Parse the folder from FolderServiceAccount resource.
   *
   * @param {string} folderServiceAccountName
   *   A fully-qualified path representing folder_serviceAccount resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderServiceAccountName(folderServiceAccountName: string) {
    return this.pathTemplates.folderServiceAccountPathTemplate.match(
      folderServiceAccountName
    ).folder;
  }

  /**
   * Return a fully-qualified organizationAccessApprovalSettings resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationAccessApprovalSettingsPath(organization: string) {
    return this.pathTemplates.organizationAccessApprovalSettingsPathTemplate.render(
      {
        organization: organization,
      }
    );
  }

  /**
   * Parse the organization from OrganizationAccessApprovalSettings resource.
   *
   * @param {string} organizationAccessApprovalSettingsName
   *   A fully-qualified path representing organization_accessApprovalSettings resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationAccessApprovalSettingsName(
    organizationAccessApprovalSettingsName: string
  ) {
    return this.pathTemplates.organizationAccessApprovalSettingsPathTemplate.match(
      organizationAccessApprovalSettingsName
    ).organization;
  }

  /**
   * Return a fully-qualified organizationApprovalRequest resource name string.
   *
   * @param {string} organization
   * @param {string} approval_request
   * @returns {string} Resource name string.
   */
  organizationApprovalRequestPath(
    organization: string,
    approvalRequest: string
  ) {
    return this.pathTemplates.organizationApprovalRequestPathTemplate.render({
      organization: organization,
      approval_request: approvalRequest,
    });
  }

  /**
   * Parse the organization from OrganizationApprovalRequest resource.
   *
   * @param {string} organizationApprovalRequestName
   *   A fully-qualified path representing organization_approval_request resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationApprovalRequestName(
    organizationApprovalRequestName: string
  ) {
    return this.pathTemplates.organizationApprovalRequestPathTemplate.match(
      organizationApprovalRequestName
    ).organization;
  }

  /**
   * Parse the approval_request from OrganizationApprovalRequest resource.
   *
   * @param {string} organizationApprovalRequestName
   *   A fully-qualified path representing organization_approval_request resource.
   * @returns {string} A string representing the approval_request.
   */
  matchApprovalRequestFromOrganizationApprovalRequestName(
    organizationApprovalRequestName: string
  ) {
    return this.pathTemplates.organizationApprovalRequestPathTemplate.match(
      organizationApprovalRequestName
    ).approval_request;
  }

  /**
   * Return a fully-qualified organizationServiceAccount resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationServiceAccountPath(organization: string) {
    return this.pathTemplates.organizationServiceAccountPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from OrganizationServiceAccount resource.
   *
   * @param {string} organizationServiceAccountName
   *   A fully-qualified path representing organization_serviceAccount resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationServiceAccountName(
    organizationServiceAccountName: string
  ) {
    return this.pathTemplates.organizationServiceAccountPathTemplate.match(
      organizationServiceAccountName
    ).organization;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectAccessApprovalSettings resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectAccessApprovalSettingsPath(project: string) {
    return this.pathTemplates.projectAccessApprovalSettingsPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from ProjectAccessApprovalSettings resource.
   *
   * @param {string} projectAccessApprovalSettingsName
   *   A fully-qualified path representing project_accessApprovalSettings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectAccessApprovalSettingsName(
    projectAccessApprovalSettingsName: string
  ) {
    return this.pathTemplates.projectAccessApprovalSettingsPathTemplate.match(
      projectAccessApprovalSettingsName
    ).project;
  }

  /**
   * Return a fully-qualified projectApprovalRequest resource name string.
   *
   * @param {string} project
   * @param {string} approval_request
   * @returns {string} Resource name string.
   */
  projectApprovalRequestPath(project: string, approvalRequest: string) {
    return this.pathTemplates.projectApprovalRequestPathTemplate.render({
      project: project,
      approval_request: approvalRequest,
    });
  }

  /**
   * Parse the project from ProjectApprovalRequest resource.
   *
   * @param {string} projectApprovalRequestName
   *   A fully-qualified path representing project_approval_request resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectApprovalRequestName(
    projectApprovalRequestName: string
  ) {
    return this.pathTemplates.projectApprovalRequestPathTemplate.match(
      projectApprovalRequestName
    ).project;
  }

  /**
   * Parse the approval_request from ProjectApprovalRequest resource.
   *
   * @param {string} projectApprovalRequestName
   *   A fully-qualified path representing project_approval_request resource.
   * @returns {string} A string representing the approval_request.
   */
  matchApprovalRequestFromProjectApprovalRequestName(
    projectApprovalRequestName: string
  ) {
    return this.pathTemplates.projectApprovalRequestPathTemplate.match(
      projectApprovalRequestName
    ).approval_request;
  }

  /**
   * Return a fully-qualified projectServiceAccount resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectServiceAccountPath(project: string) {
    return this.pathTemplates.projectServiceAccountPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from ProjectServiceAccount resource.
   *
   * @param {string} projectServiceAccountName
   *   A fully-qualified path representing project_serviceAccount resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectServiceAccountName(projectServiceAccountName: string) {
    return this.pathTemplates.projectServiceAccountPathTemplate.match(
      projectServiceAccountName
    ).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.accessApprovalStub && !this._terminated) {
      return this.accessApprovalStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
