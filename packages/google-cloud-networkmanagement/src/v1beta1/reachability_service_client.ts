// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/reachability_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './reachability_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The Reachability service in the Google Cloud Network Management API provides
 *  services that analyze the reachability within a single Google Virtual Private
 *  Cloud (VPC) network, between peered VPC networks, between VPC and on-premises
 *  networks, or between VPC networks and internet hosts. A reachability analysis
 *  is based on Google Cloud network configurations.
 *
 *  You can use the analysis results to verify these configurations and
 *  to troubleshoot connectivity issues.
 * @class
 * @memberof v1beta1
 */
export class ReachabilityServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  reachabilityServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ReachabilityServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ReachabilityServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ReachabilityServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      connectivityTestPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/global/connectivityTests/{test}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listConnectivityTests: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'resources'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1beta1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1beta1/{name=projects/*}/locations',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1beta1/{resource=projects/*/locations/global/connectivityTests/*}:getIamPolicy',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1beta1/{resource=projects/*/locations/global/connectivityTests/*}:setIamPolicy',
          body: '*',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1beta1/{resource=projects/*/locations/global/connectivityTests/*}:testIamPermissions',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1beta1/{name=projects/*/locations/global/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1beta1/{name=projects/*/locations/global/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1beta1/{name=projects/*/locations/global/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1beta1/{name=projects/*/locations/global}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createConnectivityTestResponse = protoFilesRoot.lookup(
      '.google.cloud.networkmanagement.v1beta1.ConnectivityTest'
    ) as gax.protobuf.Type;
    const createConnectivityTestMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkmanagement.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateConnectivityTestResponse = protoFilesRoot.lookup(
      '.google.cloud.networkmanagement.v1beta1.ConnectivityTest'
    ) as gax.protobuf.Type;
    const updateConnectivityTestMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkmanagement.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const rerunConnectivityTestResponse = protoFilesRoot.lookup(
      '.google.cloud.networkmanagement.v1beta1.ConnectivityTest'
    ) as gax.protobuf.Type;
    const rerunConnectivityTestMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkmanagement.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteConnectivityTestResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteConnectivityTestMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkmanagement.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createConnectivityTest: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createConnectivityTestResponse.decode.bind(
          createConnectivityTestResponse
        ),
        createConnectivityTestMetadata.decode.bind(
          createConnectivityTestMetadata
        )
      ),
      updateConnectivityTest: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateConnectivityTestResponse.decode.bind(
          updateConnectivityTestResponse
        ),
        updateConnectivityTestMetadata.decode.bind(
          updateConnectivityTestMetadata
        )
      ),
      rerunConnectivityTest: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        rerunConnectivityTestResponse.decode.bind(
          rerunConnectivityTestResponse
        ),
        rerunConnectivityTestMetadata.decode.bind(rerunConnectivityTestMetadata)
      ),
      deleteConnectivityTest: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteConnectivityTestResponse.decode.bind(
          deleteConnectivityTestResponse
        ),
        deleteConnectivityTestMetadata.decode.bind(
          deleteConnectivityTestMetadata
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.networkmanagement.v1beta1.ReachabilityService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.reachabilityServiceStub) {
      return this.reachabilityServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.networkmanagement.v1beta1.ReachabilityService.
    this.reachabilityServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.networkmanagement.v1beta1.ReachabilityService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.networkmanagement.v1beta1
            .ReachabilityService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const reachabilityServiceStubMethods = [
      'listConnectivityTests',
      'getConnectivityTest',
      'createConnectivityTest',
      'updateConnectivityTest',
      'rerunConnectivityTest',
      'deleteConnectivityTest',
    ];
    for (const methodName of reachabilityServiceStubMethods) {
      const callPromise = this.reachabilityServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.reachabilityServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'networkmanagement.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'networkmanagement.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the details of a specific Connectivity Test.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. `ConnectivityTest` resource name using the form:
   *       `projects/{project_id}/locations/global/connectivityTests/{test_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ConnectivityTest]{@link google.cloud.networkmanagement.v1beta1.ConnectivityTest}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/reachability_service.get_connectivity_test.js</caption>
   * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_GetConnectivityTest_async
   */
  getConnectivityTest(
    request?: protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
      (
        | protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getConnectivityTest(
    request: protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
      | protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnectivityTest(
    request: protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest,
    callback: Callback<
      protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
      | protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnectivityTest(
    request?: protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
          | protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
      | protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
      (
        | protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getConnectivityTest(request, options, callback);
  }

  /**
   * Creates a new Connectivity Test.
   * After you create a test, the reachability analysis is performed as part
   * of the long running operation, which completes when the analysis completes.
   *
   * If the endpoint specifications in `ConnectivityTest` are invalid
   * (for example, containing non-existent resources in the network, or you
   * don't have read permissions to the network configurations of listed
   * projects), then the reachability result returns a value of `UNKNOWN`.
   *
   * If the endpoint specifications in `ConnectivityTest` are
   * incomplete, the reachability result returns a value of
   * <code>AMBIGUOUS</code>. For more information,
   * see the Connectivity Test documentation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the Connectivity Test to create:
   *       `projects/{project_id}/locations/global`
   * @param {string} request.testId
   *   Required. The logical name of the Connectivity Test in your project
   *   with the following restrictions:
   *
   *   * Must contain only lowercase letters, numbers, and hyphens.
   *   * Must start with a letter.
   *   * Must be between 1-40 characters.
   *   * Must end with a number or a letter.
   *   * Must be unique within the customer project
   * @param {google.cloud.networkmanagement.v1beta1.ConnectivityTest} request.resource
   *   Required. A `ConnectivityTest` resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/reachability_service.create_connectivity_test.js</caption>
   * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_CreateConnectivityTest_async
   */
  createConnectivityTest(
    request?: protos.google.cloud.networkmanagement.v1beta1.ICreateConnectivityTestRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createConnectivityTest(
    request: protos.google.cloud.networkmanagement.v1beta1.ICreateConnectivityTestRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createConnectivityTest(
    request: protos.google.cloud.networkmanagement.v1beta1.ICreateConnectivityTestRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createConnectivityTest(
    request?: protos.google.cloud.networkmanagement.v1beta1.ICreateConnectivityTestRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
            protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createConnectivityTest(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createConnectivityTest()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/reachability_service.create_connectivity_test.js</caption>
   * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_CreateConnectivityTest_async
   */
  async checkCreateConnectivityTestProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest,
      protos.google.cloud.networkmanagement.v1beta1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createConnectivityTest,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest,
      protos.google.cloud.networkmanagement.v1beta1.OperationMetadata
    >;
  }
  /**
   * Updates the configuration of an existing `ConnectivityTest`.
   * After you update a test, the reachability analysis is performed as part
   * of the long running operation, which completes when the analysis completes.
   * The Reachability state in the test resource is updated with the new result.
   *
   * If the endpoint specifications in `ConnectivityTest` are invalid
   * (for example, they contain non-existent resources in the network, or the
   * user does not have read permissions to the network configurations of
   * listed projects), then the reachability result returns a value of
   * <code>UNKNOWN</code>.
   *
   * If the endpoint specifications in `ConnectivityTest` are incomplete, the
   * reachability result returns a value of `AMBIGUOUS`. See the documentation
   * in `ConnectivityTest` for for more details.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update. At least one path must be supplied in
   *   this field.
   * @param {google.cloud.networkmanagement.v1beta1.ConnectivityTest} request.resource
   *   Required. Only fields specified in update_mask are updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/reachability_service.update_connectivity_test.js</caption>
   * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_UpdateConnectivityTest_async
   */
  updateConnectivityTest(
    request?: protos.google.cloud.networkmanagement.v1beta1.IUpdateConnectivityTestRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateConnectivityTest(
    request: protos.google.cloud.networkmanagement.v1beta1.IUpdateConnectivityTestRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateConnectivityTest(
    request: protos.google.cloud.networkmanagement.v1beta1.IUpdateConnectivityTestRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateConnectivityTest(
    request?: protos.google.cloud.networkmanagement.v1beta1.IUpdateConnectivityTestRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
            protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'resource.name': request.resource!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateConnectivityTest(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateConnectivityTest()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/reachability_service.update_connectivity_test.js</caption>
   * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_UpdateConnectivityTest_async
   */
  async checkUpdateConnectivityTestProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest,
      protos.google.cloud.networkmanagement.v1beta1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateConnectivityTest,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest,
      protos.google.cloud.networkmanagement.v1beta1.OperationMetadata
    >;
  }
  /**
   * Rerun an existing `ConnectivityTest`.
   * After the user triggers the rerun, the reachability analysis is performed
   * as part of the long running operation, which completes when the analysis
   * completes.
   *
   * Even though the test configuration remains the same, the reachability
   * result may change due to underlying network configuration changes.
   *
   * If the endpoint specifications in `ConnectivityTest` become invalid (for
   * example, specified resources are deleted in the network, or you lost
   * read permissions to the network configurations of listed projects), then
   * the reachability result returns a value of `UNKNOWN`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Connectivity Test resource name using the form:
   *       `projects/{project_id}/locations/global/connectivityTests/{test_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/reachability_service.rerun_connectivity_test.js</caption>
   * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_RerunConnectivityTest_async
   */
  rerunConnectivityTest(
    request?: protos.google.cloud.networkmanagement.v1beta1.IRerunConnectivityTestRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  rerunConnectivityTest(
    request: protos.google.cloud.networkmanagement.v1beta1.IRerunConnectivityTestRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  rerunConnectivityTest(
    request: protos.google.cloud.networkmanagement.v1beta1.IRerunConnectivityTestRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  rerunConnectivityTest(
    request?: protos.google.cloud.networkmanagement.v1beta1.IRerunConnectivityTestRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
            protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.rerunConnectivityTest(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `rerunConnectivityTest()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/reachability_service.rerun_connectivity_test.js</caption>
   * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_RerunConnectivityTest_async
   */
  async checkRerunConnectivityTestProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest,
      protos.google.cloud.networkmanagement.v1beta1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.rerunConnectivityTest,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest,
      protos.google.cloud.networkmanagement.v1beta1.OperationMetadata
    >;
  }
  /**
   * Deletes a specific `ConnectivityTest`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Connectivity Test resource name using the form:
   *       `projects/{project_id}/locations/global/connectivityTests/{test_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/reachability_service.delete_connectivity_test.js</caption>
   * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_DeleteConnectivityTest_async
   */
  deleteConnectivityTest(
    request?: protos.google.cloud.networkmanagement.v1beta1.IDeleteConnectivityTestRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteConnectivityTest(
    request: protos.google.cloud.networkmanagement.v1beta1.IDeleteConnectivityTestRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConnectivityTest(
    request: protos.google.cloud.networkmanagement.v1beta1.IDeleteConnectivityTestRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConnectivityTest(
    request?: protos.google.cloud.networkmanagement.v1beta1.IDeleteConnectivityTestRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteConnectivityTest(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteConnectivityTest()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/reachability_service.delete_connectivity_test.js</caption>
   * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_DeleteConnectivityTest_async
   */
  async checkDeleteConnectivityTestProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkmanagement.v1beta1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteConnectivityTest,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkmanagement.v1beta1.OperationMetadata
    >;
  }
  /**
   * Lists all Connectivity Tests owned by a project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the Connectivity Tests:
   *       `projects/{project_id}/locations/global`
   * @param {number} request.pageSize
   *   Number of `ConnectivityTests` to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {string} request.filter
   *   Lists the `ConnectivityTests` that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form `<field> <operator> <value>` where operators: `<`, `>`,
   *   `<=`,
   *   `>=`,
   *   `!=`, `=`, `:` are supported (colon `:` represents a HAS operator which is
   *   roughly synonymous with equality). <field> can refer to a proto or JSON
   *   field, or a synthetic field. Field names can be camelCase or snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/proj-1/locations/global/connectivityTests/test-1
   *
   *   - Filter by labels:
   *     - Resources that have a key called `foo`
   *       labels.foo:*
   *     - Resources that have a key called `foo` whose value is `bar`
   *       labels.foo = bar
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [ConnectivityTest]{@link google.cloud.networkmanagement.v1beta1.ConnectivityTest}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listConnectivityTestsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listConnectivityTests(
    request?: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest[],
      protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest | null,
      protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsResponse
    ]
  >;
  listConnectivityTests(
    request: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest,
      | protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsResponse
      | null
      | undefined,
      protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest
    >
  ): void;
  listConnectivityTests(
    request: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest,
      | protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsResponse
      | null
      | undefined,
      protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest
    >
  ): void;
  listConnectivityTests(
    request?: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest,
          | protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsResponse
          | null
          | undefined,
          protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest,
      | protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsResponse
      | null
      | undefined,
      protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest
    >
  ): Promise<
    [
      protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest[],
      protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest | null,
      protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listConnectivityTests(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the Connectivity Tests:
   *       `projects/{project_id}/locations/global`
   * @param {number} request.pageSize
   *   Number of `ConnectivityTests` to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {string} request.filter
   *   Lists the `ConnectivityTests` that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form `<field> <operator> <value>` where operators: `<`, `>`,
   *   `<=`,
   *   `>=`,
   *   `!=`, `=`, `:` are supported (colon `:` represents a HAS operator which is
   *   roughly synonymous with equality). <field> can refer to a proto or JSON
   *   field, or a synthetic field. Field names can be camelCase or snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/proj-1/locations/global/connectivityTests/test-1
   *
   *   - Filter by labels:
   *     - Resources that have a key called `foo`
   *       labels.foo:*
   *     - Resources that have a key called `foo` whose value is `bar`
   *       labels.foo = bar
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [ConnectivityTest]{@link google.cloud.networkmanagement.v1beta1.ConnectivityTest} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listConnectivityTestsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listConnectivityTestsStream(
    request?: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConnectivityTests'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConnectivityTests.createStream(
      this.innerApiCalls.listConnectivityTests as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listConnectivityTests`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the Connectivity Tests:
   *       `projects/{project_id}/locations/global`
   * @param {number} request.pageSize
   *   Number of `ConnectivityTests` to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {string} request.filter
   *   Lists the `ConnectivityTests` that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form `<field> <operator> <value>` where operators: `<`, `>`,
   *   `<=`,
   *   `>=`,
   *   `!=`, `=`, `:` are supported (colon `:` represents a HAS operator which is
   *   roughly synonymous with equality). <field> can refer to a proto or JSON
   *   field, or a synthetic field. Field names can be camelCase or snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/proj-1/locations/global/connectivityTests/test-1
   *
   *   - Filter by labels:
   *     - Resources that have a key called `foo`
   *       labels.foo:*
   *     - Resources that have a key called `foo` whose value is `bar`
   *       labels.foo = bar
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [ConnectivityTest]{@link google.cloud.networkmanagement.v1beta1.ConnectivityTest}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/reachability_service.list_connectivity_tests.js</caption>
   * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_ListConnectivityTests_async
   */
  listConnectivityTestsAsync(
    request?: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConnectivityTests'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConnectivityTests.asyncIterate(
      this.innerApiCalls['listConnectivityTests'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified connectivityTest resource name string.
   *
   * @param {string} project
   * @param {string} test
   * @returns {string} Resource name string.
   */
  connectivityTestPath(project: string, test: string) {
    return this.pathTemplates.connectivityTestPathTemplate.render({
      project: project,
      test: test,
    });
  }

  /**
   * Parse the project from ConnectivityTest resource.
   *
   * @param {string} connectivityTestName
   *   A fully-qualified path representing ConnectivityTest resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromConnectivityTestName(connectivityTestName: string) {
    return this.pathTemplates.connectivityTestPathTemplate.match(
      connectivityTestName
    ).project;
  }

  /**
   * Parse the test from ConnectivityTest resource.
   *
   * @param {string} connectivityTestName
   *   A fully-qualified path representing ConnectivityTest resource.
   * @returns {string} A string representing the test.
   */
  matchTestFromConnectivityTestName(connectivityTestName: string) {
    return this.pathTemplates.connectivityTestPathTemplate.match(
      connectivityTestName
    ).test;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.reachabilityServiceStub && !this._terminated) {
      return this.reachabilityServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
