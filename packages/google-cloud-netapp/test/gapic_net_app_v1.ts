// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as netappModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.NetAppClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath = netappModule.v1.NetAppClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint = netappModule.v1.NetAppClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = netappModule.v1.NetAppClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new netappModule.v1.NetAppClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new netappModule.v1.NetAppClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.netAppStub, undefined);
      await client.initialize();
      assert(client.netAppStub);
    });

    it('has close method for the initialized client', done => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.netAppStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.netAppStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getStoragePool', () => {
    it('invokes getStoragePool without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetStoragePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.StoragePool()
      );
      client.innerApiCalls.getStoragePool = stubSimpleCall(expectedResponse);
      const [response] = await client.getStoragePool(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getStoragePool without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetStoragePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.StoragePool()
      );
      client.innerApiCalls.getStoragePool =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getStoragePool(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IStoragePool | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getStoragePool with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetStoragePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getStoragePool = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getStoragePool(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getStoragePool with closed client', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetStoragePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getStoragePool(request), expectedError);
    });
  });

  describe('getVolume', () => {
    it('invokes getVolume without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.Volume()
      );
      client.innerApiCalls.getVolume = stubSimpleCall(expectedResponse);
      const [response] = await client.getVolume(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolume without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.Volume()
      );
      client.innerApiCalls.getVolume =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getVolume(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IVolume | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolume with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getVolume = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getVolume(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getVolume with closed client', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getVolume(request), expectedError);
    });
  });

  describe('getSnapshot', () => {
    it('invokes getSnapshot without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.Snapshot()
      );
      client.innerApiCalls.getSnapshot = stubSimpleCall(expectedResponse);
      const [response] = await client.getSnapshot(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSnapshot without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.Snapshot()
      );
      client.innerApiCalls.getSnapshot =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getSnapshot(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.ISnapshot | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSnapshot with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getSnapshot = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getSnapshot(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSnapshot with closed client', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getSnapshot(request), expectedError);
    });
  });

  describe('getActiveDirectory', () => {
    it('invokes getActiveDirectory without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetActiveDirectoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ActiveDirectory()
      );
      client.innerApiCalls.getActiveDirectory =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getActiveDirectory(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getActiveDirectory without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetActiveDirectoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ActiveDirectory()
      );
      client.innerApiCalls.getActiveDirectory =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getActiveDirectory(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IActiveDirectory | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getActiveDirectory with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetActiveDirectoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getActiveDirectory = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getActiveDirectory(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getActiveDirectory with closed client', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetActiveDirectoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getActiveDirectory(request), expectedError);
    });
  });

  describe('getKmsConfig', () => {
    it('invokes getKmsConfig without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.KmsConfig()
      );
      client.innerApiCalls.getKmsConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.getKmsConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getKmsConfig without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.KmsConfig()
      );
      client.innerApiCalls.getKmsConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getKmsConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IKmsConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getKmsConfig with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getKmsConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getKmsConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getKmsConfig with closed client', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getKmsConfig(request), expectedError);
    });
  });

  describe('verifyKmsConfig', () => {
    it('invokes verifyKmsConfig without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.VerifyKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.VerifyKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.VerifyKmsConfigResponse()
      );
      client.innerApiCalls.verifyKmsConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.verifyKmsConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.verifyKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.verifyKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes verifyKmsConfig without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.VerifyKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.VerifyKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.VerifyKmsConfigResponse()
      );
      client.innerApiCalls.verifyKmsConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.verifyKmsConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IVerifyKmsConfigResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.verifyKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.verifyKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes verifyKmsConfig with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.VerifyKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.VerifyKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.verifyKmsConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.verifyKmsConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.verifyKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.verifyKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes verifyKmsConfig with closed client', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.VerifyKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.VerifyKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.verifyKmsConfig(request), expectedError);
    });
  });

  describe('getReplication', () => {
    it('invokes getReplication without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.Replication()
      );
      client.innerApiCalls.getReplication = stubSimpleCall(expectedResponse);
      const [response] = await client.getReplication(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReplication without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.Replication()
      );
      client.innerApiCalls.getReplication =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getReplication(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IReplication | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReplication with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getReplication = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getReplication(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReplication with closed client', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getReplication(request), expectedError);
    });
  });

  describe('getBackupVault', () => {
    it('invokes getBackupVault without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupVaultRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.BackupVault()
      );
      client.innerApiCalls.getBackupVault = stubSimpleCall(expectedResponse);
      const [response] = await client.getBackupVault(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackupVault without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupVaultRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.BackupVault()
      );
      client.innerApiCalls.getBackupVault =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getBackupVault(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IBackupVault | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackupVault with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupVaultRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getBackupVault = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getBackupVault(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackupVault with closed client', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupVaultRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getBackupVault(request), expectedError);
    });
  });

  describe('getBackup', () => {
    it('invokes getBackup without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.Backup()
      );
      client.innerApiCalls.getBackup = stubSimpleCall(expectedResponse);
      const [response] = await client.getBackup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.Backup()
      );
      client.innerApiCalls.getBackup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getBackup(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IBackup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getBackup = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup with closed client', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getBackup(request), expectedError);
    });
  });

  describe('getBackupPolicy', () => {
    it('invokes getBackupPolicy without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.BackupPolicy()
      );
      client.innerApiCalls.getBackupPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.getBackupPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackupPolicy without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.netapp.v1.BackupPolicy()
      );
      client.innerApiCalls.getBackupPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getBackupPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IBackupPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackupPolicy with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getBackupPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getBackupPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackupPolicy with closed client', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.GetBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.GetBackupPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getBackupPolicy(request), expectedError);
    });
  });

  describe('createStoragePool', () => {
    it('invokes createStoragePool without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateStoragePoolRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createStoragePool =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createStoragePool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createStoragePool without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateStoragePoolRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createStoragePool =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createStoragePool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IStoragePool,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createStoragePool with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateStoragePoolRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createStoragePool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createStoragePool(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createStoragePool with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateStoragePoolRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createStoragePool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createStoragePool(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateStoragePoolProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateStoragePoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateStoragePoolProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateStoragePoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateStoragePool', () => {
    it('invokes updateStoragePool without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateStoragePoolRequest()
      );
      request.storagePool ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateStoragePoolRequest',
        ['storagePool', 'name']
      );
      request.storagePool.name = defaultValue1;
      const expectedHeaderRequestParams = `storage_pool.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateStoragePool =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateStoragePool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateStoragePool without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateStoragePoolRequest()
      );
      request.storagePool ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateStoragePoolRequest',
        ['storagePool', 'name']
      );
      request.storagePool.name = defaultValue1;
      const expectedHeaderRequestParams = `storage_pool.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateStoragePool =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateStoragePool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IStoragePool,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateStoragePool with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateStoragePoolRequest()
      );
      request.storagePool ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateStoragePoolRequest',
        ['storagePool', 'name']
      );
      request.storagePool.name = defaultValue1;
      const expectedHeaderRequestParams = `storage_pool.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateStoragePool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateStoragePool(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateStoragePool with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateStoragePoolRequest()
      );
      request.storagePool ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateStoragePoolRequest',
        ['storagePool', 'name']
      );
      request.storagePool.name = defaultValue1;
      const expectedHeaderRequestParams = `storage_pool.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateStoragePool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateStoragePool(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateStoragePoolProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateStoragePoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateStoragePoolProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateStoragePoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteStoragePool', () => {
    it('invokes deleteStoragePool without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteStoragePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteStoragePool =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteStoragePool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteStoragePool without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteStoragePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteStoragePool =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteStoragePool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteStoragePool with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteStoragePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteStoragePool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteStoragePool(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteStoragePool with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteStoragePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteStoragePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteStoragePool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteStoragePool(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteStoragePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteStoragePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteStoragePoolProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteStoragePoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteStoragePoolProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteStoragePoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createVolume', () => {
    it('invokes createVolume without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateVolumeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createVolume = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createVolume(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createVolume without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateVolumeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createVolume =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createVolume(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IVolume,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createVolume with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateVolumeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createVolume = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createVolume(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createVolume with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateVolumeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createVolume = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createVolume(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateVolumeProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateVolumeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateVolumeProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateVolumeProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateVolume', () => {
    it('invokes updateVolume without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateVolumeRequest()
      );
      request.volume ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateVolumeRequest',
        ['volume', 'name']
      );
      request.volume.name = defaultValue1;
      const expectedHeaderRequestParams = `volume.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateVolume = stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateVolume(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateVolume without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateVolumeRequest()
      );
      request.volume ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateVolumeRequest',
        ['volume', 'name']
      );
      request.volume.name = defaultValue1;
      const expectedHeaderRequestParams = `volume.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateVolume =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateVolume(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IVolume,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateVolume with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateVolumeRequest()
      );
      request.volume ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateVolumeRequest',
        ['volume', 'name']
      );
      request.volume.name = defaultValue1;
      const expectedHeaderRequestParams = `volume.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateVolume = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateVolume(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateVolume with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateVolumeRequest()
      );
      request.volume ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateVolumeRequest',
        ['volume', 'name']
      );
      request.volume.name = defaultValue1;
      const expectedHeaderRequestParams = `volume.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateVolume = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateVolume(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateVolumeProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateVolumeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateVolumeProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkUpdateVolumeProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteVolume', () => {
    it('invokes deleteVolume without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteVolume = stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteVolume(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteVolume without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteVolume =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteVolume(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteVolume with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteVolume = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteVolume(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteVolume with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteVolume = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteVolume(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteVolumeProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteVolumeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteVolumeProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDeleteVolumeProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('revertVolume', () => {
    it('invokes revertVolume without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.RevertVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.RevertVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.revertVolume = stubLongRunningCall(expectedResponse);
      const [operation] = await client.revertVolume(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.revertVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.revertVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes revertVolume without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.RevertVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.RevertVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.revertVolume =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.revertVolume(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IVolume,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.revertVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.revertVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes revertVolume with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.RevertVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.RevertVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.revertVolume = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.revertVolume(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.revertVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.revertVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes revertVolume with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.RevertVolumeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.RevertVolumeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.revertVolume = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.revertVolume(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.revertVolume as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.revertVolume as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRevertVolumeProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkRevertVolumeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRevertVolumeProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkRevertVolumeProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createSnapshot', () => {
    it('invokes createSnapshot without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateSnapshotRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createSnapshot =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createSnapshot(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSnapshot without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateSnapshotRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createSnapshot =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createSnapshot(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.ISnapshot,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSnapshot with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateSnapshotRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createSnapshot = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createSnapshot(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSnapshot with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateSnapshotRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createSnapshot = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createSnapshot(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateSnapshotProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateSnapshotProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateSnapshotProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateSnapshotProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteSnapshot', () => {
    it('invokes deleteSnapshot without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteSnapshot =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteSnapshot(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSnapshot without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteSnapshot =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteSnapshot(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSnapshot with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSnapshot = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteSnapshot(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSnapshot with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteSnapshotRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteSnapshotRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSnapshot = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteSnapshot(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteSnapshotProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteSnapshotProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteSnapshotProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteSnapshotProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateSnapshot', () => {
    it('invokes updateSnapshot without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateSnapshotRequest()
      );
      request.snapshot ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateSnapshotRequest',
        ['snapshot', 'name']
      );
      request.snapshot.name = defaultValue1;
      const expectedHeaderRequestParams = `snapshot.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateSnapshot =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateSnapshot(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSnapshot without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateSnapshotRequest()
      );
      request.snapshot ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateSnapshotRequest',
        ['snapshot', 'name']
      );
      request.snapshot.name = defaultValue1;
      const expectedHeaderRequestParams = `snapshot.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateSnapshot =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateSnapshot(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.ISnapshot,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSnapshot with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateSnapshotRequest()
      );
      request.snapshot ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateSnapshotRequest',
        ['snapshot', 'name']
      );
      request.snapshot.name = defaultValue1;
      const expectedHeaderRequestParams = `snapshot.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSnapshot = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateSnapshot(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSnapshot with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateSnapshotRequest()
      );
      request.snapshot ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateSnapshotRequest',
        ['snapshot', 'name']
      );
      request.snapshot.name = defaultValue1;
      const expectedHeaderRequestParams = `snapshot.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSnapshot = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateSnapshot(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateSnapshot as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSnapshot as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateSnapshotProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateSnapshotProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateSnapshotProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateSnapshotProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createActiveDirectory', () => {
    it('invokes createActiveDirectory without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateActiveDirectoryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createActiveDirectory =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createActiveDirectory(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createActiveDirectory without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateActiveDirectoryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createActiveDirectory =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createActiveDirectory(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IActiveDirectory,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createActiveDirectory with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateActiveDirectoryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createActiveDirectory = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createActiveDirectory(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createActiveDirectory with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateActiveDirectoryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createActiveDirectory = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createActiveDirectory(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateActiveDirectoryProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateActiveDirectoryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateActiveDirectoryProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateActiveDirectoryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateActiveDirectory', () => {
    it('invokes updateActiveDirectory without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateActiveDirectoryRequest()
      );
      request.activeDirectory ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateActiveDirectoryRequest',
        ['activeDirectory', 'name']
      );
      request.activeDirectory.name = defaultValue1;
      const expectedHeaderRequestParams = `active_directory.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateActiveDirectory =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateActiveDirectory(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateActiveDirectory without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateActiveDirectoryRequest()
      );
      request.activeDirectory ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateActiveDirectoryRequest',
        ['activeDirectory', 'name']
      );
      request.activeDirectory.name = defaultValue1;
      const expectedHeaderRequestParams = `active_directory.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateActiveDirectory =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateActiveDirectory(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IActiveDirectory,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateActiveDirectory with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateActiveDirectoryRequest()
      );
      request.activeDirectory ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateActiveDirectoryRequest',
        ['activeDirectory', 'name']
      );
      request.activeDirectory.name = defaultValue1;
      const expectedHeaderRequestParams = `active_directory.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateActiveDirectory = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateActiveDirectory(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateActiveDirectory with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateActiveDirectoryRequest()
      );
      request.activeDirectory ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateActiveDirectoryRequest',
        ['activeDirectory', 'name']
      );
      request.activeDirectory.name = defaultValue1;
      const expectedHeaderRequestParams = `active_directory.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateActiveDirectory = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateActiveDirectory(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateActiveDirectoryProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateActiveDirectoryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateActiveDirectoryProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateActiveDirectoryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteActiveDirectory', () => {
    it('invokes deleteActiveDirectory without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteActiveDirectoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteActiveDirectory =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteActiveDirectory(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteActiveDirectory without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteActiveDirectoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteActiveDirectory =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteActiveDirectory(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteActiveDirectory with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteActiveDirectoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteActiveDirectory = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteActiveDirectory(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteActiveDirectory with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteActiveDirectoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteActiveDirectoryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteActiveDirectory = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteActiveDirectory(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteActiveDirectory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteActiveDirectory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteActiveDirectoryProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteActiveDirectoryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteActiveDirectoryProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteActiveDirectoryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createKmsConfig', () => {
    it('invokes createKmsConfig without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateKmsConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createKmsConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createKmsConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createKmsConfig without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateKmsConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createKmsConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createKmsConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IKmsConfig,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createKmsConfig with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateKmsConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createKmsConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createKmsConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createKmsConfig with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateKmsConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createKmsConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createKmsConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateKmsConfigProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateKmsConfigProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateKmsConfigProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateKmsConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateKmsConfig', () => {
    it('invokes updateKmsConfig without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateKmsConfigRequest()
      );
      request.kmsConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateKmsConfigRequest',
        ['kmsConfig', 'name']
      );
      request.kmsConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `kms_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateKmsConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateKmsConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateKmsConfig without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateKmsConfigRequest()
      );
      request.kmsConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateKmsConfigRequest',
        ['kmsConfig', 'name']
      );
      request.kmsConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `kms_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateKmsConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateKmsConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IKmsConfig,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateKmsConfig with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateKmsConfigRequest()
      );
      request.kmsConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateKmsConfigRequest',
        ['kmsConfig', 'name']
      );
      request.kmsConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `kms_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateKmsConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateKmsConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateKmsConfig with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateKmsConfigRequest()
      );
      request.kmsConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateKmsConfigRequest',
        ['kmsConfig', 'name']
      );
      request.kmsConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `kms_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateKmsConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateKmsConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateKmsConfigProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateKmsConfigProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateKmsConfigProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateKmsConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('encryptVolumes', () => {
    it('invokes encryptVolumes without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.EncryptVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.EncryptVolumesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.encryptVolumes =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.encryptVolumes(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.encryptVolumes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.encryptVolumes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes encryptVolumes without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.EncryptVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.EncryptVolumesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.encryptVolumes =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.encryptVolumes(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IKmsConfig,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.encryptVolumes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.encryptVolumes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes encryptVolumes with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.EncryptVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.EncryptVolumesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.encryptVolumes = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.encryptVolumes(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.encryptVolumes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.encryptVolumes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes encryptVolumes with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.EncryptVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.EncryptVolumesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.encryptVolumes = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.encryptVolumes(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.encryptVolumes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.encryptVolumes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkEncryptVolumesProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkEncryptVolumesProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkEncryptVolumesProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkEncryptVolumesProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteKmsConfig', () => {
    it('invokes deleteKmsConfig without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteKmsConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteKmsConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteKmsConfig without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteKmsConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteKmsConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteKmsConfig with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteKmsConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteKmsConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteKmsConfig with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteKmsConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteKmsConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteKmsConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteKmsConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteKmsConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteKmsConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteKmsConfigProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteKmsConfigProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteKmsConfigProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteKmsConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createReplication', () => {
    it('invokes createReplication without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateReplicationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createReplication =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createReplication(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createReplication without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateReplicationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createReplication =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createReplication(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IReplication,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createReplication with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateReplicationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createReplication = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createReplication(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createReplication with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateReplicationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createReplication = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createReplication(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateReplicationProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateReplicationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateReplicationProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateReplicationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteReplication', () => {
    it('invokes deleteReplication without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteReplication =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteReplication(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteReplication without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteReplication =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteReplication(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteReplication with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteReplication = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteReplication(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteReplication with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteReplication = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteReplication(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteReplicationProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteReplicationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteReplicationProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteReplicationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateReplication', () => {
    it('invokes updateReplication without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateReplicationRequest()
      );
      request.replication ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateReplicationRequest',
        ['replication', 'name']
      );
      request.replication.name = defaultValue1;
      const expectedHeaderRequestParams = `replication.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateReplication =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateReplication(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateReplication without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateReplicationRequest()
      );
      request.replication ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateReplicationRequest',
        ['replication', 'name']
      );
      request.replication.name = defaultValue1;
      const expectedHeaderRequestParams = `replication.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateReplication =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateReplication(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IReplication,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateReplication with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateReplicationRequest()
      );
      request.replication ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateReplicationRequest',
        ['replication', 'name']
      );
      request.replication.name = defaultValue1;
      const expectedHeaderRequestParams = `replication.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateReplication = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateReplication(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateReplication with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateReplicationRequest()
      );
      request.replication ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateReplicationRequest',
        ['replication', 'name']
      );
      request.replication.name = defaultValue1;
      const expectedHeaderRequestParams = `replication.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateReplication = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateReplication(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateReplicationProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateReplicationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateReplicationProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateReplicationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('stopReplication', () => {
    it('invokes stopReplication without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.StopReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.StopReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.stopReplication =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.stopReplication(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.stopReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopReplication without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.StopReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.StopReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.stopReplication =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.stopReplication(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IReplication,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.stopReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopReplication with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.StopReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.StopReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.stopReplication = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.stopReplication(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.stopReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopReplication with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.StopReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.StopReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.stopReplication = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.stopReplication(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.stopReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkStopReplicationProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkStopReplicationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkStopReplicationProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkStopReplicationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('resumeReplication', () => {
    it('invokes resumeReplication without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ResumeReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ResumeReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resumeReplication =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.resumeReplication(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resumeReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeReplication without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ResumeReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ResumeReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resumeReplication =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.resumeReplication(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IReplication,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resumeReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeReplication with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ResumeReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ResumeReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resumeReplication = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.resumeReplication(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.resumeReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeReplication with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ResumeReplicationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ResumeReplicationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resumeReplication = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.resumeReplication(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.resumeReplication as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeReplication as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkResumeReplicationProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkResumeReplicationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkResumeReplicationProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkResumeReplicationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('reverseReplicationDirection', () => {
    it('invokes reverseReplicationDirection without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ReverseReplicationDirectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ReverseReplicationDirectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.reverseReplicationDirection =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.reverseReplicationDirection(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.reverseReplicationDirection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.reverseReplicationDirection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes reverseReplicationDirection without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ReverseReplicationDirectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ReverseReplicationDirectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.reverseReplicationDirection =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.reverseReplicationDirection(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IReplication,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.reverseReplicationDirection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.reverseReplicationDirection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes reverseReplicationDirection with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ReverseReplicationDirectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ReverseReplicationDirectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.reverseReplicationDirection = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.reverseReplicationDirection(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.reverseReplicationDirection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.reverseReplicationDirection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes reverseReplicationDirection with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ReverseReplicationDirectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ReverseReplicationDirectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.reverseReplicationDirection = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.reverseReplicationDirection(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.reverseReplicationDirection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.reverseReplicationDirection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkReverseReplicationDirectionProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkReverseReplicationDirectionProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkReverseReplicationDirectionProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkReverseReplicationDirectionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createBackupVault', () => {
    it('invokes createBackupVault without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupVaultRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackupVault =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createBackupVault(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackupVault without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupVaultRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackupVault =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createBackupVault(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IBackupVault,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackupVault with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupVaultRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackupVault = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createBackupVault(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackupVault with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupVaultRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackupVault = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createBackupVault(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateBackupVaultProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateBackupVaultProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateBackupVaultProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateBackupVaultProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateBackupVault', () => {
    it('invokes updateBackupVault without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupVaultRequest()
      );
      request.backupVault ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupVaultRequest',
        ['backupVault', 'name']
      );
      request.backupVault.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_vault.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateBackupVault =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateBackupVault(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackupVault without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupVaultRequest()
      );
      request.backupVault ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupVaultRequest',
        ['backupVault', 'name']
      );
      request.backupVault.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_vault.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateBackupVault =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateBackupVault(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IBackupVault,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackupVault with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupVaultRequest()
      );
      request.backupVault ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupVaultRequest',
        ['backupVault', 'name']
      );
      request.backupVault.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_vault.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackupVault = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateBackupVault(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackupVault with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupVaultRequest()
      );
      request.backupVault ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupVaultRequest',
        ['backupVault', 'name']
      );
      request.backupVault.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_vault.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackupVault = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateBackupVault(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateBackupVaultProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateBackupVaultProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateBackupVaultProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateBackupVaultProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteBackupVault', () => {
    it('invokes deleteBackupVault without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupVaultRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackupVault =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteBackupVault(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackupVault without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupVaultRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackupVault =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteBackupVault(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackupVault with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupVaultRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackupVault = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteBackupVault(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackupVault with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupVaultRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupVaultRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackupVault = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteBackupVault(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackupVault as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupVault as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteBackupVaultProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteBackupVaultProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteBackupVaultProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteBackupVaultProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createBackup', () => {
    it('invokes createBackup without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createBackup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createBackup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IBackup,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createBackup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateBackupProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateBackupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateBackupProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateBackupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteBackup', () => {
    it('invokes deleteBackup without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteBackup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteBackup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteBackup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteBackupProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteBackupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteBackupProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDeleteBackupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateBackup', () => {
    it('invokes updateBackup without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateBackup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateBackup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackup without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateBackup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateBackup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IBackup,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackup with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackup with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupRequest()
      );
      request.backup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupRequest',
        ['backup', 'name']
      );
      request.backup.name = defaultValue1;
      const expectedHeaderRequestParams = `backup.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateBackup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateBackupProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateBackupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateBackupProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkUpdateBackupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createBackupPolicy', () => {
    it('invokes createBackupPolicy without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackupPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createBackupPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackupPolicy without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackupPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createBackupPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IBackupPolicy,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackupPolicy with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackupPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createBackupPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackupPolicy with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.CreateBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.CreateBackupPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackupPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createBackupPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateBackupPolicyProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateBackupPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateBackupPolicyProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateBackupPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateBackupPolicy', () => {
    it('invokes updateBackupPolicy without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupPolicyRequest()
      );
      request.backupPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupPolicyRequest',
        ['backupPolicy', 'name']
      );
      request.backupPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateBackupPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateBackupPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackupPolicy without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupPolicyRequest()
      );
      request.backupPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupPolicyRequest',
        ['backupPolicy', 'name']
      );
      request.backupPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateBackupPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateBackupPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.netapp.v1.IBackupPolicy,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackupPolicy with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupPolicyRequest()
      );
      request.backupPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupPolicyRequest',
        ['backupPolicy', 'name']
      );
      request.backupPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackupPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateBackupPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateBackupPolicy with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.UpdateBackupPolicyRequest()
      );
      request.backupPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.UpdateBackupPolicyRequest',
        ['backupPolicy', 'name']
      );
      request.backupPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `backup_policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateBackupPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateBackupPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateBackupPolicyProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateBackupPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateBackupPolicyProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateBackupPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteBackupPolicy', () => {
    it('invokes deleteBackupPolicy without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackupPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteBackupPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackupPolicy without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackupPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteBackupPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.netapp.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackupPolicy with call error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackupPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteBackupPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackupPolicy with LRO error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.DeleteBackupPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.DeleteBackupPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackupPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteBackupPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackupPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackupPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteBackupPolicyProgress without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteBackupPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteBackupPolicyProgress with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteBackupPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listStoragePools', () => {
    it('invokes listStoragePools without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListStoragePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListStoragePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
      ];
      client.innerApiCalls.listStoragePools = stubSimpleCall(expectedResponse);
      const [response] = await client.listStoragePools(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listStoragePools as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listStoragePools as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listStoragePools without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListStoragePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListStoragePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
      ];
      client.innerApiCalls.listStoragePools =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listStoragePools(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IStoragePool[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listStoragePools as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listStoragePools as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listStoragePools with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListStoragePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListStoragePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listStoragePools = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listStoragePools(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listStoragePools as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listStoragePools as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listStoragePoolsStream without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListStoragePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListStoragePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
      ];
      client.descriptors.page.listStoragePools.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listStoragePoolsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.StoragePool[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.StoragePool) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listStoragePools.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listStoragePools, request)
      );
      assert(
        (client.descriptors.page.listStoragePools.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listStoragePoolsStream with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListStoragePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListStoragePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listStoragePools.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listStoragePoolsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.StoragePool[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.StoragePool) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listStoragePools.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listStoragePools, request)
      );
      assert(
        (client.descriptors.page.listStoragePools.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listStoragePools without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListStoragePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListStoragePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.StoragePool()),
      ];
      client.descriptors.page.listStoragePools.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.netapp.v1.IStoragePool[] = [];
      const iterable = client.listStoragePoolsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listStoragePools.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listStoragePools.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listStoragePools with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListStoragePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListStoragePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listStoragePools.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listStoragePoolsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.netapp.v1.IStoragePool[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listStoragePools.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listStoragePools.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listVolumes', () => {
    it('invokes listVolumes without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
      ];
      client.innerApiCalls.listVolumes = stubSimpleCall(expectedResponse);
      const [response] = await client.listVolumes(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumes without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
      ];
      client.innerApiCalls.listVolumes =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listVolumes(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IVolume[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumes with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listVolumes = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listVolumes(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listVolumes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listVolumesStream without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
      ];
      client.descriptors.page.listVolumes.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listVolumesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.Volume[] = [];
        stream.on('data', (response: protos.google.cloud.netapp.v1.Volume) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listVolumes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listVolumes, request)
      );
      assert(
        (client.descriptors.page.listVolumes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listVolumesStream with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVolumes.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listVolumesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.Volume[] = [];
        stream.on('data', (response: protos.google.cloud.netapp.v1.Volume) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listVolumes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listVolumes, request)
      );
      assert(
        (client.descriptors.page.listVolumes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVolumes without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Volume()),
      ];
      client.descriptors.page.listVolumes.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.netapp.v1.IVolume[] = [];
      const iterable = client.listVolumesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listVolumes.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listVolumes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listVolumes with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListVolumesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListVolumesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listVolumes.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listVolumesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.netapp.v1.IVolume[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listVolumes.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listVolumes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listSnapshots', () => {
    it('invokes listSnapshots without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
      ];
      client.innerApiCalls.listSnapshots = stubSimpleCall(expectedResponse);
      const [response] = await client.listSnapshots(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSnapshots without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
      ];
      client.innerApiCalls.listSnapshots =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listSnapshots(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.ISnapshot[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSnapshots with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listSnapshots = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listSnapshots(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSnapshots as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSnapshotsStream without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
      ];
      client.descriptors.page.listSnapshots.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listSnapshotsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.Snapshot[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.Snapshot) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSnapshots.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSnapshots, request)
      );
      assert(
        (client.descriptors.page.listSnapshots.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listSnapshotsStream with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSnapshots.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listSnapshotsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.Snapshot[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.Snapshot) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listSnapshots.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSnapshots, request)
      );
      assert(
        (client.descriptors.page.listSnapshots.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSnapshots without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Snapshot()),
      ];
      client.descriptors.page.listSnapshots.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.netapp.v1.ISnapshot[] = [];
      const iterable = client.listSnapshotsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSnapshots.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSnapshots.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSnapshots with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListSnapshotsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListSnapshotsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSnapshots.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listSnapshotsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.netapp.v1.ISnapshot[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSnapshots.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSnapshots.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listActiveDirectories', () => {
    it('invokes listActiveDirectories without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListActiveDirectoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListActiveDirectoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
      ];
      client.innerApiCalls.listActiveDirectories =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listActiveDirectories(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listActiveDirectories as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listActiveDirectories as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listActiveDirectories without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListActiveDirectoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListActiveDirectoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
      ];
      client.innerApiCalls.listActiveDirectories =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listActiveDirectories(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IActiveDirectory[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listActiveDirectories as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listActiveDirectories as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listActiveDirectories with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListActiveDirectoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListActiveDirectoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listActiveDirectories = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listActiveDirectories(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listActiveDirectories as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listActiveDirectories as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listActiveDirectoriesStream without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListActiveDirectoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListActiveDirectoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
      ];
      client.descriptors.page.listActiveDirectories.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listActiveDirectoriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.ActiveDirectory[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.ActiveDirectory) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listActiveDirectories
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listActiveDirectories, request)
      );
      assert(
        (
          client.descriptors.page.listActiveDirectories
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listActiveDirectoriesStream with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListActiveDirectoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListActiveDirectoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listActiveDirectories.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listActiveDirectoriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.ActiveDirectory[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.ActiveDirectory) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listActiveDirectories
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listActiveDirectories, request)
      );
      assert(
        (
          client.descriptors.page.listActiveDirectories
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listActiveDirectories without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListActiveDirectoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListActiveDirectoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
        generateSampleMessage(
          new protos.google.cloud.netapp.v1.ActiveDirectory()
        ),
      ];
      client.descriptors.page.listActiveDirectories.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.netapp.v1.IActiveDirectory[] = [];
      const iterable = client.listActiveDirectoriesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listActiveDirectories
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listActiveDirectories
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listActiveDirectories with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListActiveDirectoriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListActiveDirectoriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listActiveDirectories.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listActiveDirectoriesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.netapp.v1.IActiveDirectory[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listActiveDirectories
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listActiveDirectories
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listKmsConfigs', () => {
    it('invokes listKmsConfigs without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListKmsConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListKmsConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
      ];
      client.innerApiCalls.listKmsConfigs = stubSimpleCall(expectedResponse);
      const [response] = await client.listKmsConfigs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listKmsConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listKmsConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listKmsConfigs without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListKmsConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListKmsConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
      ];
      client.innerApiCalls.listKmsConfigs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listKmsConfigs(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IKmsConfig[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listKmsConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listKmsConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listKmsConfigs with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListKmsConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListKmsConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listKmsConfigs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listKmsConfigs(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listKmsConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listKmsConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listKmsConfigsStream without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListKmsConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListKmsConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
      ];
      client.descriptors.page.listKmsConfigs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listKmsConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.KmsConfig[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.KmsConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listKmsConfigs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listKmsConfigs, request)
      );
      assert(
        (client.descriptors.page.listKmsConfigs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listKmsConfigsStream with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListKmsConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListKmsConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listKmsConfigs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listKmsConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.KmsConfig[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.KmsConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listKmsConfigs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listKmsConfigs, request)
      );
      assert(
        (client.descriptors.page.listKmsConfigs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listKmsConfigs without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListKmsConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListKmsConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.KmsConfig()),
      ];
      client.descriptors.page.listKmsConfigs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.netapp.v1.IKmsConfig[] = [];
      const iterable = client.listKmsConfigsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listKmsConfigs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listKmsConfigs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listKmsConfigs with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListKmsConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListKmsConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listKmsConfigs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listKmsConfigsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.netapp.v1.IKmsConfig[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listKmsConfigs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listKmsConfigs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listReplications', () => {
    it('invokes listReplications without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListReplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListReplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
      ];
      client.innerApiCalls.listReplications = stubSimpleCall(expectedResponse);
      const [response] = await client.listReplications(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listReplications as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReplications as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReplications without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListReplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListReplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
      ];
      client.innerApiCalls.listReplications =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listReplications(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IReplication[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listReplications as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReplications as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReplications with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListReplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListReplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listReplications = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listReplications(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listReplications as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReplications as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReplicationsStream without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListReplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListReplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
      ];
      client.descriptors.page.listReplications.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listReplicationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.Replication[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.Replication) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listReplications.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listReplications, request)
      );
      assert(
        (client.descriptors.page.listReplications.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listReplicationsStream with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListReplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListReplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listReplications.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listReplicationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.Replication[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.Replication) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listReplications.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listReplications, request)
      );
      assert(
        (client.descriptors.page.listReplications.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listReplications without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListReplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListReplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Replication()),
      ];
      client.descriptors.page.listReplications.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.netapp.v1.IReplication[] = [];
      const iterable = client.listReplicationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listReplications.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listReplications.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listReplications with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListReplicationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListReplicationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listReplications.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listReplicationsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.netapp.v1.IReplication[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listReplications.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listReplications.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listBackupVaults', () => {
    it('invokes listBackupVaults without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupVaultsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupVaultsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
      ];
      client.innerApiCalls.listBackupVaults = stubSimpleCall(expectedResponse);
      const [response] = await client.listBackupVaults(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackupVaults as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackupVaults as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupVaults without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupVaultsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupVaultsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
      ];
      client.innerApiCalls.listBackupVaults =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listBackupVaults(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IBackupVault[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackupVaults as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackupVaults as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupVaults with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupVaultsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupVaultsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listBackupVaults = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listBackupVaults(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listBackupVaults as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackupVaults as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupVaultsStream without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupVaultsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupVaultsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
      ];
      client.descriptors.page.listBackupVaults.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listBackupVaultsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.BackupVault[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.BackupVault) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listBackupVaults.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackupVaults, request)
      );
      assert(
        (client.descriptors.page.listBackupVaults.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listBackupVaultsStream with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupVaultsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupVaultsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackupVaults.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listBackupVaultsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.BackupVault[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.BackupVault) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listBackupVaults.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackupVaults, request)
      );
      assert(
        (client.descriptors.page.listBackupVaults.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackupVaults without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupVaultsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupVaultsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupVault()),
      ];
      client.descriptors.page.listBackupVaults.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.netapp.v1.IBackupVault[] = [];
      const iterable = client.listBackupVaultsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listBackupVaults.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackupVaults.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackupVaults with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupVaultsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupVaultsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackupVaults.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listBackupVaultsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.netapp.v1.IBackupVault[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listBackupVaults.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackupVaults.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listBackups', () => {
    it('invokes listBackups without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
      ];
      client.innerApiCalls.listBackups = stubSimpleCall(expectedResponse);
      const [response] = await client.listBackups(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackups without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
      ];
      client.innerApiCalls.listBackups =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listBackups(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IBackup[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackups with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listBackups = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listBackups(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupsStream without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
      ];
      client.descriptors.page.listBackups.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.Backup[] = [];
        stream.on('data', (response: protos.google.cloud.netapp.v1.Backup) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackups, request)
      );
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listBackupsStream with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackups.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.Backup[] = [];
        stream.on('data', (response: protos.google.cloud.netapp.v1.Backup) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackups, request)
      );
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackups without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.Backup()),
      ];
      client.descriptors.page.listBackups.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.netapp.v1.IBackup[] = [];
      const iterable = client.listBackupsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackups with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackups.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listBackupsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.netapp.v1.IBackup[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listBackupPolicies', () => {
    it('invokes listBackupPolicies without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
      ];
      client.innerApiCalls.listBackupPolicies =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listBackupPolicies(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackupPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackupPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupPolicies without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
      ];
      client.innerApiCalls.listBackupPolicies =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listBackupPolicies(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.netapp.v1.IBackupPolicy[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackupPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackupPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupPolicies with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listBackupPolicies = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listBackupPolicies(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listBackupPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackupPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupPoliciesStream without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
      ];
      client.descriptors.page.listBackupPolicies.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listBackupPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.BackupPolicy[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.BackupPolicy) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listBackupPolicies.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackupPolicies, request)
      );
      assert(
        (client.descriptors.page.listBackupPolicies.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listBackupPoliciesStream with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackupPolicies.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listBackupPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.netapp.v1.BackupPolicy[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.netapp.v1.BackupPolicy) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listBackupPolicies.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackupPolicies, request)
      );
      assert(
        (client.descriptors.page.listBackupPolicies.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackupPolicies without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
        generateSampleMessage(new protos.google.cloud.netapp.v1.BackupPolicy()),
      ];
      client.descriptors.page.listBackupPolicies.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.netapp.v1.IBackupPolicy[] = [];
      const iterable = client.listBackupPoliciesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listBackupPolicies.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackupPolicies.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackupPolicies with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.netapp.v1.ListBackupPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.netapp.v1.ListBackupPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackupPolicies.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listBackupPoliciesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.netapp.v1.IBackupPolicy[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listBackupPolicies.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackupPolicies.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('activeDirectory', () => {
      const fakePath = '/rendered/path/activeDirectory';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        active_directory: 'activeDirectoryValue',
      };
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.activeDirectoryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.activeDirectoryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('activeDirectoryPath', () => {
        const result = client.activeDirectoryPath(
          'projectValue',
          'locationValue',
          'activeDirectoryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.activeDirectoryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromActiveDirectoryName', () => {
        const result = client.matchProjectFromActiveDirectoryName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.activeDirectoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromActiveDirectoryName', () => {
        const result = client.matchLocationFromActiveDirectoryName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.activeDirectoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchActiveDirectoryFromActiveDirectoryName', () => {
        const result =
          client.matchActiveDirectoryFromActiveDirectoryName(fakePath);
        assert.strictEqual(result, 'activeDirectoryValue');
        assert(
          (client.pathTemplates.activeDirectoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('backup', () => {
      const fakePath = '/rendered/path/backup';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        backup_vault: 'backupVaultValue',
        backup: 'backupValue',
      };
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.backupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.backupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('backupPath', () => {
        const result = client.backupPath(
          'projectValue',
          'locationValue',
          'backupVaultValue',
          'backupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.backupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBackupName', () => {
        const result = client.matchProjectFromBackupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBackupName', () => {
        const result = client.matchLocationFromBackupName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupVaultFromBackupName', () => {
        const result = client.matchBackupVaultFromBackupName(fakePath);
        assert.strictEqual(result, 'backupVaultValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupFromBackupName', () => {
        const result = client.matchBackupFromBackupName(fakePath);
        assert.strictEqual(result, 'backupValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('backupPolicy', () => {
      const fakePath = '/rendered/path/backupPolicy';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        backup_policy: 'backupPolicyValue',
      };
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.backupPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.backupPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('backupPolicyPath', () => {
        const result = client.backupPolicyPath(
          'projectValue',
          'locationValue',
          'backupPolicyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.backupPolicyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBackupPolicyName', () => {
        const result = client.matchProjectFromBackupPolicyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.backupPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBackupPolicyName', () => {
        const result = client.matchLocationFromBackupPolicyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.backupPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupPolicyFromBackupPolicyName', () => {
        const result = client.matchBackupPolicyFromBackupPolicyName(fakePath);
        assert.strictEqual(result, 'backupPolicyValue');
        assert(
          (client.pathTemplates.backupPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('backupVault', () => {
      const fakePath = '/rendered/path/backupVault';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        backup_vault: 'backupVaultValue',
      };
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.backupVaultPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.backupVaultPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('backupVaultPath', () => {
        const result = client.backupVaultPath(
          'projectValue',
          'locationValue',
          'backupVaultValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.backupVaultPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBackupVaultName', () => {
        const result = client.matchProjectFromBackupVaultName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.backupVaultPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBackupVaultName', () => {
        const result = client.matchLocationFromBackupVaultName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.backupVaultPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupVaultFromBackupVaultName', () => {
        const result = client.matchBackupVaultFromBackupVaultName(fakePath);
        assert.strictEqual(result, 'backupVaultValue');
        assert(
          (client.pathTemplates.backupVaultPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('kmsConfig', () => {
      const fakePath = '/rendered/path/kmsConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        kms_config: 'kmsConfigValue',
      };
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.kmsConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.kmsConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('kmsConfigPath', () => {
        const result = client.kmsConfigPath(
          'projectValue',
          'locationValue',
          'kmsConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.kmsConfigPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromKmsConfigName', () => {
        const result = client.matchProjectFromKmsConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.kmsConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromKmsConfigName', () => {
        const result = client.matchLocationFromKmsConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.kmsConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKmsConfigFromKmsConfigName', () => {
        const result = client.matchKmsConfigFromKmsConfigName(fakePath);
        assert.strictEqual(result, 'kmsConfigValue');
        assert(
          (client.pathTemplates.kmsConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('replication', () => {
      const fakePath = '/rendered/path/replication';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        volume: 'volumeValue',
        replication: 'replicationValue',
      };
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.replicationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.replicationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('replicationPath', () => {
        const result = client.replicationPath(
          'projectValue',
          'locationValue',
          'volumeValue',
          'replicationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.replicationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromReplicationName', () => {
        const result = client.matchProjectFromReplicationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.replicationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromReplicationName', () => {
        const result = client.matchLocationFromReplicationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.replicationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVolumeFromReplicationName', () => {
        const result = client.matchVolumeFromReplicationName(fakePath);
        assert.strictEqual(result, 'volumeValue');
        assert(
          (client.pathTemplates.replicationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchReplicationFromReplicationName', () => {
        const result = client.matchReplicationFromReplicationName(fakePath);
        assert.strictEqual(result, 'replicationValue');
        assert(
          (client.pathTemplates.replicationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('snapshot', () => {
      const fakePath = '/rendered/path/snapshot';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        volume: 'volumeValue',
        snapshot: 'snapshotValue',
      };
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.snapshotPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.snapshotPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('snapshotPath', () => {
        const result = client.snapshotPath(
          'projectValue',
          'locationValue',
          'volumeValue',
          'snapshotValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.snapshotPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSnapshotName', () => {
        const result = client.matchProjectFromSnapshotName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.snapshotPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSnapshotName', () => {
        const result = client.matchLocationFromSnapshotName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.snapshotPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVolumeFromSnapshotName', () => {
        const result = client.matchVolumeFromSnapshotName(fakePath);
        assert.strictEqual(result, 'volumeValue');
        assert(
          (client.pathTemplates.snapshotPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSnapshotFromSnapshotName', () => {
        const result = client.matchSnapshotFromSnapshotName(fakePath);
        assert.strictEqual(result, 'snapshotValue');
        assert(
          (client.pathTemplates.snapshotPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('storagePool', () => {
      const fakePath = '/rendered/path/storagePool';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        storage_pool: 'storagePoolValue',
      };
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.storagePoolPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.storagePoolPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('storagePoolPath', () => {
        const result = client.storagePoolPath(
          'projectValue',
          'locationValue',
          'storagePoolValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.storagePoolPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromStoragePoolName', () => {
        const result = client.matchProjectFromStoragePoolName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.storagePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromStoragePoolName', () => {
        const result = client.matchLocationFromStoragePoolName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.storagePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchStoragePoolFromStoragePoolName', () => {
        const result = client.matchStoragePoolFromStoragePoolName(fakePath);
        assert.strictEqual(result, 'storagePoolValue');
        assert(
          (client.pathTemplates.storagePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('volume', () => {
      const fakePath = '/rendered/path/volume';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        volume: 'volumeValue',
      };
      const client = new netappModule.v1.NetAppClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.volumePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.volumePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('volumePath', () => {
        const result = client.volumePath(
          'projectValue',
          'locationValue',
          'volumeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.volumePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromVolumeName', () => {
        const result = client.matchProjectFromVolumeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.volumePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromVolumeName', () => {
        const result = client.matchLocationFromVolumeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.volumePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVolumeFromVolumeName', () => {
        const result = client.matchVolumeFromVolumeName(fakePath);
        assert.strictEqual(result, 'volumeValue');
        assert(
          (client.pathTemplates.volumePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
