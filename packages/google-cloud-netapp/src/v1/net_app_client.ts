// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/net_app_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './net_app_client_config.json';
const version = require('../../../package.json').version;

/**
 *  NetApp Files Google Cloud Service
 * @class
 * @memberof v1
 */
export class NetAppClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  netAppStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of NetAppClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new NetAppClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof NetAppClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'netapp.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      activeDirectoryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/activeDirectories/{active_directory}'
      ),
      backupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupVaults/{backup_vault}/backups/{backup}'
      ),
      backupPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupPolicies/{backup_policy}'
      ),
      backupVaultPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/backupVaults/{backup_vault}'
      ),
      kmsConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/kmsConfigs/{kms_config}'
      ),
      replicationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/volumes/{volume}/replications/{replication}'
      ),
      snapshotPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/volumes/{volume}/snapshots/{snapshot}'
      ),
      storagePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/storagePools/{storage_pool}'
      ),
      volumePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/volumes/{volume}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listStoragePools: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'storagePools'
      ),
      listVolumes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'volumes'
      ),
      listSnapshots: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'snapshots'
      ),
      listActiveDirectories: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'activeDirectories'
      ),
      listKmsConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'kmsConfigs'
      ),
      listReplications: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'replications'
      ),
      listBackupVaults: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'backupVaults'
      ),
      listBackups: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'backups'
      ),
      listBackupPolicies: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'backupPolicies'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createStoragePoolResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.StoragePool'
    ) as gax.protobuf.Type;
    const createStoragePoolMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateStoragePoolResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.StoragePool'
    ) as gax.protobuf.Type;
    const updateStoragePoolMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteStoragePoolResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteStoragePoolMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createVolumeResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Volume'
    ) as gax.protobuf.Type;
    const createVolumeMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateVolumeResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Volume'
    ) as gax.protobuf.Type;
    const updateVolumeMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteVolumeResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteVolumeMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const revertVolumeResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Volume'
    ) as gax.protobuf.Type;
    const revertVolumeMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createSnapshotResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Snapshot'
    ) as gax.protobuf.Type;
    const createSnapshotMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteSnapshotResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteSnapshotMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateSnapshotResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Snapshot'
    ) as gax.protobuf.Type;
    const updateSnapshotMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createActiveDirectoryResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.ActiveDirectory'
    ) as gax.protobuf.Type;
    const createActiveDirectoryMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateActiveDirectoryResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.ActiveDirectory'
    ) as gax.protobuf.Type;
    const updateActiveDirectoryMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteActiveDirectoryResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteActiveDirectoryMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createKmsConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.KmsConfig'
    ) as gax.protobuf.Type;
    const createKmsConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateKmsConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.KmsConfig'
    ) as gax.protobuf.Type;
    const updateKmsConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const encryptVolumesResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.KmsConfig'
    ) as gax.protobuf.Type;
    const encryptVolumesMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteKmsConfigResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteKmsConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createReplicationResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Replication'
    ) as gax.protobuf.Type;
    const createReplicationMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteReplicationResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteReplicationMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateReplicationResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Replication'
    ) as gax.protobuf.Type;
    const updateReplicationMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const stopReplicationResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Replication'
    ) as gax.protobuf.Type;
    const stopReplicationMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const resumeReplicationResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Replication'
    ) as gax.protobuf.Type;
    const resumeReplicationMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const reverseReplicationDirectionResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Replication'
    ) as gax.protobuf.Type;
    const reverseReplicationDirectionMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createBackupVaultResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.BackupVault'
    ) as gax.protobuf.Type;
    const createBackupVaultMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateBackupVaultResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.BackupVault'
    ) as gax.protobuf.Type;
    const updateBackupVaultMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteBackupVaultResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteBackupVaultMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Backup'
    ) as gax.protobuf.Type;
    const createBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteBackupResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.Backup'
    ) as gax.protobuf.Type;
    const updateBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createBackupPolicyResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.BackupPolicy'
    ) as gax.protobuf.Type;
    const createBackupPolicyMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateBackupPolicyResponse = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.BackupPolicy'
    ) as gax.protobuf.Type;
    const updateBackupPolicyMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteBackupPolicyResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteBackupPolicyMetadata = protoFilesRoot.lookup(
      '.google.cloud.netapp.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createStoragePool: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createStoragePoolResponse.decode.bind(createStoragePoolResponse),
        createStoragePoolMetadata.decode.bind(createStoragePoolMetadata)
      ),
      updateStoragePool: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateStoragePoolResponse.decode.bind(updateStoragePoolResponse),
        updateStoragePoolMetadata.decode.bind(updateStoragePoolMetadata)
      ),
      deleteStoragePool: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteStoragePoolResponse.decode.bind(deleteStoragePoolResponse),
        deleteStoragePoolMetadata.decode.bind(deleteStoragePoolMetadata)
      ),
      createVolume: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createVolumeResponse.decode.bind(createVolumeResponse),
        createVolumeMetadata.decode.bind(createVolumeMetadata)
      ),
      updateVolume: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateVolumeResponse.decode.bind(updateVolumeResponse),
        updateVolumeMetadata.decode.bind(updateVolumeMetadata)
      ),
      deleteVolume: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteVolumeResponse.decode.bind(deleteVolumeResponse),
        deleteVolumeMetadata.decode.bind(deleteVolumeMetadata)
      ),
      revertVolume: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        revertVolumeResponse.decode.bind(revertVolumeResponse),
        revertVolumeMetadata.decode.bind(revertVolumeMetadata)
      ),
      createSnapshot: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createSnapshotResponse.decode.bind(createSnapshotResponse),
        createSnapshotMetadata.decode.bind(createSnapshotMetadata)
      ),
      deleteSnapshot: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteSnapshotResponse.decode.bind(deleteSnapshotResponse),
        deleteSnapshotMetadata.decode.bind(deleteSnapshotMetadata)
      ),
      updateSnapshot: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateSnapshotResponse.decode.bind(updateSnapshotResponse),
        updateSnapshotMetadata.decode.bind(updateSnapshotMetadata)
      ),
      createActiveDirectory: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createActiveDirectoryResponse.decode.bind(
          createActiveDirectoryResponse
        ),
        createActiveDirectoryMetadata.decode.bind(createActiveDirectoryMetadata)
      ),
      updateActiveDirectory: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateActiveDirectoryResponse.decode.bind(
          updateActiveDirectoryResponse
        ),
        updateActiveDirectoryMetadata.decode.bind(updateActiveDirectoryMetadata)
      ),
      deleteActiveDirectory: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteActiveDirectoryResponse.decode.bind(
          deleteActiveDirectoryResponse
        ),
        deleteActiveDirectoryMetadata.decode.bind(deleteActiveDirectoryMetadata)
      ),
      createKmsConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createKmsConfigResponse.decode.bind(createKmsConfigResponse),
        createKmsConfigMetadata.decode.bind(createKmsConfigMetadata)
      ),
      updateKmsConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateKmsConfigResponse.decode.bind(updateKmsConfigResponse),
        updateKmsConfigMetadata.decode.bind(updateKmsConfigMetadata)
      ),
      encryptVolumes: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        encryptVolumesResponse.decode.bind(encryptVolumesResponse),
        encryptVolumesMetadata.decode.bind(encryptVolumesMetadata)
      ),
      deleteKmsConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteKmsConfigResponse.decode.bind(deleteKmsConfigResponse),
        deleteKmsConfigMetadata.decode.bind(deleteKmsConfigMetadata)
      ),
      createReplication: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createReplicationResponse.decode.bind(createReplicationResponse),
        createReplicationMetadata.decode.bind(createReplicationMetadata)
      ),
      deleteReplication: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteReplicationResponse.decode.bind(deleteReplicationResponse),
        deleteReplicationMetadata.decode.bind(deleteReplicationMetadata)
      ),
      updateReplication: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateReplicationResponse.decode.bind(updateReplicationResponse),
        updateReplicationMetadata.decode.bind(updateReplicationMetadata)
      ),
      stopReplication: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        stopReplicationResponse.decode.bind(stopReplicationResponse),
        stopReplicationMetadata.decode.bind(stopReplicationMetadata)
      ),
      resumeReplication: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        resumeReplicationResponse.decode.bind(resumeReplicationResponse),
        resumeReplicationMetadata.decode.bind(resumeReplicationMetadata)
      ),
      reverseReplicationDirection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        reverseReplicationDirectionResponse.decode.bind(
          reverseReplicationDirectionResponse
        ),
        reverseReplicationDirectionMetadata.decode.bind(
          reverseReplicationDirectionMetadata
        )
      ),
      createBackupVault: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupVaultResponse.decode.bind(createBackupVaultResponse),
        createBackupVaultMetadata.decode.bind(createBackupVaultMetadata)
      ),
      updateBackupVault: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateBackupVaultResponse.decode.bind(updateBackupVaultResponse),
        updateBackupVaultMetadata.decode.bind(updateBackupVaultMetadata)
      ),
      deleteBackupVault: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupVaultResponse.decode.bind(deleteBackupVaultResponse),
        deleteBackupVaultMetadata.decode.bind(deleteBackupVaultMetadata)
      ),
      createBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupResponse.decode.bind(createBackupResponse),
        createBackupMetadata.decode.bind(createBackupMetadata)
      ),
      deleteBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupResponse.decode.bind(deleteBackupResponse),
        deleteBackupMetadata.decode.bind(deleteBackupMetadata)
      ),
      updateBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateBackupResponse.decode.bind(updateBackupResponse),
        updateBackupMetadata.decode.bind(updateBackupMetadata)
      ),
      createBackupPolicy: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupPolicyResponse.decode.bind(createBackupPolicyResponse),
        createBackupPolicyMetadata.decode.bind(createBackupPolicyMetadata)
      ),
      updateBackupPolicy: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateBackupPolicyResponse.decode.bind(updateBackupPolicyResponse),
        updateBackupPolicyMetadata.decode.bind(updateBackupPolicyMetadata)
      ),
      deleteBackupPolicy: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupPolicyResponse.decode.bind(deleteBackupPolicyResponse),
        deleteBackupPolicyMetadata.decode.bind(deleteBackupPolicyMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.netapp.v1.NetApp',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.netAppStub) {
      return this.netAppStub;
    }

    // Put together the "service stub" for
    // google.cloud.netapp.v1.NetApp.
    this.netAppStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.netapp.v1.NetApp'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.netapp.v1.NetApp,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const netAppStubMethods = [
      'listStoragePools',
      'createStoragePool',
      'getStoragePool',
      'updateStoragePool',
      'deleteStoragePool',
      'listVolumes',
      'getVolume',
      'createVolume',
      'updateVolume',
      'deleteVolume',
      'revertVolume',
      'listSnapshots',
      'getSnapshot',
      'createSnapshot',
      'deleteSnapshot',
      'updateSnapshot',
      'listActiveDirectories',
      'getActiveDirectory',
      'createActiveDirectory',
      'updateActiveDirectory',
      'deleteActiveDirectory',
      'listKmsConfigs',
      'createKmsConfig',
      'getKmsConfig',
      'updateKmsConfig',
      'encryptVolumes',
      'verifyKmsConfig',
      'deleteKmsConfig',
      'listReplications',
      'getReplication',
      'createReplication',
      'deleteReplication',
      'updateReplication',
      'stopReplication',
      'resumeReplication',
      'reverseReplicationDirection',
      'createBackupVault',
      'getBackupVault',
      'listBackupVaults',
      'updateBackupVault',
      'deleteBackupVault',
      'createBackup',
      'getBackup',
      'listBackups',
      'deleteBackup',
      'updateBackup',
      'createBackupPolicy',
      'getBackupPolicy',
      'listBackupPolicies',
      'updateBackupPolicy',
      'deleteBackupPolicy',
    ];
    for (const methodName of netAppStubMethods) {
      const callPromise = this.netAppStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.netAppStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'netapp.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'netapp.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Returns the description of the specified storage pool by poolId.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the storage pool
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.netapp.v1.StoragePool|StoragePool}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.get_storage_pool.js</caption>
   * region_tag:netapp_v1_generated_NetApp_GetStoragePool_async
   */
  getStoragePool(
    request?: protos.google.cloud.netapp.v1.IGetStoragePoolRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IStoragePool,
      protos.google.cloud.netapp.v1.IGetStoragePoolRequest | undefined,
      {} | undefined,
    ]
  >;
  getStoragePool(
    request: protos.google.cloud.netapp.v1.IGetStoragePoolRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.netapp.v1.IStoragePool,
      protos.google.cloud.netapp.v1.IGetStoragePoolRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getStoragePool(
    request: protos.google.cloud.netapp.v1.IGetStoragePoolRequest,
    callback: Callback<
      protos.google.cloud.netapp.v1.IStoragePool,
      protos.google.cloud.netapp.v1.IGetStoragePoolRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getStoragePool(
    request?: protos.google.cloud.netapp.v1.IGetStoragePoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.netapp.v1.IStoragePool,
          | protos.google.cloud.netapp.v1.IGetStoragePoolRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.netapp.v1.IStoragePool,
      protos.google.cloud.netapp.v1.IGetStoragePoolRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IStoragePool,
      protos.google.cloud.netapp.v1.IGetStoragePoolRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getStoragePool(request, options, callback);
  }
  /**
   * Gets details of a single Volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the volume
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.netapp.v1.Volume|Volume}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.get_volume.js</caption>
   * region_tag:netapp_v1_generated_NetApp_GetVolume_async
   */
  getVolume(
    request?: protos.google.cloud.netapp.v1.IGetVolumeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IVolume,
      protos.google.cloud.netapp.v1.IGetVolumeRequest | undefined,
      {} | undefined,
    ]
  >;
  getVolume(
    request: protos.google.cloud.netapp.v1.IGetVolumeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.netapp.v1.IVolume,
      protos.google.cloud.netapp.v1.IGetVolumeRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getVolume(
    request: protos.google.cloud.netapp.v1.IGetVolumeRequest,
    callback: Callback<
      protos.google.cloud.netapp.v1.IVolume,
      protos.google.cloud.netapp.v1.IGetVolumeRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getVolume(
    request?: protos.google.cloud.netapp.v1.IGetVolumeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.netapp.v1.IVolume,
          protos.google.cloud.netapp.v1.IGetVolumeRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.netapp.v1.IVolume,
      protos.google.cloud.netapp.v1.IGetVolumeRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IVolume,
      protos.google.cloud.netapp.v1.IGetVolumeRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVolume(request, options, callback);
  }
  /**
   * Describe a snapshot for a volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The snapshot resource name, in the format
   *   `projects/{project_id}/locations/{location}/volumes/{volume_id}/snapshots/{snapshot_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.netapp.v1.Snapshot|Snapshot}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.get_snapshot.js</caption>
   * region_tag:netapp_v1_generated_NetApp_GetSnapshot_async
   */
  getSnapshot(
    request?: protos.google.cloud.netapp.v1.IGetSnapshotRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.ISnapshot,
      protos.google.cloud.netapp.v1.IGetSnapshotRequest | undefined,
      {} | undefined,
    ]
  >;
  getSnapshot(
    request: protos.google.cloud.netapp.v1.IGetSnapshotRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.netapp.v1.ISnapshot,
      protos.google.cloud.netapp.v1.IGetSnapshotRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSnapshot(
    request: protos.google.cloud.netapp.v1.IGetSnapshotRequest,
    callback: Callback<
      protos.google.cloud.netapp.v1.ISnapshot,
      protos.google.cloud.netapp.v1.IGetSnapshotRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSnapshot(
    request?: protos.google.cloud.netapp.v1.IGetSnapshotRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.netapp.v1.ISnapshot,
          protos.google.cloud.netapp.v1.IGetSnapshotRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.netapp.v1.ISnapshot,
      protos.google.cloud.netapp.v1.IGetSnapshotRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.ISnapshot,
      protos.google.cloud.netapp.v1.IGetSnapshotRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSnapshot(request, options, callback);
  }
  /**
   * Describes a specified active directory.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the active directory.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.netapp.v1.ActiveDirectory|ActiveDirectory}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.get_active_directory.js</caption>
   * region_tag:netapp_v1_generated_NetApp_GetActiveDirectory_async
   */
  getActiveDirectory(
    request?: protos.google.cloud.netapp.v1.IGetActiveDirectoryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IActiveDirectory,
      protos.google.cloud.netapp.v1.IGetActiveDirectoryRequest | undefined,
      {} | undefined,
    ]
  >;
  getActiveDirectory(
    request: protos.google.cloud.netapp.v1.IGetActiveDirectoryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.netapp.v1.IActiveDirectory,
      | protos.google.cloud.netapp.v1.IGetActiveDirectoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getActiveDirectory(
    request: protos.google.cloud.netapp.v1.IGetActiveDirectoryRequest,
    callback: Callback<
      protos.google.cloud.netapp.v1.IActiveDirectory,
      | protos.google.cloud.netapp.v1.IGetActiveDirectoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getActiveDirectory(
    request?: protos.google.cloud.netapp.v1.IGetActiveDirectoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.netapp.v1.IActiveDirectory,
          | protos.google.cloud.netapp.v1.IGetActiveDirectoryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.netapp.v1.IActiveDirectory,
      | protos.google.cloud.netapp.v1.IGetActiveDirectoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IActiveDirectory,
      protos.google.cloud.netapp.v1.IGetActiveDirectoryRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getActiveDirectory(request, options, callback);
  }
  /**
   * Returns the description of the specified KMS config by kms_config_id.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the KmsConfig
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.netapp.v1.KmsConfig|KmsConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.get_kms_config.js</caption>
   * region_tag:netapp_v1_generated_NetApp_GetKmsConfig_async
   */
  getKmsConfig(
    request?: protos.google.cloud.netapp.v1.IGetKmsConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IKmsConfig,
      protos.google.cloud.netapp.v1.IGetKmsConfigRequest | undefined,
      {} | undefined,
    ]
  >;
  getKmsConfig(
    request: protos.google.cloud.netapp.v1.IGetKmsConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.netapp.v1.IKmsConfig,
      protos.google.cloud.netapp.v1.IGetKmsConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getKmsConfig(
    request: protos.google.cloud.netapp.v1.IGetKmsConfigRequest,
    callback: Callback<
      protos.google.cloud.netapp.v1.IKmsConfig,
      protos.google.cloud.netapp.v1.IGetKmsConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getKmsConfig(
    request?: protos.google.cloud.netapp.v1.IGetKmsConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.netapp.v1.IKmsConfig,
          protos.google.cloud.netapp.v1.IGetKmsConfigRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.netapp.v1.IKmsConfig,
      protos.google.cloud.netapp.v1.IGetKmsConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IKmsConfig,
      protos.google.cloud.netapp.v1.IGetKmsConfigRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getKmsConfig(request, options, callback);
  }
  /**
   * Verifies KMS config reachability.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the KMS Config to be verified.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.netapp.v1.VerifyKmsConfigResponse|VerifyKmsConfigResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.verify_kms_config.js</caption>
   * region_tag:netapp_v1_generated_NetApp_VerifyKmsConfig_async
   */
  verifyKmsConfig(
    request?: protos.google.cloud.netapp.v1.IVerifyKmsConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IVerifyKmsConfigResponse,
      protos.google.cloud.netapp.v1.IVerifyKmsConfigRequest | undefined,
      {} | undefined,
    ]
  >;
  verifyKmsConfig(
    request: protos.google.cloud.netapp.v1.IVerifyKmsConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.netapp.v1.IVerifyKmsConfigResponse,
      protos.google.cloud.netapp.v1.IVerifyKmsConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  verifyKmsConfig(
    request: protos.google.cloud.netapp.v1.IVerifyKmsConfigRequest,
    callback: Callback<
      protos.google.cloud.netapp.v1.IVerifyKmsConfigResponse,
      protos.google.cloud.netapp.v1.IVerifyKmsConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  verifyKmsConfig(
    request?: protos.google.cloud.netapp.v1.IVerifyKmsConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.netapp.v1.IVerifyKmsConfigResponse,
          | protos.google.cloud.netapp.v1.IVerifyKmsConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.netapp.v1.IVerifyKmsConfigResponse,
      protos.google.cloud.netapp.v1.IVerifyKmsConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IVerifyKmsConfigResponse,
      protos.google.cloud.netapp.v1.IVerifyKmsConfigRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.verifyKmsConfig(request, options, callback);
  }
  /**
   * Describe a replication for a volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The replication resource name, in the format
   *   `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.netapp.v1.Replication|Replication}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.get_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_GetReplication_async
   */
  getReplication(
    request?: protos.google.cloud.netapp.v1.IGetReplicationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IReplication,
      protos.google.cloud.netapp.v1.IGetReplicationRequest | undefined,
      {} | undefined,
    ]
  >;
  getReplication(
    request: protos.google.cloud.netapp.v1.IGetReplicationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.netapp.v1.IReplication,
      protos.google.cloud.netapp.v1.IGetReplicationRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getReplication(
    request: protos.google.cloud.netapp.v1.IGetReplicationRequest,
    callback: Callback<
      protos.google.cloud.netapp.v1.IReplication,
      protos.google.cloud.netapp.v1.IGetReplicationRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getReplication(
    request?: protos.google.cloud.netapp.v1.IGetReplicationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.netapp.v1.IReplication,
          | protos.google.cloud.netapp.v1.IGetReplicationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.netapp.v1.IReplication,
      protos.google.cloud.netapp.v1.IGetReplicationRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IReplication,
      protos.google.cloud.netapp.v1.IGetReplicationRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getReplication(request, options, callback);
  }
  /**
   * Returns the description of the specified backup vault
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The backupVault resource name, in the format
   *   `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.netapp.v1.BackupVault|BackupVault}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.get_backup_vault.js</caption>
   * region_tag:netapp_v1_generated_NetApp_GetBackupVault_async
   */
  getBackupVault(
    request?: protos.google.cloud.netapp.v1.IGetBackupVaultRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackupVault,
      protos.google.cloud.netapp.v1.IGetBackupVaultRequest | undefined,
      {} | undefined,
    ]
  >;
  getBackupVault(
    request: protos.google.cloud.netapp.v1.IGetBackupVaultRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.netapp.v1.IBackupVault,
      protos.google.cloud.netapp.v1.IGetBackupVaultRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackupVault(
    request: protos.google.cloud.netapp.v1.IGetBackupVaultRequest,
    callback: Callback<
      protos.google.cloud.netapp.v1.IBackupVault,
      protos.google.cloud.netapp.v1.IGetBackupVaultRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackupVault(
    request?: protos.google.cloud.netapp.v1.IGetBackupVaultRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.netapp.v1.IBackupVault,
          | protos.google.cloud.netapp.v1.IGetBackupVaultRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.netapp.v1.IBackupVault,
      protos.google.cloud.netapp.v1.IGetBackupVaultRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackupVault,
      protos.google.cloud.netapp.v1.IGetBackupVaultRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getBackupVault(request, options, callback);
  }
  /**
   * Returns the description of the specified backup
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The backup resource name, in the format
   *   `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.netapp.v1.Backup|Backup}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.get_backup.js</caption>
   * region_tag:netapp_v1_generated_NetApp_GetBackup_async
   */
  getBackup(
    request?: protos.google.cloud.netapp.v1.IGetBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackup,
      protos.google.cloud.netapp.v1.IGetBackupRequest | undefined,
      {} | undefined,
    ]
  >;
  getBackup(
    request: protos.google.cloud.netapp.v1.IGetBackupRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.netapp.v1.IBackup,
      protos.google.cloud.netapp.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackup(
    request: protos.google.cloud.netapp.v1.IGetBackupRequest,
    callback: Callback<
      protos.google.cloud.netapp.v1.IBackup,
      protos.google.cloud.netapp.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackup(
    request?: protos.google.cloud.netapp.v1.IGetBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.netapp.v1.IBackup,
          protos.google.cloud.netapp.v1.IGetBackupRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.netapp.v1.IBackup,
      protos.google.cloud.netapp.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackup,
      protos.google.cloud.netapp.v1.IGetBackupRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getBackup(request, options, callback);
  }
  /**
   * Returns the description of the specified backup policy by backup_policy_id.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The backupPolicy resource name, in the format
   *   `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.netapp.v1.BackupPolicy|BackupPolicy}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.get_backup_policy.js</caption>
   * region_tag:netapp_v1_generated_NetApp_GetBackupPolicy_async
   */
  getBackupPolicy(
    request?: protos.google.cloud.netapp.v1.IGetBackupPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackupPolicy,
      protos.google.cloud.netapp.v1.IGetBackupPolicyRequest | undefined,
      {} | undefined,
    ]
  >;
  getBackupPolicy(
    request: protos.google.cloud.netapp.v1.IGetBackupPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.netapp.v1.IBackupPolicy,
      protos.google.cloud.netapp.v1.IGetBackupPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackupPolicy(
    request: protos.google.cloud.netapp.v1.IGetBackupPolicyRequest,
    callback: Callback<
      protos.google.cloud.netapp.v1.IBackupPolicy,
      protos.google.cloud.netapp.v1.IGetBackupPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackupPolicy(
    request?: protos.google.cloud.netapp.v1.IGetBackupPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.netapp.v1.IBackupPolicy,
          | protos.google.cloud.netapp.v1.IGetBackupPolicyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.netapp.v1.IBackupPolicy,
      protos.google.cloud.netapp.v1.IGetBackupPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackupPolicy,
      protos.google.cloud.netapp.v1.IGetBackupPolicyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getBackupPolicy(request, options, callback);
  }

  /**
   * Creates a new storage pool.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.storagePoolId
   *   Required. Id of the requesting storage pool. Must be unique within the
   *   parent resource. Must contain only letters, numbers, underscore and hyphen,
   *   with the first character a letter or underscore, the last a letter or
   *   underscore or a number, and a 63 character maximum.
   * @param {google.cloud.netapp.v1.StoragePool} request.storagePool
   *   Required. The required parameters to create a new storage pool.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_storage_pool.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateStoragePool_async
   */
  createStoragePool(
    request?: protos.google.cloud.netapp.v1.ICreateStoragePoolRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createStoragePool(
    request: protos.google.cloud.netapp.v1.ICreateStoragePoolRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createStoragePool(
    request: protos.google.cloud.netapp.v1.ICreateStoragePoolRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createStoragePool(
    request?: protos.google.cloud.netapp.v1.ICreateStoragePoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IStoragePool,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createStoragePool(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createStoragePool()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_storage_pool.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateStoragePool_async
   */
  async checkCreateStoragePoolProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.StoragePool,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createStoragePool,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.StoragePool,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Updates the storage pool properties with the full spec
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   StoragePool resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.netapp.v1.StoragePool} request.storagePool
   *   Required. The pool being updated
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_storage_pool.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateStoragePool_async
   */
  updateStoragePool(
    request?: protos.google.cloud.netapp.v1.IUpdateStoragePoolRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateStoragePool(
    request: protos.google.cloud.netapp.v1.IUpdateStoragePoolRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateStoragePool(
    request: protos.google.cloud.netapp.v1.IUpdateStoragePoolRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateStoragePool(
    request?: protos.google.cloud.netapp.v1.IUpdateStoragePoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IStoragePool,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IStoragePool,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'storage_pool.name': request.storagePool!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateStoragePool(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateStoragePool()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_storage_pool.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateStoragePool_async
   */
  async checkUpdateStoragePoolProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.StoragePool,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateStoragePool,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.StoragePool,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Warning! This operation will permanently delete the storage pool.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the storage pool
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_storage_pool.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteStoragePool_async
   */
  deleteStoragePool(
    request?: protos.google.cloud.netapp.v1.IDeleteStoragePoolRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteStoragePool(
    request: protos.google.cloud.netapp.v1.IDeleteStoragePoolRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteStoragePool(
    request: protos.google.cloud.netapp.v1.IDeleteStoragePoolRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteStoragePool(
    request?: protos.google.cloud.netapp.v1.IDeleteStoragePoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteStoragePool(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteStoragePool()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_storage_pool.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteStoragePool_async
   */
  async checkDeleteStoragePoolProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteStoragePool,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Volume in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.volumeId
   *   Required. Id of the requesting volume. Must be unique within the parent
   *   resource. Must contain only letters, numbers, underscore and hyphen, with
   *   the first character a letter or underscore, the last a letter or underscore
   *   or a number, and a 63 character maximum.
   * @param {google.cloud.netapp.v1.Volume} request.volume
   *   Required. The volume being created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_volume.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateVolume_async
   */
  createVolume(
    request?: protos.google.cloud.netapp.v1.ICreateVolumeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createVolume(
    request: protos.google.cloud.netapp.v1.ICreateVolumeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createVolume(
    request: protos.google.cloud.netapp.v1.ICreateVolumeRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createVolume(
    request?: protos.google.cloud.netapp.v1.ICreateVolumeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IVolume,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createVolume(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createVolume()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_volume.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateVolume_async
   */
  async checkCreateVolumeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Volume,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createVolume,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Volume,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Volume resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.netapp.v1.Volume} request.volume
   *   Required. The volume being updated
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_volume.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateVolume_async
   */
  updateVolume(
    request?: protos.google.cloud.netapp.v1.IUpdateVolumeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateVolume(
    request: protos.google.cloud.netapp.v1.IUpdateVolumeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateVolume(
    request: protos.google.cloud.netapp.v1.IUpdateVolumeRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateVolume(
    request?: protos.google.cloud.netapp.v1.IUpdateVolumeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IVolume,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'volume.name': request.volume!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateVolume(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateVolume()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_volume.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateVolume_async
   */
  async checkUpdateVolumeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Volume,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateVolume,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Volume,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the volume
   * @param {boolean} request.force
   *   If this field is set as true, CCFE will not block the volume resource
   *   deletion even if it has any snapshots resource. (Otherwise, the request
   *   will only work if the volume has no snapshots.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_volume.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteVolume_async
   */
  deleteVolume(
    request?: protos.google.cloud.netapp.v1.IDeleteVolumeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteVolume(
    request: protos.google.cloud.netapp.v1.IDeleteVolumeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteVolume(
    request: protos.google.cloud.netapp.v1.IDeleteVolumeRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteVolume(
    request?: protos.google.cloud.netapp.v1.IDeleteVolumeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteVolume(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteVolume()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_volume.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteVolume_async
   */
  async checkDeleteVolumeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteVolume,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Revert an existing volume to a specified snapshot.
   * Warning! This operation will permanently revert all changes made after the
   * snapshot was created.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the volume, in the format of
   *   projects/{project_id}/locations/{location}/volumes/{volume_id}.
   * @param {string} request.snapshotId
   *   Required. The snapshot resource ID, in the format 'my-snapshot', where the
   *   specified ID is the {snapshot_id} of the fully qualified name like
   *   projects/{project_id}/locations/{location_id}/volumes/{volume_id}/snapshots/{snapshot_id}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.revert_volume.js</caption>
   * region_tag:netapp_v1_generated_NetApp_RevertVolume_async
   */
  revertVolume(
    request?: protos.google.cloud.netapp.v1.IRevertVolumeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  revertVolume(
    request: protos.google.cloud.netapp.v1.IRevertVolumeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  revertVolume(
    request: protos.google.cloud.netapp.v1.IRevertVolumeRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  revertVolume(
    request?: protos.google.cloud.netapp.v1.IRevertVolumeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IVolume,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IVolume,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.revertVolume(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `revertVolume()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.revert_volume.js</caption>
   * region_tag:netapp_v1_generated_NetApp_RevertVolume_async
   */
  async checkRevertVolumeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Volume,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.revertVolume,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Volume,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Create a new snapshot for a volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The NetApp volume to create the snapshots of, in the format
   *   `projects/{project_id}/locations/{location}/volumes/{volume_id}`
   * @param {google.cloud.netapp.v1.Snapshot} request.snapshot
   *   Required. A snapshot resource
   * @param {string} request.snapshotId
   *   Required. ID of the snapshot to create. Must be unique within the parent
   *   resource. Must contain only letters, numbers, underscore and hyphen, with
   *   the first character a letter or underscore, the last a letter or underscore
   *   or a number, and a 63 character maximum.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_snapshot.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateSnapshot_async
   */
  createSnapshot(
    request?: protos.google.cloud.netapp.v1.ICreateSnapshotRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createSnapshot(
    request: protos.google.cloud.netapp.v1.ICreateSnapshotRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSnapshot(
    request: protos.google.cloud.netapp.v1.ICreateSnapshotRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSnapshot(
    request?: protos.google.cloud.netapp.v1.ICreateSnapshotRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.ISnapshot,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createSnapshot(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createSnapshot()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_snapshot.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateSnapshot_async
   */
  async checkCreateSnapshotProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Snapshot,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createSnapshot,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Snapshot,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a snapshot.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The snapshot resource name, in the format
   *   `projects/* /locations/* /volumes/* /snapshots/{snapshot_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_snapshot.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteSnapshot_async
   */
  deleteSnapshot(
    request?: protos.google.cloud.netapp.v1.IDeleteSnapshotRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteSnapshot(
    request: protos.google.cloud.netapp.v1.IDeleteSnapshotRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSnapshot(
    request: protos.google.cloud.netapp.v1.IDeleteSnapshotRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSnapshot(
    request?: protos.google.cloud.netapp.v1.IDeleteSnapshotRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteSnapshot(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteSnapshot()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_snapshot.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteSnapshot_async
   */
  async checkDeleteSnapshotProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteSnapshot,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Updates the settings of a specific snapshot.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update.  At least one path must be supplied in
   *   this field.
   * @param {google.cloud.netapp.v1.Snapshot} request.snapshot
   *   Required. A snapshot resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_snapshot.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateSnapshot_async
   */
  updateSnapshot(
    request?: protos.google.cloud.netapp.v1.IUpdateSnapshotRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateSnapshot(
    request: protos.google.cloud.netapp.v1.IUpdateSnapshotRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSnapshot(
    request: protos.google.cloud.netapp.v1.IUpdateSnapshotRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSnapshot(
    request?: protos.google.cloud.netapp.v1.IUpdateSnapshotRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.ISnapshot,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.ISnapshot,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'snapshot.name': request.snapshot!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateSnapshot(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateSnapshot()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_snapshot.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateSnapshot_async
   */
  async checkUpdateSnapshotProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Snapshot,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateSnapshot,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Snapshot,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * CreateActiveDirectory
   * Creates the active directory specified in the request.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {google.cloud.netapp.v1.ActiveDirectory} request.activeDirectory
   *   Required. Fields of the to be created active directory.
   * @param {string} request.activeDirectoryId
   *   Required. ID of the active directory to create. Must be unique within the
   *   parent resource. Must contain only letters, numbers, underscore and hyphen,
   *   with the first character a letter or underscore, the last a letter or
   *   underscore or a number, and a 63 character maximum.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_active_directory.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateActiveDirectory_async
   */
  createActiveDirectory(
    request?: protos.google.cloud.netapp.v1.ICreateActiveDirectoryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createActiveDirectory(
    request: protos.google.cloud.netapp.v1.ICreateActiveDirectoryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createActiveDirectory(
    request: protos.google.cloud.netapp.v1.ICreateActiveDirectoryRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createActiveDirectory(
    request?: protos.google.cloud.netapp.v1.ICreateActiveDirectoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IActiveDirectory,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createActiveDirectory(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createActiveDirectory()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_active_directory.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateActiveDirectory_async
   */
  async checkCreateActiveDirectoryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.ActiveDirectory,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createActiveDirectory,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.ActiveDirectory,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Update the parameters of an active directories.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Active Directory resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.netapp.v1.ActiveDirectory} request.activeDirectory
   *   Required. The volume being updated
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_active_directory.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateActiveDirectory_async
   */
  updateActiveDirectory(
    request?: protos.google.cloud.netapp.v1.IUpdateActiveDirectoryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateActiveDirectory(
    request: protos.google.cloud.netapp.v1.IUpdateActiveDirectoryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateActiveDirectory(
    request: protos.google.cloud.netapp.v1.IUpdateActiveDirectoryRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateActiveDirectory(
    request?: protos.google.cloud.netapp.v1.IUpdateActiveDirectoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IActiveDirectory,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IActiveDirectory,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'active_directory.name': request.activeDirectory!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateActiveDirectory(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateActiveDirectory()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_active_directory.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateActiveDirectory_async
   */
  async checkUpdateActiveDirectoryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.ActiveDirectory,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateActiveDirectory,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.ActiveDirectory,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Delete the active directory specified in the request.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the active directory.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_active_directory.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteActiveDirectory_async
   */
  deleteActiveDirectory(
    request?: protos.google.cloud.netapp.v1.IDeleteActiveDirectoryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteActiveDirectory(
    request: protos.google.cloud.netapp.v1.IDeleteActiveDirectoryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteActiveDirectory(
    request: protos.google.cloud.netapp.v1.IDeleteActiveDirectoryRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteActiveDirectory(
    request?: protos.google.cloud.netapp.v1.IDeleteActiveDirectoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteActiveDirectory(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteActiveDirectory()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_active_directory.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteActiveDirectory_async
   */
  async checkDeleteActiveDirectoryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteActiveDirectory,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new KMS config.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.kmsConfigId
   *   Required. Id of the requesting KmsConfig. Must be unique within the parent
   *   resource. Must contain only letters, numbers, underscore and hyphen, with
   *   the first character a letter or underscore, the last a letter or underscore
   *   or a number, and a 63 character maximum.
   * @param {google.cloud.netapp.v1.KmsConfig} request.kmsConfig
   *   Required. The required parameters to create a new KmsConfig.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_kms_config.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateKmsConfig_async
   */
  createKmsConfig(
    request?: protos.google.cloud.netapp.v1.ICreateKmsConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createKmsConfig(
    request: protos.google.cloud.netapp.v1.ICreateKmsConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createKmsConfig(
    request: protos.google.cloud.netapp.v1.ICreateKmsConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createKmsConfig(
    request?: protos.google.cloud.netapp.v1.ICreateKmsConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IKmsConfig,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createKmsConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createKmsConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_kms_config.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateKmsConfig_async
   */
  async checkCreateKmsConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.KmsConfig,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createKmsConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.KmsConfig,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Updates the Kms config properties with the full spec
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   KmsConfig resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.netapp.v1.KmsConfig} request.kmsConfig
   *   Required. The KmsConfig being updated
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_kms_config.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateKmsConfig_async
   */
  updateKmsConfig(
    request?: protos.google.cloud.netapp.v1.IUpdateKmsConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateKmsConfig(
    request: protos.google.cloud.netapp.v1.IUpdateKmsConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateKmsConfig(
    request: protos.google.cloud.netapp.v1.IUpdateKmsConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateKmsConfig(
    request?: protos.google.cloud.netapp.v1.IUpdateKmsConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IKmsConfig,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'kms_config.name': request.kmsConfig!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateKmsConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateKmsConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_kms_config.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateKmsConfig_async
   */
  async checkUpdateKmsConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.KmsConfig,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateKmsConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.KmsConfig,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Encrypt the existing volumes without CMEK encryption with the desired the
   * KMS config for the whole region.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the KmsConfig.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.encrypt_volumes.js</caption>
   * region_tag:netapp_v1_generated_NetApp_EncryptVolumes_async
   */
  encryptVolumes(
    request?: protos.google.cloud.netapp.v1.IEncryptVolumesRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  encryptVolumes(
    request: protos.google.cloud.netapp.v1.IEncryptVolumesRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  encryptVolumes(
    request: protos.google.cloud.netapp.v1.IEncryptVolumesRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  encryptVolumes(
    request?: protos.google.cloud.netapp.v1.IEncryptVolumesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IKmsConfig,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IKmsConfig,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.encryptVolumes(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `encryptVolumes()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.encrypt_volumes.js</caption>
   * region_tag:netapp_v1_generated_NetApp_EncryptVolumes_async
   */
  async checkEncryptVolumesProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.KmsConfig,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.encryptVolumes,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.KmsConfig,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Warning! This operation will permanently delete the Kms config.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the KmsConfig.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_kms_config.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteKmsConfig_async
   */
  deleteKmsConfig(
    request?: protos.google.cloud.netapp.v1.IDeleteKmsConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteKmsConfig(
    request: protos.google.cloud.netapp.v1.IDeleteKmsConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteKmsConfig(
    request: protos.google.cloud.netapp.v1.IDeleteKmsConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteKmsConfig(
    request?: protos.google.cloud.netapp.v1.IDeleteKmsConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteKmsConfig(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteKmsConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_kms_config.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteKmsConfig_async
   */
  async checkDeleteKmsConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteKmsConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Create a new replication for a volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The NetApp volume to create the replications of, in the format
   *   `projects/{project_id}/locations/{location}/volumes/{volume_id}`
   * @param {google.cloud.netapp.v1.Replication} request.replication
   *   Required. A replication resource
   * @param {string} request.replicationId
   *   Required. ID of the replication to create. Must be unique within the parent
   *   resource. Must contain only letters, numbers, underscore and hyphen, with
   *   the first character a letter or underscore, the last a letter or underscore
   *   or a number, and a 63 character maximum.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateReplication_async
   */
  createReplication(
    request?: protos.google.cloud.netapp.v1.ICreateReplicationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createReplication(
    request: protos.google.cloud.netapp.v1.ICreateReplicationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReplication(
    request: protos.google.cloud.netapp.v1.ICreateReplicationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createReplication(
    request?: protos.google.cloud.netapp.v1.ICreateReplicationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IReplication,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createReplication(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createReplication()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateReplication_async
   */
  async checkCreateReplicationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Replication,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createReplication,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Replication,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a replication.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The replication resource name, in the format
   *   `projects/* /locations/* /volumes/* /replications/{replication_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteReplication_async
   */
  deleteReplication(
    request?: protos.google.cloud.netapp.v1.IDeleteReplicationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteReplication(
    request: protos.google.cloud.netapp.v1.IDeleteReplicationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteReplication(
    request: protos.google.cloud.netapp.v1.IDeleteReplicationRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteReplication(
    request?: protos.google.cloud.netapp.v1.IDeleteReplicationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteReplication(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteReplication()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteReplication_async
   */
  async checkDeleteReplicationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteReplication,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Updates the settings of a specific replication.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update.  At least one path must be supplied in
   *   this field.
   * @param {google.cloud.netapp.v1.Replication} request.replication
   *   Required. A replication resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateReplication_async
   */
  updateReplication(
    request?: protos.google.cloud.netapp.v1.IUpdateReplicationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateReplication(
    request: protos.google.cloud.netapp.v1.IUpdateReplicationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateReplication(
    request: protos.google.cloud.netapp.v1.IUpdateReplicationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateReplication(
    request?: protos.google.cloud.netapp.v1.IUpdateReplicationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IReplication,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'replication.name': request.replication!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateReplication(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateReplication()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateReplication_async
   */
  async checkUpdateReplicationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Replication,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateReplication,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Replication,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Stop Cross Region Replication.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the replication, in the format of
   *   projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
   * @param {boolean} request.force
   *   Indicates whether to stop replication forcefully while data transfer is in
   *   progress.
   *   Warning! if force is true, this will abort any current transfers
   *   and can lead to data loss due to partial transfer.
   *   If force is false, stop replication will fail while data transfer is in
   *   progress and you will need to retry later.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.stop_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_StopReplication_async
   */
  stopReplication(
    request?: protos.google.cloud.netapp.v1.IStopReplicationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  stopReplication(
    request: protos.google.cloud.netapp.v1.IStopReplicationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  stopReplication(
    request: protos.google.cloud.netapp.v1.IStopReplicationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  stopReplication(
    request?: protos.google.cloud.netapp.v1.IStopReplicationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IReplication,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.stopReplication(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `stopReplication()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.stop_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_StopReplication_async
   */
  async checkStopReplicationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Replication,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.stopReplication,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Replication,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Resume Cross Region Replication.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the replication, in the format of
   *   projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.resume_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ResumeReplication_async
   */
  resumeReplication(
    request?: protos.google.cloud.netapp.v1.IResumeReplicationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  resumeReplication(
    request: protos.google.cloud.netapp.v1.IResumeReplicationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  resumeReplication(
    request: protos.google.cloud.netapp.v1.IResumeReplicationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  resumeReplication(
    request?: protos.google.cloud.netapp.v1.IResumeReplicationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IReplication,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.resumeReplication(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `resumeReplication()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.resume_replication.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ResumeReplication_async
   */
  async checkResumeReplicationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Replication,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.resumeReplication,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Replication,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Reverses direction of replication. Source becomes destination and
   * destination becomes source.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the replication, in the format of
   *   projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.reverse_replication_direction.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ReverseReplicationDirection_async
   */
  reverseReplicationDirection(
    request?: protos.google.cloud.netapp.v1.IReverseReplicationDirectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  reverseReplicationDirection(
    request: protos.google.cloud.netapp.v1.IReverseReplicationDirectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  reverseReplicationDirection(
    request: protos.google.cloud.netapp.v1.IReverseReplicationDirectionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  reverseReplicationDirection(
    request?: protos.google.cloud.netapp.v1.IReverseReplicationDirectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IReplication,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IReplication,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.reverseReplicationDirection(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `reverseReplicationDirection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.reverse_replication_direction.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ReverseReplicationDirection_async
   */
  async checkReverseReplicationDirectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Replication,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.reverseReplicationDirection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Replication,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Creates new backup vault
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location to create the backup vaults, in the format
   *   `projects/{project_id}/locations/{location}`
   * @param {string} request.backupVaultId
   *   Required. The ID to use for the backupVault.
   *   The ID must be unique within the specified location.
   *   Must contain only letters, numbers, underscore and hyphen, with the first
   *   character a letter or underscore, the last a letter or underscore or a
   *   number, and a 63 character maximum.
   * @param {google.cloud.netapp.v1.BackupVault} request.backupVault
   *   Required. A backupVault resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_backup_vault.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateBackupVault_async
   */
  createBackupVault(
    request?: protos.google.cloud.netapp.v1.ICreateBackupVaultRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createBackupVault(
    request: protos.google.cloud.netapp.v1.ICreateBackupVaultRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackupVault(
    request: protos.google.cloud.netapp.v1.ICreateBackupVaultRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackupVault(
    request?: protos.google.cloud.netapp.v1.ICreateBackupVaultRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IBackupVault,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createBackupVault(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createBackupVault()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_backup_vault.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateBackupVault_async
   */
  async checkCreateBackupVaultProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.BackupVault,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createBackupVault,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.BackupVault,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Updates the settings of a specific backup vault.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Backup resource to be updated.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.netapp.v1.BackupVault} request.backupVault
   *   Required. The backupVault being updated
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_backup_vault.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateBackupVault_async
   */
  updateBackupVault(
    request?: protos.google.cloud.netapp.v1.IUpdateBackupVaultRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateBackupVault(
    request: protos.google.cloud.netapp.v1.IUpdateBackupVaultRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackupVault(
    request: protos.google.cloud.netapp.v1.IUpdateBackupVaultRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackupVault(
    request?: protos.google.cloud.netapp.v1.IUpdateBackupVaultRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IBackupVault,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackupVault,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'backup_vault.name': request.backupVault!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateBackupVault(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateBackupVault()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_backup_vault.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateBackupVault_async
   */
  async checkUpdateBackupVaultProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.BackupVault,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateBackupVault,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.BackupVault,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Warning! This operation will permanently delete the backup vault.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The backupVault resource name, in the format
   *   `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_backup_vault.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteBackupVault_async
   */
  deleteBackupVault(
    request?: protos.google.cloud.netapp.v1.IDeleteBackupVaultRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteBackupVault(
    request: protos.google.cloud.netapp.v1.IDeleteBackupVaultRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackupVault(
    request: protos.google.cloud.netapp.v1.IDeleteBackupVaultRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackupVault(
    request?: protos.google.cloud.netapp.v1.IDeleteBackupVaultRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteBackupVault(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteBackupVault()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_backup_vault.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteBackupVault_async
   */
  async checkDeleteBackupVaultProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteBackupVault,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Creates a backup from the volume specified in the request
   * The backup can be created from the given snapshot if specified in the
   * request. If no snapshot specified, there'll be a new snapshot taken to
   * initiate the backup creation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The NetApp backupVault to create the backups of, in the format
   *   `projects/* /locations/* /backupVaults/{backup_vault_id}`
   * @param {string} request.backupId
   *   Required. The ID to use for the backup.
   *   The ID must be unique within the specified backupVault.
   *   Must contain only letters, numbers, underscore and hyphen, with the first
   *   character a letter or underscore, the last a letter or underscore or a
   *   number, and a 63 character maximum.
   * @param {google.cloud.netapp.v1.Backup} request.backup
   *   Required. A backup resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_backup.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateBackup_async
   */
  createBackup(
    request?: protos.google.cloud.netapp.v1.ICreateBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createBackup(
    request: protos.google.cloud.netapp.v1.ICreateBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackup(
    request: protos.google.cloud.netapp.v1.ICreateBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackup(
    request?: protos.google.cloud.netapp.v1.ICreateBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IBackup,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_backup.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateBackup_async
   */
  async checkCreateBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Backup,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Backup,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Warning! This operation will permanently delete the backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The backup resource name, in the format
   *   `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}/backups/{backup_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_backup.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteBackup_async
   */
  deleteBackup(
    request?: protos.google.cloud.netapp.v1.IDeleteBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteBackup(
    request: protos.google.cloud.netapp.v1.IDeleteBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackup(
    request: protos.google.cloud.netapp.v1.IDeleteBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackup(
    request?: protos.google.cloud.netapp.v1.IDeleteBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_backup.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteBackup_async
   */
  async checkDeleteBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Update backup with full spec.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Backup resource to be updated.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.netapp.v1.Backup} request.backup
   *   Required. The backup being updated
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_backup.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateBackup_async
   */
  updateBackup(
    request?: protos.google.cloud.netapp.v1.IUpdateBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateBackup(
    request: protos.google.cloud.netapp.v1.IUpdateBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackup(
    request: protos.google.cloud.netapp.v1.IUpdateBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackup(
    request?: protos.google.cloud.netapp.v1.IUpdateBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IBackup,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackup,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'backup.name': request.backup!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_backup.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateBackup_async
   */
  async checkUpdateBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.Backup,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.Backup,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Creates new backup policy
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location to create the backup policies of, in the format
   *   `projects/{project_id}/locations/{location}`
   * @param {google.cloud.netapp.v1.BackupPolicy} request.backupPolicy
   *   Required. A backupPolicy resource
   * @param {string} request.backupPolicyId
   *   Required. The ID to use for the backup policy.
   *   The ID must be unique within the specified location.
   *   Must contain only letters, numbers, underscore and hyphen, with the first
   *   character a letter or underscore, the last a letter or underscore or a
   *   number, and a 63 character maximum.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_backup_policy.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateBackupPolicy_async
   */
  createBackupPolicy(
    request?: protos.google.cloud.netapp.v1.ICreateBackupPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createBackupPolicy(
    request: protos.google.cloud.netapp.v1.ICreateBackupPolicyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackupPolicy(
    request: protos.google.cloud.netapp.v1.ICreateBackupPolicyRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackupPolicy(
    request?: protos.google.cloud.netapp.v1.ICreateBackupPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IBackupPolicy,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createBackupPolicy(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createBackupPolicy()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.create_backup_policy.js</caption>
   * region_tag:netapp_v1_generated_NetApp_CreateBackupPolicy_async
   */
  async checkCreateBackupPolicyProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.BackupPolicy,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createBackupPolicy,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.BackupPolicy,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Updates settings of a specific backup policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Backup Policy resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.netapp.v1.BackupPolicy} request.backupPolicy
   *   Required. The backup policy being updated
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_backup_policy.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateBackupPolicy_async
   */
  updateBackupPolicy(
    request?: protos.google.cloud.netapp.v1.IUpdateBackupPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateBackupPolicy(
    request: protos.google.cloud.netapp.v1.IUpdateBackupPolicyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackupPolicy(
    request: protos.google.cloud.netapp.v1.IUpdateBackupPolicyRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateBackupPolicy(
    request?: protos.google.cloud.netapp.v1.IUpdateBackupPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.netapp.v1.IBackupPolicy,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.netapp.v1.IBackupPolicy,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'backup_policy.name': request.backupPolicy!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateBackupPolicy(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateBackupPolicy()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.update_backup_policy.js</caption>
   * region_tag:netapp_v1_generated_NetApp_UpdateBackupPolicy_async
   */
  async checkUpdateBackupPolicyProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.netapp.v1.BackupPolicy,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateBackupPolicy,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.netapp.v1.BackupPolicy,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Warning! This operation will permanently delete the backup policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The backup policy resource name, in the format
   *   `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_backup_policy.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteBackupPolicy_async
   */
  deleteBackupPolicy(
    request?: protos.google.cloud.netapp.v1.IDeleteBackupPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteBackupPolicy(
    request: protos.google.cloud.netapp.v1.IDeleteBackupPolicyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackupPolicy(
    request: protos.google.cloud.netapp.v1.IDeleteBackupPolicyRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackupPolicy(
    request?: protos.google.cloud.netapp.v1.IDeleteBackupPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.netapp.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.netapp.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteBackupPolicy(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteBackupPolicy()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.delete_backup_policy.js</caption>
   * region_tag:netapp_v1_generated_NetApp_DeleteBackupPolicy_async
   */
  async checkDeleteBackupPolicyProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteBackupPolicy,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.netapp.v1.OperationMetadata
    >;
  }
  /**
   * Returns descriptions of all storage pools owned by the caller.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} [request.orderBy]
   *   Optional. Sort results. Supported values are "name", "name desc" or ""
   *   (unsorted).
   * @param {string} [request.filter]
   *   Optional. List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.netapp.v1.StoragePool|StoragePool}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listStoragePoolsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listStoragePools(
    request?: protos.google.cloud.netapp.v1.IListStoragePoolsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IStoragePool[],
      protos.google.cloud.netapp.v1.IListStoragePoolsRequest | null,
      protos.google.cloud.netapp.v1.IListStoragePoolsResponse,
    ]
  >;
  listStoragePools(
    request: protos.google.cloud.netapp.v1.IListStoragePoolsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListStoragePoolsRequest,
      | protos.google.cloud.netapp.v1.IListStoragePoolsResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IStoragePool
    >
  ): void;
  listStoragePools(
    request: protos.google.cloud.netapp.v1.IListStoragePoolsRequest,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListStoragePoolsRequest,
      | protos.google.cloud.netapp.v1.IListStoragePoolsResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IStoragePool
    >
  ): void;
  listStoragePools(
    request?: protos.google.cloud.netapp.v1.IListStoragePoolsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.netapp.v1.IListStoragePoolsRequest,
          | protos.google.cloud.netapp.v1.IListStoragePoolsResponse
          | null
          | undefined,
          protos.google.cloud.netapp.v1.IStoragePool
        >,
    callback?: PaginationCallback<
      protos.google.cloud.netapp.v1.IListStoragePoolsRequest,
      | protos.google.cloud.netapp.v1.IListStoragePoolsResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IStoragePool
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IStoragePool[],
      protos.google.cloud.netapp.v1.IListStoragePoolsRequest | null,
      protos.google.cloud.netapp.v1.IListStoragePoolsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listStoragePools(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} [request.orderBy]
   *   Optional. Sort results. Supported values are "name", "name desc" or ""
   *   (unsorted).
   * @param {string} [request.filter]
   *   Optional. List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.netapp.v1.StoragePool|StoragePool} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listStoragePoolsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listStoragePoolsStream(
    request?: protos.google.cloud.netapp.v1.IListStoragePoolsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listStoragePools'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listStoragePools.createStream(
      this.innerApiCalls.listStoragePools as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listStoragePools`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} [request.orderBy]
   *   Optional. Sort results. Supported values are "name", "name desc" or ""
   *   (unsorted).
   * @param {string} [request.filter]
   *   Optional. List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.netapp.v1.StoragePool|StoragePool}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.list_storage_pools.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ListStoragePools_async
   */
  listStoragePoolsAsync(
    request?: protos.google.cloud.netapp.v1.IListStoragePoolsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.netapp.v1.IStoragePool> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listStoragePools'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listStoragePools.asyncIterate(
      this.innerApiCalls['listStoragePools'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.netapp.v1.IStoragePool>;
  }
  /**
   * Lists Volumes in a given project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListVolumesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.netapp.v1.Volume|Volume}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listVolumesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listVolumes(
    request?: protos.google.cloud.netapp.v1.IListVolumesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IVolume[],
      protos.google.cloud.netapp.v1.IListVolumesRequest | null,
      protos.google.cloud.netapp.v1.IListVolumesResponse,
    ]
  >;
  listVolumes(
    request: protos.google.cloud.netapp.v1.IListVolumesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListVolumesRequest,
      protos.google.cloud.netapp.v1.IListVolumesResponse | null | undefined,
      protos.google.cloud.netapp.v1.IVolume
    >
  ): void;
  listVolumes(
    request: protos.google.cloud.netapp.v1.IListVolumesRequest,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListVolumesRequest,
      protos.google.cloud.netapp.v1.IListVolumesResponse | null | undefined,
      protos.google.cloud.netapp.v1.IVolume
    >
  ): void;
  listVolumes(
    request?: protos.google.cloud.netapp.v1.IListVolumesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.netapp.v1.IListVolumesRequest,
          protos.google.cloud.netapp.v1.IListVolumesResponse | null | undefined,
          protos.google.cloud.netapp.v1.IVolume
        >,
    callback?: PaginationCallback<
      protos.google.cloud.netapp.v1.IListVolumesRequest,
      protos.google.cloud.netapp.v1.IListVolumesResponse | null | undefined,
      protos.google.cloud.netapp.v1.IVolume
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IVolume[],
      protos.google.cloud.netapp.v1.IListVolumesRequest | null,
      protos.google.cloud.netapp.v1.IListVolumesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listVolumes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListVolumesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.netapp.v1.Volume|Volume} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listVolumesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listVolumesStream(
    request?: protos.google.cloud.netapp.v1.IListVolumesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVolumes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVolumes.createStream(
      this.innerApiCalls.listVolumes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listVolumes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListVolumesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.netapp.v1.Volume|Volume}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.list_volumes.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ListVolumes_async
   */
  listVolumesAsync(
    request?: protos.google.cloud.netapp.v1.IListVolumesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.netapp.v1.IVolume> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVolumes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVolumes.asyncIterate(
      this.innerApiCalls['listVolumes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.netapp.v1.IVolume>;
  }
  /**
   * Returns descriptions of all snapshots for a volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The volume for which to retrieve snapshot information,
   *   in the format
   *   `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.netapp.v1.Snapshot|Snapshot}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSnapshotsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSnapshots(
    request?: protos.google.cloud.netapp.v1.IListSnapshotsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.ISnapshot[],
      protos.google.cloud.netapp.v1.IListSnapshotsRequest | null,
      protos.google.cloud.netapp.v1.IListSnapshotsResponse,
    ]
  >;
  listSnapshots(
    request: protos.google.cloud.netapp.v1.IListSnapshotsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListSnapshotsRequest,
      protos.google.cloud.netapp.v1.IListSnapshotsResponse | null | undefined,
      protos.google.cloud.netapp.v1.ISnapshot
    >
  ): void;
  listSnapshots(
    request: protos.google.cloud.netapp.v1.IListSnapshotsRequest,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListSnapshotsRequest,
      protos.google.cloud.netapp.v1.IListSnapshotsResponse | null | undefined,
      protos.google.cloud.netapp.v1.ISnapshot
    >
  ): void;
  listSnapshots(
    request?: protos.google.cloud.netapp.v1.IListSnapshotsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.netapp.v1.IListSnapshotsRequest,
          | protos.google.cloud.netapp.v1.IListSnapshotsResponse
          | null
          | undefined,
          protos.google.cloud.netapp.v1.ISnapshot
        >,
    callback?: PaginationCallback<
      protos.google.cloud.netapp.v1.IListSnapshotsRequest,
      protos.google.cloud.netapp.v1.IListSnapshotsResponse | null | undefined,
      protos.google.cloud.netapp.v1.ISnapshot
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.ISnapshot[],
      protos.google.cloud.netapp.v1.IListSnapshotsRequest | null,
      protos.google.cloud.netapp.v1.IListSnapshotsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSnapshots(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The volume for which to retrieve snapshot information,
   *   in the format
   *   `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.netapp.v1.Snapshot|Snapshot} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSnapshotsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSnapshotsStream(
    request?: protos.google.cloud.netapp.v1.IListSnapshotsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSnapshots'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSnapshots.createStream(
      this.innerApiCalls.listSnapshots as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSnapshots`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The volume for which to retrieve snapshot information,
   *   in the format
   *   `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.netapp.v1.Snapshot|Snapshot}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.list_snapshots.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ListSnapshots_async
   */
  listSnapshotsAsync(
    request?: protos.google.cloud.netapp.v1.IListSnapshotsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.netapp.v1.ISnapshot> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSnapshots'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSnapshots.asyncIterate(
      this.innerApiCalls['listSnapshots'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.netapp.v1.ISnapshot>;
  }
  /**
   * Lists active directories.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListActiveDirectoriesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.netapp.v1.ActiveDirectory|ActiveDirectory}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listActiveDirectoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listActiveDirectories(
    request?: protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IActiveDirectory[],
      protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest | null,
      protos.google.cloud.netapp.v1.IListActiveDirectoriesResponse,
    ]
  >;
  listActiveDirectories(
    request: protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest,
      | protos.google.cloud.netapp.v1.IListActiveDirectoriesResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IActiveDirectory
    >
  ): void;
  listActiveDirectories(
    request: protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest,
      | protos.google.cloud.netapp.v1.IListActiveDirectoriesResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IActiveDirectory
    >
  ): void;
  listActiveDirectories(
    request?: protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest,
          | protos.google.cloud.netapp.v1.IListActiveDirectoriesResponse
          | null
          | undefined,
          protos.google.cloud.netapp.v1.IActiveDirectory
        >,
    callback?: PaginationCallback<
      protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest,
      | protos.google.cloud.netapp.v1.IListActiveDirectoriesResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IActiveDirectory
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IActiveDirectory[],
      protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest | null,
      protos.google.cloud.netapp.v1.IListActiveDirectoriesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listActiveDirectories(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListActiveDirectoriesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.netapp.v1.ActiveDirectory|ActiveDirectory} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listActiveDirectoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listActiveDirectoriesStream(
    request?: protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listActiveDirectories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listActiveDirectories.createStream(
      this.innerApiCalls.listActiveDirectories as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listActiveDirectories`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListActiveDirectoriesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.netapp.v1.ActiveDirectory|ActiveDirectory}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.list_active_directories.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ListActiveDirectories_async
   */
  listActiveDirectoriesAsync(
    request?: protos.google.cloud.netapp.v1.IListActiveDirectoriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.netapp.v1.IActiveDirectory> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listActiveDirectories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listActiveDirectories.asyncIterate(
      this.innerApiCalls['listActiveDirectories'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.netapp.v1.IActiveDirectory>;
  }
  /**
   * Returns descriptions of all KMS configs owned by the caller.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.netapp.v1.KmsConfig|KmsConfig}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listKmsConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listKmsConfigs(
    request?: protos.google.cloud.netapp.v1.IListKmsConfigsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IKmsConfig[],
      protos.google.cloud.netapp.v1.IListKmsConfigsRequest | null,
      protos.google.cloud.netapp.v1.IListKmsConfigsResponse,
    ]
  >;
  listKmsConfigs(
    request: protos.google.cloud.netapp.v1.IListKmsConfigsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListKmsConfigsRequest,
      protos.google.cloud.netapp.v1.IListKmsConfigsResponse | null | undefined,
      protos.google.cloud.netapp.v1.IKmsConfig
    >
  ): void;
  listKmsConfigs(
    request: protos.google.cloud.netapp.v1.IListKmsConfigsRequest,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListKmsConfigsRequest,
      protos.google.cloud.netapp.v1.IListKmsConfigsResponse | null | undefined,
      protos.google.cloud.netapp.v1.IKmsConfig
    >
  ): void;
  listKmsConfigs(
    request?: protos.google.cloud.netapp.v1.IListKmsConfigsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.netapp.v1.IListKmsConfigsRequest,
          | protos.google.cloud.netapp.v1.IListKmsConfigsResponse
          | null
          | undefined,
          protos.google.cloud.netapp.v1.IKmsConfig
        >,
    callback?: PaginationCallback<
      protos.google.cloud.netapp.v1.IListKmsConfigsRequest,
      protos.google.cloud.netapp.v1.IListKmsConfigsResponse | null | undefined,
      protos.google.cloud.netapp.v1.IKmsConfig
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IKmsConfig[],
      protos.google.cloud.netapp.v1.IListKmsConfigsRequest | null,
      protos.google.cloud.netapp.v1.IListKmsConfigsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listKmsConfigs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.netapp.v1.KmsConfig|KmsConfig} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listKmsConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listKmsConfigsStream(
    request?: protos.google.cloud.netapp.v1.IListKmsConfigsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listKmsConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listKmsConfigs.createStream(
      this.innerApiCalls.listKmsConfigs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listKmsConfigs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.netapp.v1.KmsConfig|KmsConfig}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.list_kms_configs.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ListKmsConfigs_async
   */
  listKmsConfigsAsync(
    request?: protos.google.cloud.netapp.v1.IListKmsConfigsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.netapp.v1.IKmsConfig> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listKmsConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listKmsConfigs.asyncIterate(
      this.innerApiCalls['listKmsConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.netapp.v1.IKmsConfig>;
  }
  /**
   * Returns descriptions of all replications for a volume.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The volume for which to retrieve replication information,
   *   in the format
   *   `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.netapp.v1.Replication|Replication}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listReplicationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReplications(
    request?: protos.google.cloud.netapp.v1.IListReplicationsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IReplication[],
      protos.google.cloud.netapp.v1.IListReplicationsRequest | null,
      protos.google.cloud.netapp.v1.IListReplicationsResponse,
    ]
  >;
  listReplications(
    request: protos.google.cloud.netapp.v1.IListReplicationsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListReplicationsRequest,
      | protos.google.cloud.netapp.v1.IListReplicationsResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IReplication
    >
  ): void;
  listReplications(
    request: protos.google.cloud.netapp.v1.IListReplicationsRequest,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListReplicationsRequest,
      | protos.google.cloud.netapp.v1.IListReplicationsResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IReplication
    >
  ): void;
  listReplications(
    request?: protos.google.cloud.netapp.v1.IListReplicationsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.netapp.v1.IListReplicationsRequest,
          | protos.google.cloud.netapp.v1.IListReplicationsResponse
          | null
          | undefined,
          protos.google.cloud.netapp.v1.IReplication
        >,
    callback?: PaginationCallback<
      protos.google.cloud.netapp.v1.IListReplicationsRequest,
      | protos.google.cloud.netapp.v1.IListReplicationsResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IReplication
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IReplication[],
      protos.google.cloud.netapp.v1.IListReplicationsRequest | null,
      protos.google.cloud.netapp.v1.IListReplicationsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listReplications(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The volume for which to retrieve replication information,
   *   in the format
   *   `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.netapp.v1.Replication|Replication} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listReplicationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReplicationsStream(
    request?: protos.google.cloud.netapp.v1.IListReplicationsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReplications'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReplications.createStream(
      this.innerApiCalls.listReplications as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listReplications`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The volume for which to retrieve replication information,
   *   in the format
   *   `projects/{project_id}/locations/{location}/volumes/{volume_id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.netapp.v1.Replication|Replication}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.list_replications.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ListReplications_async
   */
  listReplicationsAsync(
    request?: protos.google.cloud.netapp.v1.IListReplicationsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.netapp.v1.IReplication> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReplications'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listReplications.asyncIterate(
      this.innerApiCalls['listReplications'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.netapp.v1.IReplication>;
  }
  /**
   * Returns list of all available backup vaults.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location for which to retrieve backupVault information,
   *   in the format
   *   `projects/{project_id}/locations/{location}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.netapp.v1.BackupVault|BackupVault}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listBackupVaultsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBackupVaults(
    request?: protos.google.cloud.netapp.v1.IListBackupVaultsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackupVault[],
      protos.google.cloud.netapp.v1.IListBackupVaultsRequest | null,
      protos.google.cloud.netapp.v1.IListBackupVaultsResponse,
    ]
  >;
  listBackupVaults(
    request: protos.google.cloud.netapp.v1.IListBackupVaultsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListBackupVaultsRequest,
      | protos.google.cloud.netapp.v1.IListBackupVaultsResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IBackupVault
    >
  ): void;
  listBackupVaults(
    request: protos.google.cloud.netapp.v1.IListBackupVaultsRequest,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListBackupVaultsRequest,
      | protos.google.cloud.netapp.v1.IListBackupVaultsResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IBackupVault
    >
  ): void;
  listBackupVaults(
    request?: protos.google.cloud.netapp.v1.IListBackupVaultsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.netapp.v1.IListBackupVaultsRequest,
          | protos.google.cloud.netapp.v1.IListBackupVaultsResponse
          | null
          | undefined,
          protos.google.cloud.netapp.v1.IBackupVault
        >,
    callback?: PaginationCallback<
      protos.google.cloud.netapp.v1.IListBackupVaultsRequest,
      | protos.google.cloud.netapp.v1.IListBackupVaultsResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IBackupVault
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackupVault[],
      protos.google.cloud.netapp.v1.IListBackupVaultsRequest | null,
      protos.google.cloud.netapp.v1.IListBackupVaultsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listBackupVaults(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location for which to retrieve backupVault information,
   *   in the format
   *   `projects/{project_id}/locations/{location}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.netapp.v1.BackupVault|BackupVault} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listBackupVaultsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBackupVaultsStream(
    request?: protos.google.cloud.netapp.v1.IListBackupVaultsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackupVaults'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupVaults.createStream(
      this.innerApiCalls.listBackupVaults as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listBackupVaults`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The location for which to retrieve backupVault information,
   *   in the format
   *   `projects/{project_id}/locations/{location}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   List filter.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.netapp.v1.BackupVault|BackupVault}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.list_backup_vaults.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ListBackupVaults_async
   */
  listBackupVaultsAsync(
    request?: protos.google.cloud.netapp.v1.IListBackupVaultsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.netapp.v1.IBackupVault> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackupVaults'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupVaults.asyncIterate(
      this.innerApiCalls['listBackupVaults'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.netapp.v1.IBackupVault>;
  }
  /**
   * Returns descriptions of all backups for a backupVault.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The backupVault for which to retrieve backup information,
   *   in the format
   *   `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`.
   *   To retrieve backup information for all locations, use "-" for the
   *   `{location}` value.
   *   To retrieve backup information for all backupVaults, use "-" for the
   *   `{backup_vault_id}` value.
   *   To retrieve backup information for a volume, use "-" for the
   *   `{backup_vault_id}` value and specify volume full name with the filter.
   * @param {number} request.pageSize
   *   The maximum number of items to return. The service may return fewer
   *   than this value. The maximum value
   *   is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   The standard list filter.
   *   If specified, backups will be returned based on the attribute name that
   *   matches the filter expression. If empty, then no backups are filtered out.
   *   See https://google.aip.dev/160
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.netapp.v1.Backup|Backup}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBackups(
    request?: protos.google.cloud.netapp.v1.IListBackupsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackup[],
      protos.google.cloud.netapp.v1.IListBackupsRequest | null,
      protos.google.cloud.netapp.v1.IListBackupsResponse,
    ]
  >;
  listBackups(
    request: protos.google.cloud.netapp.v1.IListBackupsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListBackupsRequest,
      protos.google.cloud.netapp.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.netapp.v1.IBackup
    >
  ): void;
  listBackups(
    request: protos.google.cloud.netapp.v1.IListBackupsRequest,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListBackupsRequest,
      protos.google.cloud.netapp.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.netapp.v1.IBackup
    >
  ): void;
  listBackups(
    request?: protos.google.cloud.netapp.v1.IListBackupsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.netapp.v1.IListBackupsRequest,
          protos.google.cloud.netapp.v1.IListBackupsResponse | null | undefined,
          protos.google.cloud.netapp.v1.IBackup
        >,
    callback?: PaginationCallback<
      protos.google.cloud.netapp.v1.IListBackupsRequest,
      protos.google.cloud.netapp.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.netapp.v1.IBackup
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackup[],
      protos.google.cloud.netapp.v1.IListBackupsRequest | null,
      protos.google.cloud.netapp.v1.IListBackupsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listBackups(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The backupVault for which to retrieve backup information,
   *   in the format
   *   `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`.
   *   To retrieve backup information for all locations, use "-" for the
   *   `{location}` value.
   *   To retrieve backup information for all backupVaults, use "-" for the
   *   `{backup_vault_id}` value.
   *   To retrieve backup information for a volume, use "-" for the
   *   `{backup_vault_id}` value and specify volume full name with the filter.
   * @param {number} request.pageSize
   *   The maximum number of items to return. The service may return fewer
   *   than this value. The maximum value
   *   is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   The standard list filter.
   *   If specified, backups will be returned based on the attribute name that
   *   matches the filter expression. If empty, then no backups are filtered out.
   *   See https://google.aip.dev/160
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.netapp.v1.Backup|Backup} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBackupsStream(
    request?: protos.google.cloud.netapp.v1.IListBackupsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackups.createStream(
      this.innerApiCalls.listBackups as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listBackups`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The backupVault for which to retrieve backup information,
   *   in the format
   *   `projects/{project_id}/locations/{location}/backupVaults/{backup_vault_id}`.
   *   To retrieve backup information for all locations, use "-" for the
   *   `{location}` value.
   *   To retrieve backup information for all backupVaults, use "-" for the
   *   `{backup_vault_id}` value.
   *   To retrieve backup information for a volume, use "-" for the
   *   `{backup_vault_id}` value and specify volume full name with the filter.
   * @param {number} request.pageSize
   *   The maximum number of items to return. The service may return fewer
   *   than this value. The maximum value
   *   is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   The next_page_token value to use if there are additional
   *   results to retrieve for this list request.
   * @param {string} request.orderBy
   *   Sort results. Supported values are "name", "name desc" or "" (unsorted).
   * @param {string} request.filter
   *   The standard list filter.
   *   If specified, backups will be returned based on the attribute name that
   *   matches the filter expression. If empty, then no backups are filtered out.
   *   See https://google.aip.dev/160
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.netapp.v1.Backup|Backup}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.list_backups.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ListBackups_async
   */
  listBackupsAsync(
    request?: protos.google.cloud.netapp.v1.IListBackupsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.netapp.v1.IBackup> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackups.asyncIterate(
      this.innerApiCalls['listBackups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.netapp.v1.IBackup>;
  }
  /**
   * Returns list of all available backup policies.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListBackupPoliciesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.netapp.v1.BackupPolicy|BackupPolicy}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listBackupPoliciesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBackupPolicies(
    request?: protos.google.cloud.netapp.v1.IListBackupPoliciesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackupPolicy[],
      protos.google.cloud.netapp.v1.IListBackupPoliciesRequest | null,
      protos.google.cloud.netapp.v1.IListBackupPoliciesResponse,
    ]
  >;
  listBackupPolicies(
    request: protos.google.cloud.netapp.v1.IListBackupPoliciesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListBackupPoliciesRequest,
      | protos.google.cloud.netapp.v1.IListBackupPoliciesResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IBackupPolicy
    >
  ): void;
  listBackupPolicies(
    request: protos.google.cloud.netapp.v1.IListBackupPoliciesRequest,
    callback: PaginationCallback<
      protos.google.cloud.netapp.v1.IListBackupPoliciesRequest,
      | protos.google.cloud.netapp.v1.IListBackupPoliciesResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IBackupPolicy
    >
  ): void;
  listBackupPolicies(
    request?: protos.google.cloud.netapp.v1.IListBackupPoliciesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.netapp.v1.IListBackupPoliciesRequest,
          | protos.google.cloud.netapp.v1.IListBackupPoliciesResponse
          | null
          | undefined,
          protos.google.cloud.netapp.v1.IBackupPolicy
        >,
    callback?: PaginationCallback<
      protos.google.cloud.netapp.v1.IListBackupPoliciesRequest,
      | protos.google.cloud.netapp.v1.IListBackupPoliciesResponse
      | null
      | undefined,
      protos.google.cloud.netapp.v1.IBackupPolicy
    >
  ): Promise<
    [
      protos.google.cloud.netapp.v1.IBackupPolicy[],
      protos.google.cloud.netapp.v1.IListBackupPoliciesRequest | null,
      protos.google.cloud.netapp.v1.IListBackupPoliciesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listBackupPolicies(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListBackupPoliciesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.netapp.v1.BackupPolicy|BackupPolicy} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listBackupPoliciesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBackupPoliciesStream(
    request?: protos.google.cloud.netapp.v1.IListBackupPoliciesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackupPolicies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupPolicies.createStream(
      this.innerApiCalls.listBackupPolicies as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listBackupPolicies`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListBackupPoliciesRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, the server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.netapp.v1.BackupPolicy|BackupPolicy}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/net_app.list_backup_policies.js</caption>
   * region_tag:netapp_v1_generated_NetApp_ListBackupPolicies_async
   */
  listBackupPoliciesAsync(
    request?: protos.google.cloud.netapp.v1.IListBackupPoliciesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.netapp.v1.IBackupPolicy> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackupPolicies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackupPolicies.asyncIterate(
      this.innerApiCalls['listBackupPolicies'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.netapp.v1.IBackupPolicy>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified activeDirectory resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} active_directory
   * @returns {string} Resource name string.
   */
  activeDirectoryPath(
    project: string,
    location: string,
    activeDirectory: string
  ) {
    return this.pathTemplates.activeDirectoryPathTemplate.render({
      project: project,
      location: location,
      active_directory: activeDirectory,
    });
  }

  /**
   * Parse the project from ActiveDirectory resource.
   *
   * @param {string} activeDirectoryName
   *   A fully-qualified path representing ActiveDirectory resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromActiveDirectoryName(activeDirectoryName: string) {
    return this.pathTemplates.activeDirectoryPathTemplate.match(
      activeDirectoryName
    ).project;
  }

  /**
   * Parse the location from ActiveDirectory resource.
   *
   * @param {string} activeDirectoryName
   *   A fully-qualified path representing ActiveDirectory resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromActiveDirectoryName(activeDirectoryName: string) {
    return this.pathTemplates.activeDirectoryPathTemplate.match(
      activeDirectoryName
    ).location;
  }

  /**
   * Parse the active_directory from ActiveDirectory resource.
   *
   * @param {string} activeDirectoryName
   *   A fully-qualified path representing ActiveDirectory resource.
   * @returns {string} A string representing the active_directory.
   */
  matchActiveDirectoryFromActiveDirectoryName(activeDirectoryName: string) {
    return this.pathTemplates.activeDirectoryPathTemplate.match(
      activeDirectoryName
    ).active_directory;
  }

  /**
   * Return a fully-qualified backup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backup_vault
   * @param {string} backup
   * @returns {string} Resource name string.
   */
  backupPath(
    project: string,
    location: string,
    backupVault: string,
    backup: string
  ) {
    return this.pathTemplates.backupPathTemplate.render({
      project: project,
      location: location,
      backup_vault: backupVault,
      backup: backup,
    });
  }

  /**
   * Parse the project from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).project;
  }

  /**
   * Parse the location from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).location;
  }

  /**
   * Parse the backup_vault from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the backup_vault.
   */
  matchBackupVaultFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).backup_vault;
  }

  /**
   * Parse the backup from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the backup.
   */
  matchBackupFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).backup;
  }

  /**
   * Return a fully-qualified backupPolicy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backup_policy
   * @returns {string} Resource name string.
   */
  backupPolicyPath(project: string, location: string, backupPolicy: string) {
    return this.pathTemplates.backupPolicyPathTemplate.render({
      project: project,
      location: location,
      backup_policy: backupPolicy,
    });
  }

  /**
   * Parse the project from BackupPolicy resource.
   *
   * @param {string} backupPolicyName
   *   A fully-qualified path representing BackupPolicy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupPolicyName(backupPolicyName: string) {
    return this.pathTemplates.backupPolicyPathTemplate.match(backupPolicyName)
      .project;
  }

  /**
   * Parse the location from BackupPolicy resource.
   *
   * @param {string} backupPolicyName
   *   A fully-qualified path representing BackupPolicy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupPolicyName(backupPolicyName: string) {
    return this.pathTemplates.backupPolicyPathTemplate.match(backupPolicyName)
      .location;
  }

  /**
   * Parse the backup_policy from BackupPolicy resource.
   *
   * @param {string} backupPolicyName
   *   A fully-qualified path representing BackupPolicy resource.
   * @returns {string} A string representing the backup_policy.
   */
  matchBackupPolicyFromBackupPolicyName(backupPolicyName: string) {
    return this.pathTemplates.backupPolicyPathTemplate.match(backupPolicyName)
      .backup_policy;
  }

  /**
   * Return a fully-qualified backupVault resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} backup_vault
   * @returns {string} Resource name string.
   */
  backupVaultPath(project: string, location: string, backupVault: string) {
    return this.pathTemplates.backupVaultPathTemplate.render({
      project: project,
      location: location,
      backup_vault: backupVault,
    });
  }

  /**
   * Parse the project from BackupVault resource.
   *
   * @param {string} backupVaultName
   *   A fully-qualified path representing BackupVault resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupVaultName(backupVaultName: string) {
    return this.pathTemplates.backupVaultPathTemplate.match(backupVaultName)
      .project;
  }

  /**
   * Parse the location from BackupVault resource.
   *
   * @param {string} backupVaultName
   *   A fully-qualified path representing BackupVault resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupVaultName(backupVaultName: string) {
    return this.pathTemplates.backupVaultPathTemplate.match(backupVaultName)
      .location;
  }

  /**
   * Parse the backup_vault from BackupVault resource.
   *
   * @param {string} backupVaultName
   *   A fully-qualified path representing BackupVault resource.
   * @returns {string} A string representing the backup_vault.
   */
  matchBackupVaultFromBackupVaultName(backupVaultName: string) {
    return this.pathTemplates.backupVaultPathTemplate.match(backupVaultName)
      .backup_vault;
  }

  /**
   * Return a fully-qualified kmsConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} kms_config
   * @returns {string} Resource name string.
   */
  kmsConfigPath(project: string, location: string, kmsConfig: string) {
    return this.pathTemplates.kmsConfigPathTemplate.render({
      project: project,
      location: location,
      kms_config: kmsConfig,
    });
  }

  /**
   * Parse the project from KmsConfig resource.
   *
   * @param {string} kmsConfigName
   *   A fully-qualified path representing KmsConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromKmsConfigName(kmsConfigName: string) {
    return this.pathTemplates.kmsConfigPathTemplate.match(kmsConfigName)
      .project;
  }

  /**
   * Parse the location from KmsConfig resource.
   *
   * @param {string} kmsConfigName
   *   A fully-qualified path representing KmsConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromKmsConfigName(kmsConfigName: string) {
    return this.pathTemplates.kmsConfigPathTemplate.match(kmsConfigName)
      .location;
  }

  /**
   * Parse the kms_config from KmsConfig resource.
   *
   * @param {string} kmsConfigName
   *   A fully-qualified path representing KmsConfig resource.
   * @returns {string} A string representing the kms_config.
   */
  matchKmsConfigFromKmsConfigName(kmsConfigName: string) {
    return this.pathTemplates.kmsConfigPathTemplate.match(kmsConfigName)
      .kms_config;
  }

  /**
   * Return a fully-qualified replication resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} volume
   * @param {string} replication
   * @returns {string} Resource name string.
   */
  replicationPath(
    project: string,
    location: string,
    volume: string,
    replication: string
  ) {
    return this.pathTemplates.replicationPathTemplate.render({
      project: project,
      location: location,
      volume: volume,
      replication: replication,
    });
  }

  /**
   * Parse the project from Replication resource.
   *
   * @param {string} replicationName
   *   A fully-qualified path representing Replication resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReplicationName(replicationName: string) {
    return this.pathTemplates.replicationPathTemplate.match(replicationName)
      .project;
  }

  /**
   * Parse the location from Replication resource.
   *
   * @param {string} replicationName
   *   A fully-qualified path representing Replication resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReplicationName(replicationName: string) {
    return this.pathTemplates.replicationPathTemplate.match(replicationName)
      .location;
  }

  /**
   * Parse the volume from Replication resource.
   *
   * @param {string} replicationName
   *   A fully-qualified path representing Replication resource.
   * @returns {string} A string representing the volume.
   */
  matchVolumeFromReplicationName(replicationName: string) {
    return this.pathTemplates.replicationPathTemplate.match(replicationName)
      .volume;
  }

  /**
   * Parse the replication from Replication resource.
   *
   * @param {string} replicationName
   *   A fully-qualified path representing Replication resource.
   * @returns {string} A string representing the replication.
   */
  matchReplicationFromReplicationName(replicationName: string) {
    return this.pathTemplates.replicationPathTemplate.match(replicationName)
      .replication;
  }

  /**
   * Return a fully-qualified snapshot resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} volume
   * @param {string} snapshot
   * @returns {string} Resource name string.
   */
  snapshotPath(
    project: string,
    location: string,
    volume: string,
    snapshot: string
  ) {
    return this.pathTemplates.snapshotPathTemplate.render({
      project: project,
      location: location,
      volume: volume,
      snapshot: snapshot,
    });
  }

  /**
   * Parse the project from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).project;
  }

  /**
   * Parse the location from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).location;
  }

  /**
   * Parse the volume from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the volume.
   */
  matchVolumeFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).volume;
  }

  /**
   * Parse the snapshot from Snapshot resource.
   *
   * @param {string} snapshotName
   *   A fully-qualified path representing Snapshot resource.
   * @returns {string} A string representing the snapshot.
   */
  matchSnapshotFromSnapshotName(snapshotName: string) {
    return this.pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;
  }

  /**
   * Return a fully-qualified storagePool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} storage_pool
   * @returns {string} Resource name string.
   */
  storagePoolPath(project: string, location: string, storagePool: string) {
    return this.pathTemplates.storagePoolPathTemplate.render({
      project: project,
      location: location,
      storage_pool: storagePool,
    });
  }

  /**
   * Parse the project from StoragePool resource.
   *
   * @param {string} storagePoolName
   *   A fully-qualified path representing StoragePool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStoragePoolName(storagePoolName: string) {
    return this.pathTemplates.storagePoolPathTemplate.match(storagePoolName)
      .project;
  }

  /**
   * Parse the location from StoragePool resource.
   *
   * @param {string} storagePoolName
   *   A fully-qualified path representing StoragePool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromStoragePoolName(storagePoolName: string) {
    return this.pathTemplates.storagePoolPathTemplate.match(storagePoolName)
      .location;
  }

  /**
   * Parse the storage_pool from StoragePool resource.
   *
   * @param {string} storagePoolName
   *   A fully-qualified path representing StoragePool resource.
   * @returns {string} A string representing the storage_pool.
   */
  matchStoragePoolFromStoragePoolName(storagePoolName: string) {
    return this.pathTemplates.storagePoolPathTemplate.match(storagePoolName)
      .storage_pool;
  }

  /**
   * Return a fully-qualified volume resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} volume
   * @returns {string} Resource name string.
   */
  volumePath(project: string, location: string, volume: string) {
    return this.pathTemplates.volumePathTemplate.render({
      project: project,
      location: location,
      volume: volume,
    });
  }

  /**
   * Parse the project from Volume resource.
   *
   * @param {string} volumeName
   *   A fully-qualified path representing Volume resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVolumeName(volumeName: string) {
    return this.pathTemplates.volumePathTemplate.match(volumeName).project;
  }

  /**
   * Parse the location from Volume resource.
   *
   * @param {string} volumeName
   *   A fully-qualified path representing Volume resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVolumeName(volumeName: string) {
    return this.pathTemplates.volumePathTemplate.match(volumeName).location;
  }

  /**
   * Parse the volume from Volume resource.
   *
   * @param {string} volumeName
   *   A fully-qualified path representing Volume resource.
   * @returns {string} A string representing the volume.
   */
  matchVolumeFromVolumeName(volumeName: string) {
    return this.pathTemplates.volumePathTemplate.match(volumeName).volume;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.netAppStub && !this._terminated) {
      return this.netAppStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
