// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as vmmigrationModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.VmMigrationClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath = vmmigrationModule.v1.VmMigrationClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint = vmmigrationModule.v1.VmMigrationClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = vmmigrationModule.v1.VmMigrationClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new vmmigrationModule.v1.VmMigrationClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.vmMigrationStub, undefined);
      await client.initialize();
      assert(client.vmMigrationStub);
    });

    it('has close method for the initialized client', done => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.vmMigrationStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.vmMigrationStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getSource', () => {
    it('invokes getSource without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.Source()
      );
      client.innerApiCalls.getSource = stubSimpleCall(expectedResponse);
      const [response] = await client.getSource(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSource without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.Source()
      );
      client.innerApiCalls.getSource =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getSource(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.ISource | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSource with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getSource = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getSource(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSource with closed client', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getSource(request), expectedError);
    });
  });

  describe('fetchInventory', () => {
    it('invokes fetchInventory without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.FetchInventoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.FetchInventoryRequest',
        ['source']
      );
      request.source = defaultValue1;
      const expectedHeaderRequestParams = `source=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.FetchInventoryResponse()
      );
      client.innerApiCalls.fetchInventory = stubSimpleCall(expectedResponse);
      const [response] = await client.fetchInventory(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.fetchInventory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchInventory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchInventory without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.FetchInventoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.FetchInventoryRequest',
        ['source']
      );
      request.source = defaultValue1;
      const expectedHeaderRequestParams = `source=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.FetchInventoryResponse()
      );
      client.innerApiCalls.fetchInventory =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.fetchInventory(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.IFetchInventoryResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.fetchInventory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchInventory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchInventory with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.FetchInventoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.FetchInventoryRequest',
        ['source']
      );
      request.source = defaultValue1;
      const expectedHeaderRequestParams = `source=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.fetchInventory = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.fetchInventory(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.fetchInventory as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.fetchInventory as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes fetchInventory with closed client', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.FetchInventoryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.FetchInventoryRequest',
        ['source']
      );
      request.source = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.fetchInventory(request), expectedError);
    });
  });

  describe('getUtilizationReport', () => {
    it('invokes getUtilizationReport without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetUtilizationReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UtilizationReport()
      );
      client.innerApiCalls.getUtilizationReport =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getUtilizationReport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getUtilizationReport without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetUtilizationReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UtilizationReport()
      );
      client.innerApiCalls.getUtilizationReport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getUtilizationReport(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.IUtilizationReport | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getUtilizationReport with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetUtilizationReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getUtilizationReport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getUtilizationReport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getUtilizationReport with closed client', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetUtilizationReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getUtilizationReport(request), expectedError);
    });
  });

  describe('getDatacenterConnector', () => {
    it('invokes getDatacenterConnector without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetDatacenterConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DatacenterConnector()
      );
      client.innerApiCalls.getDatacenterConnector =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getDatacenterConnector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDatacenterConnector without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetDatacenterConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DatacenterConnector()
      );
      client.innerApiCalls.getDatacenterConnector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDatacenterConnector(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.IDatacenterConnector | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDatacenterConnector with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetDatacenterConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDatacenterConnector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getDatacenterConnector(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDatacenterConnector with closed client', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetDatacenterConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getDatacenterConnector(request),
        expectedError
      );
    });
  });

  describe('getMigratingVm', () => {
    it('invokes getMigratingVm without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetMigratingVmRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.MigratingVm()
      );
      client.innerApiCalls.getMigratingVm = stubSimpleCall(expectedResponse);
      const [response] = await client.getMigratingVm(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMigratingVm without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetMigratingVmRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.MigratingVm()
      );
      client.innerApiCalls.getMigratingVm =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getMigratingVm(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.IMigratingVm | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMigratingVm with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetMigratingVmRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getMigratingVm = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getMigratingVm(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMigratingVm with closed client', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetMigratingVmRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getMigratingVm(request), expectedError);
    });
  });

  describe('getCloneJob', () => {
    it('invokes getCloneJob without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetCloneJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CloneJob()
      );
      client.innerApiCalls.getCloneJob = stubSimpleCall(expectedResponse);
      const [response] = await client.getCloneJob(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCloneJob without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetCloneJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CloneJob()
      );
      client.innerApiCalls.getCloneJob =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCloneJob(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.ICloneJob | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCloneJob with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetCloneJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCloneJob = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getCloneJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCloneJob with closed client', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetCloneJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCloneJob(request), expectedError);
    });
  });

  describe('getCutoverJob', () => {
    it('invokes getCutoverJob without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetCutoverJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CutoverJob()
      );
      client.innerApiCalls.getCutoverJob = stubSimpleCall(expectedResponse);
      const [response] = await client.getCutoverJob(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCutoverJob without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetCutoverJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CutoverJob()
      );
      client.innerApiCalls.getCutoverJob =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCutoverJob(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.ICutoverJob | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCutoverJob with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetCutoverJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCutoverJob = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getCutoverJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCutoverJob with closed client', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetCutoverJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCutoverJob(request), expectedError);
    });
  });

  describe('getGroup', () => {
    it('invokes getGroup without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.Group()
      );
      client.innerApiCalls.getGroup = stubSimpleCall(expectedResponse);
      const [response] = await client.getGroup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGroup without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.Group()
      );
      client.innerApiCalls.getGroup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getGroup(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.IGroup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGroup with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getGroup = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGroup with closed client', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getGroup(request), expectedError);
    });
  });

  describe('getTargetProject', () => {
    it('invokes getTargetProject without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetTargetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.TargetProject()
      );
      client.innerApiCalls.getTargetProject = stubSimpleCall(expectedResponse);
      const [response] = await client.getTargetProject(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTargetProject without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetTargetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.TargetProject()
      );
      client.innerApiCalls.getTargetProject =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getTargetProject(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.ITargetProject | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTargetProject with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetTargetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getTargetProject = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getTargetProject(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getTargetProject with closed client', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetTargetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getTargetProject(request), expectedError);
    });
  });

  describe('getReplicationCycle', () => {
    it('invokes getReplicationCycle without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetReplicationCycleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetReplicationCycleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ReplicationCycle()
      );
      client.innerApiCalls.getReplicationCycle =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getReplicationCycle(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getReplicationCycle as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReplicationCycle as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReplicationCycle without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetReplicationCycleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetReplicationCycleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ReplicationCycle()
      );
      client.innerApiCalls.getReplicationCycle =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getReplicationCycle(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.IReplicationCycle | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getReplicationCycle as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReplicationCycle as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReplicationCycle with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetReplicationCycleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetReplicationCycleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getReplicationCycle = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getReplicationCycle(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getReplicationCycle as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getReplicationCycle as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getReplicationCycle with closed client', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.GetReplicationCycleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.GetReplicationCycleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getReplicationCycle(request), expectedError);
    });
  });

  describe('createSource', () => {
    it('invokes createSource without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateSourceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createSource = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createSource(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSource without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateSourceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createSource =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createSource(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.ISource,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.ISource,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSource with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateSourceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createSource = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createSource(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSource with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateSourceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createSource = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createSource(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateSourceProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateSourceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateSourceProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateSourceProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateSource', () => {
    it('invokes updateSource without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateSourceRequest()
      );
      request.source ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateSourceRequest',
        ['source', 'name']
      );
      request.source.name = defaultValue1;
      const expectedHeaderRequestParams = `source.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateSource = stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateSource(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSource without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateSourceRequest()
      );
      request.source ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateSourceRequest',
        ['source', 'name']
      );
      request.source.name = defaultValue1;
      const expectedHeaderRequestParams = `source.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateSource =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateSource(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.ISource,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.ISource,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSource with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateSourceRequest()
      );
      request.source ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateSourceRequest',
        ['source', 'name']
      );
      request.source.name = defaultValue1;
      const expectedHeaderRequestParams = `source.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSource = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateSource(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSource with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateSourceRequest()
      );
      request.source ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateSourceRequest',
        ['source', 'name']
      );
      request.source.name = defaultValue1;
      const expectedHeaderRequestParams = `source.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSource = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateSource(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateSourceProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateSourceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateSourceProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkUpdateSourceProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteSource', () => {
    it('invokes deleteSource without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteSource = stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteSource(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSource without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteSource =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteSource(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSource with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSource = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteSource(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSource with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteSourceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteSourceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSource = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteSource(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteSource as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteSource as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteSourceProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteSourceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteSourceProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDeleteSourceProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createUtilizationReport', () => {
    it('invokes createUtilizationReport without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateUtilizationReportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createUtilizationReport =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createUtilizationReport(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createUtilizationReport without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateUtilizationReportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createUtilizationReport =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createUtilizationReport(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IUtilizationReport,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IUtilizationReport,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createUtilizationReport with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateUtilizationReportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createUtilizationReport = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createUtilizationReport(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createUtilizationReport with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateUtilizationReportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createUtilizationReport = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createUtilizationReport(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateUtilizationReportProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateUtilizationReportProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateUtilizationReportProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateUtilizationReportProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteUtilizationReport', () => {
    it('invokes deleteUtilizationReport without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteUtilizationReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteUtilizationReport =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteUtilizationReport(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteUtilizationReport without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteUtilizationReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteUtilizationReport =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteUtilizationReport(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteUtilizationReport with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteUtilizationReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteUtilizationReport = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteUtilizationReport(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteUtilizationReport with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteUtilizationReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteUtilizationReportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteUtilizationReport = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteUtilizationReport(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteUtilizationReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteUtilizationReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteUtilizationReportProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteUtilizationReportProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteUtilizationReportProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteUtilizationReportProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createDatacenterConnector', () => {
    it('invokes createDatacenterConnector without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateDatacenterConnectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createDatacenterConnector =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createDatacenterConnector(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDatacenterConnector without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateDatacenterConnectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createDatacenterConnector =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createDatacenterConnector(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IDatacenterConnector,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IDatacenterConnector,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDatacenterConnector with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateDatacenterConnectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDatacenterConnector = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createDatacenterConnector(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDatacenterConnector with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateDatacenterConnectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDatacenterConnector = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createDatacenterConnector(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateDatacenterConnectorProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateDatacenterConnectorProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateDatacenterConnectorProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateDatacenterConnectorProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteDatacenterConnector', () => {
    it('invokes deleteDatacenterConnector without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteDatacenterConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteDatacenterConnector =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteDatacenterConnector(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDatacenterConnector without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteDatacenterConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteDatacenterConnector =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteDatacenterConnector(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDatacenterConnector with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteDatacenterConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDatacenterConnector = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteDatacenterConnector(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDatacenterConnector with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteDatacenterConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteDatacenterConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDatacenterConnector = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteDatacenterConnector(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteDatacenterConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDatacenterConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteDatacenterConnectorProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteDatacenterConnectorProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteDatacenterConnectorProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteDatacenterConnectorProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('upgradeAppliance', () => {
    it('invokes upgradeAppliance without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpgradeApplianceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpgradeApplianceRequest',
        ['datacenterConnector']
      );
      request.datacenterConnector = defaultValue1;
      const expectedHeaderRequestParams = `datacenter_connector=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.upgradeAppliance =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.upgradeAppliance(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.upgradeAppliance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.upgradeAppliance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes upgradeAppliance without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpgradeApplianceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpgradeApplianceRequest',
        ['datacenterConnector']
      );
      request.datacenterConnector = defaultValue1;
      const expectedHeaderRequestParams = `datacenter_connector=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.upgradeAppliance =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.upgradeAppliance(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IUpgradeApplianceResponse,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IUpgradeApplianceResponse,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.upgradeAppliance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.upgradeAppliance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes upgradeAppliance with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpgradeApplianceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpgradeApplianceRequest',
        ['datacenterConnector']
      );
      request.datacenterConnector = defaultValue1;
      const expectedHeaderRequestParams = `datacenter_connector=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.upgradeAppliance = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.upgradeAppliance(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.upgradeAppliance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.upgradeAppliance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes upgradeAppliance with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpgradeApplianceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpgradeApplianceRequest',
        ['datacenterConnector']
      );
      request.datacenterConnector = defaultValue1;
      const expectedHeaderRequestParams = `datacenter_connector=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.upgradeAppliance = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.upgradeAppliance(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.upgradeAppliance as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.upgradeAppliance as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpgradeApplianceProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpgradeApplianceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpgradeApplianceProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpgradeApplianceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createMigratingVm', () => {
    it('invokes createMigratingVm without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateMigratingVmRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createMigratingVm =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createMigratingVm(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMigratingVm without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateMigratingVmRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createMigratingVm =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createMigratingVm(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IMigratingVm,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IMigratingVm,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMigratingVm with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateMigratingVmRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMigratingVm = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createMigratingVm(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMigratingVm with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateMigratingVmRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMigratingVm = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createMigratingVm(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateMigratingVmProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateMigratingVmProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateMigratingVmProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateMigratingVmProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateMigratingVm', () => {
    it('invokes updateMigratingVm without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateMigratingVmRequest()
      );
      request.migratingVm ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateMigratingVmRequest',
        ['migratingVm', 'name']
      );
      request.migratingVm.name = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateMigratingVm =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateMigratingVm(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMigratingVm without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateMigratingVmRequest()
      );
      request.migratingVm ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateMigratingVmRequest',
        ['migratingVm', 'name']
      );
      request.migratingVm.name = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateMigratingVm =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateMigratingVm(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IMigratingVm,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IMigratingVm,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMigratingVm with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateMigratingVmRequest()
      );
      request.migratingVm ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateMigratingVmRequest',
        ['migratingVm', 'name']
      );
      request.migratingVm.name = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateMigratingVm = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateMigratingVm(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMigratingVm with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateMigratingVmRequest()
      );
      request.migratingVm ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateMigratingVmRequest',
        ['migratingVm', 'name']
      );
      request.migratingVm.name = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateMigratingVm = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateMigratingVm(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateMigratingVmProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateMigratingVmProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateMigratingVmProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateMigratingVmProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteMigratingVm', () => {
    it('invokes deleteMigratingVm without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteMigratingVmRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteMigratingVm =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteMigratingVm(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMigratingVm without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteMigratingVmRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteMigratingVm =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteMigratingVm(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMigratingVm with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteMigratingVmRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteMigratingVm = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteMigratingVm(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMigratingVm with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteMigratingVmRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteMigratingVmRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteMigratingVm = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteMigratingVm(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteMigratingVm as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMigratingVm as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteMigratingVmProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteMigratingVmProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteMigratingVmProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteMigratingVmProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('startMigration', () => {
    it('invokes startMigration without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.StartMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.StartMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.startMigration =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.startMigration(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.startMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startMigration without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.StartMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.StartMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.startMigration =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.startMigration(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IStartMigrationResponse,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IStartMigrationResponse,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.startMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startMigration with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.StartMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.StartMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.startMigration = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.startMigration(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.startMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startMigration with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.StartMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.StartMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.startMigration = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.startMigration(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.startMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkStartMigrationProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkStartMigrationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkStartMigrationProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkStartMigrationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('resumeMigration', () => {
    it('invokes resumeMigration without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ResumeMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ResumeMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resumeMigration =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.resumeMigration(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resumeMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeMigration without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ResumeMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ResumeMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resumeMigration =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.resumeMigration(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IResumeMigrationResponse,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IResumeMigrationResponse,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resumeMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeMigration with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ResumeMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ResumeMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resumeMigration = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.resumeMigration(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.resumeMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeMigration with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ResumeMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ResumeMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resumeMigration = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.resumeMigration(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.resumeMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkResumeMigrationProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkResumeMigrationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkResumeMigrationProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkResumeMigrationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('pauseMigration', () => {
    it('invokes pauseMigration without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.PauseMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.PauseMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.pauseMigration =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.pauseMigration(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.pauseMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes pauseMigration without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.PauseMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.PauseMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.pauseMigration =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.pauseMigration(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IPauseMigrationResponse,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IPauseMigrationResponse,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.pauseMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes pauseMigration with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.PauseMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.PauseMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.pauseMigration = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.pauseMigration(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.pauseMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes pauseMigration with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.PauseMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.PauseMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.pauseMigration = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.pauseMigration(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.pauseMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkPauseMigrationProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkPauseMigrationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkPauseMigrationProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkPauseMigrationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('finalizeMigration', () => {
    it('invokes finalizeMigration without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.FinalizeMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.FinalizeMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.finalizeMigration =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.finalizeMigration(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.finalizeMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.finalizeMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes finalizeMigration without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.FinalizeMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.FinalizeMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.finalizeMigration =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.finalizeMigration(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IFinalizeMigrationResponse,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IFinalizeMigrationResponse,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.finalizeMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.finalizeMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes finalizeMigration with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.FinalizeMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.FinalizeMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.finalizeMigration = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.finalizeMigration(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.finalizeMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.finalizeMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes finalizeMigration with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.FinalizeMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.FinalizeMigrationRequest',
        ['migratingVm']
      );
      request.migratingVm = defaultValue1;
      const expectedHeaderRequestParams = `migrating_vm=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.finalizeMigration = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.finalizeMigration(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.finalizeMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.finalizeMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkFinalizeMigrationProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkFinalizeMigrationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkFinalizeMigrationProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkFinalizeMigrationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createCloneJob', () => {
    it('invokes createCloneJob without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateCloneJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCloneJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createCloneJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCloneJob without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateCloneJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCloneJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCloneJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.ICloneJob,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.ICloneJob,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCloneJob with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateCloneJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCloneJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createCloneJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCloneJob with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateCloneJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCloneJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createCloneJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateCloneJobProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateCloneJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateCloneJobProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateCloneJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('cancelCloneJob', () => {
    it('invokes cancelCloneJob without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CancelCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CancelCloneJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.cancelCloneJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.cancelCloneJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.cancelCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelCloneJob without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CancelCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CancelCloneJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.cancelCloneJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.cancelCloneJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.ICancelCloneJobResponse,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.ICancelCloneJobResponse,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.cancelCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelCloneJob with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CancelCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CancelCloneJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.cancelCloneJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.cancelCloneJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.cancelCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelCloneJob with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CancelCloneJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CancelCloneJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.cancelCloneJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.cancelCloneJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.cancelCloneJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelCloneJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCancelCloneJobProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCancelCloneJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCancelCloneJobProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCancelCloneJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createCutoverJob', () => {
    it('invokes createCutoverJob without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateCutoverJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCutoverJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createCutoverJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCutoverJob without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateCutoverJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCutoverJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCutoverJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.ICutoverJob,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.ICutoverJob,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCutoverJob with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateCutoverJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCutoverJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createCutoverJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCutoverJob with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateCutoverJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCutoverJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createCutoverJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateCutoverJobProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateCutoverJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateCutoverJobProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateCutoverJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('cancelCutoverJob', () => {
    it('invokes cancelCutoverJob without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CancelCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CancelCutoverJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.cancelCutoverJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.cancelCutoverJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.cancelCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelCutoverJob without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CancelCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CancelCutoverJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.cancelCutoverJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.cancelCutoverJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.ICancelCutoverJobResponse,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.ICancelCutoverJobResponse,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.cancelCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelCutoverJob with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CancelCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CancelCutoverJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.cancelCutoverJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.cancelCutoverJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.cancelCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelCutoverJob with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CancelCutoverJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CancelCutoverJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.cancelCutoverJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.cancelCutoverJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.cancelCutoverJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.cancelCutoverJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCancelCutoverJobProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCancelCutoverJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCancelCutoverJobProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCancelCutoverJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createGroup', () => {
    it('invokes createGroup without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createGroup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createGroup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGroup without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createGroup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createGroup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IGroup,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IGroup,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGroup with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGroup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGroup with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGroup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createGroup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateGroupProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateGroupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateGroupProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateGroupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateGroup', () => {
    it('invokes updateGroup without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateGroupRequest()
      );
      request.group ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateGroupRequest',
        ['group', 'name']
      );
      request.group.name = defaultValue1;
      const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateGroup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateGroup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGroup without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateGroupRequest()
      );
      request.group ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateGroupRequest',
        ['group', 'name']
      );
      request.group.name = defaultValue1;
      const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateGroup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateGroup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IGroup,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IGroup,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGroup with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateGroupRequest()
      );
      request.group ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateGroupRequest',
        ['group', 'name']
      );
      request.group.name = defaultValue1;
      const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateGroup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGroup with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateGroupRequest()
      );
      request.group ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateGroupRequest',
        ['group', 'name']
      );
      request.group.name = defaultValue1;
      const expectedHeaderRequestParams = `group.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateGroup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateGroup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateGroupProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateGroupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateGroupProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkUpdateGroupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteGroup', () => {
    it('invokes deleteGroup without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteGroup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteGroup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGroup without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteGroup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteGroup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGroup with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGroup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGroup with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGroup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteGroup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteGroupProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteGroupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteGroupProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDeleteGroupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('addGroupMigration', () => {
    it('invokes addGroupMigration without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.AddGroupMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.AddGroupMigrationRequest',
        ['group']
      );
      request.group = defaultValue1;
      const expectedHeaderRequestParams = `group=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.addGroupMigration =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.addGroupMigration(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.addGroupMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addGroupMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addGroupMigration without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.AddGroupMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.AddGroupMigrationRequest',
        ['group']
      );
      request.group = defaultValue1;
      const expectedHeaderRequestParams = `group=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.addGroupMigration =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.addGroupMigration(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IAddGroupMigrationResponse,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IAddGroupMigrationResponse,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.addGroupMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addGroupMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addGroupMigration with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.AddGroupMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.AddGroupMigrationRequest',
        ['group']
      );
      request.group = defaultValue1;
      const expectedHeaderRequestParams = `group=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.addGroupMigration = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.addGroupMigration(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.addGroupMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addGroupMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes addGroupMigration with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.AddGroupMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.AddGroupMigrationRequest',
        ['group']
      );
      request.group = defaultValue1;
      const expectedHeaderRequestParams = `group=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.addGroupMigration = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.addGroupMigration(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.addGroupMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.addGroupMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkAddGroupMigrationProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkAddGroupMigrationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkAddGroupMigrationProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkAddGroupMigrationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('removeGroupMigration', () => {
    it('invokes removeGroupMigration without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.RemoveGroupMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.RemoveGroupMigrationRequest',
        ['group']
      );
      request.group = defaultValue1;
      const expectedHeaderRequestParams = `group=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.removeGroupMigration =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.removeGroupMigration(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.removeGroupMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.removeGroupMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes removeGroupMigration without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.RemoveGroupMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.RemoveGroupMigrationRequest',
        ['group']
      );
      request.group = defaultValue1;
      const expectedHeaderRequestParams = `group=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.removeGroupMigration =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.removeGroupMigration(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.IRemoveGroupMigrationResponse,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.IRemoveGroupMigrationResponse,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.removeGroupMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.removeGroupMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes removeGroupMigration with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.RemoveGroupMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.RemoveGroupMigrationRequest',
        ['group']
      );
      request.group = defaultValue1;
      const expectedHeaderRequestParams = `group=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.removeGroupMigration = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.removeGroupMigration(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.removeGroupMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.removeGroupMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes removeGroupMigration with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.RemoveGroupMigrationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.RemoveGroupMigrationRequest',
        ['group']
      );
      request.group = defaultValue1;
      const expectedHeaderRequestParams = `group=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.removeGroupMigration = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.removeGroupMigration(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.removeGroupMigration as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.removeGroupMigration as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRemoveGroupMigrationProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkRemoveGroupMigrationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRemoveGroupMigrationProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkRemoveGroupMigrationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createTargetProject', () => {
    it('invokes createTargetProject without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateTargetProjectRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createTargetProject =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createTargetProject(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTargetProject without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateTargetProjectRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createTargetProject =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createTargetProject(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.ITargetProject,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.ITargetProject,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTargetProject with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateTargetProjectRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createTargetProject = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createTargetProject(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createTargetProject with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.CreateTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.CreateTargetProjectRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createTargetProject = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createTargetProject(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateTargetProjectProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateTargetProjectProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateTargetProjectProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateTargetProjectProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateTargetProject', () => {
    it('invokes updateTargetProject without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateTargetProjectRequest()
      );
      request.targetProject ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateTargetProjectRequest',
        ['targetProject', 'name']
      );
      request.targetProject.name = defaultValue1;
      const expectedHeaderRequestParams = `target_project.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateTargetProject =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateTargetProject(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTargetProject without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateTargetProjectRequest()
      );
      request.targetProject ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateTargetProjectRequest',
        ['targetProject', 'name']
      );
      request.targetProject.name = defaultValue1;
      const expectedHeaderRequestParams = `target_project.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateTargetProject =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateTargetProject(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.vmmigration.v1.ITargetProject,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.vmmigration.v1.ITargetProject,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTargetProject with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateTargetProjectRequest()
      );
      request.targetProject ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateTargetProjectRequest',
        ['targetProject', 'name']
      );
      request.targetProject.name = defaultValue1;
      const expectedHeaderRequestParams = `target_project.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateTargetProject = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateTargetProject(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateTargetProject with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.UpdateTargetProjectRequest()
      );
      request.targetProject ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.UpdateTargetProjectRequest',
        ['targetProject', 'name']
      );
      request.targetProject.name = defaultValue1;
      const expectedHeaderRequestParams = `target_project.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateTargetProject = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateTargetProject(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateTargetProjectProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateTargetProjectProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateTargetProjectProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateTargetProjectProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteTargetProject', () => {
    it('invokes deleteTargetProject without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteTargetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteTargetProject =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteTargetProject(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTargetProject without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteTargetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteTargetProject =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteTargetProject(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.vmmigration.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.vmmigration.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTargetProject with call error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteTargetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteTargetProject = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteTargetProject(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteTargetProject with LRO error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.DeleteTargetProjectRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.DeleteTargetProjectRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteTargetProject = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteTargetProject(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteTargetProject as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteTargetProject as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteTargetProjectProgress without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteTargetProjectProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteTargetProjectProgress with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteTargetProjectProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listSources', () => {
    it('invokes listSources without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
      ];
      client.innerApiCalls.listSources = stubSimpleCall(expectedResponse);
      const [response] = await client.listSources(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSources without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
      ];
      client.innerApiCalls.listSources =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listSources(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.ISource[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSources with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listSources = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listSources(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listSources as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSourcesStream without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
      ];
      client.descriptors.page.listSources.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listSourcesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.Source[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.Source) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSources.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSources, request)
      );
      assert(
        (client.descriptors.page.listSources.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listSourcesStream with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSources.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listSourcesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.Source[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.Source) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listSources.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSources, request)
      );
      assert(
        (client.descriptors.page.listSources.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSources without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Source()),
      ];
      client.descriptors.page.listSources.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmmigration.v1.ISource[] = [];
      const iterable = client.listSourcesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listSources.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSources.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSources with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListSourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListSourcesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSources.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listSourcesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmmigration.v1.ISource[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listSources.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listSources.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listUtilizationReports', () => {
    it('invokes listUtilizationReports without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListUtilizationReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListUtilizationReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
      ];
      client.innerApiCalls.listUtilizationReports =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listUtilizationReports(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listUtilizationReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUtilizationReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUtilizationReports without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListUtilizationReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListUtilizationReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
      ];
      client.innerApiCalls.listUtilizationReports =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listUtilizationReports(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.vmmigration.v1.IUtilizationReport[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listUtilizationReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUtilizationReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUtilizationReports with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListUtilizationReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListUtilizationReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listUtilizationReports = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listUtilizationReports(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listUtilizationReports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUtilizationReports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUtilizationReportsStream without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListUtilizationReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListUtilizationReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
      ];
      client.descriptors.page.listUtilizationReports.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listUtilizationReportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.UtilizationReport[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.UtilizationReport) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listUtilizationReports
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listUtilizationReports, request)
      );
      assert(
        (
          client.descriptors.page.listUtilizationReports
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listUtilizationReportsStream with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListUtilizationReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListUtilizationReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listUtilizationReports.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listUtilizationReportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.UtilizationReport[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.UtilizationReport) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listUtilizationReports
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listUtilizationReports, request)
      );
      assert(
        (
          client.descriptors.page.listUtilizationReports
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listUtilizationReports without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListUtilizationReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListUtilizationReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.UtilizationReport()
        ),
      ];
      client.descriptors.page.listUtilizationReports.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmmigration.v1.IUtilizationReport[] =
        [];
      const iterable = client.listUtilizationReportsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listUtilizationReports
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listUtilizationReports
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listUtilizationReports with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListUtilizationReportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListUtilizationReportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listUtilizationReports.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listUtilizationReportsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmmigration.v1.IUtilizationReport[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listUtilizationReports
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listUtilizationReports
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listDatacenterConnectors', () => {
    it('invokes listDatacenterConnectors without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
      ];
      client.innerApiCalls.listDatacenterConnectors =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listDatacenterConnectors(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDatacenterConnectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDatacenterConnectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDatacenterConnectors without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
      ];
      client.innerApiCalls.listDatacenterConnectors =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDatacenterConnectors(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.vmmigration.v1.IDatacenterConnector[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDatacenterConnectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDatacenterConnectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDatacenterConnectors with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDatacenterConnectors = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listDatacenterConnectors(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listDatacenterConnectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDatacenterConnectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDatacenterConnectorsStream without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
      ];
      client.descriptors.page.listDatacenterConnectors.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDatacenterConnectorsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.DatacenterConnector[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.vmmigration.v1.DatacenterConnector
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listDatacenterConnectors
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listDatacenterConnectors, request)
      );
      assert(
        (
          client.descriptors.page.listDatacenterConnectors
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDatacenterConnectorsStream with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDatacenterConnectors.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDatacenterConnectorsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.DatacenterConnector[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.vmmigration.v1.DatacenterConnector
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listDatacenterConnectors
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listDatacenterConnectors, request)
      );
      assert(
        (
          client.descriptors.page.listDatacenterConnectors
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDatacenterConnectors without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.DatacenterConnector()
        ),
      ];
      client.descriptors.page.listDatacenterConnectors.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmmigration.v1.IDatacenterConnector[] =
        [];
      const iterable = client.listDatacenterConnectorsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDatacenterConnectors
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listDatacenterConnectors
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDatacenterConnectors with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListDatacenterConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDatacenterConnectors.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDatacenterConnectorsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmmigration.v1.IDatacenterConnector[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDatacenterConnectors
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listDatacenterConnectors
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listMigratingVms', () => {
    it('invokes listMigratingVms without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListMigratingVmsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListMigratingVmsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
      ];
      client.innerApiCalls.listMigratingVms = stubSimpleCall(expectedResponse);
      const [response] = await client.listMigratingVms(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMigratingVms as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMigratingVms as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMigratingVms without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListMigratingVmsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListMigratingVmsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
      ];
      client.innerApiCalls.listMigratingVms =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listMigratingVms(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.IMigratingVm[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMigratingVms as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMigratingVms as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMigratingVms with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListMigratingVmsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListMigratingVmsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listMigratingVms = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listMigratingVms(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listMigratingVms as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMigratingVms as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMigratingVmsStream without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListMigratingVmsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListMigratingVmsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
      ];
      client.descriptors.page.listMigratingVms.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listMigratingVmsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.MigratingVm[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.MigratingVm) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listMigratingVms.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMigratingVms, request)
      );
      assert(
        (client.descriptors.page.listMigratingVms.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listMigratingVmsStream with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListMigratingVmsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListMigratingVmsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMigratingVms.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listMigratingVmsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.MigratingVm[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.MigratingVm) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listMigratingVms.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMigratingVms, request)
      );
      assert(
        (client.descriptors.page.listMigratingVms.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMigratingVms without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListMigratingVmsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListMigratingVmsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.MigratingVm()
        ),
      ];
      client.descriptors.page.listMigratingVms.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmmigration.v1.IMigratingVm[] = [];
      const iterable = client.listMigratingVmsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMigratingVms.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMigratingVms.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMigratingVms with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListMigratingVmsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListMigratingVmsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMigratingVms.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listMigratingVmsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmmigration.v1.IMigratingVm[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMigratingVms.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMigratingVms.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listCloneJobs', () => {
    it('invokes listCloneJobs without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCloneJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCloneJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
      ];
      client.innerApiCalls.listCloneJobs = stubSimpleCall(expectedResponse);
      const [response] = await client.listCloneJobs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCloneJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCloneJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCloneJobs without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCloneJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCloneJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
      ];
      client.innerApiCalls.listCloneJobs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCloneJobs(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.ICloneJob[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCloneJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCloneJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCloneJobs with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCloneJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCloneJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCloneJobs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listCloneJobs(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listCloneJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCloneJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCloneJobsStream without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCloneJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCloneJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
      ];
      client.descriptors.page.listCloneJobs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCloneJobsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.CloneJob[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.CloneJob) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listCloneJobs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCloneJobs, request)
      );
      assert(
        (client.descriptors.page.listCloneJobs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listCloneJobsStream with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCloneJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCloneJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCloneJobs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCloneJobsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.CloneJob[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.CloneJob) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listCloneJobs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCloneJobs, request)
      );
      assert(
        (client.descriptors.page.listCloneJobs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCloneJobs without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCloneJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCloneJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CloneJob()
        ),
      ];
      client.descriptors.page.listCloneJobs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmmigration.v1.ICloneJob[] = [];
      const iterable = client.listCloneJobsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCloneJobs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCloneJobs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCloneJobs with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCloneJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCloneJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCloneJobs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCloneJobsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmmigration.v1.ICloneJob[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCloneJobs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCloneJobs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listCutoverJobs', () => {
    it('invokes listCutoverJobs without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCutoverJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCutoverJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
      ];
      client.innerApiCalls.listCutoverJobs = stubSimpleCall(expectedResponse);
      const [response] = await client.listCutoverJobs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCutoverJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCutoverJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCutoverJobs without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCutoverJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCutoverJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
      ];
      client.innerApiCalls.listCutoverJobs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCutoverJobs(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.ICutoverJob[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCutoverJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCutoverJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCutoverJobs with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCutoverJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCutoverJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCutoverJobs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listCutoverJobs(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listCutoverJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCutoverJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCutoverJobsStream without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCutoverJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCutoverJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
      ];
      client.descriptors.page.listCutoverJobs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCutoverJobsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.CutoverJob[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.CutoverJob) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listCutoverJobs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCutoverJobs, request)
      );
      assert(
        (client.descriptors.page.listCutoverJobs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listCutoverJobsStream with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCutoverJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCutoverJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCutoverJobs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCutoverJobsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.CutoverJob[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.CutoverJob) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listCutoverJobs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCutoverJobs, request)
      );
      assert(
        (client.descriptors.page.listCutoverJobs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCutoverJobs without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCutoverJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCutoverJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.CutoverJob()
        ),
      ];
      client.descriptors.page.listCutoverJobs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmmigration.v1.ICutoverJob[] = [];
      const iterable = client.listCutoverJobsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCutoverJobs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCutoverJobs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCutoverJobs with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListCutoverJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListCutoverJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCutoverJobs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCutoverJobsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmmigration.v1.ICutoverJob[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCutoverJobs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCutoverJobs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listGroups', () => {
    it('invokes listGroups without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
      ];
      client.innerApiCalls.listGroups = stubSimpleCall(expectedResponse);
      const [response] = await client.listGroups(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGroups without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
      ];
      client.innerApiCalls.listGroups =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listGroups(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.IGroup[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGroups with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listGroups = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listGroups(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGroupsStream without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
      ];
      client.descriptors.page.listGroups.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listGroupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.Group[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.Group) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listGroups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGroups, request)
      );
      assert(
        (client.descriptors.page.listGroups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listGroupsStream with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGroups.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listGroupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.Group[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.Group) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listGroups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGroups, request)
      );
      assert(
        (client.descriptors.page.listGroups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listGroups without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
        generateSampleMessage(new protos.google.cloud.vmmigration.v1.Group()),
      ];
      client.descriptors.page.listGroups.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmmigration.v1.IGroup[] = [];
      const iterable = client.listGroupsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listGroups.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGroups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listGroups with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGroups.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listGroupsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmmigration.v1.IGroup[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listGroups.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGroups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listTargetProjects', () => {
    it('invokes listTargetProjects without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListTargetProjectsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListTargetProjectsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
      ];
      client.innerApiCalls.listTargetProjects =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listTargetProjects(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTargetProjects as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTargetProjects as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTargetProjects without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListTargetProjectsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListTargetProjectsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
      ];
      client.innerApiCalls.listTargetProjects =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listTargetProjects(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.vmmigration.v1.ITargetProject[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listTargetProjects as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTargetProjects as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTargetProjects with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListTargetProjectsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListTargetProjectsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listTargetProjects = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listTargetProjects(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listTargetProjects as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listTargetProjects as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listTargetProjectsStream without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListTargetProjectsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListTargetProjectsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
      ];
      client.descriptors.page.listTargetProjects.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listTargetProjectsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.TargetProject[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.TargetProject) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listTargetProjects.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTargetProjects, request)
      );
      assert(
        (client.descriptors.page.listTargetProjects.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listTargetProjectsStream with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListTargetProjectsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListTargetProjectsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTargetProjects.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listTargetProjectsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.TargetProject[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.TargetProject) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listTargetProjects.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTargetProjects, request)
      );
      assert(
        (client.descriptors.page.listTargetProjects.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTargetProjects without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListTargetProjectsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListTargetProjectsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.TargetProject()
        ),
      ];
      client.descriptors.page.listTargetProjects.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmmigration.v1.ITargetProject[] = [];
      const iterable = client.listTargetProjectsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTargetProjects.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listTargetProjects.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listTargetProjects with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListTargetProjectsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListTargetProjectsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listTargetProjects.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listTargetProjectsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmmigration.v1.ITargetProject[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listTargetProjects.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listTargetProjects.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listReplicationCycles', () => {
    it('invokes listReplicationCycles without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListReplicationCyclesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListReplicationCyclesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
      ];
      client.innerApiCalls.listReplicationCycles =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listReplicationCycles(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listReplicationCycles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReplicationCycles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReplicationCycles without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListReplicationCyclesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListReplicationCyclesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
      ];
      client.innerApiCalls.listReplicationCycles =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listReplicationCycles(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.vmmigration.v1.IReplicationCycle[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listReplicationCycles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReplicationCycles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReplicationCycles with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListReplicationCyclesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListReplicationCyclesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listReplicationCycles = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listReplicationCycles(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listReplicationCycles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listReplicationCycles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listReplicationCyclesStream without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListReplicationCyclesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListReplicationCyclesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
      ];
      client.descriptors.page.listReplicationCycles.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listReplicationCyclesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.ReplicationCycle[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.ReplicationCycle) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listReplicationCycles
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listReplicationCycles, request)
      );
      assert(
        (
          client.descriptors.page.listReplicationCycles
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listReplicationCyclesStream with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListReplicationCyclesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListReplicationCyclesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listReplicationCycles.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listReplicationCyclesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.vmmigration.v1.ReplicationCycle[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.vmmigration.v1.ReplicationCycle) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listReplicationCycles
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listReplicationCycles, request)
      );
      assert(
        (
          client.descriptors.page.listReplicationCycles
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listReplicationCycles without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListReplicationCyclesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListReplicationCyclesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
        generateSampleMessage(
          new protos.google.cloud.vmmigration.v1.ReplicationCycle()
        ),
      ];
      client.descriptors.page.listReplicationCycles.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.vmmigration.v1.IReplicationCycle[] =
        [];
      const iterable = client.listReplicationCyclesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listReplicationCycles
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listReplicationCycles
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listReplicationCycles with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.vmmigration.v1.ListReplicationCyclesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.vmmigration.v1.ListReplicationCyclesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listReplicationCycles.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listReplicationCyclesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.vmmigration.v1.IReplicationCycle[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listReplicationCycles
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listReplicationCycles
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('cloneJob', () => {
      const fakePath = '/rendered/path/cloneJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        source: 'sourceValue',
        migrating_vm: 'migratingVmValue',
        clone_job: 'cloneJobValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.cloneJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.cloneJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('cloneJobPath', () => {
        const result = client.cloneJobPath(
          'projectValue',
          'locationValue',
          'sourceValue',
          'migratingVmValue',
          'cloneJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.cloneJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCloneJobName', () => {
        const result = client.matchProjectFromCloneJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.cloneJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCloneJobName', () => {
        const result = client.matchLocationFromCloneJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.cloneJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromCloneJobName', () => {
        const result = client.matchSourceFromCloneJobName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (client.pathTemplates.cloneJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMigratingVmFromCloneJobName', () => {
        const result = client.matchMigratingVmFromCloneJobName(fakePath);
        assert.strictEqual(result, 'migratingVmValue');
        assert(
          (client.pathTemplates.cloneJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCloneJobFromCloneJobName', () => {
        const result = client.matchCloneJobFromCloneJobName(fakePath);
        assert.strictEqual(result, 'cloneJobValue');
        assert(
          (client.pathTemplates.cloneJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('cutoverJob', () => {
      const fakePath = '/rendered/path/cutoverJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        source: 'sourceValue',
        migrating_vm: 'migratingVmValue',
        cutover_job: 'cutoverJobValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.cutoverJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.cutoverJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('cutoverJobPath', () => {
        const result = client.cutoverJobPath(
          'projectValue',
          'locationValue',
          'sourceValue',
          'migratingVmValue',
          'cutoverJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.cutoverJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCutoverJobName', () => {
        const result = client.matchProjectFromCutoverJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.cutoverJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCutoverJobName', () => {
        const result = client.matchLocationFromCutoverJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.cutoverJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromCutoverJobName', () => {
        const result = client.matchSourceFromCutoverJobName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (client.pathTemplates.cutoverJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMigratingVmFromCutoverJobName', () => {
        const result = client.matchMigratingVmFromCutoverJobName(fakePath);
        assert.strictEqual(result, 'migratingVmValue');
        assert(
          (client.pathTemplates.cutoverJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCutoverJobFromCutoverJobName', () => {
        const result = client.matchCutoverJobFromCutoverJobName(fakePath);
        assert.strictEqual(result, 'cutoverJobValue');
        assert(
          (client.pathTemplates.cutoverJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('datacenterConnector', () => {
      const fakePath = '/rendered/path/datacenterConnector';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        source: 'sourceValue',
        datacenter_connector: 'datacenterConnectorValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.datacenterConnectorPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.datacenterConnectorPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('datacenterConnectorPath', () => {
        const result = client.datacenterConnectorPath(
          'projectValue',
          'locationValue',
          'sourceValue',
          'datacenterConnectorValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.datacenterConnectorPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDatacenterConnectorName', () => {
        const result = client.matchProjectFromDatacenterConnectorName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.datacenterConnectorPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDatacenterConnectorName', () => {
        const result =
          client.matchLocationFromDatacenterConnectorName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.datacenterConnectorPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromDatacenterConnectorName', () => {
        const result = client.matchSourceFromDatacenterConnectorName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.datacenterConnectorPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatacenterConnectorFromDatacenterConnectorName', () => {
        const result =
          client.matchDatacenterConnectorFromDatacenterConnectorName(fakePath);
        assert.strictEqual(result, 'datacenterConnectorValue');
        assert(
          (
            client.pathTemplates.datacenterConnectorPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('group', () => {
      const fakePath = '/rendered/path/group';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        group: 'groupValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.groupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.groupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('groupPath', () => {
        const result = client.groupPath(
          'projectValue',
          'locationValue',
          'groupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.groupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGroupName', () => {
        const result = client.matchProjectFromGroupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.groupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGroupName', () => {
        const result = client.matchLocationFromGroupName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.groupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchGroupFromGroupName', () => {
        const result = client.matchGroupFromGroupName(fakePath);
        assert.strictEqual(result, 'groupValue');
        assert(
          (client.pathTemplates.groupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('migratingVm', () => {
      const fakePath = '/rendered/path/migratingVm';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        source: 'sourceValue',
        migrating_vm: 'migratingVmValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.migratingVmPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.migratingVmPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('migratingVmPath', () => {
        const result = client.migratingVmPath(
          'projectValue',
          'locationValue',
          'sourceValue',
          'migratingVmValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.migratingVmPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromMigratingVmName', () => {
        const result = client.matchProjectFromMigratingVmName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.migratingVmPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromMigratingVmName', () => {
        const result = client.matchLocationFromMigratingVmName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.migratingVmPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromMigratingVmName', () => {
        const result = client.matchSourceFromMigratingVmName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (client.pathTemplates.migratingVmPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMigratingVmFromMigratingVmName', () => {
        const result = client.matchMigratingVmFromMigratingVmName(fakePath);
        assert.strictEqual(result, 'migratingVmValue');
        assert(
          (client.pathTemplates.migratingVmPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('replicationCycle', () => {
      const fakePath = '/rendered/path/replicationCycle';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        source: 'sourceValue',
        migrating_vm: 'migratingVmValue',
        replication_cycle: 'replicationCycleValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.replicationCyclePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.replicationCyclePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('replicationCyclePath', () => {
        const result = client.replicationCyclePath(
          'projectValue',
          'locationValue',
          'sourceValue',
          'migratingVmValue',
          'replicationCycleValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.replicationCyclePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromReplicationCycleName', () => {
        const result = client.matchProjectFromReplicationCycleName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.replicationCyclePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromReplicationCycleName', () => {
        const result = client.matchLocationFromReplicationCycleName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.replicationCyclePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromReplicationCycleName', () => {
        const result = client.matchSourceFromReplicationCycleName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (client.pathTemplates.replicationCyclePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMigratingVmFromReplicationCycleName', () => {
        const result =
          client.matchMigratingVmFromReplicationCycleName(fakePath);
        assert.strictEqual(result, 'migratingVmValue');
        assert(
          (client.pathTemplates.replicationCyclePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchReplicationCycleFromReplicationCycleName', () => {
        const result =
          client.matchReplicationCycleFromReplicationCycleName(fakePath);
        assert.strictEqual(result, 'replicationCycleValue');
        assert(
          (client.pathTemplates.replicationCyclePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('source', () => {
      const fakePath = '/rendered/path/source';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        source: 'sourceValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.sourcePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.sourcePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('sourcePath', () => {
        const result = client.sourcePath(
          'projectValue',
          'locationValue',
          'sourceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.sourcePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSourceName', () => {
        const result = client.matchProjectFromSourceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.sourcePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSourceName', () => {
        const result = client.matchLocationFromSourceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.sourcePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromSourceName', () => {
        const result = client.matchSourceFromSourceName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (client.pathTemplates.sourcePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('targetProject', () => {
      const fakePath = '/rendered/path/targetProject';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        target_project: 'targetProjectValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.targetProjectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.targetProjectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('targetProjectPath', () => {
        const result = client.targetProjectPath(
          'projectValue',
          'locationValue',
          'targetProjectValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.targetProjectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTargetProjectName', () => {
        const result = client.matchProjectFromTargetProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.targetProjectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTargetProjectName', () => {
        const result = client.matchLocationFromTargetProjectName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.targetProjectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTargetProjectFromTargetProjectName', () => {
        const result = client.matchTargetProjectFromTargetProjectName(fakePath);
        assert.strictEqual(result, 'targetProjectValue');
        assert(
          (client.pathTemplates.targetProjectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('utilizationReport', () => {
      const fakePath = '/rendered/path/utilizationReport';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        source: 'sourceValue',
        utilization_report: 'utilizationReportValue',
      };
      const client = new vmmigrationModule.v1.VmMigrationClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.utilizationReportPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.utilizationReportPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('utilizationReportPath', () => {
        const result = client.utilizationReportPath(
          'projectValue',
          'locationValue',
          'sourceValue',
          'utilizationReportValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.utilizationReportPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromUtilizationReportName', () => {
        const result = client.matchProjectFromUtilizationReportName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.utilizationReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromUtilizationReportName', () => {
        const result = client.matchLocationFromUtilizationReportName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.utilizationReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromUtilizationReportName', () => {
        const result = client.matchSourceFromUtilizationReportName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.utilizationReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchUtilizationReportFromUtilizationReportName', () => {
        const result =
          client.matchUtilizationReportFromUtilizationReportName(fakePath);
        assert.strictEqual(result, 'utilizationReportValue');
        assert(
          (
            client.pathTemplates.utilizationReportPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
