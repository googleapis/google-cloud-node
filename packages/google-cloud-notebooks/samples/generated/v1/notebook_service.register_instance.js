// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, instanceId) {
  // [START notebooks_v1_generated_NotebookService_RegisterInstance_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Format:
   *  `parent=projects/{project_id}/locations/{location}`
   */
  // const parent = 'abc123'
  /**
   *  Required. User defined unique ID of this instance. The `instance_id` must
   *  be 1 to 63 characters long and contain only lowercase letters,
   *  numeric characters, and dashes. The first character must be a lowercase
   *  letter and the last character cannot be a dash.
   */
  // const instanceId = 'abc123'

  // Imports the Notebooks library
  const {NotebookServiceClient} = require('@google-cloud/notebooks').v1;

  // Instantiates a client
  const notebooksClient = new NotebookServiceClient();

  async function callRegisterInstance() {
    // Construct request
    const request = {
      parent,
      instanceId,
    };

    // Run request
    const [operation] = await notebooksClient.registerInstance(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callRegisterInstance();
  // [END notebooks_v1_generated_NotebookService_RegisterInstance_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
