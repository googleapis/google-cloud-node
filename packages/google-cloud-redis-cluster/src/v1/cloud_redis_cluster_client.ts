// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/cloud_redis_cluster_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './cloud_redis_cluster_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Configures and manages Cloud Memorystore for Redis clusters
 *
 *  Google Cloud Memorystore for Redis Cluster
 *
 *  The `redis.googleapis.com` service implements the Google Cloud Memorystore
 *  for Redis API and defines the following resource model for managing Redis
 *  clusters:
 *  * The service works with a collection of cloud projects, named: `/projects/*`
 *  * Each project has a collection of available locations, named: `/locations/*`
 *  * Each location has a collection of Redis clusters, named: `/clusters/*`
 *  * As such, Redis clusters are resources of the form:
 *    `/projects/{project_id}/locations/{location_id}/clusters/{instance_id}`
 *
 *  Note that location_id must be a GCP `region`; for example:
 *  * `projects/redpepper-1290/locations/us-central1/clusters/my-redis`
 *
 *  We use API version selector for Flex APIs
 *  * The versioning strategy is release-based versioning
 *  * Our backend CLH only deals with the superset version (called v1main)
 *  * Existing backend for Redis Gen1 and MRR is not touched.
 *  * More details in go/redis-flex-api-versioning
 * @class
 * @memberof v1
 */
export class CloudRedisClusterClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  cloudRedisClusterStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of CloudRedisClusterClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new CloudRedisClusterClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof CloudRedisClusterClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      clusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/clusters/{cluster}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listClusters: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'clusters'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const updateClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.redis.cluster.v1.Cluster'
    ) as gax.protobuf.Type;
    const updateClusterMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Any'
    ) as gax.protobuf.Type;
    const deleteClusterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteClusterMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Any'
    ) as gax.protobuf.Type;
    const createClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.redis.cluster.v1.Cluster'
    ) as gax.protobuf.Type;
    const createClusterMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Any'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      updateCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateClusterResponse.decode.bind(updateClusterResponse),
        updateClusterMetadata.decode.bind(updateClusterMetadata)
      ),
      deleteCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteClusterResponse.decode.bind(deleteClusterResponse),
        deleteClusterMetadata.decode.bind(deleteClusterMetadata)
      ),
      createCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createClusterResponse.decode.bind(createClusterResponse),
        createClusterMetadata.decode.bind(createClusterMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.redis.cluster.v1.CloudRedisCluster',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.cloudRedisClusterStub) {
      return this.cloudRedisClusterStub;
    }

    // Put together the "service stub" for
    // google.cloud.redis.cluster.v1.CloudRedisCluster.
    this.cloudRedisClusterStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.redis.cluster.v1.CloudRedisCluster'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.redis.cluster.v1.CloudRedisCluster,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const cloudRedisClusterStubMethods = [
      'listClusters',
      'getCluster',
      'updateCluster',
      'deleteCluster',
      'createCluster',
    ];
    for (const methodName of cloudRedisClusterStubMethods) {
      const callPromise = this.cloudRedisClusterStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.cloudRedisClusterStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'redis.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'redis.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the details of a specific Redis cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Redis cluster resource name using the form:
   *       `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
   *   where `location_id` refers to a GCP region.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.redis.cluster.v1.Cluster|Cluster}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_redis_cluster.get_cluster.js</caption>
   * region_tag:redis_v1_generated_CloudRedisCluster_GetCluster_async
   */
  getCluster(
    request?: protos.google.cloud.redis.cluster.v1.IGetClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.redis.cluster.v1.ICluster,
      protos.google.cloud.redis.cluster.v1.IGetClusterRequest | undefined,
      {} | undefined,
    ]
  >;
  getCluster(
    request: protos.google.cloud.redis.cluster.v1.IGetClusterRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.redis.cluster.v1.ICluster,
      | protos.google.cloud.redis.cluster.v1.IGetClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCluster(
    request: protos.google.cloud.redis.cluster.v1.IGetClusterRequest,
    callback: Callback<
      protos.google.cloud.redis.cluster.v1.ICluster,
      | protos.google.cloud.redis.cluster.v1.IGetClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCluster(
    request?: protos.google.cloud.redis.cluster.v1.IGetClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.redis.cluster.v1.ICluster,
          | protos.google.cloud.redis.cluster.v1.IGetClusterRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.redis.cluster.v1.ICluster,
      | protos.google.cloud.redis.cluster.v1.IGetClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.redis.cluster.v1.ICluster,
      protos.google.cloud.redis.cluster.v1.IGetClusterRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getCluster(request, options, callback);
  }

  /**
   * Updates the metadata and configuration of a specific Redis cluster.
   *
   * Completed longrunning.Operation will contain the new cluster object
   * in the response field. The returned operation is automatically deleted
   * after a few hours, so there is no need to call DeleteOperation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update. At least one path must be supplied in
   *   this field. The elements of the repeated paths field may only include these
   *   fields from {@link protos.google.cloud.redis.cluster.v1.Cluster|Cluster}:
   *
   *    *   `size_gb`
   *    *   `replica_count`
   * @param {google.cloud.redis.cluster.v1.Cluster} request.cluster
   *   Required. Update description.
   *   Only fields specified in update_mask are updated.
   * @param {string} request.requestId
   *   Idempotent request UUID.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_redis_cluster.update_cluster.js</caption>
   * region_tag:redis_v1_generated_CloudRedisCluster_UpdateCluster_async
   */
  updateCluster(
    request?: protos.google.cloud.redis.cluster.v1.IUpdateClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.redis.cluster.v1.ICluster,
        protos.google.protobuf.IAny
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateCluster(
    request: protos.google.cloud.redis.cluster.v1.IUpdateClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.redis.cluster.v1.ICluster,
        protos.google.protobuf.IAny
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCluster(
    request: protos.google.cloud.redis.cluster.v1.IUpdateClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.redis.cluster.v1.ICluster,
        protos.google.protobuf.IAny
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCluster(
    request?: protos.google.cloud.redis.cluster.v1.IUpdateClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.redis.cluster.v1.ICluster,
            protos.google.protobuf.IAny
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.redis.cluster.v1.ICluster,
        protos.google.protobuf.IAny
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.redis.cluster.v1.ICluster,
        protos.google.protobuf.IAny
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'cluster.name': request.cluster!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_redis_cluster.update_cluster.js</caption>
   * region_tag:redis_v1_generated_CloudRedisCluster_UpdateCluster_async
   */
  async checkUpdateClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.redis.cluster.v1.Cluster,
      protos.google.protobuf.Any
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.redis.cluster.v1.Cluster,
      protos.google.protobuf.Any
    >;
  }
  /**
   * Deletes a specific Redis cluster. Cluster stops serving and data is
   * deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Redis cluster resource name using the form:
   *       `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
   *   where `location_id` refers to a GCP region.
   * @param {string} request.requestId
   *   Idempotent request UUID.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_redis_cluster.delete_cluster.js</caption>
   * region_tag:redis_v1_generated_CloudRedisCluster_DeleteCluster_async
   */
  deleteCluster(
    request?: protos.google.cloud.redis.cluster.v1.IDeleteClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IAny>,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteCluster(
    request: protos.google.cloud.redis.cluster.v1.IDeleteClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IAny>,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCluster(
    request: protos.google.cloud.redis.cluster.v1.IDeleteClusterRequest,
    callback: Callback<
      LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IAny>,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCluster(
    request?: protos.google.cloud.redis.cluster.v1.IDeleteClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.protobuf.IAny
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IAny>,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IAny>,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_redis_cluster.delete_cluster.js</caption>
   * region_tag:redis_v1_generated_CloudRedisCluster_DeleteCluster_async
   */
  async checkDeleteClusterProgress(
    name: string
  ): Promise<
    LROperation<protos.google.protobuf.Empty, protos.google.protobuf.Any>
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.protobuf.Any
    >;
  }
  /**
   * Creates a Redis cluster based on the specified properties.
   * The creation is executed asynchronously and callers may check the returned
   * operation to track its progress. Once the operation is completed the Redis
   * cluster will be fully functional. The completed longrunning.Operation will
   * contain the new cluster object in the response field.
   *
   * The returned operation is automatically deleted after a few hours, so there
   * is no need to call DeleteOperation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the cluster location using the form:
   *       `projects/{project_id}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {string} request.clusterId
   *   Required. The logical name of the Redis cluster in the customer project
   *   with the following restrictions:
   *
   *   * Must contain only lowercase letters, numbers, and hyphens.
   *   * Must start with a letter.
   *   * Must be between 1-63 characters.
   *   * Must end with a number or a letter.
   *   * Must be unique within the customer project / location
   * @param {google.cloud.redis.cluster.v1.Cluster} request.cluster
   *   Required. The cluster that is to be created.
   * @param {string} request.requestId
   *   Idempotent request UUID.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_redis_cluster.create_cluster.js</caption>
   * region_tag:redis_v1_generated_CloudRedisCluster_CreateCluster_async
   */
  createCluster(
    request?: protos.google.cloud.redis.cluster.v1.ICreateClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.redis.cluster.v1.ICluster,
        protos.google.protobuf.IAny
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createCluster(
    request: protos.google.cloud.redis.cluster.v1.ICreateClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.redis.cluster.v1.ICluster,
        protos.google.protobuf.IAny
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCluster(
    request: protos.google.cloud.redis.cluster.v1.ICreateClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.redis.cluster.v1.ICluster,
        protos.google.protobuf.IAny
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCluster(
    request?: protos.google.cloud.redis.cluster.v1.ICreateClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.redis.cluster.v1.ICluster,
            protos.google.protobuf.IAny
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.redis.cluster.v1.ICluster,
        protos.google.protobuf.IAny
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.redis.cluster.v1.ICluster,
        protos.google.protobuf.IAny
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_redis_cluster.create_cluster.js</caption>
   * region_tag:redis_v1_generated_CloudRedisCluster_CreateCluster_async
   */
  async checkCreateClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.redis.cluster.v1.Cluster,
      protos.google.protobuf.Any
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.redis.cluster.v1.Cluster,
      protos.google.protobuf.Any
    >;
  }
  /**
   * Lists all Redis clusters owned by a project in either the specified
   * location (region) or all locations.
   *
   * The location should have the following format:
   *
   * * `projects/{project_id}/locations/{location_id}`
   *
   * If `location_id` is specified as `-` (wildcard), then all regions
   * available to the project are queried, and the results are aggregated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the cluster location using the form:
   *       `projects/{project_id}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 1000 will be used by the service.
   *   Regardless of the page_size value, the response may include a partial list
   *   and a caller should only rely on response's
   *   {@link protos.google.cloud.redis.cluster.v1.ListClustersResponse.next_page_token|`next_page_token`}
   *   to determine if there are more clusters left to be queried.
   * @param {string} request.pageToken
   *   The `next_page_token` value returned from a previous
   *   {@link protos.CloudRedis.ListClusters|ListClusters} request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.redis.cluster.v1.Cluster|Cluster}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listClusters(
    request?: protos.google.cloud.redis.cluster.v1.IListClustersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.redis.cluster.v1.ICluster[],
      protos.google.cloud.redis.cluster.v1.IListClustersRequest | null,
      protos.google.cloud.redis.cluster.v1.IListClustersResponse,
    ]
  >;
  listClusters(
    request: protos.google.cloud.redis.cluster.v1.IListClustersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.redis.cluster.v1.IListClustersRequest,
      | protos.google.cloud.redis.cluster.v1.IListClustersResponse
      | null
      | undefined,
      protos.google.cloud.redis.cluster.v1.ICluster
    >
  ): void;
  listClusters(
    request: protos.google.cloud.redis.cluster.v1.IListClustersRequest,
    callback: PaginationCallback<
      protos.google.cloud.redis.cluster.v1.IListClustersRequest,
      | protos.google.cloud.redis.cluster.v1.IListClustersResponse
      | null
      | undefined,
      protos.google.cloud.redis.cluster.v1.ICluster
    >
  ): void;
  listClusters(
    request?: protos.google.cloud.redis.cluster.v1.IListClustersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.redis.cluster.v1.IListClustersRequest,
          | protos.google.cloud.redis.cluster.v1.IListClustersResponse
          | null
          | undefined,
          protos.google.cloud.redis.cluster.v1.ICluster
        >,
    callback?: PaginationCallback<
      protos.google.cloud.redis.cluster.v1.IListClustersRequest,
      | protos.google.cloud.redis.cluster.v1.IListClustersResponse
      | null
      | undefined,
      protos.google.cloud.redis.cluster.v1.ICluster
    >
  ): Promise<
    [
      protos.google.cloud.redis.cluster.v1.ICluster[],
      protos.google.cloud.redis.cluster.v1.IListClustersRequest | null,
      protos.google.cloud.redis.cluster.v1.IListClustersResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listClusters(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the cluster location using the form:
   *       `projects/{project_id}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 1000 will be used by the service.
   *   Regardless of the page_size value, the response may include a partial list
   *   and a caller should only rely on response's
   *   {@link protos.google.cloud.redis.cluster.v1.ListClustersResponse.next_page_token|`next_page_token`}
   *   to determine if there are more clusters left to be queried.
   * @param {string} request.pageToken
   *   The `next_page_token` value returned from a previous
   *   {@link protos.CloudRedis.ListClusters|ListClusters} request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.redis.cluster.v1.Cluster|Cluster} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listClustersStream(
    request?: protos.google.cloud.redis.cluster.v1.IListClustersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listClusters.createStream(
      this.innerApiCalls.listClusters as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listClusters`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the cluster location using the form:
   *       `projects/{project_id}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 1000 will be used by the service.
   *   Regardless of the page_size value, the response may include a partial list
   *   and a caller should only rely on response's
   *   {@link protos.google.cloud.redis.cluster.v1.ListClustersResponse.next_page_token|`next_page_token`}
   *   to determine if there are more clusters left to be queried.
   * @param {string} request.pageToken
   *   The `next_page_token` value returned from a previous
   *   {@link protos.CloudRedis.ListClusters|ListClusters} request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.redis.cluster.v1.Cluster|Cluster}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/cloud_redis_cluster.list_clusters.js</caption>
   * region_tag:redis_v1_generated_CloudRedisCluster_ListClusters_async
   */
  listClustersAsync(
    request?: protos.google.cloud.redis.cluster.v1.IListClustersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.redis.cluster.v1.ICluster> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listClusters.asyncIterate(
      this.innerApiCalls['listClusters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.redis.cluster.v1.ICluster>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified cluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cluster
   * @returns {string} Resource name string.
   */
  clusterPath(project: string, location: string, cluster: string) {
    return this.pathTemplates.clusterPathTemplate.render({
      project: project,
      location: location,
      cluster: cluster,
    });
  }

  /**
   * Parse the project from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
  }

  /**
   * Parse the location from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).location;
  }

  /**
   * Parse the cluster from Cluster resource.
   *
   * @param {string} clusterName
   *   A fully-qualified path representing Cluster resource.
   * @returns {string} A string representing the cluster.
   */
  matchClusterFromClusterName(clusterName: string) {
    return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.cloudRedisClusterStub && !this._terminated) {
      return this.cloudRedisClusterStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
