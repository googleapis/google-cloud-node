// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
/**
 * Client JSON configuration object, loaded from
 * `src/v3/notification_channel_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './notification_channel_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  The Notification Channel API provides access to configuration that
 *  controls how messages related to incidents are sent.
 * @class
 * @memberof v3
 */
export class NotificationChannelServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  notificationChannelServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of NotificationChannelServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof NotificationChannelServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      folderAlertPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/alertPolicies/{alert_policy}'
      ),
      folderAlertPolicyConditionPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/alertPolicies/{alert_policy}/conditions/{condition}'
      ),
      folderChannelDescriptorPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/notificationChannelDescriptors/{channel_descriptor}'
      ),
      folderGroupPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/groups/{group}'
      ),
      folderNotificationChannelPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/notificationChannels/{notification_channel}'
      ),
      folderServicePathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/services/{service}'
      ),
      folderServiceServiceLevelObjectivePathTemplate:
        new this._gaxModule.PathTemplate(
          'folders/{folder}/services/{service}/serviceLevelObjectives/{service_level_objective}'
        ),
      folderUptimeCheckConfigPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/uptimeCheckConfigs/{uptime_check_config}'
      ),
      organizationAlertPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/alertPolicies/{alert_policy}'
      ),
      organizationAlertPolicyConditionPathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/alertPolicies/{alert_policy}/conditions/{condition}'
        ),
      organizationChannelDescriptorPathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/notificationChannelDescriptors/{channel_descriptor}'
        ),
      organizationGroupPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/groups/{group}'
      ),
      organizationNotificationChannelPathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/notificationChannels/{notification_channel}'
        ),
      organizationServicePathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/services/{service}'
      ),
      organizationServiceServiceLevelObjectivePathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/services/{service}/serviceLevelObjectives/{service_level_objective}'
        ),
      organizationUptimeCheckConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/uptimeCheckConfigs/{uptime_check_config}'
        ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectAlertPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/alertPolicies/{alert_policy}'
      ),
      projectAlertPolicyConditionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/alertPolicies/{alert_policy}/conditions/{condition}'
      ),
      projectChannelDescriptorPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/notificationChannelDescriptors/{channel_descriptor}'
      ),
      projectGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/groups/{group}'
      ),
      projectNotificationChannelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/notificationChannels/{notification_channel}'
      ),
      projectServicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/services/{service}'
      ),
      projectServiceServiceLevelObjectivePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/services/{service}/serviceLevelObjectives/{service_level_objective}'
        ),
      projectUptimeCheckConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/uptimeCheckConfigs/{uptime_check_config}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listNotificationChannelDescriptors: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'channelDescriptors'
      ),
      listNotificationChannels: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'notificationChannels'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.monitoring.v3.NotificationChannelService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.notificationChannelServiceStub) {
      return this.notificationChannelServiceStub;
    }

    // Put together the "service stub" for
    // google.monitoring.v3.NotificationChannelService.
    this.notificationChannelServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.monitoring.v3.NotificationChannelService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.monitoring.v3.NotificationChannelService,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const notificationChannelServiceStubMethods = [
      'listNotificationChannelDescriptors',
      'getNotificationChannelDescriptor',
      'listNotificationChannels',
      'getNotificationChannel',
      'createNotificationChannel',
      'updateNotificationChannel',
      'deleteNotificationChannel',
      'sendNotificationChannelVerificationCode',
      'getNotificationChannelVerificationCode',
      'verifyNotificationChannel',
    ];
    for (const methodName of notificationChannelServiceStubMethods) {
      const callPromise = this.notificationChannelServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.notificationChannelServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'monitoring.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'monitoring.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/monitoring',
      'https://www.googleapis.com/auth/monitoring.read',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getNotificationChannelDescriptor(
    request: protos.google.monitoring.v3.IGetNotificationChannelDescriptorRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannelDescriptor,
      (
        | protos.google.monitoring.v3.IGetNotificationChannelDescriptorRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getNotificationChannelDescriptor(
    request: protos.google.monitoring.v3.IGetNotificationChannelDescriptorRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.monitoring.v3.INotificationChannelDescriptor,
      | protos.google.monitoring.v3.IGetNotificationChannelDescriptorRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getNotificationChannelDescriptor(
    request: protos.google.monitoring.v3.IGetNotificationChannelDescriptorRequest,
    callback: Callback<
      protos.google.monitoring.v3.INotificationChannelDescriptor,
      | protos.google.monitoring.v3.IGetNotificationChannelDescriptorRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets a single channel descriptor. The descriptor indicates which fields
   * are expected / permitted for a notification channel of the given type.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The channel type for which to execute the request. The format is:
   *
   *       projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[CHANNEL_TYPE]
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [NotificationChannelDescriptor]{@link google.monitoring.v3.NotificationChannelDescriptor}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.getNotificationChannelDescriptor(request);
   */
  getNotificationChannelDescriptor(
    request: protos.google.monitoring.v3.IGetNotificationChannelDescriptorRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.monitoring.v3.INotificationChannelDescriptor,
          | protos.google.monitoring.v3.IGetNotificationChannelDescriptorRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.monitoring.v3.INotificationChannelDescriptor,
      | protos.google.monitoring.v3.IGetNotificationChannelDescriptorRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannelDescriptor,
      (
        | protos.google.monitoring.v3.IGetNotificationChannelDescriptorRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getNotificationChannelDescriptor(
      request,
      options,
      callback
    );
  }
  getNotificationChannel(
    request: protos.google.monitoring.v3.IGetNotificationChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannel,
      protos.google.monitoring.v3.IGetNotificationChannelRequest | undefined,
      {} | undefined
    ]
  >;
  getNotificationChannel(
    request: protos.google.monitoring.v3.IGetNotificationChannelRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.IGetNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getNotificationChannel(
    request: protos.google.monitoring.v3.IGetNotificationChannelRequest,
    callback: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.IGetNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets a single notification channel. The channel includes the relevant
   * configuration details with which the channel was created. However, the
   * response may truncate or omit passwords, API keys, or other private key
   * matter and thus the response may not be 100% identical to the information
   * that was supplied in the call to the create method.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The channel for which to execute the request. The format is:
   *
   *       projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [NotificationChannel]{@link google.monitoring.v3.NotificationChannel}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.getNotificationChannel(request);
   */
  getNotificationChannel(
    request: protos.google.monitoring.v3.IGetNotificationChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.monitoring.v3.INotificationChannel,
          | protos.google.monitoring.v3.IGetNotificationChannelRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.IGetNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannel,
      protos.google.monitoring.v3.IGetNotificationChannelRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getNotificationChannel(
      request,
      options,
      callback
    );
  }
  createNotificationChannel(
    request: protos.google.monitoring.v3.ICreateNotificationChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannel,
      protos.google.monitoring.v3.ICreateNotificationChannelRequest | undefined,
      {} | undefined
    ]
  >;
  createNotificationChannel(
    request: protos.google.monitoring.v3.ICreateNotificationChannelRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.ICreateNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createNotificationChannel(
    request: protos.google.monitoring.v3.ICreateNotificationChannelRequest,
    callback: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.ICreateNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a new notification channel, representing a single notification
   * endpoint such as an email address, SMS number, or PagerDuty service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The project on which to execute the request. The format is:
   *
   *       projects/[PROJECT_ID_OR_NUMBER]
   *
   *   This names the container into which the channel will be
   *   written, this does not name the newly created channel. The resulting
   *   channel's name will have a normalized version of this field as a prefix,
   *   but will add `/notificationChannels/[CHANNEL_ID]` to identify the channel.
   * @param {google.monitoring.v3.NotificationChannel} request.notificationChannel
   *   Required. The definition of the `NotificationChannel` to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [NotificationChannel]{@link google.monitoring.v3.NotificationChannel}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.createNotificationChannel(request);
   */
  createNotificationChannel(
    request: protos.google.monitoring.v3.ICreateNotificationChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.monitoring.v3.INotificationChannel,
          | protos.google.monitoring.v3.ICreateNotificationChannelRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.ICreateNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannel,
      protos.google.monitoring.v3.ICreateNotificationChannelRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.createNotificationChannel(
      request,
      options,
      callback
    );
  }
  updateNotificationChannel(
    request: protos.google.monitoring.v3.IUpdateNotificationChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannel,
      protos.google.monitoring.v3.IUpdateNotificationChannelRequest | undefined,
      {} | undefined
    ]
  >;
  updateNotificationChannel(
    request: protos.google.monitoring.v3.IUpdateNotificationChannelRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.IUpdateNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateNotificationChannel(
    request: protos.google.monitoring.v3.IUpdateNotificationChannelRequest,
    callback: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.IUpdateNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates a notification channel. Fields not specified in the field mask
   * remain unchanged.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The fields to update.
   * @param {google.monitoring.v3.NotificationChannel} request.notificationChannel
   *   Required. A description of the changes to be applied to the specified
   *   notification channel. The description must provide a definition for
   *   fields to be updated; the names of these fields should also be
   *   included in the `update_mask`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [NotificationChannel]{@link google.monitoring.v3.NotificationChannel}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.updateNotificationChannel(request);
   */
  updateNotificationChannel(
    request: protos.google.monitoring.v3.IUpdateNotificationChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.monitoring.v3.INotificationChannel,
          | protos.google.monitoring.v3.IUpdateNotificationChannelRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.IUpdateNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannel,
      protos.google.monitoring.v3.IUpdateNotificationChannelRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        'notification_channel.name': request.notificationChannel!.name || '',
      });
    this.initialize();
    return this.innerApiCalls.updateNotificationChannel(
      request,
      options,
      callback
    );
  }
  deleteNotificationChannel(
    request: protos.google.monitoring.v3.IDeleteNotificationChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.monitoring.v3.IDeleteNotificationChannelRequest | undefined,
      {} | undefined
    ]
  >;
  deleteNotificationChannel(
    request: protos.google.monitoring.v3.IDeleteNotificationChannelRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.monitoring.v3.IDeleteNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteNotificationChannel(
    request: protos.google.monitoring.v3.IDeleteNotificationChannelRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.monitoring.v3.IDeleteNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes a notification channel.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The channel for which to execute the request. The format is:
   *
   *       projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]
   * @param {boolean} request.force
   *   If true, the notification channel will be deleted regardless of its
   *   use in alert policies (the policies will be updated to remove the
   *   channel). If false, channels that are still referenced by an existing
   *   alerting policy will fail to be deleted in a delete operation.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.deleteNotificationChannel(request);
   */
  deleteNotificationChannel(
    request: protos.google.monitoring.v3.IDeleteNotificationChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.monitoring.v3.IDeleteNotificationChannelRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.monitoring.v3.IDeleteNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.monitoring.v3.IDeleteNotificationChannelRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.deleteNotificationChannel(
      request,
      options,
      callback
    );
  }
  sendNotificationChannelVerificationCode(
    request: protos.google.monitoring.v3.ISendNotificationChannelVerificationCodeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.monitoring.v3.ISendNotificationChannelVerificationCodeRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  sendNotificationChannelVerificationCode(
    request: protos.google.monitoring.v3.ISendNotificationChannelVerificationCodeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.monitoring.v3.ISendNotificationChannelVerificationCodeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  sendNotificationChannelVerificationCode(
    request: protos.google.monitoring.v3.ISendNotificationChannelVerificationCodeRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.monitoring.v3.ISendNotificationChannelVerificationCodeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Causes a verification code to be delivered to the channel. The code
   * can then be supplied in `VerifyNotificationChannel` to verify the channel.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The notification channel to which to send a verification code.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.sendNotificationChannelVerificationCode(request);
   */
  sendNotificationChannelVerificationCode(
    request: protos.google.monitoring.v3.ISendNotificationChannelVerificationCodeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.monitoring.v3.ISendNotificationChannelVerificationCodeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.monitoring.v3.ISendNotificationChannelVerificationCodeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.monitoring.v3.ISendNotificationChannelVerificationCodeRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.sendNotificationChannelVerificationCode(
      request,
      options,
      callback
    );
  }
  getNotificationChannelVerificationCode(
    request: protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeResponse,
      (
        | protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getNotificationChannelVerificationCode(
    request: protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeResponse,
      | protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getNotificationChannelVerificationCode(
    request: protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeRequest,
    callback: Callback<
      protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeResponse,
      | protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Requests a verification code for an already verified channel that can then
   * be used in a call to VerifyNotificationChannel() on a different channel
   * with an equivalent identity in the same or in a different project. This
   * makes it possible to copy a channel between projects without requiring
   * manual reverification of the channel. If the channel is not in the
   * verified state, this method will fail (in other words, this may only be
   * used if the SendNotificationChannelVerificationCode and
   * VerifyNotificationChannel paths have already been used to put the given
   * channel into the verified state).
   *
   * There is no guarantee that the verification codes returned by this method
   * will be of a similar structure or form as the ones that are delivered
   * to the channel via SendNotificationChannelVerificationCode; while
   * VerifyNotificationChannel() will recognize both the codes delivered via
   * SendNotificationChannelVerificationCode() and returned from
   * GetNotificationChannelVerificationCode(), it is typically the case that
   * the verification codes delivered via
   * SendNotificationChannelVerificationCode() will be shorter and also
   * have a shorter expiration (e.g. codes such as "G-123456") whereas
   * GetVerificationCode() will typically return a much longer, websafe base
   * 64 encoded string that has a longer expiration time.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The notification channel for which a verification code is to be generated
   *   and retrieved. This must name a channel that is already verified; if
   *   the specified channel is not verified, the request will fail.
   * @param {google.protobuf.Timestamp} request.expireTime
   *   The desired expiration time. If specified, the API will guarantee that
   *   the returned code will not be valid after the specified timestamp;
   *   however, the API cannot guarantee that the returned code will be
   *   valid for at least as long as the requested time (the API puts an upper
   *   bound on the amount of time for which a code may be valid). If omitted,
   *   a default expiration will be used, which may be less than the max
   *   permissible expiration (so specifying an expiration may extend the
   *   code's lifetime over omitting an expiration, even though the API does
   *   impose an upper limit on the maximum expiration that is permitted).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GetNotificationChannelVerificationCodeResponse]{@link google.monitoring.v3.GetNotificationChannelVerificationCodeResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.getNotificationChannelVerificationCode(request);
   */
  getNotificationChannelVerificationCode(
    request: protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeResponse,
          | protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeResponse,
      | protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeResponse,
      (
        | protos.google.monitoring.v3.IGetNotificationChannelVerificationCodeRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getNotificationChannelVerificationCode(
      request,
      options,
      callback
    );
  }
  verifyNotificationChannel(
    request: protos.google.monitoring.v3.IVerifyNotificationChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannel,
      protos.google.monitoring.v3.IVerifyNotificationChannelRequest | undefined,
      {} | undefined
    ]
  >;
  verifyNotificationChannel(
    request: protos.google.monitoring.v3.IVerifyNotificationChannelRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.IVerifyNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  verifyNotificationChannel(
    request: protos.google.monitoring.v3.IVerifyNotificationChannelRequest,
    callback: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.IVerifyNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Verifies a `NotificationChannel` by proving receipt of the code
   * delivered to the channel as a result of calling
   * `SendNotificationChannelVerificationCode`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The notification channel to verify.
   * @param {string} request.code
   *   Required. The verification code that was delivered to the channel as
   *   a result of invoking the `SendNotificationChannelVerificationCode` API
   *   method or that was retrieved from a verified channel via
   *   `GetNotificationChannelVerificationCode`. For example, one might have
   *   "G-123456" or "TKNZGhhd2EyN3I1MnRnMjRv" (in general, one is only
   *   guaranteed that the code is valid UTF-8; one should not
   *   make any assumptions regarding the structure or format of the code).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [NotificationChannel]{@link google.monitoring.v3.NotificationChannel}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.verifyNotificationChannel(request);
   */
  verifyNotificationChannel(
    request: protos.google.monitoring.v3.IVerifyNotificationChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.monitoring.v3.INotificationChannel,
          | protos.google.monitoring.v3.IVerifyNotificationChannelRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.monitoring.v3.INotificationChannel,
      | protos.google.monitoring.v3.IVerifyNotificationChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannel,
      protos.google.monitoring.v3.IVerifyNotificationChannelRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.verifyNotificationChannel(
      request,
      options,
      callback
    );
  }

  listNotificationChannelDescriptors(
    request: protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannelDescriptor[],
      protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest | null,
      protos.google.monitoring.v3.IListNotificationChannelDescriptorsResponse
    ]
  >;
  listNotificationChannelDescriptors(
    request: protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest,
      | protos.google.monitoring.v3.IListNotificationChannelDescriptorsResponse
      | null
      | undefined,
      protos.google.monitoring.v3.INotificationChannelDescriptor
    >
  ): void;
  listNotificationChannelDescriptors(
    request: protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest,
    callback: PaginationCallback<
      protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest,
      | protos.google.monitoring.v3.IListNotificationChannelDescriptorsResponse
      | null
      | undefined,
      protos.google.monitoring.v3.INotificationChannelDescriptor
    >
  ): void;
  /**
   * Lists the descriptors for supported channel types. The use of descriptors
   * makes it possible for new channel types to be dynamically added.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The REST resource name of the parent from which to retrieve
   *   the notification channel descriptors. The expected syntax is:
   *
   *       projects/[PROJECT_ID_OR_NUMBER]
   *
   *   Note that this names the parent container in which to look for the
   *   descriptors; to retrieve a single descriptor by name, use the
   *   {@link google.monitoring.v3.NotificationChannelService.GetNotificationChannelDescriptor|GetNotificationChannelDescriptor}
   *   operation, instead.
   * @param {number} request.pageSize
   *   The maximum number of results to return in a single response. If
   *   not set to a positive number, a reasonable value will be chosen by the
   *   service.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` must contain a value returned as the
   *   `next_page_token` in a previous response to request the next set
   *   of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [NotificationChannelDescriptor]{@link google.monitoring.v3.NotificationChannelDescriptor}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listNotificationChannelDescriptorsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listNotificationChannelDescriptors(
    request: protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest,
          | protos.google.monitoring.v3.IListNotificationChannelDescriptorsResponse
          | null
          | undefined,
          protos.google.monitoring.v3.INotificationChannelDescriptor
        >,
    callback?: PaginationCallback<
      protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest,
      | protos.google.monitoring.v3.IListNotificationChannelDescriptorsResponse
      | null
      | undefined,
      protos.google.monitoring.v3.INotificationChannelDescriptor
    >
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannelDescriptor[],
      protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest | null,
      protos.google.monitoring.v3.IListNotificationChannelDescriptorsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.listNotificationChannelDescriptors(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The REST resource name of the parent from which to retrieve
   *   the notification channel descriptors. The expected syntax is:
   *
   *       projects/[PROJECT_ID_OR_NUMBER]
   *
   *   Note that this names the parent container in which to look for the
   *   descriptors; to retrieve a single descriptor by name, use the
   *   {@link google.monitoring.v3.NotificationChannelService.GetNotificationChannelDescriptor|GetNotificationChannelDescriptor}
   *   operation, instead.
   * @param {number} request.pageSize
   *   The maximum number of results to return in a single response. If
   *   not set to a positive number, a reasonable value will be chosen by the
   *   service.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` must contain a value returned as the
   *   `next_page_token` in a previous response to request the next set
   *   of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [NotificationChannelDescriptor]{@link google.monitoring.v3.NotificationChannelDescriptor} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listNotificationChannelDescriptorsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listNotificationChannelDescriptorsStream(
    request?: protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listNotificationChannelDescriptors.createStream(
      this.innerApiCalls.listNotificationChannelDescriptors as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listNotificationChannelDescriptors`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The REST resource name of the parent from which to retrieve
   *   the notification channel descriptors. The expected syntax is:
   *
   *       projects/[PROJECT_ID_OR_NUMBER]
   *
   *   Note that this names the parent container in which to look for the
   *   descriptors; to retrieve a single descriptor by name, use the
   *   {@link google.monitoring.v3.NotificationChannelService.GetNotificationChannelDescriptor|GetNotificationChannelDescriptor}
   *   operation, instead.
   * @param {number} request.pageSize
   *   The maximum number of results to return in a single response. If
   *   not set to a positive number, a reasonable value will be chosen by the
   *   service.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` must contain a value returned as the
   *   `next_page_token` in a previous response to request the next set
   *   of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [NotificationChannelDescriptor]{@link google.monitoring.v3.NotificationChannelDescriptor}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * const iterable = client.listNotificationChannelDescriptorsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   */
  listNotificationChannelDescriptorsAsync(
    request?: protos.google.monitoring.v3.IListNotificationChannelDescriptorsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.monitoring.v3.INotificationChannelDescriptor> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listNotificationChannelDescriptors.asyncIterate(
      this.innerApiCalls['listNotificationChannelDescriptors'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.monitoring.v3.INotificationChannelDescriptor>;
  }
  listNotificationChannels(
    request: protos.google.monitoring.v3.IListNotificationChannelsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannel[],
      protos.google.monitoring.v3.IListNotificationChannelsRequest | null,
      protos.google.monitoring.v3.IListNotificationChannelsResponse
    ]
  >;
  listNotificationChannels(
    request: protos.google.monitoring.v3.IListNotificationChannelsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.monitoring.v3.IListNotificationChannelsRequest,
      | protos.google.monitoring.v3.IListNotificationChannelsResponse
      | null
      | undefined,
      protos.google.monitoring.v3.INotificationChannel
    >
  ): void;
  listNotificationChannels(
    request: protos.google.monitoring.v3.IListNotificationChannelsRequest,
    callback: PaginationCallback<
      protos.google.monitoring.v3.IListNotificationChannelsRequest,
      | protos.google.monitoring.v3.IListNotificationChannelsResponse
      | null
      | undefined,
      protos.google.monitoring.v3.INotificationChannel
    >
  ): void;
  /**
   * Lists the notification channels that have been created for the project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The project on which to execute the request. The format is:
   *
   *       projects/[PROJECT_ID_OR_NUMBER]
   *
   *   This names the container
   *   in which to look for the notification channels; it does not name a
   *   specific channel. To query a specific channel by REST resource name, use
   *   the
   *   {@link google.monitoring.v3.NotificationChannelService.GetNotificationChannel|`GetNotificationChannel`}
   *   operation.
   * @param {string} request.filter
   *   If provided, this field specifies the criteria that must be met by
   *   notification channels to be included in the response.
   *
   *   For more details, see [sorting and
   *   filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   * @param {string} request.orderBy
   *   A comma-separated list of fields by which to sort the result. Supports
   *   the same set of fields as in `filter`. Entries can be prefixed with
   *   a minus sign to sort in descending rather than ascending order.
   *
   *   For more details, see [sorting and
   *   filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   * @param {number} request.pageSize
   *   The maximum number of results to return in a single response. If
   *   not set to a positive number, a reasonable value will be chosen by the
   *   service.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` must contain a value returned as the
   *   `next_page_token` in a previous response to request the next set
   *   of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [NotificationChannel]{@link google.monitoring.v3.NotificationChannel}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listNotificationChannelsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listNotificationChannels(
    request: protos.google.monitoring.v3.IListNotificationChannelsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.monitoring.v3.IListNotificationChannelsRequest,
          | protos.google.monitoring.v3.IListNotificationChannelsResponse
          | null
          | undefined,
          protos.google.monitoring.v3.INotificationChannel
        >,
    callback?: PaginationCallback<
      protos.google.monitoring.v3.IListNotificationChannelsRequest,
      | protos.google.monitoring.v3.IListNotificationChannelsResponse
      | null
      | undefined,
      protos.google.monitoring.v3.INotificationChannel
    >
  ): Promise<
    [
      protos.google.monitoring.v3.INotificationChannel[],
      protos.google.monitoring.v3.IListNotificationChannelsRequest | null,
      protos.google.monitoring.v3.IListNotificationChannelsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.listNotificationChannels(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The project on which to execute the request. The format is:
   *
   *       projects/[PROJECT_ID_OR_NUMBER]
   *
   *   This names the container
   *   in which to look for the notification channels; it does not name a
   *   specific channel. To query a specific channel by REST resource name, use
   *   the
   *   {@link google.monitoring.v3.NotificationChannelService.GetNotificationChannel|`GetNotificationChannel`}
   *   operation.
   * @param {string} request.filter
   *   If provided, this field specifies the criteria that must be met by
   *   notification channels to be included in the response.
   *
   *   For more details, see [sorting and
   *   filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   * @param {string} request.orderBy
   *   A comma-separated list of fields by which to sort the result. Supports
   *   the same set of fields as in `filter`. Entries can be prefixed with
   *   a minus sign to sort in descending rather than ascending order.
   *
   *   For more details, see [sorting and
   *   filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   * @param {number} request.pageSize
   *   The maximum number of results to return in a single response. If
   *   not set to a positive number, a reasonable value will be chosen by the
   *   service.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` must contain a value returned as the
   *   `next_page_token` in a previous response to request the next set
   *   of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [NotificationChannel]{@link google.monitoring.v3.NotificationChannel} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listNotificationChannelsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listNotificationChannelsStream(
    request?: protos.google.monitoring.v3.IListNotificationChannelsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listNotificationChannels.createStream(
      this.innerApiCalls.listNotificationChannels as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listNotificationChannels`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The project on which to execute the request. The format is:
   *
   *       projects/[PROJECT_ID_OR_NUMBER]
   *
   *   This names the container
   *   in which to look for the notification channels; it does not name a
   *   specific channel. To query a specific channel by REST resource name, use
   *   the
   *   {@link google.monitoring.v3.NotificationChannelService.GetNotificationChannel|`GetNotificationChannel`}
   *   operation.
   * @param {string} request.filter
   *   If provided, this field specifies the criteria that must be met by
   *   notification channels to be included in the response.
   *
   *   For more details, see [sorting and
   *   filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   * @param {string} request.orderBy
   *   A comma-separated list of fields by which to sort the result. Supports
   *   the same set of fields as in `filter`. Entries can be prefixed with
   *   a minus sign to sort in descending rather than ascending order.
   *
   *   For more details, see [sorting and
   *   filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   * @param {number} request.pageSize
   *   The maximum number of results to return in a single response. If
   *   not set to a positive number, a reasonable value will be chosen by the
   *   service.
   * @param {string} request.pageToken
   *   If non-empty, `page_token` must contain a value returned as the
   *   `next_page_token` in a previous response to request the next set
   *   of results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [NotificationChannel]{@link google.monitoring.v3.NotificationChannel}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * const iterable = client.listNotificationChannelsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   */
  listNotificationChannelsAsync(
    request?: protos.google.monitoring.v3.IListNotificationChannelsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.monitoring.v3.INotificationChannel> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listNotificationChannels.asyncIterate(
      this.innerApiCalls['listNotificationChannels'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.monitoring.v3.INotificationChannel>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified folderAlertPolicy resource name string.
   *
   * @param {string} folder
   * @param {string} alert_policy
   * @returns {string} Resource name string.
   */
  folderAlertPolicyPath(folder: string, alertPolicy: string) {
    return this.pathTemplates.folderAlertPolicyPathTemplate.render({
      folder: folder,
      alert_policy: alertPolicy,
    });
  }

  /**
   * Parse the folder from FolderAlertPolicy resource.
   *
   * @param {string} folderAlertPolicyName
   *   A fully-qualified path representing folder_alert_policy resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderAlertPolicyName(folderAlertPolicyName: string) {
    return this.pathTemplates.folderAlertPolicyPathTemplate.match(
      folderAlertPolicyName
    ).folder;
  }

  /**
   * Parse the alert_policy from FolderAlertPolicy resource.
   *
   * @param {string} folderAlertPolicyName
   *   A fully-qualified path representing folder_alert_policy resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromFolderAlertPolicyName(folderAlertPolicyName: string) {
    return this.pathTemplates.folderAlertPolicyPathTemplate.match(
      folderAlertPolicyName
    ).alert_policy;
  }

  /**
   * Return a fully-qualified folderAlertPolicyCondition resource name string.
   *
   * @param {string} folder
   * @param {string} alert_policy
   * @param {string} condition
   * @returns {string} Resource name string.
   */
  folderAlertPolicyConditionPath(
    folder: string,
    alertPolicy: string,
    condition: string
  ) {
    return this.pathTemplates.folderAlertPolicyConditionPathTemplate.render({
      folder: folder,
      alert_policy: alertPolicy,
      condition: condition,
    });
  }

  /**
   * Parse the folder from FolderAlertPolicyCondition resource.
   *
   * @param {string} folderAlertPolicyConditionName
   *   A fully-qualified path representing folder_alert_policy_condition resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderAlertPolicyConditionName(
    folderAlertPolicyConditionName: string
  ) {
    return this.pathTemplates.folderAlertPolicyConditionPathTemplate.match(
      folderAlertPolicyConditionName
    ).folder;
  }

  /**
   * Parse the alert_policy from FolderAlertPolicyCondition resource.
   *
   * @param {string} folderAlertPolicyConditionName
   *   A fully-qualified path representing folder_alert_policy_condition resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromFolderAlertPolicyConditionName(
    folderAlertPolicyConditionName: string
  ) {
    return this.pathTemplates.folderAlertPolicyConditionPathTemplate.match(
      folderAlertPolicyConditionName
    ).alert_policy;
  }

  /**
   * Parse the condition from FolderAlertPolicyCondition resource.
   *
   * @param {string} folderAlertPolicyConditionName
   *   A fully-qualified path representing folder_alert_policy_condition resource.
   * @returns {string} A string representing the condition.
   */
  matchConditionFromFolderAlertPolicyConditionName(
    folderAlertPolicyConditionName: string
  ) {
    return this.pathTemplates.folderAlertPolicyConditionPathTemplate.match(
      folderAlertPolicyConditionName
    ).condition;
  }

  /**
   * Return a fully-qualified folderChannelDescriptor resource name string.
   *
   * @param {string} folder
   * @param {string} channel_descriptor
   * @returns {string} Resource name string.
   */
  folderChannelDescriptorPath(folder: string, channelDescriptor: string) {
    return this.pathTemplates.folderChannelDescriptorPathTemplate.render({
      folder: folder,
      channel_descriptor: channelDescriptor,
    });
  }

  /**
   * Parse the folder from FolderChannelDescriptor resource.
   *
   * @param {string} folderChannelDescriptorName
   *   A fully-qualified path representing folder_channel_descriptor resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderChannelDescriptorName(
    folderChannelDescriptorName: string
  ) {
    return this.pathTemplates.folderChannelDescriptorPathTemplate.match(
      folderChannelDescriptorName
    ).folder;
  }

  /**
   * Parse the channel_descriptor from FolderChannelDescriptor resource.
   *
   * @param {string} folderChannelDescriptorName
   *   A fully-qualified path representing folder_channel_descriptor resource.
   * @returns {string} A string representing the channel_descriptor.
   */
  matchChannelDescriptorFromFolderChannelDescriptorName(
    folderChannelDescriptorName: string
  ) {
    return this.pathTemplates.folderChannelDescriptorPathTemplate.match(
      folderChannelDescriptorName
    ).channel_descriptor;
  }

  /**
   * Return a fully-qualified folderGroup resource name string.
   *
   * @param {string} folder
   * @param {string} group
   * @returns {string} Resource name string.
   */
  folderGroupPath(folder: string, group: string) {
    return this.pathTemplates.folderGroupPathTemplate.render({
      folder: folder,
      group: group,
    });
  }

  /**
   * Parse the folder from FolderGroup resource.
   *
   * @param {string} folderGroupName
   *   A fully-qualified path representing folder_group resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderGroupName(folderGroupName: string) {
    return this.pathTemplates.folderGroupPathTemplate.match(folderGroupName)
      .folder;
  }

  /**
   * Parse the group from FolderGroup resource.
   *
   * @param {string} folderGroupName
   *   A fully-qualified path representing folder_group resource.
   * @returns {string} A string representing the group.
   */
  matchGroupFromFolderGroupName(folderGroupName: string) {
    return this.pathTemplates.folderGroupPathTemplate.match(folderGroupName)
      .group;
  }

  /**
   * Return a fully-qualified folderNotificationChannel resource name string.
   *
   * @param {string} folder
   * @param {string} notification_channel
   * @returns {string} Resource name string.
   */
  folderNotificationChannelPath(folder: string, notificationChannel: string) {
    return this.pathTemplates.folderNotificationChannelPathTemplate.render({
      folder: folder,
      notification_channel: notificationChannel,
    });
  }

  /**
   * Parse the folder from FolderNotificationChannel resource.
   *
   * @param {string} folderNotificationChannelName
   *   A fully-qualified path representing folder_notification_channel resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderNotificationChannelName(
    folderNotificationChannelName: string
  ) {
    return this.pathTemplates.folderNotificationChannelPathTemplate.match(
      folderNotificationChannelName
    ).folder;
  }

  /**
   * Parse the notification_channel from FolderNotificationChannel resource.
   *
   * @param {string} folderNotificationChannelName
   *   A fully-qualified path representing folder_notification_channel resource.
   * @returns {string} A string representing the notification_channel.
   */
  matchNotificationChannelFromFolderNotificationChannelName(
    folderNotificationChannelName: string
  ) {
    return this.pathTemplates.folderNotificationChannelPathTemplate.match(
      folderNotificationChannelName
    ).notification_channel;
  }

  /**
   * Return a fully-qualified folderService resource name string.
   *
   * @param {string} folder
   * @param {string} service
   * @returns {string} Resource name string.
   */
  folderServicePath(folder: string, service: string) {
    return this.pathTemplates.folderServicePathTemplate.render({
      folder: folder,
      service: service,
    });
  }

  /**
   * Parse the folder from FolderService resource.
   *
   * @param {string} folderServiceName
   *   A fully-qualified path representing folder_service resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderServiceName(folderServiceName: string) {
    return this.pathTemplates.folderServicePathTemplate.match(folderServiceName)
      .folder;
  }

  /**
   * Parse the service from FolderService resource.
   *
   * @param {string} folderServiceName
   *   A fully-qualified path representing folder_service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromFolderServiceName(folderServiceName: string) {
    return this.pathTemplates.folderServicePathTemplate.match(folderServiceName)
      .service;
  }

  /**
   * Return a fully-qualified folderServiceServiceLevelObjective resource name string.
   *
   * @param {string} folder
   * @param {string} service
   * @param {string} service_level_objective
   * @returns {string} Resource name string.
   */
  folderServiceServiceLevelObjectivePath(
    folder: string,
    service: string,
    serviceLevelObjective: string
  ) {
    return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.render(
      {
        folder: folder,
        service: service,
        service_level_objective: serviceLevelObjective,
      }
    );
  }

  /**
   * Parse the folder from FolderServiceServiceLevelObjective resource.
   *
   * @param {string} folderServiceServiceLevelObjectiveName
   *   A fully-qualified path representing folder_service_service_level_objective resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderServiceServiceLevelObjectiveName(
    folderServiceServiceLevelObjectiveName: string
  ) {
    return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(
      folderServiceServiceLevelObjectiveName
    ).folder;
  }

  /**
   * Parse the service from FolderServiceServiceLevelObjective resource.
   *
   * @param {string} folderServiceServiceLevelObjectiveName
   *   A fully-qualified path representing folder_service_service_level_objective resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromFolderServiceServiceLevelObjectiveName(
    folderServiceServiceLevelObjectiveName: string
  ) {
    return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(
      folderServiceServiceLevelObjectiveName
    ).service;
  }

  /**
   * Parse the service_level_objective from FolderServiceServiceLevelObjective resource.
   *
   * @param {string} folderServiceServiceLevelObjectiveName
   *   A fully-qualified path representing folder_service_service_level_objective resource.
   * @returns {string} A string representing the service_level_objective.
   */
  matchServiceLevelObjectiveFromFolderServiceServiceLevelObjectiveName(
    folderServiceServiceLevelObjectiveName: string
  ) {
    return this.pathTemplates.folderServiceServiceLevelObjectivePathTemplate.match(
      folderServiceServiceLevelObjectiveName
    ).service_level_objective;
  }

  /**
   * Return a fully-qualified folderUptimeCheckConfig resource name string.
   *
   * @param {string} folder
   * @param {string} uptime_check_config
   * @returns {string} Resource name string.
   */
  folderUptimeCheckConfigPath(folder: string, uptimeCheckConfig: string) {
    return this.pathTemplates.folderUptimeCheckConfigPathTemplate.render({
      folder: folder,
      uptime_check_config: uptimeCheckConfig,
    });
  }

  /**
   * Parse the folder from FolderUptimeCheckConfig resource.
   *
   * @param {string} folderUptimeCheckConfigName
   *   A fully-qualified path representing folder_uptime_check_config resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderUptimeCheckConfigName(
    folderUptimeCheckConfigName: string
  ) {
    return this.pathTemplates.folderUptimeCheckConfigPathTemplate.match(
      folderUptimeCheckConfigName
    ).folder;
  }

  /**
   * Parse the uptime_check_config from FolderUptimeCheckConfig resource.
   *
   * @param {string} folderUptimeCheckConfigName
   *   A fully-qualified path representing folder_uptime_check_config resource.
   * @returns {string} A string representing the uptime_check_config.
   */
  matchUptimeCheckConfigFromFolderUptimeCheckConfigName(
    folderUptimeCheckConfigName: string
  ) {
    return this.pathTemplates.folderUptimeCheckConfigPathTemplate.match(
      folderUptimeCheckConfigName
    ).uptime_check_config;
  }

  /**
   * Return a fully-qualified organizationAlertPolicy resource name string.
   *
   * @param {string} organization
   * @param {string} alert_policy
   * @returns {string} Resource name string.
   */
  organizationAlertPolicyPath(organization: string, alertPolicy: string) {
    return this.pathTemplates.organizationAlertPolicyPathTemplate.render({
      organization: organization,
      alert_policy: alertPolicy,
    });
  }

  /**
   * Parse the organization from OrganizationAlertPolicy resource.
   *
   * @param {string} organizationAlertPolicyName
   *   A fully-qualified path representing organization_alert_policy resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationAlertPolicyName(
    organizationAlertPolicyName: string
  ) {
    return this.pathTemplates.organizationAlertPolicyPathTemplate.match(
      organizationAlertPolicyName
    ).organization;
  }

  /**
   * Parse the alert_policy from OrganizationAlertPolicy resource.
   *
   * @param {string} organizationAlertPolicyName
   *   A fully-qualified path representing organization_alert_policy resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromOrganizationAlertPolicyName(
    organizationAlertPolicyName: string
  ) {
    return this.pathTemplates.organizationAlertPolicyPathTemplate.match(
      organizationAlertPolicyName
    ).alert_policy;
  }

  /**
   * Return a fully-qualified organizationAlertPolicyCondition resource name string.
   *
   * @param {string} organization
   * @param {string} alert_policy
   * @param {string} condition
   * @returns {string} Resource name string.
   */
  organizationAlertPolicyConditionPath(
    organization: string,
    alertPolicy: string,
    condition: string
  ) {
    return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.render(
      {
        organization: organization,
        alert_policy: alertPolicy,
        condition: condition,
      }
    );
  }

  /**
   * Parse the organization from OrganizationAlertPolicyCondition resource.
   *
   * @param {string} organizationAlertPolicyConditionName
   *   A fully-qualified path representing organization_alert_policy_condition resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationAlertPolicyConditionName(
    organizationAlertPolicyConditionName: string
  ) {
    return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.match(
      organizationAlertPolicyConditionName
    ).organization;
  }

  /**
   * Parse the alert_policy from OrganizationAlertPolicyCondition resource.
   *
   * @param {string} organizationAlertPolicyConditionName
   *   A fully-qualified path representing organization_alert_policy_condition resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromOrganizationAlertPolicyConditionName(
    organizationAlertPolicyConditionName: string
  ) {
    return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.match(
      organizationAlertPolicyConditionName
    ).alert_policy;
  }

  /**
   * Parse the condition from OrganizationAlertPolicyCondition resource.
   *
   * @param {string} organizationAlertPolicyConditionName
   *   A fully-qualified path representing organization_alert_policy_condition resource.
   * @returns {string} A string representing the condition.
   */
  matchConditionFromOrganizationAlertPolicyConditionName(
    organizationAlertPolicyConditionName: string
  ) {
    return this.pathTemplates.organizationAlertPolicyConditionPathTemplate.match(
      organizationAlertPolicyConditionName
    ).condition;
  }

  /**
   * Return a fully-qualified organizationChannelDescriptor resource name string.
   *
   * @param {string} organization
   * @param {string} channel_descriptor
   * @returns {string} Resource name string.
   */
  organizationChannelDescriptorPath(
    organization: string,
    channelDescriptor: string
  ) {
    return this.pathTemplates.organizationChannelDescriptorPathTemplate.render({
      organization: organization,
      channel_descriptor: channelDescriptor,
    });
  }

  /**
   * Parse the organization from OrganizationChannelDescriptor resource.
   *
   * @param {string} organizationChannelDescriptorName
   *   A fully-qualified path representing organization_channel_descriptor resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationChannelDescriptorName(
    organizationChannelDescriptorName: string
  ) {
    return this.pathTemplates.organizationChannelDescriptorPathTemplate.match(
      organizationChannelDescriptorName
    ).organization;
  }

  /**
   * Parse the channel_descriptor from OrganizationChannelDescriptor resource.
   *
   * @param {string} organizationChannelDescriptorName
   *   A fully-qualified path representing organization_channel_descriptor resource.
   * @returns {string} A string representing the channel_descriptor.
   */
  matchChannelDescriptorFromOrganizationChannelDescriptorName(
    organizationChannelDescriptorName: string
  ) {
    return this.pathTemplates.organizationChannelDescriptorPathTemplate.match(
      organizationChannelDescriptorName
    ).channel_descriptor;
  }

  /**
   * Return a fully-qualified organizationGroup resource name string.
   *
   * @param {string} organization
   * @param {string} group
   * @returns {string} Resource name string.
   */
  organizationGroupPath(organization: string, group: string) {
    return this.pathTemplates.organizationGroupPathTemplate.render({
      organization: organization,
      group: group,
    });
  }

  /**
   * Parse the organization from OrganizationGroup resource.
   *
   * @param {string} organizationGroupName
   *   A fully-qualified path representing organization_group resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationGroupName(organizationGroupName: string) {
    return this.pathTemplates.organizationGroupPathTemplate.match(
      organizationGroupName
    ).organization;
  }

  /**
   * Parse the group from OrganizationGroup resource.
   *
   * @param {string} organizationGroupName
   *   A fully-qualified path representing organization_group resource.
   * @returns {string} A string representing the group.
   */
  matchGroupFromOrganizationGroupName(organizationGroupName: string) {
    return this.pathTemplates.organizationGroupPathTemplate.match(
      organizationGroupName
    ).group;
  }

  /**
   * Return a fully-qualified organizationNotificationChannel resource name string.
   *
   * @param {string} organization
   * @param {string} notification_channel
   * @returns {string} Resource name string.
   */
  organizationNotificationChannelPath(
    organization: string,
    notificationChannel: string
  ) {
    return this.pathTemplates.organizationNotificationChannelPathTemplate.render(
      {
        organization: organization,
        notification_channel: notificationChannel,
      }
    );
  }

  /**
   * Parse the organization from OrganizationNotificationChannel resource.
   *
   * @param {string} organizationNotificationChannelName
   *   A fully-qualified path representing organization_notification_channel resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationNotificationChannelName(
    organizationNotificationChannelName: string
  ) {
    return this.pathTemplates.organizationNotificationChannelPathTemplate.match(
      organizationNotificationChannelName
    ).organization;
  }

  /**
   * Parse the notification_channel from OrganizationNotificationChannel resource.
   *
   * @param {string} organizationNotificationChannelName
   *   A fully-qualified path representing organization_notification_channel resource.
   * @returns {string} A string representing the notification_channel.
   */
  matchNotificationChannelFromOrganizationNotificationChannelName(
    organizationNotificationChannelName: string
  ) {
    return this.pathTemplates.organizationNotificationChannelPathTemplate.match(
      organizationNotificationChannelName
    ).notification_channel;
  }

  /**
   * Return a fully-qualified organizationService resource name string.
   *
   * @param {string} organization
   * @param {string} service
   * @returns {string} Resource name string.
   */
  organizationServicePath(organization: string, service: string) {
    return this.pathTemplates.organizationServicePathTemplate.render({
      organization: organization,
      service: service,
    });
  }

  /**
   * Parse the organization from OrganizationService resource.
   *
   * @param {string} organizationServiceName
   *   A fully-qualified path representing organization_service resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationServiceName(
    organizationServiceName: string
  ) {
    return this.pathTemplates.organizationServicePathTemplate.match(
      organizationServiceName
    ).organization;
  }

  /**
   * Parse the service from OrganizationService resource.
   *
   * @param {string} organizationServiceName
   *   A fully-qualified path representing organization_service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromOrganizationServiceName(organizationServiceName: string) {
    return this.pathTemplates.organizationServicePathTemplate.match(
      organizationServiceName
    ).service;
  }

  /**
   * Return a fully-qualified organizationServiceServiceLevelObjective resource name string.
   *
   * @param {string} organization
   * @param {string} service
   * @param {string} service_level_objective
   * @returns {string} Resource name string.
   */
  organizationServiceServiceLevelObjectivePath(
    organization: string,
    service: string,
    serviceLevelObjective: string
  ) {
    return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.render(
      {
        organization: organization,
        service: service,
        service_level_objective: serviceLevelObjective,
      }
    );
  }

  /**
   * Parse the organization from OrganizationServiceServiceLevelObjective resource.
   *
   * @param {string} organizationServiceServiceLevelObjectiveName
   *   A fully-qualified path representing organization_service_service_level_objective resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationServiceServiceLevelObjectiveName(
    organizationServiceServiceLevelObjectiveName: string
  ) {
    return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(
      organizationServiceServiceLevelObjectiveName
    ).organization;
  }

  /**
   * Parse the service from OrganizationServiceServiceLevelObjective resource.
   *
   * @param {string} organizationServiceServiceLevelObjectiveName
   *   A fully-qualified path representing organization_service_service_level_objective resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromOrganizationServiceServiceLevelObjectiveName(
    organizationServiceServiceLevelObjectiveName: string
  ) {
    return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(
      organizationServiceServiceLevelObjectiveName
    ).service;
  }

  /**
   * Parse the service_level_objective from OrganizationServiceServiceLevelObjective resource.
   *
   * @param {string} organizationServiceServiceLevelObjectiveName
   *   A fully-qualified path representing organization_service_service_level_objective resource.
   * @returns {string} A string representing the service_level_objective.
   */
  matchServiceLevelObjectiveFromOrganizationServiceServiceLevelObjectiveName(
    organizationServiceServiceLevelObjectiveName: string
  ) {
    return this.pathTemplates.organizationServiceServiceLevelObjectivePathTemplate.match(
      organizationServiceServiceLevelObjectiveName
    ).service_level_objective;
  }

  /**
   * Return a fully-qualified organizationUptimeCheckConfig resource name string.
   *
   * @param {string} organization
   * @param {string} uptime_check_config
   * @returns {string} Resource name string.
   */
  organizationUptimeCheckConfigPath(
    organization: string,
    uptimeCheckConfig: string
  ) {
    return this.pathTemplates.organizationUptimeCheckConfigPathTemplate.render({
      organization: organization,
      uptime_check_config: uptimeCheckConfig,
    });
  }

  /**
   * Parse the organization from OrganizationUptimeCheckConfig resource.
   *
   * @param {string} organizationUptimeCheckConfigName
   *   A fully-qualified path representing organization_uptime_check_config resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationUptimeCheckConfigName(
    organizationUptimeCheckConfigName: string
  ) {
    return this.pathTemplates.organizationUptimeCheckConfigPathTemplate.match(
      organizationUptimeCheckConfigName
    ).organization;
  }

  /**
   * Parse the uptime_check_config from OrganizationUptimeCheckConfig resource.
   *
   * @param {string} organizationUptimeCheckConfigName
   *   A fully-qualified path representing organization_uptime_check_config resource.
   * @returns {string} A string representing the uptime_check_config.
   */
  matchUptimeCheckConfigFromOrganizationUptimeCheckConfigName(
    organizationUptimeCheckConfigName: string
  ) {
    return this.pathTemplates.organizationUptimeCheckConfigPathTemplate.match(
      organizationUptimeCheckConfigName
    ).uptime_check_config;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectAlertPolicy resource name string.
   *
   * @param {string} project
   * @param {string} alert_policy
   * @returns {string} Resource name string.
   */
  projectAlertPolicyPath(project: string, alertPolicy: string) {
    return this.pathTemplates.projectAlertPolicyPathTemplate.render({
      project: project,
      alert_policy: alertPolicy,
    });
  }

  /**
   * Parse the project from ProjectAlertPolicy resource.
   *
   * @param {string} projectAlertPolicyName
   *   A fully-qualified path representing project_alert_policy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectAlertPolicyName(projectAlertPolicyName: string) {
    return this.pathTemplates.projectAlertPolicyPathTemplate.match(
      projectAlertPolicyName
    ).project;
  }

  /**
   * Parse the alert_policy from ProjectAlertPolicy resource.
   *
   * @param {string} projectAlertPolicyName
   *   A fully-qualified path representing project_alert_policy resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromProjectAlertPolicyName(projectAlertPolicyName: string) {
    return this.pathTemplates.projectAlertPolicyPathTemplate.match(
      projectAlertPolicyName
    ).alert_policy;
  }

  /**
   * Return a fully-qualified projectAlertPolicyCondition resource name string.
   *
   * @param {string} project
   * @param {string} alert_policy
   * @param {string} condition
   * @returns {string} Resource name string.
   */
  projectAlertPolicyConditionPath(
    project: string,
    alertPolicy: string,
    condition: string
  ) {
    return this.pathTemplates.projectAlertPolicyConditionPathTemplate.render({
      project: project,
      alert_policy: alertPolicy,
      condition: condition,
    });
  }

  /**
   * Parse the project from ProjectAlertPolicyCondition resource.
   *
   * @param {string} projectAlertPolicyConditionName
   *   A fully-qualified path representing project_alert_policy_condition resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectAlertPolicyConditionName(
    projectAlertPolicyConditionName: string
  ) {
    return this.pathTemplates.projectAlertPolicyConditionPathTemplate.match(
      projectAlertPolicyConditionName
    ).project;
  }

  /**
   * Parse the alert_policy from ProjectAlertPolicyCondition resource.
   *
   * @param {string} projectAlertPolicyConditionName
   *   A fully-qualified path representing project_alert_policy_condition resource.
   * @returns {string} A string representing the alert_policy.
   */
  matchAlertPolicyFromProjectAlertPolicyConditionName(
    projectAlertPolicyConditionName: string
  ) {
    return this.pathTemplates.projectAlertPolicyConditionPathTemplate.match(
      projectAlertPolicyConditionName
    ).alert_policy;
  }

  /**
   * Parse the condition from ProjectAlertPolicyCondition resource.
   *
   * @param {string} projectAlertPolicyConditionName
   *   A fully-qualified path representing project_alert_policy_condition resource.
   * @returns {string} A string representing the condition.
   */
  matchConditionFromProjectAlertPolicyConditionName(
    projectAlertPolicyConditionName: string
  ) {
    return this.pathTemplates.projectAlertPolicyConditionPathTemplate.match(
      projectAlertPolicyConditionName
    ).condition;
  }

  /**
   * Return a fully-qualified projectChannelDescriptor resource name string.
   *
   * @param {string} project
   * @param {string} channel_descriptor
   * @returns {string} Resource name string.
   */
  projectChannelDescriptorPath(project: string, channelDescriptor: string) {
    return this.pathTemplates.projectChannelDescriptorPathTemplate.render({
      project: project,
      channel_descriptor: channelDescriptor,
    });
  }

  /**
   * Parse the project from ProjectChannelDescriptor resource.
   *
   * @param {string} projectChannelDescriptorName
   *   A fully-qualified path representing project_channel_descriptor resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectChannelDescriptorName(
    projectChannelDescriptorName: string
  ) {
    return this.pathTemplates.projectChannelDescriptorPathTemplate.match(
      projectChannelDescriptorName
    ).project;
  }

  /**
   * Parse the channel_descriptor from ProjectChannelDescriptor resource.
   *
   * @param {string} projectChannelDescriptorName
   *   A fully-qualified path representing project_channel_descriptor resource.
   * @returns {string} A string representing the channel_descriptor.
   */
  matchChannelDescriptorFromProjectChannelDescriptorName(
    projectChannelDescriptorName: string
  ) {
    return this.pathTemplates.projectChannelDescriptorPathTemplate.match(
      projectChannelDescriptorName
    ).channel_descriptor;
  }

  /**
   * Return a fully-qualified projectGroup resource name string.
   *
   * @param {string} project
   * @param {string} group
   * @returns {string} Resource name string.
   */
  projectGroupPath(project: string, group: string) {
    return this.pathTemplates.projectGroupPathTemplate.render({
      project: project,
      group: group,
    });
  }

  /**
   * Parse the project from ProjectGroup resource.
   *
   * @param {string} projectGroupName
   *   A fully-qualified path representing project_group resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectGroupName(projectGroupName: string) {
    return this.pathTemplates.projectGroupPathTemplate.match(projectGroupName)
      .project;
  }

  /**
   * Parse the group from ProjectGroup resource.
   *
   * @param {string} projectGroupName
   *   A fully-qualified path representing project_group resource.
   * @returns {string} A string representing the group.
   */
  matchGroupFromProjectGroupName(projectGroupName: string) {
    return this.pathTemplates.projectGroupPathTemplate.match(projectGroupName)
      .group;
  }

  /**
   * Return a fully-qualified projectNotificationChannel resource name string.
   *
   * @param {string} project
   * @param {string} notification_channel
   * @returns {string} Resource name string.
   */
  projectNotificationChannelPath(project: string, notificationChannel: string) {
    return this.pathTemplates.projectNotificationChannelPathTemplate.render({
      project: project,
      notification_channel: notificationChannel,
    });
  }

  /**
   * Parse the project from ProjectNotificationChannel resource.
   *
   * @param {string} projectNotificationChannelName
   *   A fully-qualified path representing project_notification_channel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectNotificationChannelName(
    projectNotificationChannelName: string
  ) {
    return this.pathTemplates.projectNotificationChannelPathTemplate.match(
      projectNotificationChannelName
    ).project;
  }

  /**
   * Parse the notification_channel from ProjectNotificationChannel resource.
   *
   * @param {string} projectNotificationChannelName
   *   A fully-qualified path representing project_notification_channel resource.
   * @returns {string} A string representing the notification_channel.
   */
  matchNotificationChannelFromProjectNotificationChannelName(
    projectNotificationChannelName: string
  ) {
    return this.pathTemplates.projectNotificationChannelPathTemplate.match(
      projectNotificationChannelName
    ).notification_channel;
  }

  /**
   * Return a fully-qualified projectService resource name string.
   *
   * @param {string} project
   * @param {string} service
   * @returns {string} Resource name string.
   */
  projectServicePath(project: string, service: string) {
    return this.pathTemplates.projectServicePathTemplate.render({
      project: project,
      service: service,
    });
  }

  /**
   * Parse the project from ProjectService resource.
   *
   * @param {string} projectServiceName
   *   A fully-qualified path representing project_service resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectServiceName(projectServiceName: string) {
    return this.pathTemplates.projectServicePathTemplate.match(
      projectServiceName
    ).project;
  }

  /**
   * Parse the service from ProjectService resource.
   *
   * @param {string} projectServiceName
   *   A fully-qualified path representing project_service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromProjectServiceName(projectServiceName: string) {
    return this.pathTemplates.projectServicePathTemplate.match(
      projectServiceName
    ).service;
  }

  /**
   * Return a fully-qualified projectServiceServiceLevelObjective resource name string.
   *
   * @param {string} project
   * @param {string} service
   * @param {string} service_level_objective
   * @returns {string} Resource name string.
   */
  projectServiceServiceLevelObjectivePath(
    project: string,
    service: string,
    serviceLevelObjective: string
  ) {
    return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.render(
      {
        project: project,
        service: service,
        service_level_objective: serviceLevelObjective,
      }
    );
  }

  /**
   * Parse the project from ProjectServiceServiceLevelObjective resource.
   *
   * @param {string} projectServiceServiceLevelObjectiveName
   *   A fully-qualified path representing project_service_service_level_objective resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectServiceServiceLevelObjectiveName(
    projectServiceServiceLevelObjectiveName: string
  ) {
    return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(
      projectServiceServiceLevelObjectiveName
    ).project;
  }

  /**
   * Parse the service from ProjectServiceServiceLevelObjective resource.
   *
   * @param {string} projectServiceServiceLevelObjectiveName
   *   A fully-qualified path representing project_service_service_level_objective resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromProjectServiceServiceLevelObjectiveName(
    projectServiceServiceLevelObjectiveName: string
  ) {
    return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(
      projectServiceServiceLevelObjectiveName
    ).service;
  }

  /**
   * Parse the service_level_objective from ProjectServiceServiceLevelObjective resource.
   *
   * @param {string} projectServiceServiceLevelObjectiveName
   *   A fully-qualified path representing project_service_service_level_objective resource.
   * @returns {string} A string representing the service_level_objective.
   */
  matchServiceLevelObjectiveFromProjectServiceServiceLevelObjectiveName(
    projectServiceServiceLevelObjectiveName: string
  ) {
    return this.pathTemplates.projectServiceServiceLevelObjectivePathTemplate.match(
      projectServiceServiceLevelObjectiveName
    ).service_level_objective;
  }

  /**
   * Return a fully-qualified projectUptimeCheckConfig resource name string.
   *
   * @param {string} project
   * @param {string} uptime_check_config
   * @returns {string} Resource name string.
   */
  projectUptimeCheckConfigPath(project: string, uptimeCheckConfig: string) {
    return this.pathTemplates.projectUptimeCheckConfigPathTemplate.render({
      project: project,
      uptime_check_config: uptimeCheckConfig,
    });
  }

  /**
   * Parse the project from ProjectUptimeCheckConfig resource.
   *
   * @param {string} projectUptimeCheckConfigName
   *   A fully-qualified path representing project_uptime_check_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectUptimeCheckConfigName(
    projectUptimeCheckConfigName: string
  ) {
    return this.pathTemplates.projectUptimeCheckConfigPathTemplate.match(
      projectUptimeCheckConfigName
    ).project;
  }

  /**
   * Parse the uptime_check_config from ProjectUptimeCheckConfig resource.
   *
   * @param {string} projectUptimeCheckConfigName
   *   A fully-qualified path representing project_uptime_check_config resource.
   * @returns {string} A string representing the uptime_check_config.
   */
  matchUptimeCheckConfigFromProjectUptimeCheckConfigName(
    projectUptimeCheckConfigName: string
  ) {
    return this.pathTemplates.projectUptimeCheckConfigPathTemplate.match(
      projectUptimeCheckConfigName
    ).uptime_check_config;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.notificationChannelServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
