// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START monitoring_v3_generated_ServiceMonitoringService_ListServices_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Resource name of the parent containing the listed services,
   *  either a project (https://cloud.google.com/monitoring/api/v3#project_name)
   *  or a Monitoring Metrics Scope. The formats are:
   *      projects/[PROJECT_ID_OR_NUMBER]
   *      workspaces/[HOST_PROJECT_ID_OR_NUMBER]
   */
  // const parent = 'abc123'
  /**
   *  A filter specifying what `Service`s to return. The filter supports
   *  filtering on a particular service-identifier type or one of its attributes.
   *  To filter on a particular service-identifier type, the `identifier_case`
   *  refers to which option in the `identifier` field is populated. For example,
   *  the filter `identifier_case = "CUSTOM"` would match all services with a
   *  value for the `custom` field. Valid options include "CUSTOM", "APP_ENGINE",
   *  "MESH_ISTIO", and the other options listed at
   *  https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services#Service
   *  To filter on an attribute of a service-identifier type, apply the filter
   *  name by using the snake case of the service-identifier type and the
   *  attribute of that service-identifier type, and join the two with a period.
   *  For example, to filter by the `meshUid` field of the `MeshIstio`
   *  service-identifier type, you must filter on `mesh_istio.mesh_uid =
   *  "123"` to match all services with mesh UID "123". Service-identifier types
   *  and their attributes are described at
   *  https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services#Service
   */
  // const filter = 'abc123'
  /**
   *  A non-negative number that is the maximum number of results to return.
   *  When 0, use default page size.
   */
  // const pageSize = 1234
  /**
   *  If this field is not empty then it must contain the `nextPageToken` value
   *  returned by a previous call to this method.  Using this field causes the
   *  method to return additional results from the previous method call.
   */
  // const pageToken = 'abc123'

  // Imports the Monitoring library
  const {ServiceMonitoringServiceClient} = require('@google-cloud/monitoring').v3;

  // Instantiates a client
  const monitoringClient = new ServiceMonitoringServiceClient();

  async function callListServices() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = monitoringClient.listServicesAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListServices();
  // [END monitoring_v3_generated_ServiceMonitoringService_ListServices_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
