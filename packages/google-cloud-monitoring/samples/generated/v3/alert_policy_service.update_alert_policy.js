// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(alertPolicy) {
  // [START monitoring_v3_generated_AlertPolicyService_UpdateAlertPolicy_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Optional. A list of alerting policy field names. If this field is not
   *  empty, each listed field in the existing alerting policy is set to the
   *  value of the corresponding field in the supplied policy (`alert_policy`),
   *  or to the field's default value if the field is not in the supplied
   *  alerting policy.  Fields not listed retain their previous value.
   *  Examples of valid field masks include `display_name`, `documentation`,
   *  `documentation.content`, `documentation.mime_type`, `user_labels`,
   *  `user_label.nameofkey`, `enabled`, `conditions`, `combiner`, etc.
   *  If this field is empty, then the supplied alerting policy replaces the
   *  existing policy. It is the same as deleting the existing policy and
   *  adding the supplied policy, except for the following:
   *  +   The new policy will have the same `[ALERT_POLICY_ID]` as the former
   *      policy. This gives you continuity with the former policy in your
   *      notifications and incidents.
   *  +   Conditions in the new policy will keep their former `[CONDITION_ID]` if
   *      the supplied condition includes the `name` field with that
   *      `[CONDITION_ID]`. If the supplied condition omits the `name` field,
   *      then a new `[CONDITION_ID]` is created.
   */
  // const updateMask = {}
  /**
   *  Required. The updated alerting policy or the updated values for the
   *  fields listed in `update_mask`.
   *  If `update_mask` is not empty, any fields in this policy that are
   *  not in `update_mask` are ignored.
   */
  // const alertPolicy = {}

  // Imports the Monitoring library
  const {AlertPolicyServiceClient} = require('@google-cloud/monitoring').v3;

  // Instantiates a client
  const monitoringClient = new AlertPolicyServiceClient();

  async function callUpdateAlertPolicy() {
    // Construct request
    const request = {
      alertPolicy,
    };

    // Run request
    const response = await monitoringClient.updateAlertPolicy(request);
    console.log(response);
  }

  callUpdateAlertPolicy();
  // [END monitoring_v3_generated_AlertPolicyService_UpdateAlertPolicy_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
