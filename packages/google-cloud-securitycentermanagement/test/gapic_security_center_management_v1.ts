// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as securitycentermanagementModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.SecurityCenterManagementClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(
        apiEndpoint,
        'securitycentermanagement.googleapis.com'
      );
    });

    it('has universeDomain', () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          securitycentermanagementModule.v1.SecurityCenterManagementClient
            .servicePath;
        assert.strictEqual(
          servicePath,
          'securitycentermanagement.googleapis.com'
        );
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          securitycentermanagementModule.v1.SecurityCenterManagementClient
            .apiEndpoint;
        assert.strictEqual(
          apiEndpoint,
          'securitycentermanagement.googleapis.com'
        );
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          universeDomain: 'example.com',
        });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'securitycentermanagement.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          universe_domain: 'example.com',
        });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'securitycentermanagement.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new securitycentermanagementModule.v1.SecurityCenterManagementClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'securitycentermanagement.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new securitycentermanagementModule.v1.SecurityCenterManagementClient(
              {universeDomain: 'configured.example.com'}
            );
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'securitycentermanagement.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port =
        securitycentermanagementModule.v1.SecurityCenterManagementClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          fallback: true,
        });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.securityCenterManagementStub, undefined);
      await client.initialize();
      assert(client.securityCenterManagementStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      assert(client.securityCenterManagementStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.securityCenterManagementStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getEffectiveSecurityHealthAnalyticsCustomModule', () => {
    it('invokes getEffectiveSecurityHealthAnalyticsCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEffectiveSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEffectiveSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
      );
      client.innerApiCalls.getEffectiveSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.getEffectiveSecurityHealthAnalyticsCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .getEffectiveSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .getEffectiveSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEffectiveSecurityHealthAnalyticsCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEffectiveSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEffectiveSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
      );
      client.innerApiCalls.getEffectiveSecurityHealthAnalyticsCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEffectiveSecurityHealthAnalyticsCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycentermanagement.v1.IEffectiveSecurityHealthAnalyticsCustomModule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .getEffectiveSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .getEffectiveSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEffectiveSecurityHealthAnalyticsCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEffectiveSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEffectiveSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEffectiveSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getEffectiveSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .getEffectiveSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .getEffectiveSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEffectiveSecurityHealthAnalyticsCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEffectiveSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEffectiveSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getEffectiveSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
    });
  });

  describe('getSecurityHealthAnalyticsCustomModule', () => {
    it('invokes getSecurityHealthAnalyticsCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
      );
      client.innerApiCalls.getSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.getSecurityHealthAnalyticsCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSecurityHealthAnalyticsCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
      );
      client.innerApiCalls.getSecurityHealthAnalyticsCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getSecurityHealthAnalyticsCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycentermanagement.v1.ISecurityHealthAnalyticsCustomModule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSecurityHealthAnalyticsCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSecurityHealthAnalyticsCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
    });
  });

  describe('createSecurityHealthAnalyticsCustomModule', () => {
    it('invokes createSecurityHealthAnalyticsCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.CreateSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.CreateSecurityHealthAnalyticsCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
      );
      client.innerApiCalls.createSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.createSecurityHealthAnalyticsCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .createSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .createSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSecurityHealthAnalyticsCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.CreateSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.CreateSecurityHealthAnalyticsCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
      );
      client.innerApiCalls.createSecurityHealthAnalyticsCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createSecurityHealthAnalyticsCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycentermanagement.v1.ISecurityHealthAnalyticsCustomModule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .createSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .createSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSecurityHealthAnalyticsCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.CreateSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.CreateSecurityHealthAnalyticsCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.createSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .createSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .createSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createSecurityHealthAnalyticsCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.CreateSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.CreateSecurityHealthAnalyticsCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
    });
  });

  describe('updateSecurityHealthAnalyticsCustomModule', () => {
    it('invokes updateSecurityHealthAnalyticsCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.UpdateSecurityHealthAnalyticsCustomModuleRequest()
      );
      request.securityHealthAnalyticsCustomModule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.UpdateSecurityHealthAnalyticsCustomModuleRequest',
        ['securityHealthAnalyticsCustomModule', 'name']
      );
      request.securityHealthAnalyticsCustomModule.name = defaultValue1;
      const expectedHeaderRequestParams = `security_health_analytics_custom_module.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
      );
      client.innerApiCalls.updateSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.updateSecurityHealthAnalyticsCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .updateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .updateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSecurityHealthAnalyticsCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.UpdateSecurityHealthAnalyticsCustomModuleRequest()
      );
      request.securityHealthAnalyticsCustomModule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.UpdateSecurityHealthAnalyticsCustomModuleRequest',
        ['securityHealthAnalyticsCustomModule', 'name']
      );
      request.securityHealthAnalyticsCustomModule.name = defaultValue1;
      const expectedHeaderRequestParams = `security_health_analytics_custom_module.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
      );
      client.innerApiCalls.updateSecurityHealthAnalyticsCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateSecurityHealthAnalyticsCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycentermanagement.v1.ISecurityHealthAnalyticsCustomModule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .updateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .updateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSecurityHealthAnalyticsCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.UpdateSecurityHealthAnalyticsCustomModuleRequest()
      );
      request.securityHealthAnalyticsCustomModule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.UpdateSecurityHealthAnalyticsCustomModuleRequest',
        ['securityHealthAnalyticsCustomModule', 'name']
      );
      request.securityHealthAnalyticsCustomModule.name = defaultValue1;
      const expectedHeaderRequestParams = `security_health_analytics_custom_module.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.updateSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .updateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .updateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateSecurityHealthAnalyticsCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.UpdateSecurityHealthAnalyticsCustomModuleRequest()
      );
      request.securityHealthAnalyticsCustomModule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.UpdateSecurityHealthAnalyticsCustomModuleRequest',
        ['securityHealthAnalyticsCustomModule', 'name']
      );
      request.securityHealthAnalyticsCustomModule.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
    });
  });

  describe('deleteSecurityHealthAnalyticsCustomModule', () => {
    it('invokes deleteSecurityHealthAnalyticsCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.DeleteSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.DeleteSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.deleteSecurityHealthAnalyticsCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .deleteSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .deleteSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSecurityHealthAnalyticsCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.DeleteSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.DeleteSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteSecurityHealthAnalyticsCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteSecurityHealthAnalyticsCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .deleteSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .deleteSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSecurityHealthAnalyticsCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.DeleteSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.DeleteSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.deleteSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .deleteSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .deleteSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteSecurityHealthAnalyticsCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.DeleteSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.DeleteSecurityHealthAnalyticsCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
    });
  });

  describe('simulateSecurityHealthAnalyticsCustomModule', () => {
    it('invokes simulateSecurityHealthAnalyticsCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SimulateSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.SimulateSecurityHealthAnalyticsCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SimulateSecurityHealthAnalyticsCustomModuleResponse()
      );
      client.innerApiCalls.simulateSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.simulateSecurityHealthAnalyticsCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .simulateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .simulateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes simulateSecurityHealthAnalyticsCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SimulateSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.SimulateSecurityHealthAnalyticsCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SimulateSecurityHealthAnalyticsCustomModuleResponse()
      );
      client.innerApiCalls.simulateSecurityHealthAnalyticsCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.simulateSecurityHealthAnalyticsCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycentermanagement.v1.ISimulateSecurityHealthAnalyticsCustomModuleResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .simulateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .simulateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes simulateSecurityHealthAnalyticsCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SimulateSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.SimulateSecurityHealthAnalyticsCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.simulateSecurityHealthAnalyticsCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.simulateSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .simulateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .simulateSecurityHealthAnalyticsCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes simulateSecurityHealthAnalyticsCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.SimulateSecurityHealthAnalyticsCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.SimulateSecurityHealthAnalyticsCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.simulateSecurityHealthAnalyticsCustomModule(request),
        expectedError
      );
    });
  });

  describe('getEffectiveEventThreatDetectionCustomModule', () => {
    it('invokes getEffectiveEventThreatDetectionCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEffectiveEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEffectiveEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
      );
      client.innerApiCalls.getEffectiveEventThreatDetectionCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.getEffectiveEventThreatDetectionCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .getEffectiveEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .getEffectiveEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEffectiveEventThreatDetectionCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEffectiveEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEffectiveEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
      );
      client.innerApiCalls.getEffectiveEventThreatDetectionCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEffectiveEventThreatDetectionCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycentermanagement.v1.IEffectiveEventThreatDetectionCustomModule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .getEffectiveEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .getEffectiveEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEffectiveEventThreatDetectionCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEffectiveEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEffectiveEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEffectiveEventThreatDetectionCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getEffectiveEventThreatDetectionCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .getEffectiveEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .getEffectiveEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEffectiveEventThreatDetectionCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEffectiveEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEffectiveEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getEffectiveEventThreatDetectionCustomModule(request),
        expectedError
      );
    });
  });

  describe('getEventThreatDetectionCustomModule', () => {
    it('invokes getEventThreatDetectionCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
      );
      client.innerApiCalls.getEventThreatDetectionCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.getEventThreatDetectionCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEventThreatDetectionCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
      );
      client.innerApiCalls.getEventThreatDetectionCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEventThreatDetectionCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycentermanagement.v1.IEventThreatDetectionCustomModule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEventThreatDetectionCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEventThreatDetectionCustomModule = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getEventThreatDetectionCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEventThreatDetectionCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.GetEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.GetEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getEventThreatDetectionCustomModule(request),
        expectedError
      );
    });
  });

  describe('createEventThreatDetectionCustomModule', () => {
    it('invokes createEventThreatDetectionCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.CreateEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.CreateEventThreatDetectionCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
      );
      client.innerApiCalls.createEventThreatDetectionCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.createEventThreatDetectionCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEventThreatDetectionCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.CreateEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.CreateEventThreatDetectionCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
      );
      client.innerApiCalls.createEventThreatDetectionCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createEventThreatDetectionCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycentermanagement.v1.IEventThreatDetectionCustomModule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEventThreatDetectionCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.CreateEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.CreateEventThreatDetectionCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createEventThreatDetectionCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.createEventThreatDetectionCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEventThreatDetectionCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.CreateEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.CreateEventThreatDetectionCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createEventThreatDetectionCustomModule(request),
        expectedError
      );
    });
  });

  describe('updateEventThreatDetectionCustomModule', () => {
    it('invokes updateEventThreatDetectionCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.UpdateEventThreatDetectionCustomModuleRequest()
      );
      request.eventThreatDetectionCustomModule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.UpdateEventThreatDetectionCustomModuleRequest',
        ['eventThreatDetectionCustomModule', 'name']
      );
      request.eventThreatDetectionCustomModule.name = defaultValue1;
      const expectedHeaderRequestParams = `event_threat_detection_custom_module.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
      );
      client.innerApiCalls.updateEventThreatDetectionCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.updateEventThreatDetectionCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEventThreatDetectionCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.UpdateEventThreatDetectionCustomModuleRequest()
      );
      request.eventThreatDetectionCustomModule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.UpdateEventThreatDetectionCustomModuleRequest',
        ['eventThreatDetectionCustomModule', 'name']
      );
      request.eventThreatDetectionCustomModule.name = defaultValue1;
      const expectedHeaderRequestParams = `event_threat_detection_custom_module.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
      );
      client.innerApiCalls.updateEventThreatDetectionCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateEventThreatDetectionCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycentermanagement.v1.IEventThreatDetectionCustomModule | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEventThreatDetectionCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.UpdateEventThreatDetectionCustomModuleRequest()
      );
      request.eventThreatDetectionCustomModule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.UpdateEventThreatDetectionCustomModuleRequest',
        ['eventThreatDetectionCustomModule', 'name']
      );
      request.eventThreatDetectionCustomModule.name = defaultValue1;
      const expectedHeaderRequestParams = `event_threat_detection_custom_module.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateEventThreatDetectionCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.updateEventThreatDetectionCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEventThreatDetectionCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.UpdateEventThreatDetectionCustomModuleRequest()
      );
      request.eventThreatDetectionCustomModule ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.UpdateEventThreatDetectionCustomModuleRequest',
        ['eventThreatDetectionCustomModule', 'name']
      );
      request.eventThreatDetectionCustomModule.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateEventThreatDetectionCustomModule(request),
        expectedError
      );
    });
  });

  describe('deleteEventThreatDetectionCustomModule', () => {
    it('invokes deleteEventThreatDetectionCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.DeleteEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.DeleteEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteEventThreatDetectionCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.deleteEventThreatDetectionCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEventThreatDetectionCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.DeleteEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.DeleteEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteEventThreatDetectionCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteEventThreatDetectionCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEventThreatDetectionCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.DeleteEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.DeleteEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteEventThreatDetectionCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.deleteEventThreatDetectionCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEventThreatDetectionCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.DeleteEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.DeleteEventThreatDetectionCustomModuleRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteEventThreatDetectionCustomModule(request),
        expectedError
      );
    });
  });

  describe('validateEventThreatDetectionCustomModule', () => {
    it('invokes validateEventThreatDetectionCustomModule without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ValidateEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ValidateEventThreatDetectionCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ValidateEventThreatDetectionCustomModuleResponse()
      );
      client.innerApiCalls.validateEventThreatDetectionCustomModule =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.validateEventThreatDetectionCustomModule(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .validateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .validateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes validateEventThreatDetectionCustomModule without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ValidateEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ValidateEventThreatDetectionCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ValidateEventThreatDetectionCustomModuleResponse()
      );
      client.innerApiCalls.validateEventThreatDetectionCustomModule =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.validateEventThreatDetectionCustomModule(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.securitycentermanagement.v1.IValidateEventThreatDetectionCustomModuleResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .validateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .validateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes validateEventThreatDetectionCustomModule with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ValidateEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ValidateEventThreatDetectionCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.validateEventThreatDetectionCustomModule =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.validateEventThreatDetectionCustomModule(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .validateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .validateEventThreatDetectionCustomModule as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes validateEventThreatDetectionCustomModule with closed client', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ValidateEventThreatDetectionCustomModuleRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ValidateEventThreatDetectionCustomModuleRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.validateEventThreatDetectionCustomModule(request),
        expectedError
      );
    });
  });

  describe('listEffectiveSecurityHealthAnalyticsCustomModules', () => {
    it('invokes listEffectiveSecurityHealthAnalyticsCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.innerApiCalls.listEffectiveSecurityHealthAnalyticsCustomModules =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.listEffectiveSecurityHealthAnalyticsCustomModules(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listEffectiveSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listEffectiveSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEffectiveSecurityHealthAnalyticsCustomModules without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.innerApiCalls.listEffectiveSecurityHealthAnalyticsCustomModules =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEffectiveSecurityHealthAnalyticsCustomModules(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securitycentermanagement.v1.IEffectiveSecurityHealthAnalyticsCustomModule[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listEffectiveSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listEffectiveSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEffectiveSecurityHealthAnalyticsCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEffectiveSecurityHealthAnalyticsCustomModules =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.listEffectiveSecurityHealthAnalyticsCustomModules(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .listEffectiveSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listEffectiveSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEffectiveSecurityHealthAnalyticsCustomModulesStream without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.descriptors.page.listEffectiveSecurityHealthAnalyticsCustomModules.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream =
        client.listEffectiveSecurityHealthAnalyticsCustomModulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page
            .listEffectiveSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls
              .listEffectiveSecurityHealthAnalyticsCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page
            .listEffectiveSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listEffectiveSecurityHealthAnalyticsCustomModulesStream with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEffectiveSecurityHealthAnalyticsCustomModules.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream =
        client.listEffectiveSecurityHealthAnalyticsCustomModulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page
            .listEffectiveSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls
              .listEffectiveSecurityHealthAnalyticsCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page
            .listEffectiveSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEffectiveSecurityHealthAnalyticsCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.descriptors.page.listEffectiveSecurityHealthAnalyticsCustomModules.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycentermanagement.v1.IEffectiveSecurityHealthAnalyticsCustomModule[] =
        [];
      const iterable =
        client.listEffectiveSecurityHealthAnalyticsCustomModulesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page
            .listEffectiveSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page
            .listEffectiveSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEffectiveSecurityHealthAnalyticsCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEffectiveSecurityHealthAnalyticsCustomModules.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable =
        client.listEffectiveSecurityHealthAnalyticsCustomModulesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycentermanagement.v1.IEffectiveSecurityHealthAnalyticsCustomModule[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page
            .listEffectiveSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page
            .listEffectiveSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listSecurityHealthAnalyticsCustomModules', () => {
    it('invokes listSecurityHealthAnalyticsCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.innerApiCalls.listSecurityHealthAnalyticsCustomModules =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.listSecurityHealthAnalyticsCustomModules(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSecurityHealthAnalyticsCustomModules without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.innerApiCalls.listSecurityHealthAnalyticsCustomModules =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listSecurityHealthAnalyticsCustomModules(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securitycentermanagement.v1.ISecurityHealthAnalyticsCustomModule[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSecurityHealthAnalyticsCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listSecurityHealthAnalyticsCustomModules =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.listSecurityHealthAnalyticsCustomModules(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .listSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listSecurityHealthAnalyticsCustomModulesStream without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.descriptors.page.listSecurityHealthAnalyticsCustomModules.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream =
        client.listSecurityHealthAnalyticsCustomModulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listSecurityHealthAnalyticsCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listSecurityHealthAnalyticsCustomModulesStream with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSecurityHealthAnalyticsCustomModules.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream =
        client.listSecurityHealthAnalyticsCustomModulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listSecurityHealthAnalyticsCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSecurityHealthAnalyticsCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.descriptors.page.listSecurityHealthAnalyticsCustomModules.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycentermanagement.v1.ISecurityHealthAnalyticsCustomModule[] =
        [];
      const iterable =
        client.listSecurityHealthAnalyticsCustomModulesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listSecurityHealthAnalyticsCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listSecurityHealthAnalyticsCustomModules.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable =
        client.listSecurityHealthAnalyticsCustomModulesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycentermanagement.v1.ISecurityHealthAnalyticsCustomModule[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listDescendantSecurityHealthAnalyticsCustomModules', () => {
    it('invokes listDescendantSecurityHealthAnalyticsCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.innerApiCalls.listDescendantSecurityHealthAnalyticsCustomModules =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.listDescendantSecurityHealthAnalyticsCustomModules(
          request
        );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listDescendantSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listDescendantSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDescendantSecurityHealthAnalyticsCustomModules without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.innerApiCalls.listDescendantSecurityHealthAnalyticsCustomModules =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDescendantSecurityHealthAnalyticsCustomModules(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securitycentermanagement.v1.ISecurityHealthAnalyticsCustomModule[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listDescendantSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listDescendantSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDescendantSecurityHealthAnalyticsCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDescendantSecurityHealthAnalyticsCustomModules =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.listDescendantSecurityHealthAnalyticsCustomModules(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .listDescendantSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listDescendantSecurityHealthAnalyticsCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDescendantSecurityHealthAnalyticsCustomModulesStream without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.descriptors.page.listDescendantSecurityHealthAnalyticsCustomModules.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream =
        client.listDescendantSecurityHealthAnalyticsCustomModulesStream(
          request
        );
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page
            .listDescendantSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls
              .listDescendantSecurityHealthAnalyticsCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page
            .listDescendantSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDescendantSecurityHealthAnalyticsCustomModulesStream with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDescendantSecurityHealthAnalyticsCustomModules.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream =
        client.listDescendantSecurityHealthAnalyticsCustomModulesStream(
          request
        );
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page
            .listDescendantSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls
              .listDescendantSecurityHealthAnalyticsCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page
            .listDescendantSecurityHealthAnalyticsCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDescendantSecurityHealthAnalyticsCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule()
        ),
      ];
      client.descriptors.page.listDescendantSecurityHealthAnalyticsCustomModules.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycentermanagement.v1.ISecurityHealthAnalyticsCustomModule[] =
        [];
      const iterable =
        client.listDescendantSecurityHealthAnalyticsCustomModulesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page
            .listDescendantSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page
            .listDescendantSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDescendantSecurityHealthAnalyticsCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantSecurityHealthAnalyticsCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDescendantSecurityHealthAnalyticsCustomModules.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable =
        client.listDescendantSecurityHealthAnalyticsCustomModulesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycentermanagement.v1.ISecurityHealthAnalyticsCustomModule[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page
            .listDescendantSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page
            .listDescendantSecurityHealthAnalyticsCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listEffectiveEventThreatDetectionCustomModules', () => {
    it('invokes listEffectiveEventThreatDetectionCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
      ];
      client.innerApiCalls.listEffectiveEventThreatDetectionCustomModules =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.listEffectiveEventThreatDetectionCustomModules(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listEffectiveEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listEffectiveEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEffectiveEventThreatDetectionCustomModules without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
      ];
      client.innerApiCalls.listEffectiveEventThreatDetectionCustomModules =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEffectiveEventThreatDetectionCustomModules(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securitycentermanagement.v1.IEffectiveEventThreatDetectionCustomModule[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listEffectiveEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listEffectiveEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEffectiveEventThreatDetectionCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEffectiveEventThreatDetectionCustomModules =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.listEffectiveEventThreatDetectionCustomModules(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .listEffectiveEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listEffectiveEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEffectiveEventThreatDetectionCustomModulesStream without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
      ];
      client.descriptors.page.listEffectiveEventThreatDetectionCustomModules.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream =
        client.listEffectiveEventThreatDetectionCustomModulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listEffectiveEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listEffectiveEventThreatDetectionCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listEffectiveEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listEffectiveEventThreatDetectionCustomModulesStream with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEffectiveEventThreatDetectionCustomModules.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream =
        client.listEffectiveEventThreatDetectionCustomModulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listEffectiveEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listEffectiveEventThreatDetectionCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listEffectiveEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEffectiveEventThreatDetectionCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule()
        ),
      ];
      client.descriptors.page.listEffectiveEventThreatDetectionCustomModules.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycentermanagement.v1.IEffectiveEventThreatDetectionCustomModule[] =
        [];
      const iterable =
        client.listEffectiveEventThreatDetectionCustomModulesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEffectiveEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listEffectiveEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEffectiveEventThreatDetectionCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEffectiveEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEffectiveEventThreatDetectionCustomModules.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable =
        client.listEffectiveEventThreatDetectionCustomModulesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycentermanagement.v1.IEffectiveEventThreatDetectionCustomModule[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEffectiveEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listEffectiveEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listEventThreatDetectionCustomModules', () => {
    it('invokes listEventThreatDetectionCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
      ];
      client.innerApiCalls.listEventThreatDetectionCustomModules =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.listEventThreatDetectionCustomModules(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEventThreatDetectionCustomModules without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
      ];
      client.innerApiCalls.listEventThreatDetectionCustomModules =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEventThreatDetectionCustomModules(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securitycentermanagement.v1.IEventThreatDetectionCustomModule[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEventThreatDetectionCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEventThreatDetectionCustomModules =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.listEventThreatDetectionCustomModules(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEventThreatDetectionCustomModulesStream without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
      ];
      client.descriptors.page.listEventThreatDetectionCustomModules.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream =
        client.listEventThreatDetectionCustomModulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listEventThreatDetectionCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listEventThreatDetectionCustomModulesStream with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEventThreatDetectionCustomModules.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream =
        client.listEventThreatDetectionCustomModulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listEventThreatDetectionCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEventThreatDetectionCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
      ];
      client.descriptors.page.listEventThreatDetectionCustomModules.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycentermanagement.v1.IEventThreatDetectionCustomModule[] =
        [];
      const iterable =
        client.listEventThreatDetectionCustomModulesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listEventThreatDetectionCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEventThreatDetectionCustomModules.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable =
        client.listEventThreatDetectionCustomModulesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycentermanagement.v1.IEventThreatDetectionCustomModule[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listDescendantEventThreatDetectionCustomModules', () => {
    it('invokes listDescendantEventThreatDetectionCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
      ];
      client.innerApiCalls.listDescendantEventThreatDetectionCustomModules =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.listDescendantEventThreatDetectionCustomModules(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listDescendantEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listDescendantEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDescendantEventThreatDetectionCustomModules without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
      ];
      client.innerApiCalls.listDescendantEventThreatDetectionCustomModules =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDescendantEventThreatDetectionCustomModules(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.securitycentermanagement.v1.IEventThreatDetectionCustomModule[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listDescendantEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listDescendantEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDescendantEventThreatDetectionCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDescendantEventThreatDetectionCustomModules =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.listDescendantEventThreatDetectionCustomModules(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .listDescendantEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listDescendantEventThreatDetectionCustomModules as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDescendantEventThreatDetectionCustomModulesStream without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
      ];
      client.descriptors.page.listDescendantEventThreatDetectionCustomModules.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream =
        client.listDescendantEventThreatDetectionCustomModulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page
            .listDescendantEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls
              .listDescendantEventThreatDetectionCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page
            .listDescendantEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDescendantEventThreatDetectionCustomModulesStream with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDescendantEventThreatDetectionCustomModules.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream =
        client.listDescendantEventThreatDetectionCustomModulesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page
            .listDescendantEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls
              .listDescendantEventThreatDetectionCustomModules,
            request
          )
      );
      assert(
        (
          client.descriptors.page
            .listDescendantEventThreatDetectionCustomModules
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDescendantEventThreatDetectionCustomModules without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
        generateSampleMessage(
          new protos.google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule()
        ),
      ];
      client.descriptors.page.listDescendantEventThreatDetectionCustomModules.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.securitycentermanagement.v1.IEventThreatDetectionCustomModule[] =
        [];
      const iterable =
        client.listDescendantEventThreatDetectionCustomModulesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page
            .listDescendantEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page
            .listDescendantEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDescendantEventThreatDetectionCustomModules with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.securitycentermanagement.v1.ListDescendantEventThreatDetectionCustomModulesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDescendantEventThreatDetectionCustomModules.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable =
        client.listDescendantEventThreatDetectionCustomModulesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.securitycentermanagement.v1.IEventThreatDetectionCustomModule[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page
            .listDescendantEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page
            .listDescendantEventThreatDetectionCustomModules
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('folderLocationEffectiveEventThreatDetectionCustomModule', () => {
      const fakePath =
        '/rendered/path/folderLocationEffectiveEventThreatDetectionCustomModule';
      const expectedParameters = {
        folder: 'folderValue',
        location: 'locationValue',
        effective_event_threat_detection_custom_module:
          'effectiveEventThreatDetectionCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.folderLocationEffectiveEventThreatDetectionCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.folderLocationEffectiveEventThreatDetectionCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('folderLocationEffectiveEventThreatDetectionCustomModulePath', () => {
        const result =
          client.folderLocationEffectiveEventThreatDetectionCustomModulePath(
            'folderValue',
            'locationValue',
            'effectiveEventThreatDetectionCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .folderLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderLocationEffectiveEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchFolderFromFolderLocationEffectiveEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates
              .folderLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFolderLocationEffectiveEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchLocationFromFolderLocationEffectiveEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .folderLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEffectiveEventThreatDetectionCustomModuleFromFolderLocationEffectiveEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchEffectiveEventThreatDetectionCustomModuleFromFolderLocationEffectiveEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(
          result,
          'effectiveEventThreatDetectionCustomModuleValue'
        );
        assert(
          (
            client.pathTemplates
              .folderLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderLocationEffectiveSecurityHealthAnalyticsCustomModule', () => {
      const fakePath =
        '/rendered/path/folderLocationEffectiveSecurityHealthAnalyticsCustomModule';
      const expectedParameters = {
        folder: 'folderValue',
        location: 'locationValue',
        effective_security_health_analytics_custom_module:
          'effectiveSecurityHealthAnalyticsCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.folderLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.folderLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('folderLocationEffectiveSecurityHealthAnalyticsCustomModulePath', () => {
        const result =
          client.folderLocationEffectiveSecurityHealthAnalyticsCustomModulePath(
            'folderValue',
            'locationValue',
            'effectiveSecurityHealthAnalyticsCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .folderLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderLocationEffectiveSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchFolderFromFolderLocationEffectiveSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates
              .folderLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFolderLocationEffectiveSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchLocationFromFolderLocationEffectiveSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .folderLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEffectiveSecurityHealthAnalyticsCustomModuleFromFolderLocationEffectiveSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchEffectiveSecurityHealthAnalyticsCustomModuleFromFolderLocationEffectiveSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(
          result,
          'effectiveSecurityHealthAnalyticsCustomModuleValue'
        );
        assert(
          (
            client.pathTemplates
              .folderLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderLocationEventThreatDetectionCustomModule', () => {
      const fakePath =
        '/rendered/path/folderLocationEventThreatDetectionCustomModule';
      const expectedParameters = {
        folder: 'folderValue',
        location: 'locationValue',
        event_threat_detection_custom_module:
          'eventThreatDetectionCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.folderLocationEventThreatDetectionCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.folderLocationEventThreatDetectionCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('folderLocationEventThreatDetectionCustomModulePath', () => {
        const result =
          client.folderLocationEventThreatDetectionCustomModulePath(
            'folderValue',
            'locationValue',
            'eventThreatDetectionCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .folderLocationEventThreatDetectionCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderLocationEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchFolderFromFolderLocationEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates
              .folderLocationEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFolderLocationEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchLocationFromFolderLocationEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .folderLocationEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEventThreatDetectionCustomModuleFromFolderLocationEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchEventThreatDetectionCustomModuleFromFolderLocationEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'eventThreatDetectionCustomModuleValue');
        assert(
          (
            client.pathTemplates
              .folderLocationEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderLocationSecurityHealthAnalyticsCustomModule', () => {
      const fakePath =
        '/rendered/path/folderLocationSecurityHealthAnalyticsCustomModule';
      const expectedParameters = {
        folder: 'folderValue',
        location: 'locationValue',
        security_health_analytics_custom_module:
          'securityHealthAnalyticsCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.folderLocationSecurityHealthAnalyticsCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.folderLocationSecurityHealthAnalyticsCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('folderLocationSecurityHealthAnalyticsCustomModulePath', () => {
        const result =
          client.folderLocationSecurityHealthAnalyticsCustomModulePath(
            'folderValue',
            'locationValue',
            'securityHealthAnalyticsCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .folderLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderLocationSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchFolderFromFolderLocationSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates
              .folderLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFolderLocationSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchLocationFromFolderLocationSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .folderLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSecurityHealthAnalyticsCustomModuleFromFolderLocationSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchSecurityHealthAnalyticsCustomModuleFromFolderLocationSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'securityHealthAnalyticsCustomModuleValue');
        assert(
          (
            client.pathTemplates
              .folderLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderSourceFinding', () => {
      const fakePath = '/rendered/path/folderSourceFinding';
      const expectedParameters = {
        folder: 'folderValue',
        source: 'sourceValue',
        finding: 'findingValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.folderSourceFindingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderSourceFindingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderSourceFindingPath', () => {
        const result = client.folderSourceFindingPath(
          'folderValue',
          'sourceValue',
          'findingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderSourceFindingPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderSourceFindingName', () => {
        const result = client.matchFolderFromFolderSourceFindingName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromFolderSourceFindingName', () => {
        const result = client.matchSourceFromFolderSourceFindingName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromFolderSourceFindingName', () => {
        const result = client.matchFindingFromFolderSourceFindingName(fakePath);
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates.folderSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organization', () => {
      const fakePath = '/rendered/path/organization';
      const expectedParameters = {
        organization: 'organizationValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.organizationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationPath', () => {
        const result = client.organizationPath('organizationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.organizationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationName', () => {
        const result = client.matchOrganizationFromOrganizationName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (client.pathTemplates.organizationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationLocation', () => {
      const fakePath = '/rendered/path/organizationLocation';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.organizationLocationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationLocationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationLocationPath', () => {
        const result = client.organizationLocationPath(
          'organizationValue',
          'locationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationLocationPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationLocationName', () => {
        const result =
          client.matchOrganizationFromOrganizationLocationName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationLocationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOrganizationLocationName', () => {
        const result =
          client.matchLocationFromOrganizationLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.organizationLocationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationLocationEffectiveEventThreatDetectionCustomModule', () => {
      const fakePath =
        '/rendered/path/organizationLocationEffectiveEventThreatDetectionCustomModule';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        effective_event_threat_detection_custom_module:
          'effectiveEventThreatDetectionCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.organizationLocationEffectiveEventThreatDetectionCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationLocationEffectiveEventThreatDetectionCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationLocationEffectiveEventThreatDetectionCustomModulePath', () => {
        const result =
          client.organizationLocationEffectiveEventThreatDetectionCustomModulePath(
            'organizationValue',
            'locationValue',
            'effectiveEventThreatDetectionCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .organizationLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationLocationEffectiveEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchOrganizationFromOrganizationLocationEffectiveEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOrganizationLocationEffectiveEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchLocationFromOrganizationLocationEffectiveEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEffectiveEventThreatDetectionCustomModuleFromOrganizationLocationEffectiveEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchEffectiveEventThreatDetectionCustomModuleFromOrganizationLocationEffectiveEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(
          result,
          'effectiveEventThreatDetectionCustomModuleValue'
        );
        assert(
          (
            client.pathTemplates
              .organizationLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationLocationEffectiveSecurityHealthAnalyticsCustomModule', () => {
      const fakePath =
        '/rendered/path/organizationLocationEffectiveSecurityHealthAnalyticsCustomModule';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        effective_security_health_analytics_custom_module:
          'effectiveSecurityHealthAnalyticsCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.organizationLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationLocationEffectiveSecurityHealthAnalyticsCustomModulePath', () => {
        const result =
          client.organizationLocationEffectiveSecurityHealthAnalyticsCustomModulePath(
            'organizationValue',
            'locationValue',
            'effectiveSecurityHealthAnalyticsCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .organizationLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationLocationEffectiveSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchOrganizationFromOrganizationLocationEffectiveSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOrganizationLocationEffectiveSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchLocationFromOrganizationLocationEffectiveSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEffectiveSecurityHealthAnalyticsCustomModuleFromOrganizationLocationEffectiveSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchEffectiveSecurityHealthAnalyticsCustomModuleFromOrganizationLocationEffectiveSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(
          result,
          'effectiveSecurityHealthAnalyticsCustomModuleValue'
        );
        assert(
          (
            client.pathTemplates
              .organizationLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationLocationEventThreatDetectionCustomModule', () => {
      const fakePath =
        '/rendered/path/organizationLocationEventThreatDetectionCustomModule';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        event_threat_detection_custom_module:
          'eventThreatDetectionCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.organizationLocationEventThreatDetectionCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationLocationEventThreatDetectionCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationLocationEventThreatDetectionCustomModulePath', () => {
        const result =
          client.organizationLocationEventThreatDetectionCustomModulePath(
            'organizationValue',
            'locationValue',
            'eventThreatDetectionCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .organizationLocationEventThreatDetectionCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationLocationEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchOrganizationFromOrganizationLocationEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOrganizationLocationEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchLocationFromOrganizationLocationEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEventThreatDetectionCustomModuleFromOrganizationLocationEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchEventThreatDetectionCustomModuleFromOrganizationLocationEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'eventThreatDetectionCustomModuleValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationLocationSecurityHealthAnalyticsCustomModule', () => {
      const fakePath =
        '/rendered/path/organizationLocationSecurityHealthAnalyticsCustomModule';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        security_health_analytics_custom_module:
          'securityHealthAnalyticsCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.organizationLocationSecurityHealthAnalyticsCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationLocationSecurityHealthAnalyticsCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationLocationSecurityHealthAnalyticsCustomModulePath', () => {
        const result =
          client.organizationLocationSecurityHealthAnalyticsCustomModulePath(
            'organizationValue',
            'locationValue',
            'securityHealthAnalyticsCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .organizationLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationLocationSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchOrganizationFromOrganizationLocationSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOrganizationLocationSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchLocationFromOrganizationLocationSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSecurityHealthAnalyticsCustomModuleFromOrganizationLocationSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchSecurityHealthAnalyticsCustomModuleFromOrganizationLocationSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'securityHealthAnalyticsCustomModuleValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationSourceFinding', () => {
      const fakePath = '/rendered/path/organizationSourceFinding';
      const expectedParameters = {
        organization: 'organizationValue',
        source: 'sourceValue',
        finding: 'findingValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.organizationSourceFindingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationSourceFindingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationSourceFindingPath', () => {
        const result = client.organizationSourceFindingPath(
          'organizationValue',
          'sourceValue',
          'findingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationSourceFindingPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationSourceFindingName', () => {
        const result =
          client.matchOrganizationFromOrganizationSourceFindingName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromOrganizationSourceFindingName', () => {
        const result =
          client.matchSourceFromOrganizationSourceFindingName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.organizationSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromOrganizationSourceFindingName', () => {
        const result =
          client.matchFindingFromOrganizationSourceFindingName(fakePath);
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates.organizationSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationEffectiveEventThreatDetectionCustomModule', () => {
      const fakePath =
        '/rendered/path/projectLocationEffectiveEventThreatDetectionCustomModule';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        effective_event_threat_detection_custom_module:
          'effectiveEventThreatDetectionCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectLocationEffectiveEventThreatDetectionCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationEffectiveEventThreatDetectionCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationEffectiveEventThreatDetectionCustomModulePath', () => {
        const result =
          client.projectLocationEffectiveEventThreatDetectionCustomModulePath(
            'projectValue',
            'locationValue',
            'effectiveEventThreatDetectionCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationEffectiveEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchProjectFromProjectLocationEffectiveEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationEffectiveEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchLocationFromProjectLocationEffectiveEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEffectiveEventThreatDetectionCustomModuleFromProjectLocationEffectiveEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchEffectiveEventThreatDetectionCustomModuleFromProjectLocationEffectiveEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(
          result,
          'effectiveEventThreatDetectionCustomModuleValue'
        );
        assert(
          (
            client.pathTemplates
              .projectLocationEffectiveEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationEffectiveSecurityHealthAnalyticsCustomModule', () => {
      const fakePath =
        '/rendered/path/projectLocationEffectiveSecurityHealthAnalyticsCustomModule';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        effective_security_health_analytics_custom_module:
          'effectiveSecurityHealthAnalyticsCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationEffectiveSecurityHealthAnalyticsCustomModulePath', () => {
        const result =
          client.projectLocationEffectiveSecurityHealthAnalyticsCustomModulePath(
            'projectValue',
            'locationValue',
            'effectiveSecurityHealthAnalyticsCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationEffectiveSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchProjectFromProjectLocationEffectiveSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationEffectiveSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchLocationFromProjectLocationEffectiveSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEffectiveSecurityHealthAnalyticsCustomModuleFromProjectLocationEffectiveSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchEffectiveSecurityHealthAnalyticsCustomModuleFromProjectLocationEffectiveSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(
          result,
          'effectiveSecurityHealthAnalyticsCustomModuleValue'
        );
        assert(
          (
            client.pathTemplates
              .projectLocationEffectiveSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationEventThreatDetectionCustomModule', () => {
      const fakePath =
        '/rendered/path/projectLocationEventThreatDetectionCustomModule';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        event_threat_detection_custom_module:
          'eventThreatDetectionCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectLocationEventThreatDetectionCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationEventThreatDetectionCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationEventThreatDetectionCustomModulePath', () => {
        const result =
          client.projectLocationEventThreatDetectionCustomModulePath(
            'projectValue',
            'locationValue',
            'eventThreatDetectionCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationEventThreatDetectionCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchProjectFromProjectLocationEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchLocationFromProjectLocationEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEventThreatDetectionCustomModuleFromProjectLocationEventThreatDetectionCustomModuleName', () => {
        const result =
          client.matchEventThreatDetectionCustomModuleFromProjectLocationEventThreatDetectionCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'eventThreatDetectionCustomModuleValue');
        assert(
          (
            client.pathTemplates
              .projectLocationEventThreatDetectionCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationSecurityHealthAnalyticsCustomModule', () => {
      const fakePath =
        '/rendered/path/projectLocationSecurityHealthAnalyticsCustomModule';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        security_health_analytics_custom_module:
          'securityHealthAnalyticsCustomModuleValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectLocationSecurityHealthAnalyticsCustomModulePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationSecurityHealthAnalyticsCustomModulePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationSecurityHealthAnalyticsCustomModulePath', () => {
        const result =
          client.projectLocationSecurityHealthAnalyticsCustomModulePath(
            'projectValue',
            'locationValue',
            'securityHealthAnalyticsCustomModuleValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchProjectFromProjectLocationSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchLocationFromProjectLocationSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSecurityHealthAnalyticsCustomModuleFromProjectLocationSecurityHealthAnalyticsCustomModuleName', () => {
        const result =
          client.matchSecurityHealthAnalyticsCustomModuleFromProjectLocationSecurityHealthAnalyticsCustomModuleName(
            fakePath
          );
        assert.strictEqual(result, 'securityHealthAnalyticsCustomModuleValue');
        assert(
          (
            client.pathTemplates
              .projectLocationSecurityHealthAnalyticsCustomModulePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectSourceFinding', () => {
      const fakePath = '/rendered/path/projectSourceFinding';
      const expectedParameters = {
        project: 'projectValue',
        source: 'sourceValue',
        finding: 'findingValue',
      };
      const client =
        new securitycentermanagementModule.v1.SecurityCenterManagementClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectSourceFindingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectSourceFindingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectSourceFindingPath', () => {
        const result = client.projectSourceFindingPath(
          'projectValue',
          'sourceValue',
          'findingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectSourceFindingPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectSourceFindingName', () => {
        const result =
          client.matchProjectFromProjectSourceFindingName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSourceFromProjectSourceFindingName', () => {
        const result = client.matchSourceFromProjectSourceFindingName(fakePath);
        assert.strictEqual(result, 'sourceValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFindingFromProjectSourceFindingName', () => {
        const result =
          client.matchFindingFromProjectSourceFindingName(fakePath);
        assert.strictEqual(result, 'findingValue');
        assert(
          (
            client.pathTemplates.projectSourceFindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
