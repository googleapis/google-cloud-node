// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as binauthzmanagementservicev1beta1Module from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.BinauthzManagementServiceV1Beta1Client', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        binauthzmanagementservicev1beta1Module.v1beta1
          .BinauthzManagementServiceV1Beta1Client.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        binauthzmanagementservicev1beta1Module.v1beta1
          .BinauthzManagementServiceV1Beta1Client.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port =
        binauthzmanagementservicev1beta1Module.v1beta1
          .BinauthzManagementServiceV1Beta1Client.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            fallback: true,
          }
        );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(
        client.binauthzManagementServiceV1Beta1Stub,
        undefined
      );
      await client.initialize();
      assert(client.binauthzManagementServiceV1Beta1Stub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      assert(client.binauthzManagementServiceV1Beta1Stub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(
        client.binauthzManagementServiceV1Beta1Stub,
        undefined
      );
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getPolicy', () => {
    it('invokes getPolicy without error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.GetPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.GetPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.Policy()
      );
      client.innerApiCalls.getPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.getPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPolicy without error using callback', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.GetPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.GetPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.Policy()
      );
      client.innerApiCalls.getPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.binaryauthorization.v1beta1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPolicy with error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.GetPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.GetPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPolicy with closed client', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.GetPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.GetPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getPolicy(request), expectedError);
    });
  });

  describe('updatePolicy', () => {
    it('invokes updatePolicy without error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.UpdatePolicyRequest()
      );
      request.policy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.UpdatePolicyRequest',
        ['policy', 'name']
      );
      request.policy.name = defaultValue1;
      const expectedHeaderRequestParams = `policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.Policy()
      );
      client.innerApiCalls.updatePolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.updatePolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePolicy without error using callback', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.UpdatePolicyRequest()
      );
      request.policy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.UpdatePolicyRequest',
        ['policy', 'name']
      );
      request.policy.name = defaultValue1;
      const expectedHeaderRequestParams = `policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.Policy()
      );
      client.innerApiCalls.updatePolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updatePolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.binaryauthorization.v1beta1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePolicy with error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.UpdatePolicyRequest()
      );
      request.policy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.UpdatePolicyRequest',
        ['policy', 'name']
      );
      request.policy.name = defaultValue1;
      const expectedHeaderRequestParams = `policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updatePolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updatePolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePolicy with closed client', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.UpdatePolicyRequest()
      );
      request.policy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.UpdatePolicyRequest',
        ['policy', 'name']
      );
      request.policy.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updatePolicy(request), expectedError);
    });
  });

  describe('createAttestor', () => {
    it('invokes createAttestor without error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.CreateAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.CreateAttestorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
      );
      client.innerApiCalls.createAttestor = stubSimpleCall(expectedResponse);
      const [response] = await client.createAttestor(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAttestor without error using callback', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.CreateAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.CreateAttestorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
      );
      client.innerApiCalls.createAttestor =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAttestor(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.binaryauthorization.v1beta1.IAttestor | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAttestor with error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.CreateAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.CreateAttestorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAttestor = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAttestor(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAttestor with closed client', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.CreateAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.CreateAttestorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createAttestor(request), expectedError);
    });
  });

  describe('getAttestor', () => {
    it('invokes getAttestor without error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.GetAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.GetAttestorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
      );
      client.innerApiCalls.getAttestor = stubSimpleCall(expectedResponse);
      const [response] = await client.getAttestor(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAttestor without error using callback', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.GetAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.GetAttestorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
      );
      client.innerApiCalls.getAttestor =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAttestor(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.binaryauthorization.v1beta1.IAttestor | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAttestor with error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.GetAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.GetAttestorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAttestor = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAttestor(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAttestor with closed client', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.GetAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.GetAttestorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAttestor(request), expectedError);
    });
  });

  describe('updateAttestor', () => {
    it('invokes updateAttestor without error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.UpdateAttestorRequest()
      );
      request.attestor ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.UpdateAttestorRequest',
        ['attestor', 'name']
      );
      request.attestor.name = defaultValue1;
      const expectedHeaderRequestParams = `attestor.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
      );
      client.innerApiCalls.updateAttestor = stubSimpleCall(expectedResponse);
      const [response] = await client.updateAttestor(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAttestor without error using callback', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.UpdateAttestorRequest()
      );
      request.attestor ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.UpdateAttestorRequest',
        ['attestor', 'name']
      );
      request.attestor.name = defaultValue1;
      const expectedHeaderRequestParams = `attestor.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
      );
      client.innerApiCalls.updateAttestor =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAttestor(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.binaryauthorization.v1beta1.IAttestor | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAttestor with error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.UpdateAttestorRequest()
      );
      request.attestor ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.UpdateAttestorRequest',
        ['attestor', 'name']
      );
      request.attestor.name = defaultValue1;
      const expectedHeaderRequestParams = `attestor.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAttestor = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAttestor(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAttestor with closed client', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.UpdateAttestorRequest()
      );
      request.attestor ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.UpdateAttestorRequest',
        ['attestor', 'name']
      );
      request.attestor.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateAttestor(request), expectedError);
    });
  });

  describe('deleteAttestor', () => {
    it('invokes deleteAttestor without error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.DeleteAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.DeleteAttestorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAttestor = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteAttestor(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAttestor without error using callback', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.DeleteAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.DeleteAttestorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAttestor =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAttestor(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAttestor with error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.DeleteAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.DeleteAttestorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAttestor = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAttestor(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAttestor as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAttestor as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAttestor with closed client', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.DeleteAttestorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.DeleteAttestorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteAttestor(request), expectedError);
    });
  });

  describe('listAttestors', () => {
    it('invokes listAttestors without error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
      ];
      client.innerApiCalls.listAttestors = stubSimpleCall(expectedResponse);
      const [response] = await client.listAttestors(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAttestors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAttestors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAttestors without error using callback', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
      ];
      client.innerApiCalls.listAttestors =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAttestors(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.binaryauthorization.v1beta1.IAttestor[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAttestors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAttestors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAttestors with error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAttestors = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAttestors(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAttestors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAttestors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAttestorsStream without error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
      ];
      client.descriptors.page.listAttestors.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAttestorsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.binaryauthorization.v1beta1.Attestor[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.binaryauthorization.v1beta1.Attestor
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAttestors.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAttestors, request)
      );
      assert(
        (client.descriptors.page.listAttestors.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAttestorsStream with error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAttestors.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAttestorsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.binaryauthorization.v1beta1.Attestor[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.binaryauthorization.v1beta1.Attestor
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAttestors.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAttestors, request)
      );
      assert(
        (client.descriptors.page.listAttestors.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAttestors without error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
        generateSampleMessage(
          new protos.google.cloud.binaryauthorization.v1beta1.Attestor()
        ),
      ];
      client.descriptors.page.listAttestors.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.binaryauthorization.v1beta1.IAttestor[] =
        [];
      const iterable = client.listAttestorsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAttestors.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAttestors.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAttestors with error', async () => {
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.binaryauthorization.v1beta1.ListAttestorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAttestors.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAttestorsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.binaryauthorization.v1beta1.IAttestor[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAttestors.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAttestors.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('attestor', () => {
      const fakePath = '/rendered/path/attestor';
      const expectedParameters = {
        project: 'projectValue',
        attestor: 'attestorValue',
      };
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.attestorPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.attestorPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('attestorPath', () => {
        const result = client.attestorPath('projectValue', 'attestorValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.attestorPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAttestorName', () => {
        const result = client.matchProjectFromAttestorName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.attestorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAttestorFromAttestorName', () => {
        const result = client.matchAttestorFromAttestorName(fakePath);
        assert.strictEqual(result, 'attestorValue');
        assert(
          (client.pathTemplates.attestorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('locationPolicy', () => {
      const fakePath = '/rendered/path/locationPolicy';
      const expectedParameters = {
        location: 'locationValue',
      };
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.locationPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPolicyPath', () => {
        const result = client.locationPolicyPath('locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPolicyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchLocationFromLocationPolicyName', () => {
        const result = client.matchLocationFromLocationPolicyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectPolicy', () => {
      const fakePath = '/rendered/path/projectPolicy';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client =
        new binauthzmanagementservicev1beta1Module.v1beta1.BinauthzManagementServiceV1Beta1Client(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPolicyPath', () => {
        const result = client.projectPolicyPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPolicyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectPolicyName', () => {
        const result = client.matchProjectFromProjectPolicyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
