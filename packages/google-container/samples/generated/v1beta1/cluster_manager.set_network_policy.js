// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(projectId, zone, clusterId, networkPolicy) {
  // [START container_v1beta1_generated_ClusterManager_SetNetworkPolicy_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Configuration options for the NetworkPolicy feature.
   */
  // const networkPolicy = {}
  /**
   *  The name (project, location, cluster name) of the cluster to set networking
   *  policy. Specified in the format `projects/* /locations/* /clusters/*`.
   */
  // const name = 'abc123'

  // Imports the Container library
  const {ClusterManagerClient} = require('@google-cloud/container').v1beta1;

  // Instantiates a client
  const containerClient = new ClusterManagerClient();

  async function callSetNetworkPolicy() {
    // Construct request
    const request = {
      projectId,
      zone,
      clusterId,
      networkPolicy,
    };

    // Run request
    const response = await containerClient.setNetworkPolicy(request);
    console.log(response);
  }

  callSetNetworkPolicy();
  // [END container_v1beta1_generated_ClusterManager_SetNetworkPolicy_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
