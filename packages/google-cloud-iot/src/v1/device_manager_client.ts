// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/device_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './device_manager_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Internet of Things (IoT) service. Securely connect and manage IoT devices.
 * @class
 * @memberof v1
 */
export class DeviceManagerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  deviceManagerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DeviceManagerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DeviceManagerClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DeviceManagerClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      devicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/registries/{registry}/devices/{device}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      registryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/registries/{registry}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listDeviceRegistries: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'deviceRegistries'
      ),
      listDevices: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'devices'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.iot.v1.DeviceManager',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.deviceManagerStub) {
      return this.deviceManagerStub;
    }

    // Put together the "service stub" for
    // google.cloud.iot.v1.DeviceManager.
    this.deviceManagerStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.iot.v1.DeviceManager'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.iot.v1.DeviceManager,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const deviceManagerStubMethods = [
      'createDeviceRegistry',
      'getDeviceRegistry',
      'updateDeviceRegistry',
      'deleteDeviceRegistry',
      'listDeviceRegistries',
      'createDevice',
      'getDevice',
      'updateDevice',
      'deleteDevice',
      'listDevices',
      'modifyCloudToDeviceConfig',
      'listDeviceConfigVersions',
      'listDeviceStates',
      'setIamPolicy',
      'getIamPolicy',
      'testIamPermissions',
      'sendCommandToDevice',
      'bindDeviceToGateway',
      'unbindDeviceFromGateway',
    ];
    for (const methodName of deviceManagerStubMethods) {
      const callPromise = this.deviceManagerStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.deviceManagerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'cloudiot.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'cloudiot.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloudiot',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a device registry that contains devices.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and cloud region where this device registry must be created.
   *   For example, `projects/example-project/locations/us-central1`.
   * @param {google.cloud.iot.v1.DeviceRegistry} request.deviceRegistry
   *   Required. The device registry. The field `name` must be empty. The server will
   *   generate that field from the device registry `id` provided and the
   *   `parent` field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DeviceRegistry]{@link google.cloud.iot.v1.DeviceRegistry}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.create_device_registry.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_CreateDeviceRegistry_async
   */
  createDeviceRegistry(
    request?: protos.google.cloud.iot.v1.ICreateDeviceRegistryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDeviceRegistry,
      protos.google.cloud.iot.v1.ICreateDeviceRegistryRequest | undefined,
      {} | undefined
    ]
  >;
  createDeviceRegistry(
    request: protos.google.cloud.iot.v1.ICreateDeviceRegistryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IDeviceRegistry,
      | protos.google.cloud.iot.v1.ICreateDeviceRegistryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createDeviceRegistry(
    request: protos.google.cloud.iot.v1.ICreateDeviceRegistryRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IDeviceRegistry,
      | protos.google.cloud.iot.v1.ICreateDeviceRegistryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createDeviceRegistry(
    request?: protos.google.cloud.iot.v1.ICreateDeviceRegistryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IDeviceRegistry,
          | protos.google.cloud.iot.v1.ICreateDeviceRegistryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IDeviceRegistry,
      | protos.google.cloud.iot.v1.ICreateDeviceRegistryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDeviceRegistry,
      protos.google.cloud.iot.v1.ICreateDeviceRegistryRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createDeviceRegistry(request, options, callback);
  }
  /**
   * Gets a device registry configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the device registry. For example,
   *   `projects/example-project/locations/us-central1/registries/my-registry`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DeviceRegistry]{@link google.cloud.iot.v1.DeviceRegistry}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.get_device_registry.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_GetDeviceRegistry_async
   */
  getDeviceRegistry(
    request?: protos.google.cloud.iot.v1.IGetDeviceRegistryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDeviceRegistry,
      protos.google.cloud.iot.v1.IGetDeviceRegistryRequest | undefined,
      {} | undefined
    ]
  >;
  getDeviceRegistry(
    request: protos.google.cloud.iot.v1.IGetDeviceRegistryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IDeviceRegistry,
      protos.google.cloud.iot.v1.IGetDeviceRegistryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDeviceRegistry(
    request: protos.google.cloud.iot.v1.IGetDeviceRegistryRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IDeviceRegistry,
      protos.google.cloud.iot.v1.IGetDeviceRegistryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDeviceRegistry(
    request?: protos.google.cloud.iot.v1.IGetDeviceRegistryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IDeviceRegistry,
          | protos.google.cloud.iot.v1.IGetDeviceRegistryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IDeviceRegistry,
      protos.google.cloud.iot.v1.IGetDeviceRegistryRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDeviceRegistry,
      protos.google.cloud.iot.v1.IGetDeviceRegistryRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDeviceRegistry(request, options, callback);
  }
  /**
   * Updates a device registry configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.iot.v1.DeviceRegistry} request.deviceRegistry
   *   Required. The new values for the device registry. The `id` field must be empty, and
   *   the `name` field must indicate the path of the resource. For example,
   *   `projects/example-project/locations/us-central1/registries/my-registry`.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Only updates the `device_registry` fields indicated by this mask.
   *   The field mask must not be empty, and it must not contain fields that
   *   are immutable or only set by the server.
   *   Mutable top-level fields: `event_notification_config`, `http_config`,
   *   `mqtt_config`, and `state_notification_config`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DeviceRegistry]{@link google.cloud.iot.v1.DeviceRegistry}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.update_device_registry.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_UpdateDeviceRegistry_async
   */
  updateDeviceRegistry(
    request?: protos.google.cloud.iot.v1.IUpdateDeviceRegistryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDeviceRegistry,
      protos.google.cloud.iot.v1.IUpdateDeviceRegistryRequest | undefined,
      {} | undefined
    ]
  >;
  updateDeviceRegistry(
    request: protos.google.cloud.iot.v1.IUpdateDeviceRegistryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IDeviceRegistry,
      | protos.google.cloud.iot.v1.IUpdateDeviceRegistryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateDeviceRegistry(
    request: protos.google.cloud.iot.v1.IUpdateDeviceRegistryRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IDeviceRegistry,
      | protos.google.cloud.iot.v1.IUpdateDeviceRegistryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateDeviceRegistry(
    request?: protos.google.cloud.iot.v1.IUpdateDeviceRegistryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IDeviceRegistry,
          | protos.google.cloud.iot.v1.IUpdateDeviceRegistryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IDeviceRegistry,
      | protos.google.cloud.iot.v1.IUpdateDeviceRegistryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDeviceRegistry,
      protos.google.cloud.iot.v1.IUpdateDeviceRegistryRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'device_registry.name': request.deviceRegistry!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateDeviceRegistry(request, options, callback);
  }
  /**
   * Deletes a device registry configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the device registry. For example,
   *   `projects/example-project/locations/us-central1/registries/my-registry`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.delete_device_registry.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_DeleteDeviceRegistry_async
   */
  deleteDeviceRegistry(
    request?: protos.google.cloud.iot.v1.IDeleteDeviceRegistryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.iot.v1.IDeleteDeviceRegistryRequest | undefined,
      {} | undefined
    ]
  >;
  deleteDeviceRegistry(
    request: protos.google.cloud.iot.v1.IDeleteDeviceRegistryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.iot.v1.IDeleteDeviceRegistryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDeviceRegistry(
    request: protos.google.cloud.iot.v1.IDeleteDeviceRegistryRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.iot.v1.IDeleteDeviceRegistryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDeviceRegistry(
    request?: protos.google.cloud.iot.v1.IDeleteDeviceRegistryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.iot.v1.IDeleteDeviceRegistryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.iot.v1.IDeleteDeviceRegistryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.iot.v1.IDeleteDeviceRegistryRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteDeviceRegistry(request, options, callback);
  }
  /**
   * Creates a device in a device registry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the device registry where this device should be created.
   *   For example,
   *   `projects/example-project/locations/us-central1/registries/my-registry`.
   * @param {google.cloud.iot.v1.Device} request.device
   *   Required. The device registration details. The field `name` must be empty. The server
   *   generates `name` from the device registry `id` and the
   *   `parent` field.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Device]{@link google.cloud.iot.v1.Device}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.create_device.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_CreateDevice_async
   */
  createDevice(
    request?: protos.google.cloud.iot.v1.ICreateDeviceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.ICreateDeviceRequest | undefined,
      {} | undefined
    ]
  >;
  createDevice(
    request: protos.google.cloud.iot.v1.ICreateDeviceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.ICreateDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDevice(
    request: protos.google.cloud.iot.v1.ICreateDeviceRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.ICreateDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDevice(
    request?: protos.google.cloud.iot.v1.ICreateDeviceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IDevice,
          protos.google.cloud.iot.v1.ICreateDeviceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.ICreateDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.ICreateDeviceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createDevice(request, options, callback);
  }
  /**
   * Gets details about a device.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the device. For example,
   *   `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   *   `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   * @param {google.protobuf.FieldMask} request.fieldMask
   *   The fields of the `Device` resource to be returned in the response. If the
   *   field mask is unset or empty, all fields are returned. Fields have to be
   *   provided in snake_case format, for example: `last_heartbeat_time`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Device]{@link google.cloud.iot.v1.Device}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.get_device.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_GetDevice_async
   */
  getDevice(
    request?: protos.google.cloud.iot.v1.IGetDeviceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.IGetDeviceRequest | undefined,
      {} | undefined
    ]
  >;
  getDevice(
    request: protos.google.cloud.iot.v1.IGetDeviceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.IGetDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDevice(
    request: protos.google.cloud.iot.v1.IGetDeviceRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.IGetDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDevice(
    request?: protos.google.cloud.iot.v1.IGetDeviceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IDevice,
          protos.google.cloud.iot.v1.IGetDeviceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.IGetDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.IGetDeviceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDevice(request, options, callback);
  }
  /**
   * Updates a device.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.iot.v1.Device} request.device
   *   Required. The new values for the device. The `id` and `num_id` fields must
   *   be empty, and the field `name` must specify the name path. For example,
   *   `projects/p0/locations/us-central1/registries/registry0/devices/device0`or
   *   `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Only updates the `device` fields indicated by this mask.
   *   The field mask must not be empty, and it must not contain fields that
   *   are immutable or only set by the server.
   *   Mutable top-level fields: `credentials`, `blocked`, and `metadata`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Device]{@link google.cloud.iot.v1.Device}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.update_device.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_UpdateDevice_async
   */
  updateDevice(
    request?: protos.google.cloud.iot.v1.IUpdateDeviceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.IUpdateDeviceRequest | undefined,
      {} | undefined
    ]
  >;
  updateDevice(
    request: protos.google.cloud.iot.v1.IUpdateDeviceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.IUpdateDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateDevice(
    request: protos.google.cloud.iot.v1.IUpdateDeviceRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.IUpdateDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateDevice(
    request?: protos.google.cloud.iot.v1.IUpdateDeviceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IDevice,
          protos.google.cloud.iot.v1.IUpdateDeviceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.IUpdateDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDevice,
      protos.google.cloud.iot.v1.IUpdateDeviceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'device.name': request.device!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateDevice(request, options, callback);
  }
  /**
   * Deletes a device.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the device. For example,
   *   `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   *   `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.delete_device.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_DeleteDevice_async
   */
  deleteDevice(
    request?: protos.google.cloud.iot.v1.IDeleteDeviceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.iot.v1.IDeleteDeviceRequest | undefined,
      {} | undefined
    ]
  >;
  deleteDevice(
    request: protos.google.cloud.iot.v1.IDeleteDeviceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.iot.v1.IDeleteDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDevice(
    request: protos.google.cloud.iot.v1.IDeleteDeviceRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.iot.v1.IDeleteDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDevice(
    request?: protos.google.cloud.iot.v1.IDeleteDeviceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.iot.v1.IDeleteDeviceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.iot.v1.IDeleteDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.iot.v1.IDeleteDeviceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteDevice(request, options, callback);
  }
  /**
   * Modifies the configuration for the device, which is eventually sent from
   * the Cloud IoT Core servers. Returns the modified configuration version and
   * its metadata.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the device. For example,
   *   `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   *   `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   * @param {number} request.versionToUpdate
   *   The version number to update. If this value is zero, it will not check the
   *   version number of the server and will always update the current version;
   *   otherwise, this update will fail if the version number found on the server
   *   does not match this version number. This is used to support multiple
   *   simultaneous updates without losing data.
   * @param {Buffer} request.binaryData
   *   Required. The configuration data for the device.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DeviceConfig]{@link google.cloud.iot.v1.DeviceConfig}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.modify_cloud_to_device_config.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_ModifyCloudToDeviceConfig_async
   */
  modifyCloudToDeviceConfig(
    request?: protos.google.cloud.iot.v1.IModifyCloudToDeviceConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDeviceConfig,
      protos.google.cloud.iot.v1.IModifyCloudToDeviceConfigRequest | undefined,
      {} | undefined
    ]
  >;
  modifyCloudToDeviceConfig(
    request: protos.google.cloud.iot.v1.IModifyCloudToDeviceConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IDeviceConfig,
      | protos.google.cloud.iot.v1.IModifyCloudToDeviceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  modifyCloudToDeviceConfig(
    request: protos.google.cloud.iot.v1.IModifyCloudToDeviceConfigRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IDeviceConfig,
      | protos.google.cloud.iot.v1.IModifyCloudToDeviceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  modifyCloudToDeviceConfig(
    request?: protos.google.cloud.iot.v1.IModifyCloudToDeviceConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IDeviceConfig,
          | protos.google.cloud.iot.v1.IModifyCloudToDeviceConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IDeviceConfig,
      | protos.google.cloud.iot.v1.IModifyCloudToDeviceConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDeviceConfig,
      protos.google.cloud.iot.v1.IModifyCloudToDeviceConfigRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.modifyCloudToDeviceConfig(
      request,
      options,
      callback
    );
  }
  /**
   * Lists the last few versions of the device configuration in descending
   * order (i.e.: newest first).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the device. For example,
   *   `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   *   `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   * @param {number} request.numVersions
   *   The number of versions to list. Versions are listed in decreasing order of
   *   the version number. The maximum number of versions retained is 10. If this
   *   value is zero, it will return all the versions available.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ListDeviceConfigVersionsResponse]{@link google.cloud.iot.v1.ListDeviceConfigVersionsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.list_device_config_versions.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_ListDeviceConfigVersions_async
   */
  listDeviceConfigVersions(
    request?: protos.google.cloud.iot.v1.IListDeviceConfigVersionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IListDeviceConfigVersionsResponse,
      protos.google.cloud.iot.v1.IListDeviceConfigVersionsRequest | undefined,
      {} | undefined
    ]
  >;
  listDeviceConfigVersions(
    request: protos.google.cloud.iot.v1.IListDeviceConfigVersionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IListDeviceConfigVersionsResponse,
      | protos.google.cloud.iot.v1.IListDeviceConfigVersionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  listDeviceConfigVersions(
    request: protos.google.cloud.iot.v1.IListDeviceConfigVersionsRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IListDeviceConfigVersionsResponse,
      | protos.google.cloud.iot.v1.IListDeviceConfigVersionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  listDeviceConfigVersions(
    request?: protos.google.cloud.iot.v1.IListDeviceConfigVersionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IListDeviceConfigVersionsResponse,
          | protos.google.cloud.iot.v1.IListDeviceConfigVersionsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IListDeviceConfigVersionsResponse,
      | protos.google.cloud.iot.v1.IListDeviceConfigVersionsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IListDeviceConfigVersionsResponse,
      protos.google.cloud.iot.v1.IListDeviceConfigVersionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDeviceConfigVersions(
      request,
      options,
      callback
    );
  }
  /**
   * Lists the last few versions of the device state in descending order (i.e.:
   * newest first).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the device. For example,
   *   `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   *   `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   * @param {number} request.numStates
   *   The number of states to list. States are listed in descending order of
   *   update time. The maximum number of states retained is 10. If this
   *   value is zero, it will return all the states available.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ListDeviceStatesResponse]{@link google.cloud.iot.v1.ListDeviceStatesResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.list_device_states.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_ListDeviceStates_async
   */
  listDeviceStates(
    request?: protos.google.cloud.iot.v1.IListDeviceStatesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IListDeviceStatesResponse,
      protos.google.cloud.iot.v1.IListDeviceStatesRequest | undefined,
      {} | undefined
    ]
  >;
  listDeviceStates(
    request: protos.google.cloud.iot.v1.IListDeviceStatesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IListDeviceStatesResponse,
      protos.google.cloud.iot.v1.IListDeviceStatesRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  listDeviceStates(
    request: protos.google.cloud.iot.v1.IListDeviceStatesRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IListDeviceStatesResponse,
      protos.google.cloud.iot.v1.IListDeviceStatesRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  listDeviceStates(
    request?: protos.google.cloud.iot.v1.IListDeviceStatesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IListDeviceStatesResponse,
          | protos.google.cloud.iot.v1.IListDeviceStatesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IListDeviceStatesResponse,
      protos.google.cloud.iot.v1.IListDeviceStatesRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IListDeviceStatesResponse,
      protos.google.cloud.iot.v1.IListDeviceStatesRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDeviceStates(request, options, callback);
  }
  /**
   * Sets the access control policy on the specified resource. Replaces any
   * existing policy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
   *   the fields in the mask will be modified. If no mask is provided, the
   *   following default mask is used:
   *
   *   `paths: "bindings, etag"`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.set_iam_policy.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_SetIamPolicy_async
   */
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  /**
   * Gets the access control policy for a resource.
   * Returns an empty policy if the resource exists and does not have a policy
   * set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.get_iam_policy.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_GetIamPolicy_async
   */
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  /**
   * Returns permissions that a caller has on the specified resource.
   * If the resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.test_iam_permissions.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_TestIamPermissions_async
   */
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }
  /**
   * Sends a command to the specified device. In order for a device to be able
   * to receive commands, it must:
   * 1) be connected to Cloud IoT Core using the MQTT protocol, and
   * 2) be subscribed to the group of MQTT topics specified by
   *    /devices/{device-id}/commands/#. This subscription will receive commands
   *    at the top-level topic /devices/{device-id}/commands as well as commands
   *    for subfolders, like /devices/{device-id}/commands/subfolder.
   *    Note that subscribing to specific subfolders is not supported.
   * If the command could not be delivered to the device, this method will
   * return an error; in particular, if the device is not subscribed, this
   * method will return FAILED_PRECONDITION. Otherwise, this method will
   * return OK. If the subscription is QoS 1, at least once delivery will be
   * guaranteed; for QoS 0, no acknowledgment will be expected from the device.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the device. For example,
   *   `projects/p0/locations/us-central1/registries/registry0/devices/device0` or
   *   `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`.
   * @param {Buffer} request.binaryData
   *   Required. The command data to send to the device.
   * @param {string} request.subfolder
   *   Optional subfolder for the command. If empty, the command will be delivered
   *   to the /devices/{device-id}/commands topic, otherwise it will be delivered
   *   to the /devices/{device-id}/commands/{subfolder} topic. Multi-level
   *   subfolders are allowed. This field must not have more than 256 characters,
   *   and must not contain any MQTT wildcards ("+" or "#") or null characters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [SendCommandToDeviceResponse]{@link google.cloud.iot.v1.SendCommandToDeviceResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.send_command_to_device.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_SendCommandToDevice_async
   */
  sendCommandToDevice(
    request?: protos.google.cloud.iot.v1.ISendCommandToDeviceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.ISendCommandToDeviceResponse,
      protos.google.cloud.iot.v1.ISendCommandToDeviceRequest | undefined,
      {} | undefined
    ]
  >;
  sendCommandToDevice(
    request: protos.google.cloud.iot.v1.ISendCommandToDeviceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.ISendCommandToDeviceResponse,
      protos.google.cloud.iot.v1.ISendCommandToDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  sendCommandToDevice(
    request: protos.google.cloud.iot.v1.ISendCommandToDeviceRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.ISendCommandToDeviceResponse,
      protos.google.cloud.iot.v1.ISendCommandToDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  sendCommandToDevice(
    request?: protos.google.cloud.iot.v1.ISendCommandToDeviceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.ISendCommandToDeviceResponse,
          | protos.google.cloud.iot.v1.ISendCommandToDeviceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.ISendCommandToDeviceResponse,
      protos.google.cloud.iot.v1.ISendCommandToDeviceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.ISendCommandToDeviceResponse,
      protos.google.cloud.iot.v1.ISendCommandToDeviceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.sendCommandToDevice(request, options, callback);
  }
  /**
   * Associates the device with the gateway.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the registry. For example,
   *   `projects/example-project/locations/us-central1/registries/my-registry`.
   * @param {string} request.gatewayId
   *   Required. The value of `gateway_id` can be either the device numeric ID or the
   *   user-defined device identifier.
   * @param {string} request.deviceId
   *   Required. The device to associate with the specified gateway. The value of
   *   `device_id` can be either the device numeric ID or the user-defined device
   *   identifier.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BindDeviceToGatewayResponse]{@link google.cloud.iot.v1.BindDeviceToGatewayResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.bind_device_to_gateway.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_BindDeviceToGateway_async
   */
  bindDeviceToGateway(
    request?: protos.google.cloud.iot.v1.IBindDeviceToGatewayRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IBindDeviceToGatewayResponse,
      protos.google.cloud.iot.v1.IBindDeviceToGatewayRequest | undefined,
      {} | undefined
    ]
  >;
  bindDeviceToGateway(
    request: protos.google.cloud.iot.v1.IBindDeviceToGatewayRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IBindDeviceToGatewayResponse,
      protos.google.cloud.iot.v1.IBindDeviceToGatewayRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  bindDeviceToGateway(
    request: protos.google.cloud.iot.v1.IBindDeviceToGatewayRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IBindDeviceToGatewayResponse,
      protos.google.cloud.iot.v1.IBindDeviceToGatewayRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  bindDeviceToGateway(
    request?: protos.google.cloud.iot.v1.IBindDeviceToGatewayRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IBindDeviceToGatewayResponse,
          | protos.google.cloud.iot.v1.IBindDeviceToGatewayRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IBindDeviceToGatewayResponse,
      protos.google.cloud.iot.v1.IBindDeviceToGatewayRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IBindDeviceToGatewayResponse,
      protos.google.cloud.iot.v1.IBindDeviceToGatewayRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.bindDeviceToGateway(request, options, callback);
  }
  /**
   * Deletes the association between the device and the gateway.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the registry. For example,
   *   `projects/example-project/locations/us-central1/registries/my-registry`.
   * @param {string} request.gatewayId
   *   Required. The value of `gateway_id` can be either the device numeric ID or the
   *   user-defined device identifier.
   * @param {string} request.deviceId
   *   Required. The device to disassociate from the specified gateway. The value of
   *   `device_id` can be either the device numeric ID or the user-defined device
   *   identifier.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [UnbindDeviceFromGatewayResponse]{@link google.cloud.iot.v1.UnbindDeviceFromGatewayResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.unbind_device_from_gateway.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_UnbindDeviceFromGateway_async
   */
  unbindDeviceFromGateway(
    request?: protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayResponse,
      protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayRequest | undefined,
      {} | undefined
    ]
  >;
  unbindDeviceFromGateway(
    request: protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayResponse,
      | protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  unbindDeviceFromGateway(
    request: protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayRequest,
    callback: Callback<
      protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayResponse,
      | protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  unbindDeviceFromGateway(
    request?: protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayResponse,
          | protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayResponse,
      | protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayResponse,
      protos.google.cloud.iot.v1.IUnbindDeviceFromGatewayRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.unbindDeviceFromGateway(
      request,
      options,
      callback
    );
  }

  /**
   * Lists device registries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and cloud region path. For example,
   *   `projects/example-project/locations/us-central1`.
   * @param {number} request.pageSize
   *   The maximum number of registries to return in the response. If this value
   *   is zero, the service will select a default size. A call may return fewer
   *   objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListDeviceRegistriesResponse`; indicates
   *   that this is a continuation of a prior `ListDeviceRegistries` call and
   *   the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [DeviceRegistry]{@link google.cloud.iot.v1.DeviceRegistry}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDeviceRegistriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDeviceRegistries(
    request?: protos.google.cloud.iot.v1.IListDeviceRegistriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDeviceRegistry[],
      protos.google.cloud.iot.v1.IListDeviceRegistriesRequest | null,
      protos.google.cloud.iot.v1.IListDeviceRegistriesResponse
    ]
  >;
  listDeviceRegistries(
    request: protos.google.cloud.iot.v1.IListDeviceRegistriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.iot.v1.IListDeviceRegistriesRequest,
      | protos.google.cloud.iot.v1.IListDeviceRegistriesResponse
      | null
      | undefined,
      protos.google.cloud.iot.v1.IDeviceRegistry
    >
  ): void;
  listDeviceRegistries(
    request: protos.google.cloud.iot.v1.IListDeviceRegistriesRequest,
    callback: PaginationCallback<
      protos.google.cloud.iot.v1.IListDeviceRegistriesRequest,
      | protos.google.cloud.iot.v1.IListDeviceRegistriesResponse
      | null
      | undefined,
      protos.google.cloud.iot.v1.IDeviceRegistry
    >
  ): void;
  listDeviceRegistries(
    request?: protos.google.cloud.iot.v1.IListDeviceRegistriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.iot.v1.IListDeviceRegistriesRequest,
          | protos.google.cloud.iot.v1.IListDeviceRegistriesResponse
          | null
          | undefined,
          protos.google.cloud.iot.v1.IDeviceRegistry
        >,
    callback?: PaginationCallback<
      protos.google.cloud.iot.v1.IListDeviceRegistriesRequest,
      | protos.google.cloud.iot.v1.IListDeviceRegistriesResponse
      | null
      | undefined,
      protos.google.cloud.iot.v1.IDeviceRegistry
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDeviceRegistry[],
      protos.google.cloud.iot.v1.IListDeviceRegistriesRequest | null,
      protos.google.cloud.iot.v1.IListDeviceRegistriesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDeviceRegistries(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and cloud region path. For example,
   *   `projects/example-project/locations/us-central1`.
   * @param {number} request.pageSize
   *   The maximum number of registries to return in the response. If this value
   *   is zero, the service will select a default size. A call may return fewer
   *   objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListDeviceRegistriesResponse`; indicates
   *   that this is a continuation of a prior `ListDeviceRegistries` call and
   *   the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [DeviceRegistry]{@link google.cloud.iot.v1.DeviceRegistry} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDeviceRegistriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDeviceRegistriesStream(
    request?: protos.google.cloud.iot.v1.IListDeviceRegistriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDeviceRegistries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeviceRegistries.createStream(
      this.innerApiCalls.listDeviceRegistries as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDeviceRegistries`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and cloud region path. For example,
   *   `projects/example-project/locations/us-central1`.
   * @param {number} request.pageSize
   *   The maximum number of registries to return in the response. If this value
   *   is zero, the service will select a default size. A call may return fewer
   *   objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListDeviceRegistriesResponse`; indicates
   *   that this is a continuation of a prior `ListDeviceRegistries` call and
   *   the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [DeviceRegistry]{@link google.cloud.iot.v1.DeviceRegistry}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.list_device_registries.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_ListDeviceRegistries_async
   */
  listDeviceRegistriesAsync(
    request?: protos.google.cloud.iot.v1.IListDeviceRegistriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.iot.v1.IDeviceRegistry> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDeviceRegistries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeviceRegistries.asyncIterate(
      this.innerApiCalls['listDeviceRegistries'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.iot.v1.IDeviceRegistry>;
  }
  /**
   * List devices in a device registry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The device registry path. Required. For example,
   *   `projects/my-project/locations/us-central1/registries/my-registry`.
   * @param {number[]} request.deviceNumIds
   *   A list of device numeric IDs. If empty, this field is ignored. Maximum
   *   IDs: 10,000.
   * @param {string[]} request.deviceIds
   *   A list of device string IDs. For example, `['device0', 'device12']`.
   *   If empty, this field is ignored. Maximum IDs: 10,000
   * @param {google.protobuf.FieldMask} request.fieldMask
   *   The fields of the `Device` resource to be returned in the response. The
   *   fields `id` and `num_id` are always returned, along with any
   *   other fields specified in snake_case format, for example:
   *   `last_heartbeat_time`.
   * @param {google.cloud.iot.v1.GatewayListOptions} request.gatewayListOptions
   *   Options related to gateways.
   * @param {number} request.pageSize
   *   The maximum number of devices to return in the response. If this value
   *   is zero, the service will select a default size. A call may return fewer
   *   objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListDevicesResponse`; indicates
   *   that this is a continuation of a prior `ListDevices` call and
   *   the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Device]{@link google.cloud.iot.v1.Device}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDevicesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDevices(
    request?: protos.google.cloud.iot.v1.IListDevicesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDevice[],
      protos.google.cloud.iot.v1.IListDevicesRequest | null,
      protos.google.cloud.iot.v1.IListDevicesResponse
    ]
  >;
  listDevices(
    request: protos.google.cloud.iot.v1.IListDevicesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.iot.v1.IListDevicesRequest,
      protos.google.cloud.iot.v1.IListDevicesResponse | null | undefined,
      protos.google.cloud.iot.v1.IDevice
    >
  ): void;
  listDevices(
    request: protos.google.cloud.iot.v1.IListDevicesRequest,
    callback: PaginationCallback<
      protos.google.cloud.iot.v1.IListDevicesRequest,
      protos.google.cloud.iot.v1.IListDevicesResponse | null | undefined,
      protos.google.cloud.iot.v1.IDevice
    >
  ): void;
  listDevices(
    request?: protos.google.cloud.iot.v1.IListDevicesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.iot.v1.IListDevicesRequest,
          protos.google.cloud.iot.v1.IListDevicesResponse | null | undefined,
          protos.google.cloud.iot.v1.IDevice
        >,
    callback?: PaginationCallback<
      protos.google.cloud.iot.v1.IListDevicesRequest,
      protos.google.cloud.iot.v1.IListDevicesResponse | null | undefined,
      protos.google.cloud.iot.v1.IDevice
    >
  ): Promise<
    [
      protos.google.cloud.iot.v1.IDevice[],
      protos.google.cloud.iot.v1.IListDevicesRequest | null,
      protos.google.cloud.iot.v1.IListDevicesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDevices(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The device registry path. Required. For example,
   *   `projects/my-project/locations/us-central1/registries/my-registry`.
   * @param {number[]} request.deviceNumIds
   *   A list of device numeric IDs. If empty, this field is ignored. Maximum
   *   IDs: 10,000.
   * @param {string[]} request.deviceIds
   *   A list of device string IDs. For example, `['device0', 'device12']`.
   *   If empty, this field is ignored. Maximum IDs: 10,000
   * @param {google.protobuf.FieldMask} request.fieldMask
   *   The fields of the `Device` resource to be returned in the response. The
   *   fields `id` and `num_id` are always returned, along with any
   *   other fields specified in snake_case format, for example:
   *   `last_heartbeat_time`.
   * @param {google.cloud.iot.v1.GatewayListOptions} request.gatewayListOptions
   *   Options related to gateways.
   * @param {number} request.pageSize
   *   The maximum number of devices to return in the response. If this value
   *   is zero, the service will select a default size. A call may return fewer
   *   objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListDevicesResponse`; indicates
   *   that this is a continuation of a prior `ListDevices` call and
   *   the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Device]{@link google.cloud.iot.v1.Device} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDevicesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDevicesStream(
    request?: protos.google.cloud.iot.v1.IListDevicesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDevices'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDevices.createStream(
      this.innerApiCalls.listDevices as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDevices`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The device registry path. Required. For example,
   *   `projects/my-project/locations/us-central1/registries/my-registry`.
   * @param {number[]} request.deviceNumIds
   *   A list of device numeric IDs. If empty, this field is ignored. Maximum
   *   IDs: 10,000.
   * @param {string[]} request.deviceIds
   *   A list of device string IDs. For example, `['device0', 'device12']`.
   *   If empty, this field is ignored. Maximum IDs: 10,000
   * @param {google.protobuf.FieldMask} request.fieldMask
   *   The fields of the `Device` resource to be returned in the response. The
   *   fields `id` and `num_id` are always returned, along with any
   *   other fields specified in snake_case format, for example:
   *   `last_heartbeat_time`.
   * @param {google.cloud.iot.v1.GatewayListOptions} request.gatewayListOptions
   *   Options related to gateways.
   * @param {number} request.pageSize
   *   The maximum number of devices to return in the response. If this value
   *   is zero, the service will select a default size. A call may return fewer
   *   objects than requested. A non-empty `next_page_token` in the response
   *   indicates that more data is available.
   * @param {string} request.pageToken
   *   The value returned by the last `ListDevicesResponse`; indicates
   *   that this is a continuation of a prior `ListDevices` call and
   *   the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Device]{@link google.cloud.iot.v1.Device}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/device_manager.list_devices.js</caption>
   * region_tag:cloudiot_v1_generated_DeviceManager_ListDevices_async
   */
  listDevicesAsync(
    request?: protos.google.cloud.iot.v1.IListDevicesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.iot.v1.IDevice> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDevices'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDevices.asyncIterate(
      this.innerApiCalls['listDevices'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.iot.v1.IDevice>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified device resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} registry
   * @param {string} device
   * @returns {string} Resource name string.
   */
  devicePath(
    project: string,
    location: string,
    registry: string,
    device: string
  ) {
    return this.pathTemplates.devicePathTemplate.render({
      project: project,
      location: location,
      registry: registry,
      device: device,
    });
  }

  /**
   * Parse the project from Device resource.
   *
   * @param {string} deviceName
   *   A fully-qualified path representing Device resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDeviceName(deviceName: string) {
    return this.pathTemplates.devicePathTemplate.match(deviceName).project;
  }

  /**
   * Parse the location from Device resource.
   *
   * @param {string} deviceName
   *   A fully-qualified path representing Device resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDeviceName(deviceName: string) {
    return this.pathTemplates.devicePathTemplate.match(deviceName).location;
  }

  /**
   * Parse the registry from Device resource.
   *
   * @param {string} deviceName
   *   A fully-qualified path representing Device resource.
   * @returns {string} A string representing the registry.
   */
  matchRegistryFromDeviceName(deviceName: string) {
    return this.pathTemplates.devicePathTemplate.match(deviceName).registry;
  }

  /**
   * Parse the device from Device resource.
   *
   * @param {string} deviceName
   *   A fully-qualified path representing Device resource.
   * @returns {string} A string representing the device.
   */
  matchDeviceFromDeviceName(deviceName: string) {
    return this.pathTemplates.devicePathTemplate.match(deviceName).device;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified registry resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} registry
   * @returns {string} Resource name string.
   */
  registryPath(project: string, location: string, registry: string) {
    return this.pathTemplates.registryPathTemplate.render({
      project: project,
      location: location,
      registry: registry,
    });
  }

  /**
   * Parse the project from Registry resource.
   *
   * @param {string} registryName
   *   A fully-qualified path representing Registry resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRegistryName(registryName: string) {
    return this.pathTemplates.registryPathTemplate.match(registryName).project;
  }

  /**
   * Parse the location from Registry resource.
   *
   * @param {string} registryName
   *   A fully-qualified path representing Registry resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRegistryName(registryName: string) {
    return this.pathTemplates.registryPathTemplate.match(registryName).location;
  }

  /**
   * Parse the registry from Registry resource.
   *
   * @param {string} registryName
   *   A fully-qualified path representing Registry resource.
   * @returns {string} A string representing the registry.
   */
  matchRegistryFromRegistryName(registryName: string) {
    return this.pathTemplates.registryPathTemplate.match(registryName).registry;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.deviceManagerStub && !this._terminated) {
      return this.deviceManagerStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
