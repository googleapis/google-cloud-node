// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

'use strict';

function main(name) {
  // [START merchantapi_quickstart]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The name of the product to fetch issues for.
   *  Format: `accounts/{account}/products/{product}`
   */
  // const name = 'abc123'
  /**
   *  Optional. The IETF BCP-47 (https://tools.ietf.org/html/bcp47) language
   *  code used to localize an issue resolution content. If not set, the result
   *  will be in default language `en-US`.
   */
  // const languageCode = 'abc123'
  /**
   *  Optional. The IANA (https://www.iana.org/time-zones) timezone used to
   *  localize times in an issue resolution content. For example
   *  'America/Los_Angeles'. If not set, results will use as a default UTC.
   */
  // const timeZone = 'abc123'
  /**
   *  Optional. The payload for configuring how the content should be rendered.
   */
  // const payload = {}

  // Imports the Issueresolution library
  const {IssueResolutionServiceClient} =
    require('@google-cloud/issueresolution').v1beta;

  // Instantiates a client
  const issueresolutionClient = new IssueResolutionServiceClient();

  async function callRenderProductIssues() {
    // Construct request
    const request = {
      name,
    };

    // Run request
    const response = await issueresolutionClient.renderProductIssues(request);
    console.log(response);
  }

  callRenderProductIssues();
  // [END merchantapi_quickstart]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
