// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/livestream_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './livestream_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Using Live Stream API, you can generate live streams in the various
 *  renditions and streaming formats. The streaming format include HTTP Live
 *  Streaming (HLS) and Dynamic Adaptive Streaming over HTTP (DASH). You can send
 *  a source stream in the various ways, including Real-Time Messaging
 *  Protocol (RTMP) and Secure Reliable Transport (SRT).
 * @class
 * @memberof v1
 */
export class LivestreamServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  livestreamServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of LivestreamServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new LivestreamServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof LivestreamServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      channelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/channels/{channel}'
      ),
      eventPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/channels/{channel}/events/{event}'
      ),
      inputPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/inputs/{input}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listChannels: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'channels'
      ),
      listInputs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'inputs'
      ),
      listEvents: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'events'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createChannelResponse = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.Channel'
    ) as gax.protobuf.Type;
    const createChannelMetadata = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteChannelResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteChannelMetadata = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateChannelResponse = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.Channel'
    ) as gax.protobuf.Type;
    const updateChannelMetadata = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const startChannelResponse = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.ChannelOperationResponse'
    ) as gax.protobuf.Type;
    const startChannelMetadata = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const stopChannelResponse = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.ChannelOperationResponse'
    ) as gax.protobuf.Type;
    const stopChannelMetadata = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createInputResponse = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.Input'
    ) as gax.protobuf.Type;
    const createInputMetadata = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteInputResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteInputMetadata = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateInputResponse = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.Input'
    ) as gax.protobuf.Type;
    const updateInputMetadata = protoFilesRoot.lookup(
      '.google.cloud.video.livestream.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createChannel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createChannelResponse.decode.bind(createChannelResponse),
        createChannelMetadata.decode.bind(createChannelMetadata)
      ),
      deleteChannel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteChannelResponse.decode.bind(deleteChannelResponse),
        deleteChannelMetadata.decode.bind(deleteChannelMetadata)
      ),
      updateChannel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateChannelResponse.decode.bind(updateChannelResponse),
        updateChannelMetadata.decode.bind(updateChannelMetadata)
      ),
      startChannel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        startChannelResponse.decode.bind(startChannelResponse),
        startChannelMetadata.decode.bind(startChannelMetadata)
      ),
      stopChannel: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        stopChannelResponse.decode.bind(stopChannelResponse),
        stopChannelMetadata.decode.bind(stopChannelMetadata)
      ),
      createInput: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createInputResponse.decode.bind(createInputResponse),
        createInputMetadata.decode.bind(createInputMetadata)
      ),
      deleteInput: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteInputResponse.decode.bind(deleteInputResponse),
        deleteInputMetadata.decode.bind(deleteInputMetadata)
      ),
      updateInput: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateInputResponse.decode.bind(updateInputResponse),
        updateInputMetadata.decode.bind(updateInputMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.video.livestream.v1.LivestreamService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.livestreamServiceStub) {
      return this.livestreamServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.video.livestream.v1.LivestreamService.
    this.livestreamServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.video.livestream.v1.LivestreamService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.video.livestream.v1
            .LivestreamService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const livestreamServiceStubMethods = [
      'createChannel',
      'listChannels',
      'getChannel',
      'deleteChannel',
      'updateChannel',
      'startChannel',
      'stopChannel',
      'createInput',
      'listInputs',
      'getInput',
      'deleteInput',
      'updateInput',
      'createEvent',
      'listEvents',
      'getEvent',
      'deleteEvent',
    ];
    for (const methodName of livestreamServiceStubMethods) {
      const callPromise = this.livestreamServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.livestreamServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'livestream.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'livestream.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Returns the specified channel.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the channel resource, in the form of:
   *   `projects/{project}/locations/{location}/channels/{channelId}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Channel]{@link google.cloud.video.livestream.v1.Channel}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.get_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_GetChannel_async
   */
  getChannel(
    request?: protos.google.cloud.video.livestream.v1.IGetChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IChannel,
      protos.google.cloud.video.livestream.v1.IGetChannelRequest | undefined,
      {} | undefined
    ]
  >;
  getChannel(
    request: protos.google.cloud.video.livestream.v1.IGetChannelRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.livestream.v1.IChannel,
      | protos.google.cloud.video.livestream.v1.IGetChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getChannel(
    request: protos.google.cloud.video.livestream.v1.IGetChannelRequest,
    callback: Callback<
      protos.google.cloud.video.livestream.v1.IChannel,
      | protos.google.cloud.video.livestream.v1.IGetChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getChannel(
    request?: protos.google.cloud.video.livestream.v1.IGetChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.livestream.v1.IChannel,
          | protos.google.cloud.video.livestream.v1.IGetChannelRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.livestream.v1.IChannel,
      | protos.google.cloud.video.livestream.v1.IGetChannelRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IChannel,
      protos.google.cloud.video.livestream.v1.IGetChannelRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getChannel(request, options, callback);
  }
  /**
   * Returns the specified input.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the input resource, in the form of:
   *   `projects/{project}/locations/{location}/inputs/{inputId}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Input]{@link google.cloud.video.livestream.v1.Input}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.get_input.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_GetInput_async
   */
  getInput(
    request?: protos.google.cloud.video.livestream.v1.IGetInputRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IInput,
      protos.google.cloud.video.livestream.v1.IGetInputRequest | undefined,
      {} | undefined
    ]
  >;
  getInput(
    request: protos.google.cloud.video.livestream.v1.IGetInputRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.livestream.v1.IInput,
      | protos.google.cloud.video.livestream.v1.IGetInputRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInput(
    request: protos.google.cloud.video.livestream.v1.IGetInputRequest,
    callback: Callback<
      protos.google.cloud.video.livestream.v1.IInput,
      | protos.google.cloud.video.livestream.v1.IGetInputRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getInput(
    request?: protos.google.cloud.video.livestream.v1.IGetInputRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.livestream.v1.IInput,
          | protos.google.cloud.video.livestream.v1.IGetInputRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.livestream.v1.IInput,
      | protos.google.cloud.video.livestream.v1.IGetInputRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IInput,
      protos.google.cloud.video.livestream.v1.IGetInputRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getInput(request, options, callback);
  }
  /**
   * Creates an event with the provided unique ID in the specified channel.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent channel for the resource, in the form of:
   *   `projects/{project}/locations/{location}/channels/{channelId}`.
   * @param {google.cloud.video.livestream.v1.Event} request.event
   *   Required. The event resource to be created.
   * @param {string} request.eventId
   *   Required. The ID of the event resource to be created.
   *   This value must be 1-63 characters, begin and end with `[a-z0-9]`,
   *   could contain dashes (-) in between.
   * @param {string} request.requestId
   *   A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported `(00000000-0000-0000-0000-000000000000)`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Event]{@link google.cloud.video.livestream.v1.Event}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.create_event.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_CreateEvent_async
   */
  createEvent(
    request?: protos.google.cloud.video.livestream.v1.ICreateEventRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IEvent,
      protos.google.cloud.video.livestream.v1.ICreateEventRequest | undefined,
      {} | undefined
    ]
  >;
  createEvent(
    request: protos.google.cloud.video.livestream.v1.ICreateEventRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.livestream.v1.IEvent,
      | protos.google.cloud.video.livestream.v1.ICreateEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createEvent(
    request: protos.google.cloud.video.livestream.v1.ICreateEventRequest,
    callback: Callback<
      protos.google.cloud.video.livestream.v1.IEvent,
      | protos.google.cloud.video.livestream.v1.ICreateEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createEvent(
    request?: protos.google.cloud.video.livestream.v1.ICreateEventRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.livestream.v1.IEvent,
          | protos.google.cloud.video.livestream.v1.ICreateEventRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.livestream.v1.IEvent,
      | protos.google.cloud.video.livestream.v1.ICreateEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IEvent,
      protos.google.cloud.video.livestream.v1.ICreateEventRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createEvent(request, options, callback);
  }
  /**
   * Returns the specified event.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the event resource, in the form of:
   *   `projects/{project}/locations/{location}/channels/{channelId}/events/{eventId}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Event]{@link google.cloud.video.livestream.v1.Event}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.get_event.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_GetEvent_async
   */
  getEvent(
    request?: protos.google.cloud.video.livestream.v1.IGetEventRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IEvent,
      protos.google.cloud.video.livestream.v1.IGetEventRequest | undefined,
      {} | undefined
    ]
  >;
  getEvent(
    request: protos.google.cloud.video.livestream.v1.IGetEventRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.livestream.v1.IEvent,
      | protos.google.cloud.video.livestream.v1.IGetEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getEvent(
    request: protos.google.cloud.video.livestream.v1.IGetEventRequest,
    callback: Callback<
      protos.google.cloud.video.livestream.v1.IEvent,
      | protos.google.cloud.video.livestream.v1.IGetEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getEvent(
    request?: protos.google.cloud.video.livestream.v1.IGetEventRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.livestream.v1.IEvent,
          | protos.google.cloud.video.livestream.v1.IGetEventRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.livestream.v1.IEvent,
      | protos.google.cloud.video.livestream.v1.IGetEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IEvent,
      protos.google.cloud.video.livestream.v1.IGetEventRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getEvent(request, options, callback);
  }
  /**
   * Deletes the specified event.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the event resource, in the form of:
   *   `projects/{project}/locations/{location}/channels/{channelId}/events/{eventId}`.
   * @param {string} request.requestId
   *   A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported `(00000000-0000-0000-0000-000000000000)`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.delete_event.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_DeleteEvent_async
   */
  deleteEvent(
    request?: protos.google.cloud.video.livestream.v1.IDeleteEventRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.video.livestream.v1.IDeleteEventRequest | undefined,
      {} | undefined
    ]
  >;
  deleteEvent(
    request: protos.google.cloud.video.livestream.v1.IDeleteEventRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.video.livestream.v1.IDeleteEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEvent(
    request: protos.google.cloud.video.livestream.v1.IDeleteEventRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.video.livestream.v1.IDeleteEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEvent(
    request?: protos.google.cloud.video.livestream.v1.IDeleteEventRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.video.livestream.v1.IDeleteEventRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.video.livestream.v1.IDeleteEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.video.livestream.v1.IDeleteEventRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteEvent(request, options, callback);
  }

  /**
   * Creates a channel with the provided unique ID in the specified
   * region.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location for the resource, in the form of:
   *   `projects/{project}/locations/{location}`.
   * @param {google.cloud.video.livestream.v1.Channel} request.channel
   *   Required. The channel resource to be created.
   * @param {string} request.channelId
   *   Required. The ID of the channel resource to be created.
   *   This value must be 1-63 characters, begin and end with `[a-z0-9]`,
   *   could contain dashes (-) in between.
   * @param {string} request.requestId
   *   A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported `(00000000-0000-0000-0000-000000000000)`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.create_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_CreateChannel_async
   */
  createChannel(
    request?: protos.google.cloud.video.livestream.v1.ICreateChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannel,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createChannel(
    request: protos.google.cloud.video.livestream.v1.ICreateChannelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannel,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createChannel(
    request: protos.google.cloud.video.livestream.v1.ICreateChannelRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannel,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createChannel(
    request?: protos.google.cloud.video.livestream.v1.ICreateChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.video.livestream.v1.IChannel,
            protos.google.cloud.video.livestream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannel,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannel,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createChannel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createChannel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.create_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_CreateChannel_async
   */
  async checkCreateChannelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.video.livestream.v1.Channel,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createChannel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.video.livestream.v1.Channel,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >;
  }
  /**
   * Deletes the specified channel.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the channel resource, in the form of:
   *   `projects/{project}/locations/{location}/channels/{channelId}`.
   * @param {string} request.requestId
   *   A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported `(00000000-0000-0000-0000-000000000000)`.
   * @param {boolean} request.force
   *   If the `force` field is set to the default value of `false`, you must
   *   delete all of a channel's events before you can delete the channel itself.
   *   If the field is set to `true`, requests to delete a channel also delete
   *   associated channel events.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.delete_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_DeleteChannel_async
   */
  deleteChannel(
    request?: protos.google.cloud.video.livestream.v1.IDeleteChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteChannel(
    request: protos.google.cloud.video.livestream.v1.IDeleteChannelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteChannel(
    request: protos.google.cloud.video.livestream.v1.IDeleteChannelRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteChannel(
    request?: protos.google.cloud.video.livestream.v1.IDeleteChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.video.livestream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteChannel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteChannel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.delete_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_DeleteChannel_async
   */
  async checkDeleteChannelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteChannel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >;
  }
  /**
   * Updates the specified channel.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Field mask is used to specify the fields to be overwritten in the Channel
   *   resource by the update. You can only update the following fields:
   *
   *   * [`inputAttachments`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#inputattachment)
   *   * [`output`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#output)
   *   * [`elementaryStreams`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#ElementaryStream)
   *   * [`muxStreams`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#muxstream)
   *   * [`manifests`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#Manifest)
   *   * [`spritesheets`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#spritesheet)
   *
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask.
   * @param {google.cloud.video.livestream.v1.Channel} request.channel
   *   Required. The channel resource to be updated.
   * @param {string} request.requestId
   *   A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported `(00000000-0000-0000-0000-000000000000)`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.update_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_UpdateChannel_async
   */
  updateChannel(
    request?: protos.google.cloud.video.livestream.v1.IUpdateChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannel,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateChannel(
    request: protos.google.cloud.video.livestream.v1.IUpdateChannelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannel,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateChannel(
    request: protos.google.cloud.video.livestream.v1.IUpdateChannelRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannel,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateChannel(
    request?: protos.google.cloud.video.livestream.v1.IUpdateChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.video.livestream.v1.IChannel,
            protos.google.cloud.video.livestream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannel,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannel,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'channel.name': request.channel!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateChannel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateChannel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.update_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_UpdateChannel_async
   */
  async checkUpdateChannelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.video.livestream.v1.Channel,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateChannel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.video.livestream.v1.Channel,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >;
  }
  /**
   * Starts the specified channel. Part of the video pipeline will be created
   * only when the StartChannel request is received by the server.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the channel resource, in the form of:
   *   `projects/{project}/locations/{location}/channels/{channelId}`.
   * @param {string} request.requestId
   *   A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported `(00000000-0000-0000-0000-000000000000)`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.start_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_StartChannel_async
   */
  startChannel(
    request?: protos.google.cloud.video.livestream.v1.IStartChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  startChannel(
    request: protos.google.cloud.video.livestream.v1.IStartChannelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  startChannel(
    request: protos.google.cloud.video.livestream.v1.IStartChannelRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  startChannel(
    request?: protos.google.cloud.video.livestream.v1.IStartChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
            protos.google.cloud.video.livestream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.startChannel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `startChannel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.start_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_StartChannel_async
   */
  async checkStartChannelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.video.livestream.v1.ChannelOperationResponse,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.startChannel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.video.livestream.v1.ChannelOperationResponse,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >;
  }
  /**
   * Stops the specified channel. Part of the video pipeline will be released
   * when the StopChannel request is received by the server.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the channel resource, in the form of:
   *   `projects/{project}/locations/{location}/channels/{channelId}`.
   * @param {string} request.requestId
   *   A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported `(00000000-0000-0000-0000-000000000000)`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.stop_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_StopChannel_async
   */
  stopChannel(
    request?: protos.google.cloud.video.livestream.v1.IStopChannelRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  stopChannel(
    request: protos.google.cloud.video.livestream.v1.IStopChannelRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  stopChannel(
    request: protos.google.cloud.video.livestream.v1.IStopChannelRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  stopChannel(
    request?: protos.google.cloud.video.livestream.v1.IStopChannelRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
            protos.google.cloud.video.livestream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IChannelOperationResponse,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.stopChannel(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `stopChannel()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.stop_channel.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_StopChannel_async
   */
  async checkStopChannelProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.video.livestream.v1.ChannelOperationResponse,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.stopChannel,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.video.livestream.v1.ChannelOperationResponse,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >;
  }
  /**
   * Creates an input with the provided unique ID in the specified region.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location for the resource, in the form of:
   *   `projects/{project}/locations/{location}`.
   * @param {google.cloud.video.livestream.v1.Input} request.input
   *   Required. The input resource to be created.
   * @param {string} request.inputId
   *   Required. The ID of the input resource to be created.
   *   This value must be 1-63 characters, begin and end with `[a-z0-9]`,
   *   could contain dashes (-) in between.
   * @param {string} request.requestId
   *   A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported `(00000000-0000-0000-0000-000000000000)`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.create_input.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_CreateInput_async
   */
  createInput(
    request?: protos.google.cloud.video.livestream.v1.ICreateInputRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IInput,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createInput(
    request: protos.google.cloud.video.livestream.v1.ICreateInputRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IInput,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createInput(
    request: protos.google.cloud.video.livestream.v1.ICreateInputRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IInput,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createInput(
    request?: protos.google.cloud.video.livestream.v1.ICreateInputRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.video.livestream.v1.IInput,
            protos.google.cloud.video.livestream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IInput,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IInput,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createInput(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createInput()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.create_input.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_CreateInput_async
   */
  async checkCreateInputProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.video.livestream.v1.Input,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createInput,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.video.livestream.v1.Input,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >;
  }
  /**
   * Deletes the specified input.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the input resource, in the form of:
   *   `projects/{project}/locations/{location}/inputs/{inputId}`.
   * @param {string} request.requestId
   *   A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported `(00000000-0000-0000-0000-000000000000)`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.delete_input.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_DeleteInput_async
   */
  deleteInput(
    request?: protos.google.cloud.video.livestream.v1.IDeleteInputRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteInput(
    request: protos.google.cloud.video.livestream.v1.IDeleteInputRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteInput(
    request: protos.google.cloud.video.livestream.v1.IDeleteInputRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteInput(
    request?: protos.google.cloud.video.livestream.v1.IDeleteInputRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.video.livestream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteInput(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteInput()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.delete_input.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_DeleteInput_async
   */
  async checkDeleteInputProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteInput,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >;
  }
  /**
   * Updates the specified input.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Field mask is used to specify the fields to be overwritten in the Input
   *   resource by the update. You can only update the following fields:
   *
   *   * [`preprocessingConfig`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.inputs#PreprocessingConfig)
   *   * [`securityRules`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.inputs#SecurityRule)
   *
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask.
   * @param {google.cloud.video.livestream.v1.Input} request.input
   *   Required. The input resource to be updated.
   * @param {string} request.requestId
   *   A request ID to identify requests. Specify a unique request ID
   *   so that if you must retry your request, the server will know to ignore
   *   the request if it has already been completed. The server will guarantee
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported `(00000000-0000-0000-0000-000000000000)`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.update_input.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_UpdateInput_async
   */
  updateInput(
    request?: protos.google.cloud.video.livestream.v1.IUpdateInputRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IInput,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateInput(
    request: protos.google.cloud.video.livestream.v1.IUpdateInputRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IInput,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateInput(
    request: protos.google.cloud.video.livestream.v1.IUpdateInputRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IInput,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateInput(
    request?: protos.google.cloud.video.livestream.v1.IUpdateInputRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.video.livestream.v1.IInput,
            protos.google.cloud.video.livestream.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.video.livestream.v1.IInput,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.video.livestream.v1.IInput,
        protos.google.cloud.video.livestream.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'input.name': request.input!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateInput(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateInput()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.update_input.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_UpdateInput_async
   */
  async checkUpdateInputProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.video.livestream.v1.Input,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateInput,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.video.livestream.v1.Input,
      protos.google.cloud.video.livestream.v1.OperationMetadata
    >;
  }
  /**
   * Returns a list of all channels in the specified region.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location for the resource, in the form of:
   *   `projects/{project}/locations/{location}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. If unspecified, server
   *   will pick an appropriate default. Server may return fewer items than
   *   requested. A caller should only rely on response's
   *   {@link google.cloud.video.livestream.v1.ListChannelsResponse.next_page_token|next_page_token} to
   *   determine if there are more items left to be queried.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {string} request.orderBy
   *   Specifies the ordering of results following syntax at
   *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Channel]{@link google.cloud.video.livestream.v1.Channel}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listChannelsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listChannels(
    request?: protos.google.cloud.video.livestream.v1.IListChannelsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IChannel[],
      protos.google.cloud.video.livestream.v1.IListChannelsRequest | null,
      protos.google.cloud.video.livestream.v1.IListChannelsResponse
    ]
  >;
  listChannels(
    request: protos.google.cloud.video.livestream.v1.IListChannelsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.video.livestream.v1.IListChannelsRequest,
      | protos.google.cloud.video.livestream.v1.IListChannelsResponse
      | null
      | undefined,
      protos.google.cloud.video.livestream.v1.IChannel
    >
  ): void;
  listChannels(
    request: protos.google.cloud.video.livestream.v1.IListChannelsRequest,
    callback: PaginationCallback<
      protos.google.cloud.video.livestream.v1.IListChannelsRequest,
      | protos.google.cloud.video.livestream.v1.IListChannelsResponse
      | null
      | undefined,
      protos.google.cloud.video.livestream.v1.IChannel
    >
  ): void;
  listChannels(
    request?: protos.google.cloud.video.livestream.v1.IListChannelsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.video.livestream.v1.IListChannelsRequest,
          | protos.google.cloud.video.livestream.v1.IListChannelsResponse
          | null
          | undefined,
          protos.google.cloud.video.livestream.v1.IChannel
        >,
    callback?: PaginationCallback<
      protos.google.cloud.video.livestream.v1.IListChannelsRequest,
      | protos.google.cloud.video.livestream.v1.IListChannelsResponse
      | null
      | undefined,
      protos.google.cloud.video.livestream.v1.IChannel
    >
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IChannel[],
      protos.google.cloud.video.livestream.v1.IListChannelsRequest | null,
      protos.google.cloud.video.livestream.v1.IListChannelsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listChannels(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location for the resource, in the form of:
   *   `projects/{project}/locations/{location}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. If unspecified, server
   *   will pick an appropriate default. Server may return fewer items than
   *   requested. A caller should only rely on response's
   *   {@link google.cloud.video.livestream.v1.ListChannelsResponse.next_page_token|next_page_token} to
   *   determine if there are more items left to be queried.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {string} request.orderBy
   *   Specifies the ordering of results following syntax at
   *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Channel]{@link google.cloud.video.livestream.v1.Channel} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listChannelsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listChannelsStream(
    request?: protos.google.cloud.video.livestream.v1.IListChannelsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listChannels'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listChannels.createStream(
      this.innerApiCalls.listChannels as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listChannels`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location for the resource, in the form of:
   *   `projects/{project}/locations/{location}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. If unspecified, server
   *   will pick an appropriate default. Server may return fewer items than
   *   requested. A caller should only rely on response's
   *   {@link google.cloud.video.livestream.v1.ListChannelsResponse.next_page_token|next_page_token} to
   *   determine if there are more items left to be queried.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {string} request.orderBy
   *   Specifies the ordering of results following syntax at
   *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Channel]{@link google.cloud.video.livestream.v1.Channel}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.list_channels.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_ListChannels_async
   */
  listChannelsAsync(
    request?: protos.google.cloud.video.livestream.v1.IListChannelsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.video.livestream.v1.IChannel> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listChannels'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listChannels.asyncIterate(
      this.innerApiCalls['listChannels'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.video.livestream.v1.IChannel>;
  }
  /**
   * Returns a list of all inputs in the specified region.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location for the resource, in the form of:
   *   `projects/{project}/locations/{location}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. If unspecified, server
   *   will pick an appropriate default. Server may return fewer items than
   *   requested. A caller should only rely on response's
   *   {@link google.cloud.video.livestream.v1.ListInputsResponse.next_page_token|next_page_token} to
   *   determine if there are more items left to be queried.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {string} request.orderBy
   *   Specifies the ordering of results following syntax at [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Input]{@link google.cloud.video.livestream.v1.Input}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listInputsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listInputs(
    request?: protos.google.cloud.video.livestream.v1.IListInputsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IInput[],
      protos.google.cloud.video.livestream.v1.IListInputsRequest | null,
      protos.google.cloud.video.livestream.v1.IListInputsResponse
    ]
  >;
  listInputs(
    request: protos.google.cloud.video.livestream.v1.IListInputsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.video.livestream.v1.IListInputsRequest,
      | protos.google.cloud.video.livestream.v1.IListInputsResponse
      | null
      | undefined,
      protos.google.cloud.video.livestream.v1.IInput
    >
  ): void;
  listInputs(
    request: protos.google.cloud.video.livestream.v1.IListInputsRequest,
    callback: PaginationCallback<
      protos.google.cloud.video.livestream.v1.IListInputsRequest,
      | protos.google.cloud.video.livestream.v1.IListInputsResponse
      | null
      | undefined,
      protos.google.cloud.video.livestream.v1.IInput
    >
  ): void;
  listInputs(
    request?: protos.google.cloud.video.livestream.v1.IListInputsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.video.livestream.v1.IListInputsRequest,
          | protos.google.cloud.video.livestream.v1.IListInputsResponse
          | null
          | undefined,
          protos.google.cloud.video.livestream.v1.IInput
        >,
    callback?: PaginationCallback<
      protos.google.cloud.video.livestream.v1.IListInputsRequest,
      | protos.google.cloud.video.livestream.v1.IListInputsResponse
      | null
      | undefined,
      protos.google.cloud.video.livestream.v1.IInput
    >
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IInput[],
      protos.google.cloud.video.livestream.v1.IListInputsRequest | null,
      protos.google.cloud.video.livestream.v1.IListInputsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listInputs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location for the resource, in the form of:
   *   `projects/{project}/locations/{location}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. If unspecified, server
   *   will pick an appropriate default. Server may return fewer items than
   *   requested. A caller should only rely on response's
   *   {@link google.cloud.video.livestream.v1.ListInputsResponse.next_page_token|next_page_token} to
   *   determine if there are more items left to be queried.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {string} request.orderBy
   *   Specifies the ordering of results following syntax at [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Input]{@link google.cloud.video.livestream.v1.Input} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listInputsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listInputsStream(
    request?: protos.google.cloud.video.livestream.v1.IListInputsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInputs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInputs.createStream(
      this.innerApiCalls.listInputs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listInputs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location for the resource, in the form of:
   *   `projects/{project}/locations/{location}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. If unspecified, server
   *   will pick an appropriate default. Server may return fewer items than
   *   requested. A caller should only rely on response's
   *   {@link google.cloud.video.livestream.v1.ListInputsResponse.next_page_token|next_page_token} to
   *   determine if there are more items left to be queried.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {string} request.orderBy
   *   Specifies the ordering of results following syntax at [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Input]{@link google.cloud.video.livestream.v1.Input}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.list_inputs.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_ListInputs_async
   */
  listInputsAsync(
    request?: protos.google.cloud.video.livestream.v1.IListInputsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.video.livestream.v1.IInput> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listInputs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listInputs.asyncIterate(
      this.innerApiCalls['listInputs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.video.livestream.v1.IInput>;
  }
  /**
   * Returns a list of all events in the specified channel.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent channel for the resource, in the form of:
   *   `projects/{project}/locations/{location}/channels/{channelId}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. If unspecified, server
   *   will pick an appropriate default. Server may return fewer items than
   *   requested. A caller should only rely on response's
   *   {@link google.cloud.video.livestream.v1.ListEventsResponse.next_page_token|next_page_token} to
   *   determine if there are more items left to be queried.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {string} request.orderBy
   *   Specifies the ordering of results following syntax at
   *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Event]{@link google.cloud.video.livestream.v1.Event}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listEventsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listEvents(
    request?: protos.google.cloud.video.livestream.v1.IListEventsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IEvent[],
      protos.google.cloud.video.livestream.v1.IListEventsRequest | null,
      protos.google.cloud.video.livestream.v1.IListEventsResponse
    ]
  >;
  listEvents(
    request: protos.google.cloud.video.livestream.v1.IListEventsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.video.livestream.v1.IListEventsRequest,
      | protos.google.cloud.video.livestream.v1.IListEventsResponse
      | null
      | undefined,
      protos.google.cloud.video.livestream.v1.IEvent
    >
  ): void;
  listEvents(
    request: protos.google.cloud.video.livestream.v1.IListEventsRequest,
    callback: PaginationCallback<
      protos.google.cloud.video.livestream.v1.IListEventsRequest,
      | protos.google.cloud.video.livestream.v1.IListEventsResponse
      | null
      | undefined,
      protos.google.cloud.video.livestream.v1.IEvent
    >
  ): void;
  listEvents(
    request?: protos.google.cloud.video.livestream.v1.IListEventsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.video.livestream.v1.IListEventsRequest,
          | protos.google.cloud.video.livestream.v1.IListEventsResponse
          | null
          | undefined,
          protos.google.cloud.video.livestream.v1.IEvent
        >,
    callback?: PaginationCallback<
      protos.google.cloud.video.livestream.v1.IListEventsRequest,
      | protos.google.cloud.video.livestream.v1.IListEventsResponse
      | null
      | undefined,
      protos.google.cloud.video.livestream.v1.IEvent
    >
  ): Promise<
    [
      protos.google.cloud.video.livestream.v1.IEvent[],
      protos.google.cloud.video.livestream.v1.IListEventsRequest | null,
      protos.google.cloud.video.livestream.v1.IListEventsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listEvents(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent channel for the resource, in the form of:
   *   `projects/{project}/locations/{location}/channels/{channelId}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. If unspecified, server
   *   will pick an appropriate default. Server may return fewer items than
   *   requested. A caller should only rely on response's
   *   {@link google.cloud.video.livestream.v1.ListEventsResponse.next_page_token|next_page_token} to
   *   determine if there are more items left to be queried.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {string} request.orderBy
   *   Specifies the ordering of results following syntax at
   *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Event]{@link google.cloud.video.livestream.v1.Event} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listEventsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listEventsStream(
    request?: protos.google.cloud.video.livestream.v1.IListEventsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEvents.createStream(
      this.innerApiCalls.listEvents as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listEvents`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent channel for the resource, in the form of:
   *   `projects/{project}/locations/{location}/channels/{channelId}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return. If unspecified, server
   *   will pick an appropriate default. Server may return fewer items than
   *   requested. A caller should only rely on response's
   *   {@link google.cloud.video.livestream.v1.ListEventsResponse.next_page_token|next_page_token} to
   *   determine if there are more items left to be queried.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {string} request.filter
   *   The filter to apply to list results.
   * @param {string} request.orderBy
   *   Specifies the ordering of results following syntax at
   *   https://cloud.google.com/apis/design/design_patterns#sorting_order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Event]{@link google.cloud.video.livestream.v1.Event}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/livestream_service.list_events.js</caption>
   * region_tag:livestream_v1_generated_LivestreamService_ListEvents_async
   */
  listEventsAsync(
    request?: protos.google.cloud.video.livestream.v1.IListEventsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.video.livestream.v1.IEvent> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEvents.asyncIterate(
      this.innerApiCalls['listEvents'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.video.livestream.v1.IEvent>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified channel resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} channel
   * @returns {string} Resource name string.
   */
  channelPath(project: string, location: string, channel: string) {
    return this.pathTemplates.channelPathTemplate.render({
      project: project,
      location: location,
      channel: channel,
    });
  }

  /**
   * Parse the project from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).project;
  }

  /**
   * Parse the location from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).location;
  }

  /**
   * Parse the channel from Channel resource.
   *
   * @param {string} channelName
   *   A fully-qualified path representing Channel resource.
   * @returns {string} A string representing the channel.
   */
  matchChannelFromChannelName(channelName: string) {
    return this.pathTemplates.channelPathTemplate.match(channelName).channel;
  }

  /**
   * Return a fully-qualified event resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} channel
   * @param {string} event
   * @returns {string} Resource name string.
   */
  eventPath(project: string, location: string, channel: string, event: string) {
    return this.pathTemplates.eventPathTemplate.render({
      project: project,
      location: location,
      channel: channel,
      event: event,
    });
  }

  /**
   * Parse the project from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).project;
  }

  /**
   * Parse the location from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).location;
  }

  /**
   * Parse the channel from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the channel.
   */
  matchChannelFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).channel;
  }

  /**
   * Parse the event from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the event.
   */
  matchEventFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).event;
  }

  /**
   * Return a fully-qualified input resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} input
   * @returns {string} Resource name string.
   */
  inputPath(project: string, location: string, input: string) {
    return this.pathTemplates.inputPathTemplate.render({
      project: project,
      location: location,
      input: input,
    });
  }

  /**
   * Parse the project from Input resource.
   *
   * @param {string} inputName
   *   A fully-qualified path representing Input resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInputName(inputName: string) {
    return this.pathTemplates.inputPathTemplate.match(inputName).project;
  }

  /**
   * Parse the location from Input resource.
   *
   * @param {string} inputName
   *   A fully-qualified path representing Input resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInputName(inputName: string) {
    return this.pathTemplates.inputPathTemplate.match(inputName).location;
  }

  /**
   * Parse the input from Input resource.
   *
   * @param {string} inputName
   *   A fully-qualified path representing Input resource.
   * @returns {string} A string representing the input.
   */
  matchInputFromInputName(inputName: string) {
    return this.pathTemplates.inputPathTemplate.match(inputName).input;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.livestreamServiceStub && !this._terminated) {
      return this.livestreamServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
