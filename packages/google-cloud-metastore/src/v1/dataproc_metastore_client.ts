// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/dataproc_metastore_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './dataproc_metastore_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Configures and manages metastore services.
 *  Metastore services are fully managed, highly available, autoscaled,
 *  autohealing, OSS-native deployments of technical metadata management
 *  software. Each metastore service exposes a network endpoint through which
 *  metadata queries are served. Metadata queries can originate from a variety
 *  of sources, including Apache Hive, Apache Presto, and Apache Spark.
 *
 *  The Dataproc Metastore API defines the following resource model:
 *
 *  * The service works with a collection of Google Cloud projects, named:
 *  `/projects/*`
 *  * Each project has a collection of available locations, named: `/locations/*`
 *    (a location must refer to a Google Cloud `region`)
 *  * Each location has a collection of services, named: `/services/*`
 *  * Dataproc Metastore services are resources with names of the form:
 *
 *    `/projects/{project_number}/locations/{location_id}/services/{service_id}`.
 * @class
 * @memberof v1
 */
export class DataprocMetastoreClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  dataprocMetastoreStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DataprocMetastoreClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DataprocMetastoreClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DataprocMetastoreClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      backupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/services/{service}/backups/{backup}'
      ),
      federationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/federations/{federation}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      metadataImportPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/services/{service}/metadataImports/{metadata_import}'
      ),
      networkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/global/networks/{network}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      servicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/services/{service}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listServices: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'services'
      ),
      listMetadataImports: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'metadataImports'
      ),
      listBackups: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'backups'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1/{resource=projects/*/locations/*/services/*}:getIamPolicy',
          additional_bindings: [
            {
              get: '/v1/{resource=projects/*/locations/*/services/*/backups/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/federations/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/services/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/services/*/backups/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/federations/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/services/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/federations/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createServiceResponse = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.Service'
    ) as gax.protobuf.Type;
    const createServiceMetadata = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateServiceResponse = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.Service'
    ) as gax.protobuf.Type;
    const updateServiceMetadata = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteServiceResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteServiceMetadata = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createMetadataImportResponse = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.MetadataImport'
    ) as gax.protobuf.Type;
    const createMetadataImportMetadata = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateMetadataImportResponse = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.MetadataImport'
    ) as gax.protobuf.Type;
    const updateMetadataImportMetadata = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const exportMetadataResponse = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.MetadataExport'
    ) as gax.protobuf.Type;
    const exportMetadataMetadata = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const restoreServiceResponse = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.Restore'
    ) as gax.protobuf.Type;
    const restoreServiceMetadata = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createBackupResponse = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.Backup'
    ) as gax.protobuf.Type;
    const createBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteBackupResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteBackupMetadata = protoFilesRoot.lookup(
      '.google.cloud.metastore.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createServiceResponse.decode.bind(createServiceResponse),
        createServiceMetadata.decode.bind(createServiceMetadata)
      ),
      updateService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateServiceResponse.decode.bind(updateServiceResponse),
        updateServiceMetadata.decode.bind(updateServiceMetadata)
      ),
      deleteService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteServiceResponse.decode.bind(deleteServiceResponse),
        deleteServiceMetadata.decode.bind(deleteServiceMetadata)
      ),
      createMetadataImport: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createMetadataImportResponse.decode.bind(createMetadataImportResponse),
        createMetadataImportMetadata.decode.bind(createMetadataImportMetadata)
      ),
      updateMetadataImport: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateMetadataImportResponse.decode.bind(updateMetadataImportResponse),
        updateMetadataImportMetadata.decode.bind(updateMetadataImportMetadata)
      ),
      exportMetadata: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        exportMetadataResponse.decode.bind(exportMetadataResponse),
        exportMetadataMetadata.decode.bind(exportMetadataMetadata)
      ),
      restoreService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        restoreServiceResponse.decode.bind(restoreServiceResponse),
        restoreServiceMetadata.decode.bind(restoreServiceMetadata)
      ),
      createBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBackupResponse.decode.bind(createBackupResponse),
        createBackupMetadata.decode.bind(createBackupMetadata)
      ),
      deleteBackup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteBackupResponse.decode.bind(deleteBackupResponse),
        deleteBackupMetadata.decode.bind(deleteBackupMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.metastore.v1.DataprocMetastore',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.dataprocMetastoreStub) {
      return this.dataprocMetastoreStub;
    }

    // Put together the "service stub" for
    // google.cloud.metastore.v1.DataprocMetastore.
    this.dataprocMetastoreStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.metastore.v1.DataprocMetastore'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.metastore.v1.DataprocMetastore,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const dataprocMetastoreStubMethods = [
      'listServices',
      'getService',
      'createService',
      'updateService',
      'deleteService',
      'listMetadataImports',
      'getMetadataImport',
      'createMetadataImport',
      'updateMetadataImport',
      'exportMetadata',
      'restoreService',
      'listBackups',
      'getBackup',
      'createBackup',
      'deleteBackup',
    ];
    for (const methodName of dataprocMetastoreStubMethods) {
      const callPromise = this.dataprocMetastoreStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.dataprocMetastoreStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'metastore.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'metastore.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets the details of a single service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The relative resource name of the metastore service to retrieve, in the
   *   following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Service]{@link google.cloud.metastore.v1.Service}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.get_service.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_GetService_async
   */
  getService(
    request?: protos.google.cloud.metastore.v1.IGetServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IService,
      protos.google.cloud.metastore.v1.IGetServiceRequest | undefined,
      {} | undefined
    ]
  >;
  getService(
    request: protos.google.cloud.metastore.v1.IGetServiceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.metastore.v1.IService,
      protos.google.cloud.metastore.v1.IGetServiceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getService(
    request: protos.google.cloud.metastore.v1.IGetServiceRequest,
    callback: Callback<
      protos.google.cloud.metastore.v1.IService,
      protos.google.cloud.metastore.v1.IGetServiceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getService(
    request?: protos.google.cloud.metastore.v1.IGetServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.metastore.v1.IService,
          | protos.google.cloud.metastore.v1.IGetServiceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.metastore.v1.IService,
      protos.google.cloud.metastore.v1.IGetServiceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IService,
      protos.google.cloud.metastore.v1.IGetServiceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getService(request, options, callback);
  }
  /**
   * Gets details of a single import.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The relative resource name of the metadata import to retrieve, in the
   *   following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{import_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [MetadataImport]{@link google.cloud.metastore.v1.MetadataImport}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.get_metadata_import.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_GetMetadataImport_async
   */
  getMetadataImport(
    request?: protos.google.cloud.metastore.v1.IGetMetadataImportRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IMetadataImport,
      protos.google.cloud.metastore.v1.IGetMetadataImportRequest | undefined,
      {} | undefined
    ]
  >;
  getMetadataImport(
    request: protos.google.cloud.metastore.v1.IGetMetadataImportRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.metastore.v1.IMetadataImport,
      | protos.google.cloud.metastore.v1.IGetMetadataImportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMetadataImport(
    request: protos.google.cloud.metastore.v1.IGetMetadataImportRequest,
    callback: Callback<
      protos.google.cloud.metastore.v1.IMetadataImport,
      | protos.google.cloud.metastore.v1.IGetMetadataImportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMetadataImport(
    request?: protos.google.cloud.metastore.v1.IGetMetadataImportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.metastore.v1.IMetadataImport,
          | protos.google.cloud.metastore.v1.IGetMetadataImportRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.metastore.v1.IMetadataImport,
      | protos.google.cloud.metastore.v1.IGetMetadataImportRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IMetadataImport,
      protos.google.cloud.metastore.v1.IGetMetadataImportRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getMetadataImport(request, options, callback);
  }
  /**
   * Gets details of a single backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The relative resource name of the backup to retrieve, in the
   *   following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Backup]{@link google.cloud.metastore.v1.Backup}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.get_backup.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_GetBackup_async
   */
  getBackup(
    request?: protos.google.cloud.metastore.v1.IGetBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IBackup,
      protos.google.cloud.metastore.v1.IGetBackupRequest | undefined,
      {} | undefined
    ]
  >;
  getBackup(
    request: protos.google.cloud.metastore.v1.IGetBackupRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.metastore.v1.IBackup,
      protos.google.cloud.metastore.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackup(
    request: protos.google.cloud.metastore.v1.IGetBackupRequest,
    callback: Callback<
      protos.google.cloud.metastore.v1.IBackup,
      protos.google.cloud.metastore.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getBackup(
    request?: protos.google.cloud.metastore.v1.IGetBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.metastore.v1.IBackup,
          protos.google.cloud.metastore.v1.IGetBackupRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.metastore.v1.IBackup,
      protos.google.cloud.metastore.v1.IGetBackupRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IBackup,
      protos.google.cloud.metastore.v1.IGetBackupRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getBackup(request, options, callback);
  }

  /**
   * Creates a metastore service in a project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the location in which to create a metastore
   *   service, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}`.
   * @param {string} request.serviceId
   *   Required. The ID of the metastore service, which is used as the final
   *   component of the metastore service's name.
   *
   *   This value must be between 2 and 63 characters long inclusive, begin with a
   *   letter, end with a letter or number, and consist of alpha-numeric
   *   ASCII characters or hyphens.
   * @param {google.cloud.metastore.v1.Service} request.service
   *   Required. The Metastore service to create. The `name` field is
   *   ignored. The ID of the created metastore service must be provided in
   *   the request's `service_id` field.
   * @param {string} [request.requestId]
   *   Optional. A request ID. Specify a unique request ID to allow the server to ignore the
   *   request if it has completed. The server will ignore subsequent requests
   *   that provide a duplicate request ID for at least 60 minutes after the first
   *   request.
   *
   *   For example, if an initial request times out, followed by another request
   *   with the same request ID, the server ignores the second request to prevent
   *   the creation of duplicate commitments.
   *
   *   The request ID must be a valid
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
   *   A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.create_service.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_CreateService_async
   */
  createService(
    request?: protos.google.cloud.metastore.v1.ICreateServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IService,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createService(
    request: protos.google.cloud.metastore.v1.ICreateServiceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IService,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createService(
    request: protos.google.cloud.metastore.v1.ICreateServiceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IService,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createService(
    request?: protos.google.cloud.metastore.v1.ICreateServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.metastore.v1.IService,
            protos.google.cloud.metastore.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IService,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IService,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createService(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createService()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.create_service.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_CreateService_async
   */
  async checkCreateServiceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.metastore.v1.Service,
      protos.google.cloud.metastore.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createService,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.metastore.v1.Service,
      protos.google.cloud.metastore.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A field mask used to specify the fields to be overwritten in the
   *   metastore service resource by the update.
   *   Fields specified in the `update_mask` are relative to the resource (not
   *   to the full request). A field is overwritten if it is in the mask.
   * @param {google.cloud.metastore.v1.Service} request.service
   *   Required. The metastore service to update. The server only merges fields
   *   in the service if they are specified in `update_mask`.
   *
   *   The metastore service's `name` field is used to identify the metastore
   *   service to be updated.
   * @param {string} [request.requestId]
   *   Optional. A request ID. Specify a unique request ID to allow the server to ignore the
   *   request if it has completed. The server will ignore subsequent requests
   *   that provide a duplicate request ID for at least 60 minutes after the first
   *   request.
   *
   *   For example, if an initial request times out, followed by another request
   *   with the same request ID, the server ignores the second request to prevent
   *   the creation of duplicate commitments.
   *
   *   The request ID must be a valid
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
   *   A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.update_service.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_UpdateService_async
   */
  updateService(
    request?: protos.google.cloud.metastore.v1.IUpdateServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IService,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateService(
    request: protos.google.cloud.metastore.v1.IUpdateServiceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IService,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateService(
    request: protos.google.cloud.metastore.v1.IUpdateServiceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IService,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateService(
    request?: protos.google.cloud.metastore.v1.IUpdateServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.metastore.v1.IService,
            protos.google.cloud.metastore.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IService,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IService,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'service.name': request.service!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateService(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateService()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.update_service.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_UpdateService_async
   */
  async checkUpdateServiceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.metastore.v1.Service,
      protos.google.cloud.metastore.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateService,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.metastore.v1.Service,
      protos.google.cloud.metastore.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The relative resource name of the metastore service to delete, in the
   *   following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}`.
   * @param {string} [request.requestId]
   *   Optional. A request ID. Specify a unique request ID to allow the server to ignore the
   *   request if it has completed. The server will ignore subsequent requests
   *   that provide a duplicate request ID for at least 60 minutes after the first
   *   request.
   *
   *   For example, if an initial request times out, followed by another request
   *   with the same request ID, the server ignores the second request to prevent
   *   the creation of duplicate commitments.
   *
   *   The request ID must be a valid
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
   *   A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.delete_service.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_DeleteService_async
   */
  deleteService(
    request?: protos.google.cloud.metastore.v1.IDeleteServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteService(
    request: protos.google.cloud.metastore.v1.IDeleteServiceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteService(
    request: protos.google.cloud.metastore.v1.IDeleteServiceRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteService(
    request?: protos.google.cloud.metastore.v1.IDeleteServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.metastore.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteService(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteService()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.delete_service.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_DeleteService_async
   */
  async checkDeleteServiceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.metastore.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteService,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.metastore.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new MetadataImport in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the service in which to create a metastore
   *   import, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}`.
   * @param {string} request.metadataImportId
   *   Required. The ID of the metadata import, which is used as the final component of the
   *   metadata import's name.
   *
   *   This value must be between 1 and 64 characters long, begin with a letter,
   *   end with a letter or number, and consist of alpha-numeric ASCII characters
   *   or hyphens.
   * @param {google.cloud.metastore.v1.MetadataImport} request.metadataImport
   *   Required. The metadata import to create. The `name` field is ignored. The ID of the
   *   created metadata import must be provided in the request's
   *   `metadata_import_id` field.
   * @param {string} [request.requestId]
   *   Optional. A request ID. Specify a unique request ID to allow the server to ignore the
   *   request if it has completed. The server will ignore subsequent requests
   *   that provide a duplicate request ID for at least 60 minutes after the first
   *   request.
   *
   *   For example, if an initial request times out, followed by another request
   *   with the same request ID, the server ignores the second request to prevent
   *   the creation of duplicate commitments.
   *
   *   The request ID must be a valid
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
   *   A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.create_metadata_import.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_CreateMetadataImport_async
   */
  createMetadataImport(
    request?: protos.google.cloud.metastore.v1.ICreateMetadataImportRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataImport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createMetadataImport(
    request: protos.google.cloud.metastore.v1.ICreateMetadataImportRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataImport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMetadataImport(
    request: protos.google.cloud.metastore.v1.ICreateMetadataImportRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataImport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMetadataImport(
    request?: protos.google.cloud.metastore.v1.ICreateMetadataImportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.metastore.v1.IMetadataImport,
            protos.google.cloud.metastore.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataImport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataImport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createMetadataImport(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createMetadataImport()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.create_metadata_import.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_CreateMetadataImport_async
   */
  async checkCreateMetadataImportProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.metastore.v1.MetadataImport,
      protos.google.cloud.metastore.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createMetadataImport,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.metastore.v1.MetadataImport,
      protos.google.cloud.metastore.v1.OperationMetadata
    >;
  }
  /**
   * Updates a single import.
   * Only the description field of MetadataImport is supported to be updated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A field mask used to specify the fields to be overwritten in the
   *   metadata import resource by the update.
   *   Fields specified in the `update_mask` are relative to the resource (not
   *   to the full request). A field is overwritten if it is in the mask.
   * @param {google.cloud.metastore.v1.MetadataImport} request.metadataImport
   *   Required. The metadata import to update. The server only merges fields
   *   in the import if they are specified in `update_mask`.
   *
   *   The metadata import's `name` field is used to identify the metastore
   *   import to be updated.
   * @param {string} [request.requestId]
   *   Optional. A request ID. Specify a unique request ID to allow the server to ignore the
   *   request if it has completed. The server will ignore subsequent requests
   *   that provide a duplicate request ID for at least 60 minutes after the first
   *   request.
   *
   *   For example, if an initial request times out, followed by another request
   *   with the same request ID, the server ignores the second request to prevent
   *   the creation of duplicate commitments.
   *
   *   The request ID must be a valid
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
   *   A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.update_metadata_import.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_UpdateMetadataImport_async
   */
  updateMetadataImport(
    request?: protos.google.cloud.metastore.v1.IUpdateMetadataImportRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataImport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateMetadataImport(
    request: protos.google.cloud.metastore.v1.IUpdateMetadataImportRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataImport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateMetadataImport(
    request: protos.google.cloud.metastore.v1.IUpdateMetadataImportRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataImport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateMetadataImport(
    request?: protos.google.cloud.metastore.v1.IUpdateMetadataImportRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.metastore.v1.IMetadataImport,
            protos.google.cloud.metastore.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataImport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataImport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'metadata_import.name': request.metadataImport!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateMetadataImport(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateMetadataImport()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.update_metadata_import.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_UpdateMetadataImport_async
   */
  async checkUpdateMetadataImportProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.metastore.v1.MetadataImport,
      protos.google.cloud.metastore.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateMetadataImport,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.metastore.v1.MetadataImport,
      protos.google.cloud.metastore.v1.OperationMetadata
    >;
  }
  /**
   * Exports metadata from a service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.destinationGcsFolder
   *   A Cloud Storage URI of a folder, in the format
   *   `gs://<bucket_name>/<path_inside_bucket>`. A sub-folder
   *   `<export_folder>` containing exported files will be created below it.
   * @param {string} request.service
   *   Required. The relative resource name of the metastore service to run export, in the
   *   following form:
   *
   *   `projects/{project_id}/locations/{location_id}/services/{service_id}`.
   * @param {string} [request.requestId]
   *   Optional. A request ID. Specify a unique request ID to allow the server to ignore the
   *   request if it has completed. The server will ignore subsequent requests
   *   that provide a duplicate request ID for at least 60 minutes after the first
   *   request.
   *
   *   For example, if an initial request times out, followed by another request
   *   with the same request ID, the server ignores the second request to prevent
   *   the creation of duplicate commitments.
   *
   *   The request ID must be a valid
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format).
   *   A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @param {google.cloud.metastore.v1.DatabaseDumpSpec.Type} [request.databaseDumpType]
   *   Optional. The type of the database dump. If unspecified, defaults to `MYSQL`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.export_metadata.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_ExportMetadata_async
   */
  exportMetadata(
    request?: protos.google.cloud.metastore.v1.IExportMetadataRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataExport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  exportMetadata(
    request: protos.google.cloud.metastore.v1.IExportMetadataRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataExport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  exportMetadata(
    request: protos.google.cloud.metastore.v1.IExportMetadataRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataExport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  exportMetadata(
    request?: protos.google.cloud.metastore.v1.IExportMetadataRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.metastore.v1.IMetadataExport,
            protos.google.cloud.metastore.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataExport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IMetadataExport,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service: request.service ?? '',
      });
    this.initialize();
    return this.innerApiCalls.exportMetadata(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `exportMetadata()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.export_metadata.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_ExportMetadata_async
   */
  async checkExportMetadataProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.metastore.v1.MetadataExport,
      protos.google.cloud.metastore.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.exportMetadata,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.metastore.v1.MetadataExport,
      protos.google.cloud.metastore.v1.OperationMetadata
    >;
  }
  /**
   * Restores a service from a backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.service
   *   Required. The relative resource name of the metastore service to run restore, in the
   *   following form:
   *
   *   `projects/{project_id}/locations/{location_id}/services/{service_id}`.
   * @param {string} request.backup
   *   Required. The relative resource name of the metastore service backup to restore
   *   from, in the following form:
   *
   *   `projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}`.
   * @param {google.cloud.metastore.v1.Restore.RestoreType} [request.restoreType]
   *   Optional. The type of restore. If unspecified, defaults to `METADATA_ONLY`.
   * @param {string} [request.requestId]
   *   Optional. A request ID. Specify a unique request ID to allow the server to ignore the
   *   request if it has completed. The server will ignore subsequent requests
   *   that provide a duplicate request ID for at least 60 minutes after the first
   *   request.
   *
   *   For example, if an initial request times out, followed by another request
   *   with the same request ID, the server ignores the second request to prevent
   *   the creation of duplicate commitments.
   *
   *   The request ID must be a valid
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format).
   *   A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.restore_service.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_RestoreService_async
   */
  restoreService(
    request?: protos.google.cloud.metastore.v1.IRestoreServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IRestore,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  restoreService(
    request: protos.google.cloud.metastore.v1.IRestoreServiceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IRestore,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restoreService(
    request: protos.google.cloud.metastore.v1.IRestoreServiceRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IRestore,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restoreService(
    request?: protos.google.cloud.metastore.v1.IRestoreServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.metastore.v1.IRestore,
            protos.google.cloud.metastore.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IRestore,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IRestore,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        service: request.service ?? '',
      });
    this.initialize();
    return this.innerApiCalls.restoreService(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `restoreService()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.restore_service.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_RestoreService_async
   */
  async checkRestoreServiceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.metastore.v1.Restore,
      protos.google.cloud.metastore.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.restoreService,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.metastore.v1.Restore,
      protos.google.cloud.metastore.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new backup in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the service in which to create a backup
   *   of the following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}`.
   * @param {string} request.backupId
   *   Required. The ID of the backup, which is used as the final component of the
   *   backup's name.
   *
   *   This value must be between 1 and 64 characters long, begin with a letter,
   *   end with a letter or number, and consist of alpha-numeric ASCII characters
   *   or hyphens.
   * @param {google.cloud.metastore.v1.Backup} request.backup
   *   Required. The backup to create. The `name` field is ignored. The ID of the created
   *   backup must be provided in the request's `backup_id` field.
   * @param {string} [request.requestId]
   *   Optional. A request ID. Specify a unique request ID to allow the server to ignore the
   *   request if it has completed. The server will ignore subsequent requests
   *   that provide a duplicate request ID for at least 60 minutes after the first
   *   request.
   *
   *   For example, if an initial request times out, followed by another request
   *   with the same request ID, the server ignores the second request to prevent
   *   the creation of duplicate commitments.
   *
   *   The request ID must be a valid
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
   *   A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.create_backup.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_CreateBackup_async
   */
  createBackup(
    request?: protos.google.cloud.metastore.v1.ICreateBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IBackup,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createBackup(
    request: protos.google.cloud.metastore.v1.ICreateBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IBackup,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackup(
    request: protos.google.cloud.metastore.v1.ICreateBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IBackup,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createBackup(
    request?: protos.google.cloud.metastore.v1.ICreateBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.metastore.v1.IBackup,
            protos.google.cloud.metastore.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.metastore.v1.IBackup,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.metastore.v1.IBackup,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.create_backup.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_CreateBackup_async
   */
  async checkCreateBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.metastore.v1.Backup,
      protos.google.cloud.metastore.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.metastore.v1.Backup,
      protos.google.cloud.metastore.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single backup.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The relative resource name of the backup to delete, in the
   *   following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}`.
   * @param {string} [request.requestId]
   *   Optional. A request ID. Specify a unique request ID to allow the server to ignore the
   *   request if it has completed. The server will ignore subsequent requests
   *   that provide a duplicate request ID for at least 60 minutes after the first
   *   request.
   *
   *   For example, if an initial request times out, followed by another request
   *   with the same request ID, the server ignores the second request to prevent
   *   the creation of duplicate commitments.
   *
   *   The request ID must be a valid
   *   [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
   *   A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.delete_backup.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_DeleteBackup_async
   */
  deleteBackup(
    request?: protos.google.cloud.metastore.v1.IDeleteBackupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteBackup(
    request: protos.google.cloud.metastore.v1.IDeleteBackupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackup(
    request: protos.google.cloud.metastore.v1.IDeleteBackupRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBackup(
    request?: protos.google.cloud.metastore.v1.IDeleteBackupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.metastore.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteBackup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteBackup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.delete_backup.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_DeleteBackup_async
   */
  async checkDeleteBackupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.metastore.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteBackup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.metastore.v1.OperationMetadata
    >;
  }
  /**
   * Lists services in a project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the location of metastore services to
   *   list, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of services to return. The response may contain less
   *   than the maximum number. If unspecified, no more than 500 services are
   *   returned. The maximum value is 1000; values above 1000 are changed to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices}
   *   call. Provide this token to retrieve the subsequent page.
   *
   *   To retrieve the first page, supply an empty page token.
   *
   *   When paginating, other parameters provided to
   *   {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices} must match the call that provided the
   *   page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specify the ordering of results as described in [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *   If not specified, the results will be sorted in the default order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Service]{@link google.cloud.metastore.v1.Service}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listServicesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listServices(
    request?: protos.google.cloud.metastore.v1.IListServicesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IService[],
      protos.google.cloud.metastore.v1.IListServicesRequest | null,
      protos.google.cloud.metastore.v1.IListServicesResponse
    ]
  >;
  listServices(
    request: protos.google.cloud.metastore.v1.IListServicesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.metastore.v1.IListServicesRequest,
      protos.google.cloud.metastore.v1.IListServicesResponse | null | undefined,
      protos.google.cloud.metastore.v1.IService
    >
  ): void;
  listServices(
    request: protos.google.cloud.metastore.v1.IListServicesRequest,
    callback: PaginationCallback<
      protos.google.cloud.metastore.v1.IListServicesRequest,
      protos.google.cloud.metastore.v1.IListServicesResponse | null | undefined,
      protos.google.cloud.metastore.v1.IService
    >
  ): void;
  listServices(
    request?: protos.google.cloud.metastore.v1.IListServicesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.metastore.v1.IListServicesRequest,
          | protos.google.cloud.metastore.v1.IListServicesResponse
          | null
          | undefined,
          protos.google.cloud.metastore.v1.IService
        >,
    callback?: PaginationCallback<
      protos.google.cloud.metastore.v1.IListServicesRequest,
      protos.google.cloud.metastore.v1.IListServicesResponse | null | undefined,
      protos.google.cloud.metastore.v1.IService
    >
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IService[],
      protos.google.cloud.metastore.v1.IListServicesRequest | null,
      protos.google.cloud.metastore.v1.IListServicesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listServices(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the location of metastore services to
   *   list, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of services to return. The response may contain less
   *   than the maximum number. If unspecified, no more than 500 services are
   *   returned. The maximum value is 1000; values above 1000 are changed to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices}
   *   call. Provide this token to retrieve the subsequent page.
   *
   *   To retrieve the first page, supply an empty page token.
   *
   *   When paginating, other parameters provided to
   *   {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices} must match the call that provided the
   *   page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specify the ordering of results as described in [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *   If not specified, the results will be sorted in the default order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Service]{@link google.cloud.metastore.v1.Service} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listServicesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listServicesStream(
    request?: protos.google.cloud.metastore.v1.IListServicesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listServices'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServices.createStream(
      this.innerApiCalls.listServices as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listServices`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the location of metastore services to
   *   list, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of services to return. The response may contain less
   *   than the maximum number. If unspecified, no more than 500 services are
   *   returned. The maximum value is 1000; values above 1000 are changed to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices}
   *   call. Provide this token to retrieve the subsequent page.
   *
   *   To retrieve the first page, supply an empty page token.
   *
   *   When paginating, other parameters provided to
   *   {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices} must match the call that provided the
   *   page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specify the ordering of results as described in [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *   If not specified, the results will be sorted in the default order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Service]{@link google.cloud.metastore.v1.Service}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.list_services.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_ListServices_async
   */
  listServicesAsync(
    request?: protos.google.cloud.metastore.v1.IListServicesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.metastore.v1.IService> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listServices'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServices.asyncIterate(
      this.innerApiCalls['listServices'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.metastore.v1.IService>;
  }
  /**
   * Lists imports in a service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the service whose metadata imports to
   *   list, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of imports to return. The response may contain less
   *   than the maximum number. If unspecified, no more than 500 imports are
   *   returned. The maximum value is 1000; values above 1000 are changed to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices}
   *   call. Provide this token to retrieve the subsequent page.
   *
   *   To retrieve the first page, supply an empty page token.
   *
   *   When paginating, other parameters provided to
   *   {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices} must match the call that provided the
   *   page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specify the ordering of results as described in [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *   If not specified, the results will be sorted in the default order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [MetadataImport]{@link google.cloud.metastore.v1.MetadataImport}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listMetadataImportsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listMetadataImports(
    request?: protos.google.cloud.metastore.v1.IListMetadataImportsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IMetadataImport[],
      protos.google.cloud.metastore.v1.IListMetadataImportsRequest | null,
      protos.google.cloud.metastore.v1.IListMetadataImportsResponse
    ]
  >;
  listMetadataImports(
    request: protos.google.cloud.metastore.v1.IListMetadataImportsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.metastore.v1.IListMetadataImportsRequest,
      | protos.google.cloud.metastore.v1.IListMetadataImportsResponse
      | null
      | undefined,
      protos.google.cloud.metastore.v1.IMetadataImport
    >
  ): void;
  listMetadataImports(
    request: protos.google.cloud.metastore.v1.IListMetadataImportsRequest,
    callback: PaginationCallback<
      protos.google.cloud.metastore.v1.IListMetadataImportsRequest,
      | protos.google.cloud.metastore.v1.IListMetadataImportsResponse
      | null
      | undefined,
      protos.google.cloud.metastore.v1.IMetadataImport
    >
  ): void;
  listMetadataImports(
    request?: protos.google.cloud.metastore.v1.IListMetadataImportsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.metastore.v1.IListMetadataImportsRequest,
          | protos.google.cloud.metastore.v1.IListMetadataImportsResponse
          | null
          | undefined,
          protos.google.cloud.metastore.v1.IMetadataImport
        >,
    callback?: PaginationCallback<
      protos.google.cloud.metastore.v1.IListMetadataImportsRequest,
      | protos.google.cloud.metastore.v1.IListMetadataImportsResponse
      | null
      | undefined,
      protos.google.cloud.metastore.v1.IMetadataImport
    >
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IMetadataImport[],
      protos.google.cloud.metastore.v1.IListMetadataImportsRequest | null,
      protos.google.cloud.metastore.v1.IListMetadataImportsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMetadataImports(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the service whose metadata imports to
   *   list, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of imports to return. The response may contain less
   *   than the maximum number. If unspecified, no more than 500 imports are
   *   returned. The maximum value is 1000; values above 1000 are changed to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices}
   *   call. Provide this token to retrieve the subsequent page.
   *
   *   To retrieve the first page, supply an empty page token.
   *
   *   When paginating, other parameters provided to
   *   {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices} must match the call that provided the
   *   page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specify the ordering of results as described in [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *   If not specified, the results will be sorted in the default order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [MetadataImport]{@link google.cloud.metastore.v1.MetadataImport} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listMetadataImportsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listMetadataImportsStream(
    request?: protos.google.cloud.metastore.v1.IListMetadataImportsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMetadataImports'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMetadataImports.createStream(
      this.innerApiCalls.listMetadataImports as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listMetadataImports`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the service whose metadata imports to
   *   list, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of imports to return. The response may contain less
   *   than the maximum number. If unspecified, no more than 500 imports are
   *   returned. The maximum value is 1000; values above 1000 are changed to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices}
   *   call. Provide this token to retrieve the subsequent page.
   *
   *   To retrieve the first page, supply an empty page token.
   *
   *   When paginating, other parameters provided to
   *   {@link google.cloud.metastore.v1.DataprocMetastore.ListServices|DataprocMetastore.ListServices} must match the call that provided the
   *   page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specify the ordering of results as described in [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *   If not specified, the results will be sorted in the default order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [MetadataImport]{@link google.cloud.metastore.v1.MetadataImport}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.list_metadata_imports.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_ListMetadataImports_async
   */
  listMetadataImportsAsync(
    request?: protos.google.cloud.metastore.v1.IListMetadataImportsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.metastore.v1.IMetadataImport> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMetadataImports'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMetadataImports.asyncIterate(
      this.innerApiCalls['listMetadataImports'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.metastore.v1.IMetadataImport>;
  }
  /**
   * Lists backups in a service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the service whose backups to
   *   list, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}/backups`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of backups to return. The response may contain less
   *   than the maximum number. If unspecified, no more than 500 backups are
   *   returned. The maximum value is 1000; values above 1000 are changed to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous {@link google.cloud.metastore.v1.DataprocMetastore.ListBackups|DataprocMetastore.ListBackups}
   *   call. Provide this token to retrieve the subsequent page.
   *
   *   To retrieve the first page, supply an empty page token.
   *
   *   When paginating, other parameters provided to
   *   {@link google.cloud.metastore.v1.DataprocMetastore.ListBackups|DataprocMetastore.ListBackups} must match the call that provided the
   *   page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specify the ordering of results as described in [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *   If not specified, the results will be sorted in the default order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Backup]{@link google.cloud.metastore.v1.Backup}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listBackups(
    request?: protos.google.cloud.metastore.v1.IListBackupsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IBackup[],
      protos.google.cloud.metastore.v1.IListBackupsRequest | null,
      protos.google.cloud.metastore.v1.IListBackupsResponse
    ]
  >;
  listBackups(
    request: protos.google.cloud.metastore.v1.IListBackupsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.metastore.v1.IListBackupsRequest,
      protos.google.cloud.metastore.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.metastore.v1.IBackup
    >
  ): void;
  listBackups(
    request: protos.google.cloud.metastore.v1.IListBackupsRequest,
    callback: PaginationCallback<
      protos.google.cloud.metastore.v1.IListBackupsRequest,
      protos.google.cloud.metastore.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.metastore.v1.IBackup
    >
  ): void;
  listBackups(
    request?: protos.google.cloud.metastore.v1.IListBackupsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.metastore.v1.IListBackupsRequest,
          | protos.google.cloud.metastore.v1.IListBackupsResponse
          | null
          | undefined,
          protos.google.cloud.metastore.v1.IBackup
        >,
    callback?: PaginationCallback<
      protos.google.cloud.metastore.v1.IListBackupsRequest,
      protos.google.cloud.metastore.v1.IListBackupsResponse | null | undefined,
      protos.google.cloud.metastore.v1.IBackup
    >
  ): Promise<
    [
      protos.google.cloud.metastore.v1.IBackup[],
      protos.google.cloud.metastore.v1.IListBackupsRequest | null,
      protos.google.cloud.metastore.v1.IListBackupsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listBackups(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the service whose backups to
   *   list, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}/backups`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of backups to return. The response may contain less
   *   than the maximum number. If unspecified, no more than 500 backups are
   *   returned. The maximum value is 1000; values above 1000 are changed to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous {@link google.cloud.metastore.v1.DataprocMetastore.ListBackups|DataprocMetastore.ListBackups}
   *   call. Provide this token to retrieve the subsequent page.
   *
   *   To retrieve the first page, supply an empty page token.
   *
   *   When paginating, other parameters provided to
   *   {@link google.cloud.metastore.v1.DataprocMetastore.ListBackups|DataprocMetastore.ListBackups} must match the call that provided the
   *   page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specify the ordering of results as described in [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *   If not specified, the results will be sorted in the default order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Backup]{@link google.cloud.metastore.v1.Backup} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listBackupsStream(
    request?: protos.google.cloud.metastore.v1.IListBackupsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackups.createStream(
      this.innerApiCalls.listBackups as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listBackups`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The relative resource name of the service whose backups to
   *   list, in the following form:
   *
   *   `projects/{project_number}/locations/{location_id}/services/{service_id}/backups`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of backups to return. The response may contain less
   *   than the maximum number. If unspecified, no more than 500 backups are
   *   returned. The maximum value is 1000; values above 1000 are changed to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous {@link google.cloud.metastore.v1.DataprocMetastore.ListBackups|DataprocMetastore.ListBackups}
   *   call. Provide this token to retrieve the subsequent page.
   *
   *   To retrieve the first page, supply an empty page token.
   *
   *   When paginating, other parameters provided to
   *   {@link google.cloud.metastore.v1.DataprocMetastore.ListBackups|DataprocMetastore.ListBackups} must match the call that provided the
   *   page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply to list results.
   * @param {string} [request.orderBy]
   *   Optional. Specify the ordering of results as described in [Sorting
   *   Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *   If not specified, the results will be sorted in the default order.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Backup]{@link google.cloud.metastore.v1.Backup}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dataproc_metastore.list_backups.js</caption>
   * region_tag:metastore_v1_generated_DataprocMetastore_ListBackups_async
   */
  listBackupsAsync(
    request?: protos.google.cloud.metastore.v1.IListBackupsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.metastore.v1.IBackup> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBackups.asyncIterate(
      this.innerApiCalls['listBackups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.metastore.v1.IBackup>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified backup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service
   * @param {string} backup
   * @returns {string} Resource name string.
   */
  backupPath(
    project: string,
    location: string,
    service: string,
    backup: string
  ) {
    return this.pathTemplates.backupPathTemplate.render({
      project: project,
      location: location,
      service: service,
      backup: backup,
    });
  }

  /**
   * Parse the project from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).project;
  }

  /**
   * Parse the location from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).location;
  }

  /**
   * Parse the service from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).service;
  }

  /**
   * Parse the backup from Backup resource.
   *
   * @param {string} backupName
   *   A fully-qualified path representing Backup resource.
   * @returns {string} A string representing the backup.
   */
  matchBackupFromBackupName(backupName: string) {
    return this.pathTemplates.backupPathTemplate.match(backupName).backup;
  }

  /**
   * Return a fully-qualified federation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} federation
   * @returns {string} Resource name string.
   */
  federationPath(project: string, location: string, federation: string) {
    return this.pathTemplates.federationPathTemplate.render({
      project: project,
      location: location,
      federation: federation,
    });
  }

  /**
   * Parse the project from Federation resource.
   *
   * @param {string} federationName
   *   A fully-qualified path representing Federation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFederationName(federationName: string) {
    return this.pathTemplates.federationPathTemplate.match(federationName)
      .project;
  }

  /**
   * Parse the location from Federation resource.
   *
   * @param {string} federationName
   *   A fully-qualified path representing Federation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFederationName(federationName: string) {
    return this.pathTemplates.federationPathTemplate.match(federationName)
      .location;
  }

  /**
   * Parse the federation from Federation resource.
   *
   * @param {string} federationName
   *   A fully-qualified path representing Federation resource.
   * @returns {string} A string representing the federation.
   */
  matchFederationFromFederationName(federationName: string) {
    return this.pathTemplates.federationPathTemplate.match(federationName)
      .federation;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified metadataImport resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service
   * @param {string} metadata_import
   * @returns {string} Resource name string.
   */
  metadataImportPath(
    project: string,
    location: string,
    service: string,
    metadataImport: string
  ) {
    return this.pathTemplates.metadataImportPathTemplate.render({
      project: project,
      location: location,
      service: service,
      metadata_import: metadataImport,
    });
  }

  /**
   * Parse the project from MetadataImport resource.
   *
   * @param {string} metadataImportName
   *   A fully-qualified path representing MetadataImport resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMetadataImportName(metadataImportName: string) {
    return this.pathTemplates.metadataImportPathTemplate.match(
      metadataImportName
    ).project;
  }

  /**
   * Parse the location from MetadataImport resource.
   *
   * @param {string} metadataImportName
   *   A fully-qualified path representing MetadataImport resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMetadataImportName(metadataImportName: string) {
    return this.pathTemplates.metadataImportPathTemplate.match(
      metadataImportName
    ).location;
  }

  /**
   * Parse the service from MetadataImport resource.
   *
   * @param {string} metadataImportName
   *   A fully-qualified path representing MetadataImport resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromMetadataImportName(metadataImportName: string) {
    return this.pathTemplates.metadataImportPathTemplate.match(
      metadataImportName
    ).service;
  }

  /**
   * Parse the metadata_import from MetadataImport resource.
   *
   * @param {string} metadataImportName
   *   A fully-qualified path representing MetadataImport resource.
   * @returns {string} A string representing the metadata_import.
   */
  matchMetadataImportFromMetadataImportName(metadataImportName: string) {
    return this.pathTemplates.metadataImportPathTemplate.match(
      metadataImportName
    ).metadata_import;
  }

  /**
   * Return a fully-qualified network resource name string.
   *
   * @param {string} project
   * @param {string} network
   * @returns {string} Resource name string.
   */
  networkPath(project: string, network: string) {
    return this.pathTemplates.networkPathTemplate.render({
      project: project,
      network: network,
    });
  }

  /**
   * Parse the project from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName).project;
  }

  /**
   * Parse the network from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the network.
   */
  matchNetworkFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName).network;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified service resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service
   * @returns {string} Resource name string.
   */
  servicePath(project: string, location: string, service: string) {
    return this.pathTemplates.servicePathTemplate.render({
      project: project,
      location: location,
      service: service,
    });
  }

  /**
   * Parse the project from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).project;
  }

  /**
   * Parse the location from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).location;
  }

  /**
   * Parse the service from Service resource.
   *
   * @param {string} serviceName
   *   A fully-qualified path representing Service resource.
   * @returns {string} A string representing the service.
   */
  matchServiceFromServiceName(serviceName: string) {
    return this.pathTemplates.servicePathTemplate.match(serviceName).service;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.dataprocMetastoreStub && !this._terminated) {
      return this.dataprocMetastoreStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
