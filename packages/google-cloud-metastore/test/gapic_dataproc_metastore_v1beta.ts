// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as dataprocmetastoreModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta.DataprocMetastoreClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        dataprocmetastoreModule.v1beta.DataprocMetastoreClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        dataprocmetastoreModule.v1beta.DataprocMetastoreClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = dataprocmetastoreModule.v1beta.DataprocMetastoreClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new dataprocmetastoreModule.v1beta.DataprocMetastoreClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          fallback: true,
        }
      );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.dataprocMetastoreStub, undefined);
      await client.initialize();
      assert(client.dataprocMetastoreStub);
    });

    it('has close method for the initialized client', done => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      assert(client.dataprocMetastoreStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      assert.strictEqual(client.dataprocMetastoreStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getService', () => {
    it('invokes getService without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.Service()
      );
      client.innerApiCalls.getService = stubSimpleCall(expectedResponse);
      const [response] = await client.getService(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getService without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.Service()
      );
      client.innerApiCalls.getService =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getService(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.metastore.v1beta.IService | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getService with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getService = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getService with closed client', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getService(request), expectedError);
    });
  });

  describe('getMetadataImport', () => {
    it('invokes getMetadataImport without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetMetadataImportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetMetadataImportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.MetadataImport()
      );
      client.innerApiCalls.getMetadataImport = stubSimpleCall(expectedResponse);
      const [response] = await client.getMetadataImport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetadataImport without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetMetadataImportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetMetadataImportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.MetadataImport()
      );
      client.innerApiCalls.getMetadataImport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getMetadataImport(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.metastore.v1beta.IMetadataImport | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetadataImport with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetMetadataImportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetMetadataImportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getMetadataImport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getMetadataImport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMetadataImport with closed client', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetMetadataImportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetMetadataImportRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getMetadataImport(request), expectedError);
    });
  });

  describe('getBackup', () => {
    it('invokes getBackup without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.Backup()
      );
      client.innerApiCalls.getBackup = stubSimpleCall(expectedResponse);
      const [response] = await client.getBackup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.Backup()
      );
      client.innerApiCalls.getBackup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getBackup(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.metastore.v1beta.IBackup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getBackup = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getBackup with closed client', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.GetBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.GetBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getBackup(request), expectedError);
    });
  });

  describe('createService', () => {
    it('invokes createService without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createService =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createService(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createService without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createService =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createService(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.metastore.v1beta.IService,
              protos.google.cloud.metastore.v1beta.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.metastore.v1beta.IService,
        protos.google.cloud.metastore.v1beta.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createService with call error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createService = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createService with LRO error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateServiceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createService = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createService(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateServiceProgress without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateServiceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateServiceProgress with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateServiceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateService', () => {
    it('invokes updateService without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.UpdateServiceRequest()
      );
      request.service ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.UpdateServiceRequest',
        ['service', 'name']
      );
      request.service.name = defaultValue1;
      const expectedHeaderRequestParams = `service.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateService =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateService(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateService without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.UpdateServiceRequest()
      );
      request.service ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.UpdateServiceRequest',
        ['service', 'name']
      );
      request.service.name = defaultValue1;
      const expectedHeaderRequestParams = `service.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateService =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateService(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.metastore.v1beta.IService,
              protos.google.cloud.metastore.v1beta.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.metastore.v1beta.IService,
        protos.google.cloud.metastore.v1beta.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateService with call error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.UpdateServiceRequest()
      );
      request.service ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.UpdateServiceRequest',
        ['service', 'name']
      );
      request.service.name = defaultValue1;
      const expectedHeaderRequestParams = `service.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateService = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateService with LRO error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.UpdateServiceRequest()
      );
      request.service ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.UpdateServiceRequest',
        ['service', 'name']
      );
      request.service.name = defaultValue1;
      const expectedHeaderRequestParams = `service.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateService = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateService(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateServiceProgress without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateServiceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateServiceProgress with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateServiceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteService', () => {
    it('invokes deleteService without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.DeleteServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.DeleteServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteService =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteService(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteService without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.DeleteServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.DeleteServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteService =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteService(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.metastore.v1beta.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1beta.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteService with call error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.DeleteServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.DeleteServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteService = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteService with LRO error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.DeleteServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.DeleteServiceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteService = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteService(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteServiceProgress without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteServiceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteServiceProgress with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteServiceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createMetadataImport', () => {
    it('invokes createMetadataImport without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateMetadataImportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateMetadataImportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createMetadataImport =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createMetadataImport(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMetadataImport without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateMetadataImportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateMetadataImportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createMetadataImport =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createMetadataImport(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.metastore.v1beta.IMetadataImport,
              protos.google.cloud.metastore.v1beta.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.metastore.v1beta.IMetadataImport,
        protos.google.cloud.metastore.v1beta.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMetadataImport with call error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateMetadataImportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateMetadataImportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMetadataImport = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createMetadataImport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMetadataImport with LRO error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateMetadataImportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateMetadataImportRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMetadataImport = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createMetadataImport(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateMetadataImportProgress without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateMetadataImportProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateMetadataImportProgress with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateMetadataImportProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateMetadataImport', () => {
    it('invokes updateMetadataImport without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.UpdateMetadataImportRequest()
      );
      request.metadataImport ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.UpdateMetadataImportRequest',
        ['metadataImport', 'name']
      );
      request.metadataImport.name = defaultValue1;
      const expectedHeaderRequestParams = `metadata_import.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateMetadataImport =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateMetadataImport(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMetadataImport without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.UpdateMetadataImportRequest()
      );
      request.metadataImport ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.UpdateMetadataImportRequest',
        ['metadataImport', 'name']
      );
      request.metadataImport.name = defaultValue1;
      const expectedHeaderRequestParams = `metadata_import.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateMetadataImport =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateMetadataImport(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.metastore.v1beta.IMetadataImport,
              protos.google.cloud.metastore.v1beta.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.metastore.v1beta.IMetadataImport,
        protos.google.cloud.metastore.v1beta.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMetadataImport with call error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.UpdateMetadataImportRequest()
      );
      request.metadataImport ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.UpdateMetadataImportRequest',
        ['metadataImport', 'name']
      );
      request.metadataImport.name = defaultValue1;
      const expectedHeaderRequestParams = `metadata_import.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateMetadataImport = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateMetadataImport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMetadataImport with LRO error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.UpdateMetadataImportRequest()
      );
      request.metadataImport ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.UpdateMetadataImportRequest',
        ['metadataImport', 'name']
      );
      request.metadataImport.name = defaultValue1;
      const expectedHeaderRequestParams = `metadata_import.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateMetadataImport = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateMetadataImport(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateMetadataImport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMetadataImport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateMetadataImportProgress without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateMetadataImportProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateMetadataImportProgress with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateMetadataImportProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('exportMetadata', () => {
    it('invokes exportMetadata without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ExportMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ExportMetadataRequest',
        ['service']
      );
      request.service = defaultValue1;
      const expectedHeaderRequestParams = `service=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.exportMetadata =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.exportMetadata(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.exportMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportMetadata without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ExportMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ExportMetadataRequest',
        ['service']
      );
      request.service = defaultValue1;
      const expectedHeaderRequestParams = `service=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.exportMetadata =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.exportMetadata(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.metastore.v1beta.IMetadataExport,
              protos.google.cloud.metastore.v1beta.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.metastore.v1beta.IMetadataExport,
        protos.google.cloud.metastore.v1beta.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.exportMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportMetadata with call error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ExportMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ExportMetadataRequest',
        ['service']
      );
      request.service = defaultValue1;
      const expectedHeaderRequestParams = `service=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.exportMetadata = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.exportMetadata(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.exportMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportMetadata with LRO error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ExportMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ExportMetadataRequest',
        ['service']
      );
      request.service = defaultValue1;
      const expectedHeaderRequestParams = `service=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.exportMetadata = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.exportMetadata(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.exportMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkExportMetadataProgress without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkExportMetadataProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkExportMetadataProgress with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkExportMetadataProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('restoreService', () => {
    it('invokes restoreService without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.RestoreServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.RestoreServiceRequest',
        ['service']
      );
      request.service = defaultValue1;
      const expectedHeaderRequestParams = `service=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.restoreService =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.restoreService(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restoreService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreService without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.RestoreServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.RestoreServiceRequest',
        ['service']
      );
      request.service = defaultValue1;
      const expectedHeaderRequestParams = `service=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.restoreService =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.restoreService(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.metastore.v1beta.IRestore,
              protos.google.cloud.metastore.v1beta.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.metastore.v1beta.IRestore,
        protos.google.cloud.metastore.v1beta.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restoreService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreService with call error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.RestoreServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.RestoreServiceRequest',
        ['service']
      );
      request.service = defaultValue1;
      const expectedHeaderRequestParams = `service=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.restoreService = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.restoreService(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.restoreService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreService with LRO error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.RestoreServiceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.RestoreServiceRequest',
        ['service']
      );
      request.service = defaultValue1;
      const expectedHeaderRequestParams = `service=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.restoreService = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.restoreService(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.restoreService as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreService as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRestoreServiceProgress without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkRestoreServiceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRestoreServiceProgress with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkRestoreServiceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createBackup', () => {
    it('invokes createBackup without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createBackup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createBackup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createBackup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.metastore.v1beta.IBackup,
              protos.google.cloud.metastore.v1beta.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.metastore.v1beta.IBackup,
        protos.google.cloud.metastore.v1beta.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup with call error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createBackup with LRO error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.CreateBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.CreateBackupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createBackup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createBackup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateBackupProgress without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateBackupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateBackupProgress with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateBackupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteBackup', () => {
    it('invokes deleteBackup without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackup = stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteBackup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteBackup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteBackup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.metastore.v1beta.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.metastore.v1beta.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup with call error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteBackup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteBackup with LRO error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.DeleteBackupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.DeleteBackupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteBackup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteBackup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteBackup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteBackupProgress without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteBackupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteBackupProgress with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDeleteBackupProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listServices', () => {
    it('invokes listServices without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
      ];
      client.innerApiCalls.listServices = stubSimpleCall(expectedResponse);
      const [response] = await client.listServices(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServices without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
      ];
      client.innerApiCalls.listServices =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listServices(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.metastore.v1beta.IService[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServices with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listServices = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listServices(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServices as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServicesStream without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
      ];
      client.descriptors.page.listServices.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listServicesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.metastore.v1beta.Service[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.metastore.v1beta.Service) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listServices.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listServices, request)
      );
      assert(
        (client.descriptors.page.listServices.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listServicesStream with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServices.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listServicesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.metastore.v1beta.Service[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.metastore.v1beta.Service) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listServices.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listServices, request)
      );
      assert(
        (client.descriptors.page.listServices.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServices without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Service()
        ),
      ];
      client.descriptors.page.listServices.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.metastore.v1beta.IService[] = [];
      const iterable = client.listServicesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServices.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listServices.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServices with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListServicesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListServicesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServices.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listServicesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.metastore.v1beta.IService[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServices.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listServices.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listMetadataImports', () => {
    it('invokes listMetadataImports without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListMetadataImportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListMetadataImportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
      ];
      client.innerApiCalls.listMetadataImports =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listMetadataImports(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMetadataImports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetadataImports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetadataImports without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListMetadataImportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListMetadataImportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
      ];
      client.innerApiCalls.listMetadataImports =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listMetadataImports(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.metastore.v1beta.IMetadataImport[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMetadataImports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetadataImports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetadataImports with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListMetadataImportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListMetadataImportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listMetadataImports = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listMetadataImports(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listMetadataImports as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMetadataImports as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMetadataImportsStream without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListMetadataImportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListMetadataImportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
      ];
      client.descriptors.page.listMetadataImports.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listMetadataImportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.metastore.v1beta.MetadataImport[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.metastore.v1beta.MetadataImport) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listMetadataImports.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMetadataImports, request)
      );
      assert(
        (client.descriptors.page.listMetadataImports.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listMetadataImportsStream with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListMetadataImportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListMetadataImportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMetadataImports.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listMetadataImportsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.metastore.v1beta.MetadataImport[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.metastore.v1beta.MetadataImport) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listMetadataImports.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMetadataImports, request)
      );
      assert(
        (client.descriptors.page.listMetadataImports.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMetadataImports without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListMetadataImportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListMetadataImportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.MetadataImport()
        ),
      ];
      client.descriptors.page.listMetadataImports.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.metastore.v1beta.IMetadataImport[] =
        [];
      const iterable = client.listMetadataImportsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMetadataImports.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMetadataImports.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMetadataImports with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListMetadataImportsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListMetadataImportsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMetadataImports.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listMetadataImportsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.metastore.v1beta.IMetadataImport[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMetadataImports.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMetadataImports.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listBackups', () => {
    it('invokes listBackups without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
      ];
      client.innerApiCalls.listBackups = stubSimpleCall(expectedResponse);
      const [response] = await client.listBackups(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackups without error using callback', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
      ];
      client.innerApiCalls.listBackups =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listBackups(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.metastore.v1beta.IBackup[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackups with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listBackups = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listBackups(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listBackupsStream without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
      ];
      client.descriptors.page.listBackups.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.metastore.v1beta.Backup[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.metastore.v1beta.Backup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackups, request)
      );
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listBackupsStream with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackups.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.metastore.v1beta.Backup[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.metastore.v1beta.Backup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listBackups, request)
      );
      assert(
        (client.descriptors.page.listBackups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackups without error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
        generateSampleMessage(
          new protos.google.cloud.metastore.v1beta.Backup()
        ),
      ];
      client.descriptors.page.listBackups.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.metastore.v1beta.IBackup[] = [];
      const iterable = client.listBackupsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listBackups with error', async () => {
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.metastore.v1beta.ListBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.metastore.v1beta.ListBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listBackups.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listBackupsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.metastore.v1beta.IBackup[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listBackups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('backup', () => {
      const fakePath = '/rendered/path/backup';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        service: 'serviceValue',
        backup: 'backupValue',
      };
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.backupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.backupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('backupPath', () => {
        const result = client.backupPath(
          'projectValue',
          'locationValue',
          'serviceValue',
          'backupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.backupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBackupName', () => {
        const result = client.matchProjectFromBackupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBackupName', () => {
        const result = client.matchLocationFromBackupName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceFromBackupName', () => {
        const result = client.matchServiceFromBackupName(fakePath);
        assert.strictEqual(result, 'serviceValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBackupFromBackupName', () => {
        const result = client.matchBackupFromBackupName(fakePath);
        assert.strictEqual(result, 'backupValue');
        assert(
          (client.pathTemplates.backupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('metadataImport', () => {
      const fakePath = '/rendered/path/metadataImport';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        service: 'serviceValue',
        metadata_import: 'metadataImportValue',
      };
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.metadataImportPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.metadataImportPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('metadataImportPath', () => {
        const result = client.metadataImportPath(
          'projectValue',
          'locationValue',
          'serviceValue',
          'metadataImportValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.metadataImportPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromMetadataImportName', () => {
        const result = client.matchProjectFromMetadataImportName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.metadataImportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromMetadataImportName', () => {
        const result = client.matchLocationFromMetadataImportName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.metadataImportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceFromMetadataImportName', () => {
        const result = client.matchServiceFromMetadataImportName(fakePath);
        assert.strictEqual(result, 'serviceValue');
        assert(
          (client.pathTemplates.metadataImportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMetadataImportFromMetadataImportName', () => {
        const result =
          client.matchMetadataImportFromMetadataImportName(fakePath);
        assert.strictEqual(result, 'metadataImportValue');
        assert(
          (client.pathTemplates.metadataImportPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('network', () => {
      const fakePath = '/rendered/path/network';
      const expectedParameters = {
        project: 'projectValue',
        network: 'networkValue',
      };
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.networkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.networkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('networkPath', () => {
        const result = client.networkPath('projectValue', 'networkValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.networkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromNetworkName', () => {
        const result = client.matchProjectFromNetworkName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.networkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchNetworkFromNetworkName', () => {
        const result = client.matchNetworkFromNetworkName(fakePath);
        assert.strictEqual(result, 'networkValue');
        assert(
          (client.pathTemplates.networkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('service', () => {
      const fakePath = '/rendered/path/service';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        service: 'serviceValue',
      };
      const client = new dataprocmetastoreModule.v1beta.DataprocMetastoreClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      client.initialize();
      client.pathTemplates.servicePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.servicePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('servicePath', () => {
        const result = client.servicePath(
          'projectValue',
          'locationValue',
          'serviceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.servicePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServiceName', () => {
        const result = client.matchProjectFromServiceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.servicePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServiceName', () => {
        const result = client.matchLocationFromServiceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.servicePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServiceFromServiceName', () => {
        const result = client.matchServiceFromServiceName(fakePath);
        assert.strictEqual(result, 'serviceValue');
        assert(
          (client.pathTemplates.servicePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
