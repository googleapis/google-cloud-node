// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/telco_automation_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './telco_automation_client_config.json';
const version = require('../../../package.json').version;

/**
 *  TelcoAutomation Service manages the control plane cluster a.k.a.
 *  Orchestration Cluster (GKE cluster with config controller) of TNA. It also
 *  exposes blueprint APIs which manages the lifecycle of blueprints that control
 *  the infrastructure setup (e.g GDCE clusters) and deployment of network
 *  functions.
 * @class
 * @memberof v1
 */
export class TelcoAutomationClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  telcoAutomationStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of TelcoAutomationClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new TelcoAutomationClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof TelcoAutomationClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'telcoautomation.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      blueprintPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/orchestrationClusters/{orchestration_cluster}/blueprints/{blueprint}'
      ),
      deploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/orchestrationClusters/{orchestration_cluster}/deployments/{deployment}'
      ),
      edgeSlmPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/edgeSlms/{edge_slm}'
      ),
      hydratedDeploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/orchestrationClusters/{orchestration_cluster}/deployments/{deployment}/hydratedDeployments/{hydrated_deployment}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      orchestrationClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/orchestrationClusters/{orchestration_cluster}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      publicBlueprintPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/publicBlueprints/{public_lueprint}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listOrchestrationClusters: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'orchestrationClusters'
      ),
      listEdgeSlms: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'edgeSlms'
      ),
      listBlueprints: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'blueprints'
      ),
      listBlueprintRevisions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'blueprints'
      ),
      searchBlueprintRevisions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'blueprints'
      ),
      searchDeploymentRevisions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'deployments'
      ),
      listPublicBlueprints: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'publicBlueprints'
      ),
      listDeployments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'deployments'
      ),
      listDeploymentRevisions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'deployments'
      ),
      listHydratedDeployments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'hydratedDeployments'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*/locations}',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*/operations}',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createOrchestrationClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.telcoautomation.v1.OrchestrationCluster'
    ) as gax.protobuf.Type;
    const createOrchestrationClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.telcoautomation.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteOrchestrationClusterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteOrchestrationClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.telcoautomation.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createEdgeSlmResponse = protoFilesRoot.lookup(
      '.google.cloud.telcoautomation.v1.EdgeSlm'
    ) as gax.protobuf.Type;
    const createEdgeSlmMetadata = protoFilesRoot.lookup(
      '.google.cloud.telcoautomation.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteEdgeSlmResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteEdgeSlmMetadata = protoFilesRoot.lookup(
      '.google.cloud.telcoautomation.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createOrchestrationCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createOrchestrationClusterResponse.decode.bind(
          createOrchestrationClusterResponse
        ),
        createOrchestrationClusterMetadata.decode.bind(
          createOrchestrationClusterMetadata
        )
      ),
      deleteOrchestrationCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteOrchestrationClusterResponse.decode.bind(
          deleteOrchestrationClusterResponse
        ),
        deleteOrchestrationClusterMetadata.decode.bind(
          deleteOrchestrationClusterMetadata
        )
      ),
      createEdgeSlm: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createEdgeSlmResponse.decode.bind(createEdgeSlmResponse),
        createEdgeSlmMetadata.decode.bind(createEdgeSlmMetadata)
      ),
      deleteEdgeSlm: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteEdgeSlmResponse.decode.bind(deleteEdgeSlmResponse),
        deleteEdgeSlmMetadata.decode.bind(deleteEdgeSlmMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.telcoautomation.v1.TelcoAutomation',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.telcoAutomationStub) {
      return this.telcoAutomationStub;
    }

    // Put together the "service stub" for
    // google.cloud.telcoautomation.v1.TelcoAutomation.
    this.telcoAutomationStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.telcoautomation.v1.TelcoAutomation'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.telcoautomation.v1.TelcoAutomation,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const telcoAutomationStubMethods = [
      'listOrchestrationClusters',
      'getOrchestrationCluster',
      'createOrchestrationCluster',
      'deleteOrchestrationCluster',
      'listEdgeSlms',
      'getEdgeSlm',
      'createEdgeSlm',
      'deleteEdgeSlm',
      'createBlueprint',
      'updateBlueprint',
      'getBlueprint',
      'deleteBlueprint',
      'listBlueprints',
      'approveBlueprint',
      'proposeBlueprint',
      'rejectBlueprint',
      'listBlueprintRevisions',
      'searchBlueprintRevisions',
      'searchDeploymentRevisions',
      'discardBlueprintChanges',
      'listPublicBlueprints',
      'getPublicBlueprint',
      'createDeployment',
      'updateDeployment',
      'getDeployment',
      'removeDeployment',
      'listDeployments',
      'listDeploymentRevisions',
      'discardDeploymentChanges',
      'applyDeployment',
      'computeDeploymentStatus',
      'rollbackDeployment',
      'getHydratedDeployment',
      'listHydratedDeployments',
      'updateHydratedDeployment',
      'applyHydratedDeployment',
    ];
    for (const methodName of telcoAutomationStubMethods) {
      const callPromise = this.telcoAutomationStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.telcoAutomationStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'telcoautomation.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'telcoautomation.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of a single OrchestrationCluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.OrchestrationCluster|OrchestrationCluster}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.get_orchestration_cluster.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_GetOrchestrationCluster_async
   */
  getOrchestrationCluster(
    request?: protos.google.cloud.telcoautomation.v1.IGetOrchestrationClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
      (
        | protos.google.cloud.telcoautomation.v1.IGetOrchestrationClusterRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getOrchestrationCluster(
    request: protos.google.cloud.telcoautomation.v1.IGetOrchestrationClusterRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
      | protos.google.cloud.telcoautomation.v1.IGetOrchestrationClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getOrchestrationCluster(
    request: protos.google.cloud.telcoautomation.v1.IGetOrchestrationClusterRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
      | protos.google.cloud.telcoautomation.v1.IGetOrchestrationClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getOrchestrationCluster(
    request?: protos.google.cloud.telcoautomation.v1.IGetOrchestrationClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
          | protos.google.cloud.telcoautomation.v1.IGetOrchestrationClusterRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
      | protos.google.cloud.telcoautomation.v1.IGetOrchestrationClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
      (
        | protos.google.cloud.telcoautomation.v1.IGetOrchestrationClusterRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getOrchestrationCluster(
      request,
      options,
      callback
    );
  }
  /**
   * Gets details of a single EdgeSlm.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.EdgeSlm|EdgeSlm}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.get_edge_slm.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_GetEdgeSlm_async
   */
  getEdgeSlm(
    request?: protos.google.cloud.telcoautomation.v1.IGetEdgeSlmRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IEdgeSlm,
      protos.google.cloud.telcoautomation.v1.IGetEdgeSlmRequest | undefined,
      {} | undefined,
    ]
  >;
  getEdgeSlm(
    request: protos.google.cloud.telcoautomation.v1.IGetEdgeSlmRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IEdgeSlm,
      | protos.google.cloud.telcoautomation.v1.IGetEdgeSlmRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getEdgeSlm(
    request: protos.google.cloud.telcoautomation.v1.IGetEdgeSlmRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IEdgeSlm,
      | protos.google.cloud.telcoautomation.v1.IGetEdgeSlmRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getEdgeSlm(
    request?: protos.google.cloud.telcoautomation.v1.IGetEdgeSlmRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IEdgeSlm,
          | protos.google.cloud.telcoautomation.v1.IGetEdgeSlmRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IEdgeSlm,
      | protos.google.cloud.telcoautomation.v1.IGetEdgeSlmRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IEdgeSlm,
      protos.google.cloud.telcoautomation.v1.IGetEdgeSlmRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getEdgeSlm(request, options, callback);
  }
  /**
   * Creates a blueprint.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} [request.blueprintId]
   *   Optional. The name of the blueprint.
   * @param {google.cloud.telcoautomation.v1.Blueprint} request.blueprint
   *   Required. The `Blueprint` to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.create_blueprint.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_CreateBlueprint_async
   */
  createBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.ICreateBlueprintRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.ICreateBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createBlueprint(
    request: protos.google.cloud.telcoautomation.v1.ICreateBlueprintRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.ICreateBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createBlueprint(
    request: protos.google.cloud.telcoautomation.v1.ICreateBlueprintRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.ICreateBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.ICreateBlueprintRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IBlueprint,
          | protos.google.cloud.telcoautomation.v1.ICreateBlueprintRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.ICreateBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.ICreateBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createBlueprint(request, options, callback);
  }
  /**
   * Updates a blueprint.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.telcoautomation.v1.Blueprint} request.blueprint
   *   Required. The `blueprint` to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Update mask is used to specify the fields to be overwritten in
   *   the `blueprint` resource by the update.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.update_blueprint.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_UpdateBlueprint_async
   */
  updateBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IUpdateBlueprintRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.IUpdateBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IUpdateBlueprintRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IUpdateBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IUpdateBlueprintRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IUpdateBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IUpdateBlueprintRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IBlueprint,
          | protos.google.cloud.telcoautomation.v1.IUpdateBlueprintRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IUpdateBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.IUpdateBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'blueprint.name': request.blueprint!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateBlueprint(request, options, callback);
  }
  /**
   * Returns the requested blueprint.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the blueprint.
   *   Case 1: If the name provided in the request is
   *   {blueprint_id}@{revision_id}, then the revision with revision_id will be
   *   returned. Case 2: If the name provided in the request is {blueprint}, then
   *   the current state of the blueprint is returned.
   * @param {google.cloud.telcoautomation.v1.BlueprintView} [request.view]
   *   Optional. Defines the type of view of the blueprint.
   *   When field is not present BLUEPRINT_VIEW_BASIC is considered as default.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.get_blueprint.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_GetBlueprint_async
   */
  getBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IGetBlueprintRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      protos.google.cloud.telcoautomation.v1.IGetBlueprintRequest | undefined,
      {} | undefined,
    ]
  >;
  getBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IGetBlueprintRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IGetBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IGetBlueprintRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IGetBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IGetBlueprintRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IBlueprint,
          | protos.google.cloud.telcoautomation.v1.IGetBlueprintRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IGetBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      protos.google.cloud.telcoautomation.v1.IGetBlueprintRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getBlueprint(request, options, callback);
  }
  /**
   * Deletes a blueprint and all its revisions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of blueprint to delete.
   *   Blueprint name should be in the format {blueprint_id}, if
   *   {blueprint_id}@{revision_id} is passed then the API throws invalid
   *   argument.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.delete_blueprint.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_DeleteBlueprint_async
   */
  deleteBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IDeleteBlueprintRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.telcoautomation.v1.IDeleteBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  deleteBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IDeleteBlueprintRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.telcoautomation.v1.IDeleteBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IDeleteBlueprintRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.telcoautomation.v1.IDeleteBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IDeleteBlueprintRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.telcoautomation.v1.IDeleteBlueprintRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.telcoautomation.v1.IDeleteBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.telcoautomation.v1.IDeleteBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteBlueprint(request, options, callback);
  }
  /**
   * Approves a blueprint and commits a new revision.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the blueprint to approve. The blueprint must be in
   *   Proposed state. A new revision is committed on approval.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.approve_blueprint.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ApproveBlueprint_async
   */
  approveBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IApproveBlueprintRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.IApproveBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  approveBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IApproveBlueprintRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IApproveBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  approveBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IApproveBlueprintRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IApproveBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  approveBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IApproveBlueprintRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IBlueprint,
          | protos.google.cloud.telcoautomation.v1.IApproveBlueprintRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IApproveBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.IApproveBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.approveBlueprint(request, options, callback);
  }
  /**
   * Proposes a blueprint for approval of changes.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the blueprint being proposed.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.propose_blueprint.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ProposeBlueprint_async
   */
  proposeBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IProposeBlueprintRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.IProposeBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  proposeBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IProposeBlueprintRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IProposeBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  proposeBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IProposeBlueprintRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IProposeBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  proposeBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IProposeBlueprintRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IBlueprint,
          | protos.google.cloud.telcoautomation.v1.IProposeBlueprintRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IProposeBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.IProposeBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.proposeBlueprint(request, options, callback);
  }
  /**
   * Rejects a blueprint revision proposal and flips it back to Draft state.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the blueprint being rejected.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.reject_blueprint.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_RejectBlueprint_async
   */
  rejectBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IRejectBlueprintRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.IRejectBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  rejectBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IRejectBlueprintRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IRejectBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  rejectBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IRejectBlueprintRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IRejectBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  rejectBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IRejectBlueprintRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IBlueprint,
          | protos.google.cloud.telcoautomation.v1.IRejectBlueprintRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      | protos.google.cloud.telcoautomation.v1.IRejectBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.IRejectBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.rejectBlueprint(request, options, callback);
  }
  /**
   * Discards the changes in a blueprint and reverts the blueprint to the last
   * approved blueprint revision. No changes take place if a blueprint does not
   * have revisions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the blueprint of which changes are being discarded.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.DiscardBlueprintChangesResponse|DiscardBlueprintChangesResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.discard_blueprint_changes.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_DiscardBlueprintChanges_async
   */
  discardBlueprintChanges(
    request?: protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesResponse,
      (
        | protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  discardBlueprintChanges(
    request: protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesResponse,
      | protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  discardBlueprintChanges(
    request: protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesResponse,
      | protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  discardBlueprintChanges(
    request?: protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesResponse,
          | protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesResponse,
      | protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesResponse,
      (
        | protos.google.cloud.telcoautomation.v1.IDiscardBlueprintChangesRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.discardBlueprintChanges(
      request,
      options,
      callback
    );
  }
  /**
   * Returns the requested public blueprint.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the public blueprint.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.PublicBlueprint|PublicBlueprint}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.get_public_blueprint.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_GetPublicBlueprint_async
   */
  getPublicBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IGetPublicBlueprintRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IPublicBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.IGetPublicBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getPublicBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IGetPublicBlueprintRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IPublicBlueprint,
      | protos.google.cloud.telcoautomation.v1.IGetPublicBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPublicBlueprint(
    request: protos.google.cloud.telcoautomation.v1.IGetPublicBlueprintRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IPublicBlueprint,
      | protos.google.cloud.telcoautomation.v1.IGetPublicBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPublicBlueprint(
    request?: protos.google.cloud.telcoautomation.v1.IGetPublicBlueprintRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IPublicBlueprint,
          | protos.google.cloud.telcoautomation.v1.IGetPublicBlueprintRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IPublicBlueprint,
      | protos.google.cloud.telcoautomation.v1.IGetPublicBlueprintRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IPublicBlueprint,
      (
        | protos.google.cloud.telcoautomation.v1.IGetPublicBlueprintRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPublicBlueprint(request, options, callback);
  }
  /**
   * Creates a deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} [request.deploymentId]
   *   Optional. The name of the deployment.
   * @param {google.cloud.telcoautomation.v1.Deployment} request.deployment
   *   Required. The `Deployment` to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.create_deployment.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_CreateDeployment_async
   */
  createDeployment(
    request?: protos.google.cloud.telcoautomation.v1.ICreateDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.ICreateDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createDeployment(
    request: protos.google.cloud.telcoautomation.v1.ICreateDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.ICreateDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createDeployment(
    request: protos.google.cloud.telcoautomation.v1.ICreateDeploymentRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.ICreateDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createDeployment(
    request?: protos.google.cloud.telcoautomation.v1.ICreateDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IDeployment,
          | protos.google.cloud.telcoautomation.v1.ICreateDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.ICreateDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.ICreateDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createDeployment(request, options, callback);
  }
  /**
   * Updates a deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.telcoautomation.v1.Deployment} request.deployment
   *   Required. The `deployment` to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Update mask is used to specify the fields to be overwritten in
   *   the `deployment` resource by the update.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.update_deployment.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_UpdateDeployment_async
   */
  updateDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IUpdateDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IUpdateDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateDeployment(
    request: protos.google.cloud.telcoautomation.v1.IUpdateDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IUpdateDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateDeployment(
    request: protos.google.cloud.telcoautomation.v1.IUpdateDeploymentRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IUpdateDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IUpdateDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IDeployment,
          | protos.google.cloud.telcoautomation.v1.IUpdateDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IUpdateDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IUpdateDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'deployment.name': request.deployment!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateDeployment(request, options, callback);
  }
  /**
   * Returns the requested deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment.
   *   Case 1: If the name provided in the request is
   *   {deployment_id}@{revision_id}, then the revision with revision_id will be
   *   returned.
   *   Case 2: If the name provided in the request is {deployment}, then
   *   the current state of the deployment is returned.
   * @param {google.cloud.telcoautomation.v1.DeploymentView} [request.view]
   *   Optional. Defines the type of view of the deployment.
   *   When field is not present VIEW_BASIC is considered as default.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.get_deployment.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_GetDeployment_async
   */
  getDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IGetDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment,
      protos.google.cloud.telcoautomation.v1.IGetDeploymentRequest | undefined,
      {} | undefined,
    ]
  >;
  getDeployment(
    request: protos.google.cloud.telcoautomation.v1.IGetDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IGetDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDeployment(
    request: protos.google.cloud.telcoautomation.v1.IGetDeploymentRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IGetDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IGetDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IDeployment,
          | protos.google.cloud.telcoautomation.v1.IGetDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IGetDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment,
      protos.google.cloud.telcoautomation.v1.IGetDeploymentRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDeployment(request, options, callback);
  }
  /**
   * Removes the deployment by marking it as DELETING. Post which deployment and
   * it's revisions gets deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of deployment to initiate delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.remove_deployment.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_RemoveDeployment_async
   */
  removeDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IRemoveDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.telcoautomation.v1.IRemoveDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  removeDeployment(
    request: protos.google.cloud.telcoautomation.v1.IRemoveDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.telcoautomation.v1.IRemoveDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  removeDeployment(
    request: protos.google.cloud.telcoautomation.v1.IRemoveDeploymentRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.telcoautomation.v1.IRemoveDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  removeDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IRemoveDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.telcoautomation.v1.IRemoveDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.telcoautomation.v1.IRemoveDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.telcoautomation.v1.IRemoveDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.removeDeployment(request, options, callback);
  }
  /**
   * Discards the changes in a deployment and reverts the deployment to the last
   * approved deployment revision. No changes take place if a deployment does
   * not have revisions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment of which changes are being discarded.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.DiscardDeploymentChangesResponse|DiscardDeploymentChangesResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.discard_deployment_changes.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_DiscardDeploymentChanges_async
   */
  discardDeploymentChanges(
    request?: protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesResponse,
      (
        | protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  discardDeploymentChanges(
    request: protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesResponse,
      | protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  discardDeploymentChanges(
    request: protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesResponse,
      | protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  discardDeploymentChanges(
    request?: protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesResponse,
          | protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesResponse,
      | protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesResponse,
      (
        | protos.google.cloud.telcoautomation.v1.IDiscardDeploymentChangesRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.discardDeploymentChanges(
      request,
      options,
      callback
    );
  }
  /**
   * Applies the deployment's YAML files to the parent orchestration cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment to apply to orchestration cluster.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.apply_deployment.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ApplyDeployment_async
   */
  applyDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IApplyDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IApplyDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  applyDeployment(
    request: protos.google.cloud.telcoautomation.v1.IApplyDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IApplyDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  applyDeployment(
    request: protos.google.cloud.telcoautomation.v1.IApplyDeploymentRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IApplyDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  applyDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IApplyDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IDeployment,
          | protos.google.cloud.telcoautomation.v1.IApplyDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IApplyDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IApplyDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.applyDeployment(request, options, callback);
  }
  /**
   * Returns the requested deployment status.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment without revisionID.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.ComputeDeploymentStatusResponse|ComputeDeploymentStatusResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.compute_deployment_status.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ComputeDeploymentStatus_async
   */
  computeDeploymentStatus(
    request?: protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusResponse,
      (
        | protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  computeDeploymentStatus(
    request: protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusResponse,
      | protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  computeDeploymentStatus(
    request: protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusResponse,
      | protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  computeDeploymentStatus(
    request?: protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusResponse,
          | protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusResponse,
      | protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusResponse,
      (
        | protos.google.cloud.telcoautomation.v1.IComputeDeploymentStatusRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.computeDeploymentStatus(
      request,
      options,
      callback
    );
  }
  /**
   * Rollback the active deployment to the given past approved deployment
   * revision.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the deployment.
   * @param {string} request.revisionId
   *   Required. The revision id of deployment to roll back to.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.rollback_deployment.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_RollbackDeployment_async
   */
  rollbackDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IRollbackDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IRollbackDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  rollbackDeployment(
    request: protos.google.cloud.telcoautomation.v1.IRollbackDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IRollbackDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  rollbackDeployment(
    request: protos.google.cloud.telcoautomation.v1.IRollbackDeploymentRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IRollbackDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  rollbackDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IRollbackDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IDeployment,
          | protos.google.cloud.telcoautomation.v1.IRollbackDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IDeployment,
      | protos.google.cloud.telcoautomation.v1.IRollbackDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IRollbackDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.rollbackDeployment(request, options, callback);
  }
  /**
   * Returns the requested hydrated deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the hydrated deployment.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.HydratedDeployment|HydratedDeployment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.get_hydrated_deployment.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_GetHydratedDeployment_async
   */
  getHydratedDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IGetHydratedDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IGetHydratedDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getHydratedDeployment(
    request: protos.google.cloud.telcoautomation.v1.IGetHydratedDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      | protos.google.cloud.telcoautomation.v1.IGetHydratedDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getHydratedDeployment(
    request: protos.google.cloud.telcoautomation.v1.IGetHydratedDeploymentRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      | protos.google.cloud.telcoautomation.v1.IGetHydratedDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getHydratedDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IGetHydratedDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
          | protos.google.cloud.telcoautomation.v1.IGetHydratedDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      | protos.google.cloud.telcoautomation.v1.IGetHydratedDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IGetHydratedDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getHydratedDeployment(request, options, callback);
  }
  /**
   * Updates a hydrated deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.telcoautomation.v1.HydratedDeployment} request.hydratedDeployment
   *   Required. The hydrated deployment to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The list of fields to update. Update mask supports a special
   *   value `*` which fully replaces (equivalent to PUT) the resource provided.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.HydratedDeployment|HydratedDeployment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.update_hydrated_deployment.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_UpdateHydratedDeployment_async
   */
  updateHydratedDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IUpdateHydratedDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IUpdateHydratedDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateHydratedDeployment(
    request: protos.google.cloud.telcoautomation.v1.IUpdateHydratedDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      | protos.google.cloud.telcoautomation.v1.IUpdateHydratedDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateHydratedDeployment(
    request: protos.google.cloud.telcoautomation.v1.IUpdateHydratedDeploymentRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      | protos.google.cloud.telcoautomation.v1.IUpdateHydratedDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateHydratedDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IUpdateHydratedDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
          | protos.google.cloud.telcoautomation.v1.IUpdateHydratedDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      | protos.google.cloud.telcoautomation.v1.IUpdateHydratedDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IUpdateHydratedDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'hydrated_deployment.name': request.hydratedDeployment!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateHydratedDeployment(
      request,
      options,
      callback
    );
  }
  /**
   * Applies a hydrated deployment to a workload cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the hydrated deployment to apply.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.telcoautomation.v1.HydratedDeployment|HydratedDeployment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.apply_hydrated_deployment.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ApplyHydratedDeployment_async
   */
  applyHydratedDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IApplyHydratedDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IApplyHydratedDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  applyHydratedDeployment(
    request: protos.google.cloud.telcoautomation.v1.IApplyHydratedDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      | protos.google.cloud.telcoautomation.v1.IApplyHydratedDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  applyHydratedDeployment(
    request: protos.google.cloud.telcoautomation.v1.IApplyHydratedDeploymentRequest,
    callback: Callback<
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      | protos.google.cloud.telcoautomation.v1.IApplyHydratedDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  applyHydratedDeployment(
    request?: protos.google.cloud.telcoautomation.v1.IApplyHydratedDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
          | protos.google.cloud.telcoautomation.v1.IApplyHydratedDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      | protos.google.cloud.telcoautomation.v1.IApplyHydratedDeploymentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment,
      (
        | protos.google.cloud.telcoautomation.v1.IApplyHydratedDeploymentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.applyHydratedDeployment(
      request,
      options,
      callback
    );
  }

  /**
   * Creates a new OrchestrationCluster in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.orchestrationClusterId
   *   Required. Id of the requesting object
   *   If auto-generating Id server-side, remove this field and
   *   orchestration_cluster_id from the method_signature of Create RPC
   * @param {google.cloud.telcoautomation.v1.OrchestrationCluster} request.orchestrationCluster
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.create_orchestration_cluster.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_CreateOrchestrationCluster_async
   */
  createOrchestrationCluster(
    request?: protos.google.cloud.telcoautomation.v1.ICreateOrchestrationClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createOrchestrationCluster(
    request: protos.google.cloud.telcoautomation.v1.ICreateOrchestrationClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createOrchestrationCluster(
    request: protos.google.cloud.telcoautomation.v1.ICreateOrchestrationClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createOrchestrationCluster(
    request?: protos.google.cloud.telcoautomation.v1.ICreateOrchestrationClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
            protos.google.cloud.telcoautomation.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.telcoautomation.v1.IOrchestrationCluster,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createOrchestrationCluster(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createOrchestrationCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.create_orchestration_cluster.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_CreateOrchestrationCluster_async
   */
  async checkCreateOrchestrationClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.telcoautomation.v1.OrchestrationCluster,
      protos.google.cloud.telcoautomation.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createOrchestrationCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.telcoautomation.v1.OrchestrationCluster,
      protos.google.cloud.telcoautomation.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single OrchestrationCluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.delete_orchestration_cluster.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_DeleteOrchestrationCluster_async
   */
  deleteOrchestrationCluster(
    request?: protos.google.cloud.telcoautomation.v1.IDeleteOrchestrationClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteOrchestrationCluster(
    request: protos.google.cloud.telcoautomation.v1.IDeleteOrchestrationClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteOrchestrationCluster(
    request: protos.google.cloud.telcoautomation.v1.IDeleteOrchestrationClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteOrchestrationCluster(
    request?: protos.google.cloud.telcoautomation.v1.IDeleteOrchestrationClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.telcoautomation.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteOrchestrationCluster(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteOrchestrationCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.delete_orchestration_cluster.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_DeleteOrchestrationCluster_async
   */
  async checkDeleteOrchestrationClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.telcoautomation.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteOrchestrationCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.telcoautomation.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new EdgeSlm in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.edgeSlmId
   *   Required. Id of the requesting object
   *   If auto-generating Id server-side, remove this field and
   *   edge_slm_id from the method_signature of Create RPC
   * @param {google.cloud.telcoautomation.v1.EdgeSlm} request.edgeSlm
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.create_edge_slm.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_CreateEdgeSlm_async
   */
  createEdgeSlm(
    request?: protos.google.cloud.telcoautomation.v1.ICreateEdgeSlmRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.telcoautomation.v1.IEdgeSlm,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createEdgeSlm(
    request: protos.google.cloud.telcoautomation.v1.ICreateEdgeSlmRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.telcoautomation.v1.IEdgeSlm,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEdgeSlm(
    request: protos.google.cloud.telcoautomation.v1.ICreateEdgeSlmRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.telcoautomation.v1.IEdgeSlm,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEdgeSlm(
    request?: protos.google.cloud.telcoautomation.v1.ICreateEdgeSlmRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.telcoautomation.v1.IEdgeSlm,
            protos.google.cloud.telcoautomation.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.telcoautomation.v1.IEdgeSlm,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.telcoautomation.v1.IEdgeSlm,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createEdgeSlm(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createEdgeSlm()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.create_edge_slm.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_CreateEdgeSlm_async
   */
  async checkCreateEdgeSlmProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.telcoautomation.v1.EdgeSlm,
      protos.google.cloud.telcoautomation.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createEdgeSlm,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.telcoautomation.v1.EdgeSlm,
      protos.google.cloud.telcoautomation.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single EdgeSlm.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and
   *   the request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.delete_edge_slm.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_DeleteEdgeSlm_async
   */
  deleteEdgeSlm(
    request?: protos.google.cloud.telcoautomation.v1.IDeleteEdgeSlmRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteEdgeSlm(
    request: protos.google.cloud.telcoautomation.v1.IDeleteEdgeSlmRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEdgeSlm(
    request: protos.google.cloud.telcoautomation.v1.IDeleteEdgeSlmRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEdgeSlm(
    request?: protos.google.cloud.telcoautomation.v1.IDeleteEdgeSlmRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.telcoautomation.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.telcoautomation.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteEdgeSlm(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteEdgeSlm()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.delete_edge_slm.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_DeleteEdgeSlm_async
   */
  async checkDeleteEdgeSlmProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.telcoautomation.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteEdgeSlm,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.telcoautomation.v1.OperationMetadata
    >;
  }
  /**
   * Lists OrchestrationClusters in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListOrchestrationClustersRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.telcoautomation.v1.OrchestrationCluster|OrchestrationCluster}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listOrchestrationClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listOrchestrationClusters(
    request?: protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IOrchestrationCluster[],
      protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest | null,
      protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersResponse,
    ]
  >;
  listOrchestrationClusters(
    request: protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest,
      | protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IOrchestrationCluster
    >
  ): void;
  listOrchestrationClusters(
    request: protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest,
      | protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IOrchestrationCluster
    >
  ): void;
  listOrchestrationClusters(
    request?: protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest,
          | protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersResponse
          | null
          | undefined,
          protos.google.cloud.telcoautomation.v1.IOrchestrationCluster
        >,
    callback?: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest,
      | protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IOrchestrationCluster
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IOrchestrationCluster[],
      protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest | null,
      protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listOrchestrationClusters(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListOrchestrationClustersRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.telcoautomation.v1.OrchestrationCluster|OrchestrationCluster} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listOrchestrationClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listOrchestrationClustersStream(
    request?: protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOrchestrationClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOrchestrationClusters.createStream(
      this.innerApiCalls.listOrchestrationClusters as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listOrchestrationClusters`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListOrchestrationClustersRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results.
   * @param {string} request.orderBy
   *   Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.telcoautomation.v1.OrchestrationCluster|OrchestrationCluster}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.list_orchestration_clusters.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ListOrchestrationClusters_async
   */
  listOrchestrationClustersAsync(
    request?: protos.google.cloud.telcoautomation.v1.IListOrchestrationClustersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.telcoautomation.v1.IOrchestrationCluster> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOrchestrationClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOrchestrationClusters.asyncIterate(
      this.innerApiCalls['listOrchestrationClusters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.telcoautomation.v1.IOrchestrationCluster>;
  }
  /**
   * Lists EdgeSlms in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListEdgeSlmsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.telcoautomation.v1.EdgeSlm|EdgeSlm}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listEdgeSlmsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEdgeSlms(
    request?: protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IEdgeSlm[],
      protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListEdgeSlmsResponse,
    ]
  >;
  listEdgeSlms(
    request: protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest,
      | protos.google.cloud.telcoautomation.v1.IListEdgeSlmsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IEdgeSlm
    >
  ): void;
  listEdgeSlms(
    request: protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest,
      | protos.google.cloud.telcoautomation.v1.IListEdgeSlmsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IEdgeSlm
    >
  ): void;
  listEdgeSlms(
    request?: protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest,
          | protos.google.cloud.telcoautomation.v1.IListEdgeSlmsResponse
          | null
          | undefined,
          protos.google.cloud.telcoautomation.v1.IEdgeSlm
        >,
    callback?: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest,
      | protos.google.cloud.telcoautomation.v1.IListEdgeSlmsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IEdgeSlm
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IEdgeSlm[],
      protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListEdgeSlmsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listEdgeSlms(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListEdgeSlmsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.telcoautomation.v1.EdgeSlm|EdgeSlm} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listEdgeSlmsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEdgeSlmsStream(
    request?: protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEdgeSlms'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEdgeSlms.createStream(
      this.innerApiCalls.listEdgeSlms as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listEdgeSlms`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListEdgeSlmsRequest
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.telcoautomation.v1.EdgeSlm|EdgeSlm}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.list_edge_slms.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ListEdgeSlms_async
   */
  listEdgeSlmsAsync(
    request?: protos.google.cloud.telcoautomation.v1.IListEdgeSlmsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.telcoautomation.v1.IEdgeSlm> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEdgeSlms'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEdgeSlms.asyncIterate(
      this.innerApiCalls['listEdgeSlms'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.telcoautomation.v1.IEdgeSlm>;
  }
  /**
   * List all blueprints.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} [request.filter]
   *   Optional. Filtering only supports equality on blueprint state.
   *   It should be in the form: "state = DRAFT". `OR` operator can be used to
   *   get response for multiple states. e.g. "state = DRAFT OR state = PROPOSED".
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of blueprints to return per page.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListBlueprints call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listBlueprintsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBlueprints(
    request?: protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint[],
      protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListBlueprintsResponse,
    ]
  >;
  listBlueprints(
    request: protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest,
      | protos.google.cloud.telcoautomation.v1.IListBlueprintsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IBlueprint
    >
  ): void;
  listBlueprints(
    request: protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest,
      | protos.google.cloud.telcoautomation.v1.IListBlueprintsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IBlueprint
    >
  ): void;
  listBlueprints(
    request?: protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest,
          | protos.google.cloud.telcoautomation.v1.IListBlueprintsResponse
          | null
          | undefined,
          protos.google.cloud.telcoautomation.v1.IBlueprint
        >,
    callback?: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest,
      | protos.google.cloud.telcoautomation.v1.IListBlueprintsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IBlueprint
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint[],
      protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListBlueprintsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listBlueprints(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} [request.filter]
   *   Optional. Filtering only supports equality on blueprint state.
   *   It should be in the form: "state = DRAFT". `OR` operator can be used to
   *   get response for multiple states. e.g. "state = DRAFT OR state = PROPOSED".
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of blueprints to return per page.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListBlueprints call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listBlueprintsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBlueprintsStream(
    request?: protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBlueprints'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBlueprints.createStream(
      this.innerApiCalls.listBlueprints as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listBlueprints`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} [request.filter]
   *   Optional. Filtering only supports equality on blueprint state.
   *   It should be in the form: "state = DRAFT". `OR` operator can be used to
   *   get response for multiple states. e.g. "state = DRAFT OR state = PROPOSED".
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of blueprints to return per page.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListBlueprints call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.list_blueprints.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ListBlueprints_async
   */
  listBlueprintsAsync(
    request?: protos.google.cloud.telcoautomation.v1.IListBlueprintsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.telcoautomation.v1.IBlueprint> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listBlueprints'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBlueprints.asyncIterate(
      this.innerApiCalls['listBlueprints'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.telcoautomation.v1.IBlueprint>;
  }
  /**
   * List blueprint revisions of a given blueprint.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the blueprint to list revisions for.
   * @param {number} request.pageSize
   *   The maximum number of revisions to return per page.
   * @param {string} request.pageToken
   *   The page token, received from a previous ListBlueprintRevisions call
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listBlueprintRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBlueprintRevisions(
    request?: protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint[],
      protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsResponse,
    ]
  >;
  listBlueprintRevisions(
    request: protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IBlueprint
    >
  ): void;
  listBlueprintRevisions(
    request: protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IBlueprint
    >
  ): void;
  listBlueprintRevisions(
    request?: protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest,
          | protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsResponse
          | null
          | undefined,
          protos.google.cloud.telcoautomation.v1.IBlueprint
        >,
    callback?: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IBlueprint
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint[],
      protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listBlueprintRevisions(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the blueprint to list revisions for.
   * @param {number} request.pageSize
   *   The maximum number of revisions to return per page.
   * @param {string} request.pageToken
   *   The page token, received from a previous ListBlueprintRevisions call
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listBlueprintRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listBlueprintRevisionsStream(
    request?: protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['listBlueprintRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBlueprintRevisions.createStream(
      this.innerApiCalls.listBlueprintRevisions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listBlueprintRevisions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the blueprint to list revisions for.
   * @param {number} request.pageSize
   *   The maximum number of revisions to return per page.
   * @param {string} request.pageToken
   *   The page token, received from a previous ListBlueprintRevisions call
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.list_blueprint_revisions.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ListBlueprintRevisions_async
   */
  listBlueprintRevisionsAsync(
    request?: protos.google.cloud.telcoautomation.v1.IListBlueprintRevisionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.telcoautomation.v1.IBlueprint> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['listBlueprintRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBlueprintRevisions.asyncIterate(
      this.innerApiCalls['listBlueprintRevisions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.telcoautomation.v1.IBlueprint>;
  }
  /**
   * Searches across blueprint revisions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} request.query
   *   Required. Supported queries:
   *   1. ""                       : Lists all revisions across all blueprints.
   *   2. "latest=true"            : Lists latest revisions across all blueprints.
   *   3. "name={name}"            : Lists all revisions of blueprint with name
   *   {name}.
   *   4. "name={name} latest=true": Lists latest revision of blueprint with name
   *   {name}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of blueprints revisions to return per page.
   *   max page size = 100, default page size = 20.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous search call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `searchBlueprintRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchBlueprintRevisions(
    request?: protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint[],
      protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest | null,
      protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsResponse,
    ]
  >;
  searchBlueprintRevisions(
    request: protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IBlueprint
    >
  ): void;
  searchBlueprintRevisions(
    request: protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IBlueprint
    >
  ): void;
  searchBlueprintRevisions(
    request?: protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest,
          | protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsResponse
          | null
          | undefined,
          protos.google.cloud.telcoautomation.v1.IBlueprint
        >,
    callback?: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IBlueprint
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IBlueprint[],
      protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest | null,
      protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.searchBlueprintRevisions(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} request.query
   *   Required. Supported queries:
   *   1. ""                       : Lists all revisions across all blueprints.
   *   2. "latest=true"            : Lists latest revisions across all blueprints.
   *   3. "name={name}"            : Lists all revisions of blueprint with name
   *   {name}.
   *   4. "name={name} latest=true": Lists latest revision of blueprint with name
   *   {name}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of blueprints revisions to return per page.
   *   max page size = 100, default page size = 20.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous search call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `searchBlueprintRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchBlueprintRevisionsStream(
    request?: protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['searchBlueprintRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchBlueprintRevisions.createStream(
      this.innerApiCalls.searchBlueprintRevisions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `searchBlueprintRevisions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} request.query
   *   Required. Supported queries:
   *   1. ""                       : Lists all revisions across all blueprints.
   *   2. "latest=true"            : Lists latest revisions across all blueprints.
   *   3. "name={name}"            : Lists all revisions of blueprint with name
   *   {name}.
   *   4. "name={name} latest=true": Lists latest revision of blueprint with name
   *   {name}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of blueprints revisions to return per page.
   *   max page size = 100, default page size = 20.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous search call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.telcoautomation.v1.Blueprint|Blueprint}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.search_blueprint_revisions.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_SearchBlueprintRevisions_async
   */
  searchBlueprintRevisionsAsync(
    request?: protos.google.cloud.telcoautomation.v1.ISearchBlueprintRevisionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.telcoautomation.v1.IBlueprint> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['searchBlueprintRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchBlueprintRevisions.asyncIterate(
      this.innerApiCalls['searchBlueprintRevisions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.telcoautomation.v1.IBlueprint>;
  }
  /**
   * Searches across deployment revisions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} request.query
   *   Required. Supported queries:
   *   1. ""                       : Lists all revisions across all deployments.
   *   2. "latest=true"            : Lists latest revisions across all
   *   deployments.
   *   3. "name={name}"            : Lists all revisions of deployment with name
   *   {name}.
   *   4. "name={name} latest=true": Lists latest revision of deployment with name
   *   {name}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of deployment revisions to return per page.
   *   max page size = 100, default page size = 20.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous search call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `searchDeploymentRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchDeploymentRevisions(
    request?: protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment[],
      protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest | null,
      protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsResponse,
    ]
  >;
  searchDeploymentRevisions(
    request: protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IDeployment
    >
  ): void;
  searchDeploymentRevisions(
    request: protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IDeployment
    >
  ): void;
  searchDeploymentRevisions(
    request?: protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest,
          | protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsResponse
          | null
          | undefined,
          protos.google.cloud.telcoautomation.v1.IDeployment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IDeployment
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment[],
      protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest | null,
      protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.searchDeploymentRevisions(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} request.query
   *   Required. Supported queries:
   *   1. ""                       : Lists all revisions across all deployments.
   *   2. "latest=true"            : Lists latest revisions across all
   *   deployments.
   *   3. "name={name}"            : Lists all revisions of deployment with name
   *   {name}.
   *   4. "name={name} latest=true": Lists latest revision of deployment with name
   *   {name}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of deployment revisions to return per page.
   *   max page size = 100, default page size = 20.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous search call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `searchDeploymentRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchDeploymentRevisionsStream(
    request?: protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['searchDeploymentRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchDeploymentRevisions.createStream(
      this.innerApiCalls.searchDeploymentRevisions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `searchDeploymentRevisions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} request.query
   *   Required. Supported queries:
   *   1. ""                       : Lists all revisions across all deployments.
   *   2. "latest=true"            : Lists latest revisions across all
   *   deployments.
   *   3. "name={name}"            : Lists all revisions of deployment with name
   *   {name}.
   *   4. "name={name} latest=true": Lists latest revision of deployment with name
   *   {name}
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of deployment revisions to return per page.
   *   max page size = 100, default page size = 20.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous search call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.search_deployment_revisions.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_SearchDeploymentRevisions_async
   */
  searchDeploymentRevisionsAsync(
    request?: protos.google.cloud.telcoautomation.v1.ISearchDeploymentRevisionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.telcoautomation.v1.IDeployment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['searchDeploymentRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchDeploymentRevisions.asyncIterate(
      this.innerApiCalls['searchDeploymentRevisions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.telcoautomation.v1.IDeployment>;
  }
  /**
   * Lists the blueprints in TNA's public catalog. Default page size = 20,
   * Max Page Size = 100.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value of public blueprint.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}".
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.telcoautomation.v1.PublicBlueprint|PublicBlueprint}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPublicBlueprintsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPublicBlueprints(
    request?: protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IPublicBlueprint[],
      protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsResponse,
    ]
  >;
  listPublicBlueprints(
    request: protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest,
      | protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IPublicBlueprint
    >
  ): void;
  listPublicBlueprints(
    request: protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest,
      | protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IPublicBlueprint
    >
  ): void;
  listPublicBlueprints(
    request?: protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest,
          | protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsResponse
          | null
          | undefined,
          protos.google.cloud.telcoautomation.v1.IPublicBlueprint
        >,
    callback?: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest,
      | protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IPublicBlueprint
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IPublicBlueprint[],
      protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPublicBlueprints(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value of public blueprint.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}".
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.telcoautomation.v1.PublicBlueprint|PublicBlueprint} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPublicBlueprintsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPublicBlueprintsStream(
    request?: protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPublicBlueprints'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPublicBlueprints.createStream(
      this.innerApiCalls.listPublicBlueprints as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPublicBlueprints`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value of public blueprint.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}".
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.telcoautomation.v1.PublicBlueprint|PublicBlueprint}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.list_public_blueprints.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ListPublicBlueprints_async
   */
  listPublicBlueprintsAsync(
    request?: protos.google.cloud.telcoautomation.v1.IListPublicBlueprintsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.telcoautomation.v1.IPublicBlueprint> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPublicBlueprints'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPublicBlueprints.asyncIterate(
      this.innerApiCalls['listPublicBlueprints'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.telcoautomation.v1.IPublicBlueprint>;
  }
  /**
   * List all deployments.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} [request.filter]
   *   Optional. Filtering only supports equality on deployment state.
   *   It should be in the form: "state = DRAFT". `OR` operator can be used to
   *   get response for multiple states. e.g. "state = DRAFT OR state = APPLIED".
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of deployments to return per page.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListDeployments call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDeployments(
    request?: protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment[],
      protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListDeploymentsResponse,
    ]
  >;
  listDeployments(
    request: protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest,
      | protos.google.cloud.telcoautomation.v1.IListDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IDeployment
    >
  ): void;
  listDeployments(
    request: protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest,
      | protos.google.cloud.telcoautomation.v1.IListDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IDeployment
    >
  ): void;
  listDeployments(
    request?: protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest,
          | protos.google.cloud.telcoautomation.v1.IListDeploymentsResponse
          | null
          | undefined,
          protos.google.cloud.telcoautomation.v1.IDeployment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest,
      | protos.google.cloud.telcoautomation.v1.IListDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IDeployment
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment[],
      protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListDeploymentsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDeployments(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} [request.filter]
   *   Optional. Filtering only supports equality on deployment state.
   *   It should be in the form: "state = DRAFT". `OR` operator can be used to
   *   get response for multiple states. e.g. "state = DRAFT OR state = APPLIED".
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of deployments to return per page.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListDeployments call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDeploymentsStream(
    request?: protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeployments.createStream(
      this.innerApiCalls.listDeployments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDeployments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of parent orchestration cluster resource.
   *   Format should be -
   *   "projects/{project_id}/locations/{location_name}/orchestrationClusters/{orchestration_cluster}".
   * @param {string} [request.filter]
   *   Optional. Filtering only supports equality on deployment state.
   *   It should be in the form: "state = DRAFT". `OR` operator can be used to
   *   get response for multiple states. e.g. "state = DRAFT OR state = APPLIED".
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of deployments to return per page.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListDeployments call.
   *   It can be provided to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.list_deployments.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ListDeployments_async
   */
  listDeploymentsAsync(
    request?: protos.google.cloud.telcoautomation.v1.IListDeploymentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.telcoautomation.v1.IDeployment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeployments.asyncIterate(
      this.innerApiCalls['listDeployments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.telcoautomation.v1.IDeployment>;
  }
  /**
   * List deployment revisions of a given deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment to list revisions for.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of revisions to return per page.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListDeploymentRevisions
   *   call Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDeploymentRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDeploymentRevisions(
    request?: protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment[],
      protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsResponse,
    ]
  >;
  listDeploymentRevisions(
    request: protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IDeployment
    >
  ): void;
  listDeploymentRevisions(
    request: protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IDeployment
    >
  ): void;
  listDeploymentRevisions(
    request?: protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest,
          | protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsResponse
          | null
          | undefined,
          protos.google.cloud.telcoautomation.v1.IDeployment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest,
      | protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IDeployment
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IDeployment[],
      protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDeploymentRevisions(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment to list revisions for.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of revisions to return per page.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListDeploymentRevisions
   *   call Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDeploymentRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDeploymentRevisionsStream(
    request?: protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['listDeploymentRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeploymentRevisions.createStream(
      this.innerApiCalls.listDeploymentRevisions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDeploymentRevisions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment to list revisions for.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of revisions to return per page.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListDeploymentRevisions
   *   call Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.telcoautomation.v1.Deployment|Deployment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.list_deployment_revisions.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ListDeploymentRevisions_async
   */
  listDeploymentRevisionsAsync(
    request?: protos.google.cloud.telcoautomation.v1.IListDeploymentRevisionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.telcoautomation.v1.IDeployment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['listDeploymentRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeploymentRevisions.asyncIterate(
      this.innerApiCalls['listDeploymentRevisions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.telcoautomation.v1.IDeployment>;
  }
  /**
   * List all hydrated deployments present under a deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The deployment managing the hydrated deployments.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of hydrated deployments to return. The service
   *   may return fewer than this value. If unspecified, at most 50 hydrated
   *   deployments will be returned. The maximum value is 1000. Values above 1000
   *   will be set to 1000.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListHydratedDeployments
   *   call. Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.telcoautomation.v1.HydratedDeployment|HydratedDeployment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listHydratedDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listHydratedDeployments(
    request?: protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment[],
      protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsResponse,
    ]
  >;
  listHydratedDeployments(
    request: protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest,
      | protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment
    >
  ): void;
  listHydratedDeployments(
    request: protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest,
      | protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment
    >
  ): void;
  listHydratedDeployments(
    request?: protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest,
          | protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsResponse
          | null
          | undefined,
          protos.google.cloud.telcoautomation.v1.IHydratedDeployment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest,
      | protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsResponse
      | null
      | undefined,
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment
    >
  ): Promise<
    [
      protos.google.cloud.telcoautomation.v1.IHydratedDeployment[],
      protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest | null,
      protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listHydratedDeployments(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The deployment managing the hydrated deployments.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of hydrated deployments to return. The service
   *   may return fewer than this value. If unspecified, at most 50 hydrated
   *   deployments will be returned. The maximum value is 1000. Values above 1000
   *   will be set to 1000.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListHydratedDeployments
   *   call. Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.telcoautomation.v1.HydratedDeployment|HydratedDeployment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listHydratedDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listHydratedDeploymentsStream(
    request?: protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listHydratedDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listHydratedDeployments.createStream(
      this.innerApiCalls.listHydratedDeployments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listHydratedDeployments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The deployment managing the hydrated deployments.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of hydrated deployments to return. The service
   *   may return fewer than this value. If unspecified, at most 50 hydrated
   *   deployments will be returned. The maximum value is 1000. Values above 1000
   *   will be set to 1000.
   * @param {string} [request.pageToken]
   *   Optional. The page token, received from a previous ListHydratedDeployments
   *   call. Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.telcoautomation.v1.HydratedDeployment|HydratedDeployment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/telco_automation.list_hydrated_deployments.js</caption>
   * region_tag:telcoautomation_v1_generated_TelcoAutomation_ListHydratedDeployments_async
   */
  listHydratedDeploymentsAsync(
    request?: protos.google.cloud.telcoautomation.v1.IListHydratedDeploymentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.telcoautomation.v1.IHydratedDeployment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listHydratedDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listHydratedDeployments.asyncIterate(
      this.innerApiCalls['listHydratedDeployments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.telcoautomation.v1.IHydratedDeployment>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified blueprint resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} orchestration_cluster
   * @param {string} blueprint
   * @returns {string} Resource name string.
   */
  blueprintPath(
    project: string,
    location: string,
    orchestrationCluster: string,
    blueprint: string
  ) {
    return this.pathTemplates.blueprintPathTemplate.render({
      project: project,
      location: location,
      orchestration_cluster: orchestrationCluster,
      blueprint: blueprint,
    });
  }

  /**
   * Parse the project from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName)
      .project;
  }

  /**
   * Parse the location from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName)
      .location;
  }

  /**
   * Parse the orchestration_cluster from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the orchestration_cluster.
   */
  matchOrchestrationClusterFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName)
      .orchestration_cluster;
  }

  /**
   * Parse the blueprint from Blueprint resource.
   *
   * @param {string} blueprintName
   *   A fully-qualified path representing Blueprint resource.
   * @returns {string} A string representing the blueprint.
   */
  matchBlueprintFromBlueprintName(blueprintName: string) {
    return this.pathTemplates.blueprintPathTemplate.match(blueprintName)
      .blueprint;
  }

  /**
   * Return a fully-qualified deployment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} orchestration_cluster
   * @param {string} deployment
   * @returns {string} Resource name string.
   */
  deploymentPath(
    project: string,
    location: string,
    orchestrationCluster: string,
    deployment: string
  ) {
    return this.pathTemplates.deploymentPathTemplate.render({
      project: project,
      location: location,
      orchestration_cluster: orchestrationCluster,
      deployment: deployment,
    });
  }

  /**
   * Parse the project from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .project;
  }

  /**
   * Parse the location from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .location;
  }

  /**
   * Parse the orchestration_cluster from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the orchestration_cluster.
   */
  matchOrchestrationClusterFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .orchestration_cluster;
  }

  /**
   * Parse the deployment from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .deployment;
  }

  /**
   * Return a fully-qualified edgeSlm resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} edge_slm
   * @returns {string} Resource name string.
   */
  edgeSlmPath(project: string, location: string, edgeSlm: string) {
    return this.pathTemplates.edgeSlmPathTemplate.render({
      project: project,
      location: location,
      edge_slm: edgeSlm,
    });
  }

  /**
   * Parse the project from EdgeSlm resource.
   *
   * @param {string} edgeSlmName
   *   A fully-qualified path representing EdgeSlm resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEdgeSlmName(edgeSlmName: string) {
    return this.pathTemplates.edgeSlmPathTemplate.match(edgeSlmName).project;
  }

  /**
   * Parse the location from EdgeSlm resource.
   *
   * @param {string} edgeSlmName
   *   A fully-qualified path representing EdgeSlm resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEdgeSlmName(edgeSlmName: string) {
    return this.pathTemplates.edgeSlmPathTemplate.match(edgeSlmName).location;
  }

  /**
   * Parse the edge_slm from EdgeSlm resource.
   *
   * @param {string} edgeSlmName
   *   A fully-qualified path representing EdgeSlm resource.
   * @returns {string} A string representing the edge_slm.
   */
  matchEdgeSlmFromEdgeSlmName(edgeSlmName: string) {
    return this.pathTemplates.edgeSlmPathTemplate.match(edgeSlmName).edge_slm;
  }

  /**
   * Return a fully-qualified hydratedDeployment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} orchestration_cluster
   * @param {string} deployment
   * @param {string} hydrated_deployment
   * @returns {string} Resource name string.
   */
  hydratedDeploymentPath(
    project: string,
    location: string,
    orchestrationCluster: string,
    deployment: string,
    hydratedDeployment: string
  ) {
    return this.pathTemplates.hydratedDeploymentPathTemplate.render({
      project: project,
      location: location,
      orchestration_cluster: orchestrationCluster,
      deployment: deployment,
      hydrated_deployment: hydratedDeployment,
    });
  }

  /**
   * Parse the project from HydratedDeployment resource.
   *
   * @param {string} hydratedDeploymentName
   *   A fully-qualified path representing HydratedDeployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHydratedDeploymentName(hydratedDeploymentName: string) {
    return this.pathTemplates.hydratedDeploymentPathTemplate.match(
      hydratedDeploymentName
    ).project;
  }

  /**
   * Parse the location from HydratedDeployment resource.
   *
   * @param {string} hydratedDeploymentName
   *   A fully-qualified path representing HydratedDeployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromHydratedDeploymentName(hydratedDeploymentName: string) {
    return this.pathTemplates.hydratedDeploymentPathTemplate.match(
      hydratedDeploymentName
    ).location;
  }

  /**
   * Parse the orchestration_cluster from HydratedDeployment resource.
   *
   * @param {string} hydratedDeploymentName
   *   A fully-qualified path representing HydratedDeployment resource.
   * @returns {string} A string representing the orchestration_cluster.
   */
  matchOrchestrationClusterFromHydratedDeploymentName(
    hydratedDeploymentName: string
  ) {
    return this.pathTemplates.hydratedDeploymentPathTemplate.match(
      hydratedDeploymentName
    ).orchestration_cluster;
  }

  /**
   * Parse the deployment from HydratedDeployment resource.
   *
   * @param {string} hydratedDeploymentName
   *   A fully-qualified path representing HydratedDeployment resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromHydratedDeploymentName(hydratedDeploymentName: string) {
    return this.pathTemplates.hydratedDeploymentPathTemplate.match(
      hydratedDeploymentName
    ).deployment;
  }

  /**
   * Parse the hydrated_deployment from HydratedDeployment resource.
   *
   * @param {string} hydratedDeploymentName
   *   A fully-qualified path representing HydratedDeployment resource.
   * @returns {string} A string representing the hydrated_deployment.
   */
  matchHydratedDeploymentFromHydratedDeploymentName(
    hydratedDeploymentName: string
  ) {
    return this.pathTemplates.hydratedDeploymentPathTemplate.match(
      hydratedDeploymentName
    ).hydrated_deployment;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified orchestrationCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} orchestration_cluster
   * @returns {string} Resource name string.
   */
  orchestrationClusterPath(
    project: string,
    location: string,
    orchestrationCluster: string
  ) {
    return this.pathTemplates.orchestrationClusterPathTemplate.render({
      project: project,
      location: location,
      orchestration_cluster: orchestrationCluster,
    });
  }

  /**
   * Parse the project from OrchestrationCluster resource.
   *
   * @param {string} orchestrationClusterName
   *   A fully-qualified path representing OrchestrationCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromOrchestrationClusterName(orchestrationClusterName: string) {
    return this.pathTemplates.orchestrationClusterPathTemplate.match(
      orchestrationClusterName
    ).project;
  }

  /**
   * Parse the location from OrchestrationCluster resource.
   *
   * @param {string} orchestrationClusterName
   *   A fully-qualified path representing OrchestrationCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrchestrationClusterName(orchestrationClusterName: string) {
    return this.pathTemplates.orchestrationClusterPathTemplate.match(
      orchestrationClusterName
    ).location;
  }

  /**
   * Parse the orchestration_cluster from OrchestrationCluster resource.
   *
   * @param {string} orchestrationClusterName
   *   A fully-qualified path representing OrchestrationCluster resource.
   * @returns {string} A string representing the orchestration_cluster.
   */
  matchOrchestrationClusterFromOrchestrationClusterName(
    orchestrationClusterName: string
  ) {
    return this.pathTemplates.orchestrationClusterPathTemplate.match(
      orchestrationClusterName
    ).orchestration_cluster;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified publicBlueprint resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} public_lueprint
   * @returns {string} Resource name string.
   */
  publicBlueprintPath(
    project: string,
    location: string,
    publicLueprint: string
  ) {
    return this.pathTemplates.publicBlueprintPathTemplate.render({
      project: project,
      location: location,
      public_lueprint: publicLueprint,
    });
  }

  /**
   * Parse the project from PublicBlueprint resource.
   *
   * @param {string} publicBlueprintName
   *   A fully-qualified path representing PublicBlueprint resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPublicBlueprintName(publicBlueprintName: string) {
    return this.pathTemplates.publicBlueprintPathTemplate.match(
      publicBlueprintName
    ).project;
  }

  /**
   * Parse the location from PublicBlueprint resource.
   *
   * @param {string} publicBlueprintName
   *   A fully-qualified path representing PublicBlueprint resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPublicBlueprintName(publicBlueprintName: string) {
    return this.pathTemplates.publicBlueprintPathTemplate.match(
      publicBlueprintName
    ).location;
  }

  /**
   * Parse the public_lueprint from PublicBlueprint resource.
   *
   * @param {string} publicBlueprintName
   *   A fully-qualified path representing PublicBlueprint resource.
   * @returns {string} A string representing the public_lueprint.
   */
  matchPublicLueprintFromPublicBlueprintName(publicBlueprintName: string) {
    return this.pathTemplates.publicBlueprintPathTemplate.match(
      publicBlueprintName
    ).public_lueprint;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.telcoAutomationStub && !this._terminated) {
      return this.telcoAutomationStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
