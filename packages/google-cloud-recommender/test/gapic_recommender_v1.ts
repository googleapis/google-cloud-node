// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as recommenderModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.RecommenderClient', () => {
  it('has servicePath', () => {
    const servicePath = recommenderModule.v1.RecommenderClient.servicePath;
    assert(servicePath);
  });

  it('has apiEndpoint', () => {
    const apiEndpoint = recommenderModule.v1.RecommenderClient.apiEndpoint;
    assert(apiEndpoint);
  });

  it('has port', () => {
    const port = recommenderModule.v1.RecommenderClient.port;
    assert(port);
    assert(typeof port === 'number');
  });

  it('should create a client with no option', () => {
    const client = new recommenderModule.v1.RecommenderClient();
    assert(client);
  });

  it('should create a client with gRPC fallback', () => {
    const client = new recommenderModule.v1.RecommenderClient({
      fallback: true,
    });
    assert(client);
  });

  it('has initialize method and supports deferred initialization', async () => {
    const client = new recommenderModule.v1.RecommenderClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert.strictEqual(client.recommenderStub, undefined);
    await client.initialize();
    assert(client.recommenderStub);
  });

  it('has close method', () => {
    const client = new recommenderModule.v1.RecommenderClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.close();
  });

  it('has getProjectId method', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new recommenderModule.v1.RecommenderClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
    const result = await client.getProjectId();
    assert.strictEqual(result, fakeProjectId);
    assert((client.auth.getProjectId as SinonStub).calledWithExactly());
  });

  it('has getProjectId method with callback', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new recommenderModule.v1.RecommenderClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon
      .stub()
      .callsArgWith(0, null, fakeProjectId);
    const promise = new Promise((resolve, reject) => {
      client.getProjectId((err?: Error | null, projectId?: string | null) => {
        if (err) {
          reject(err);
        } else {
          resolve(projectId);
        }
      });
    });
    const result = await promise;
    assert.strictEqual(result, fakeProjectId);
  });

  describe('getInsight', () => {
    it('invokes getInsight without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.GetInsightRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Insight()
      );
      client.innerApiCalls.getInsight = stubSimpleCall(expectedResponse);
      const [response] = await client.getInsight(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getInsight as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getInsight without error using callback', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.GetInsightRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Insight()
      );
      client.innerApiCalls.getInsight =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getInsight(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recommender.v1.IInsight | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getInsight as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getInsight with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.GetInsightRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getInsight = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getInsight(request), expectedError);
      assert(
        (client.innerApiCalls.getInsight as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('markInsightAccepted', () => {
    it('invokes markInsightAccepted without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkInsightAcceptedRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Insight()
      );
      client.innerApiCalls.markInsightAccepted =
        stubSimpleCall(expectedResponse);
      const [response] = await client.markInsightAccepted(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.markInsightAccepted as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes markInsightAccepted without error using callback', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkInsightAcceptedRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Insight()
      );
      client.innerApiCalls.markInsightAccepted =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.markInsightAccepted(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recommender.v1.IInsight | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.markInsightAccepted as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes markInsightAccepted with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkInsightAcceptedRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.markInsightAccepted = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.markInsightAccepted(request), expectedError);
      assert(
        (client.innerApiCalls.markInsightAccepted as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('getRecommendation', () => {
    it('invokes getRecommendation without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.GetRecommendationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Recommendation()
      );
      client.innerApiCalls.getRecommendation = stubSimpleCall(expectedResponse);
      const [response] = await client.getRecommendation(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getRecommendation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getRecommendation without error using callback', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.GetRecommendationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Recommendation()
      );
      client.innerApiCalls.getRecommendation =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getRecommendation(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recommender.v1.IRecommendation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getRecommendation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getRecommendation with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.GetRecommendationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getRecommendation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getRecommendation(request), expectedError);
      assert(
        (client.innerApiCalls.getRecommendation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('markRecommendationClaimed', () => {
    it('invokes markRecommendationClaimed without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkRecommendationClaimedRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Recommendation()
      );
      client.innerApiCalls.markRecommendationClaimed =
        stubSimpleCall(expectedResponse);
      const [response] = await client.markRecommendationClaimed(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.markRecommendationClaimed as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes markRecommendationClaimed without error using callback', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkRecommendationClaimedRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Recommendation()
      );
      client.innerApiCalls.markRecommendationClaimed =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.markRecommendationClaimed(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recommender.v1.IRecommendation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.markRecommendationClaimed as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes markRecommendationClaimed with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkRecommendationClaimedRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.markRecommendationClaimed = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.markRecommendationClaimed(request),
        expectedError
      );
      assert(
        (client.innerApiCalls.markRecommendationClaimed as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('markRecommendationSucceeded', () => {
    it('invokes markRecommendationSucceeded without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkRecommendationSucceededRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Recommendation()
      );
      client.innerApiCalls.markRecommendationSucceeded =
        stubSimpleCall(expectedResponse);
      const [response] = await client.markRecommendationSucceeded(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.markRecommendationSucceeded as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes markRecommendationSucceeded without error using callback', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkRecommendationSucceededRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Recommendation()
      );
      client.innerApiCalls.markRecommendationSucceeded =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.markRecommendationSucceeded(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recommender.v1.IRecommendation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.markRecommendationSucceeded as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes markRecommendationSucceeded with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkRecommendationSucceededRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.markRecommendationSucceeded = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.markRecommendationSucceeded(request),
        expectedError
      );
      assert(
        (client.innerApiCalls.markRecommendationSucceeded as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('markRecommendationFailed', () => {
    it('invokes markRecommendationFailed without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkRecommendationFailedRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Recommendation()
      );
      client.innerApiCalls.markRecommendationFailed =
        stubSimpleCall(expectedResponse);
      const [response] = await client.markRecommendationFailed(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.markRecommendationFailed as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes markRecommendationFailed without error using callback', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkRecommendationFailedRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.recommender.v1.Recommendation()
      );
      client.innerApiCalls.markRecommendationFailed =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.markRecommendationFailed(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recommender.v1.IRecommendation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.markRecommendationFailed as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes markRecommendationFailed with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.MarkRecommendationFailedRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.markRecommendationFailed = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.markRecommendationFailed(request),
        expectedError
      );
      assert(
        (client.innerApiCalls.markRecommendationFailed as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('listInsights', () => {
    it('invokes listInsights without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListInsightsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
      ];
      client.innerApiCalls.listInsights = stubSimpleCall(expectedResponse);
      const [response] = await client.listInsights(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listInsights as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listInsights without error using callback', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListInsightsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
      ];
      client.innerApiCalls.listInsights =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listInsights(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recommender.v1.IInsight[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listInsights as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listInsights with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListInsightsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listInsights = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listInsights(request), expectedError);
      assert(
        (client.innerApiCalls.listInsights as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listInsightsStream without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListInsightsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
      ];
      client.descriptors.page.listInsights.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listInsightsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recommender.v1.Insight[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.recommender.v1.Insight) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listInsights.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listInsights, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listInsights.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listInsightsStream with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListInsightsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listInsights.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listInsightsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recommender.v1.Insight[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.recommender.v1.Insight) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listInsights.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listInsights, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listInsights.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listInsights without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListInsightsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
        generateSampleMessage(new protos.google.cloud.recommender.v1.Insight()),
      ];
      client.descriptors.page.listInsights.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.recommender.v1.IInsight[] = [];
      const iterable = client.listInsightsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listInsights.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listInsights.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listInsights with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListInsightsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listInsights.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listInsightsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.recommender.v1.IInsight[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listInsights.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listInsights.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listRecommendations', () => {
    it('invokes listRecommendations without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListRecommendationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
      ];
      client.innerApiCalls.listRecommendations =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listRecommendations(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listRecommendations as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listRecommendations without error using callback', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListRecommendationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
      ];
      client.innerApiCalls.listRecommendations =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listRecommendations(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.recommender.v1.IRecommendation[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listRecommendations as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listRecommendations with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListRecommendationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listRecommendations = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listRecommendations(request), expectedError);
      assert(
        (client.innerApiCalls.listRecommendations as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listRecommendationsStream without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListRecommendationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
      ];
      client.descriptors.page.listRecommendations.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listRecommendationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recommender.v1.Recommendation[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.recommender.v1.Recommendation) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listRecommendations.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRecommendations, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listRecommendations.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listRecommendationsStream with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListRecommendationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listRecommendations.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listRecommendationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.recommender.v1.Recommendation[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.recommender.v1.Recommendation) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listRecommendations.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRecommendations, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listRecommendations.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listRecommendations without error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListRecommendationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
        generateSampleMessage(
          new protos.google.cloud.recommender.v1.Recommendation()
        ),
      ];
      client.descriptors.page.listRecommendations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.recommender.v1.IRecommendation[] =
        [];
      const iterable = client.listRecommendationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRecommendations.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listRecommendations.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listRecommendations with error', async () => {
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.recommender.v1.ListRecommendationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listRecommendations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listRecommendationsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.recommender.v1.IRecommendation[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRecommendations.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listRecommendations.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('Path templates', () => {
    describe('billingAccountLocationInsightType', () => {
      const fakePath = '/rendered/path/billingAccountLocationInsightType';
      const expectedParameters = {
        billing_account: 'billingAccountValue',
        location: 'locationValue',
        insight_type: 'insightTypeValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.billingAccountLocationInsightTypePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.billingAccountLocationInsightTypePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('billingAccountLocationInsightTypePath', () => {
        const result = client.billingAccountLocationInsightTypePath(
          'billingAccountValue',
          'locationValue',
          'insightTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.billingAccountLocationInsightTypePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchBillingAccountFromBillingAccountLocationInsightTypeName', () => {
        const result =
          client.matchBillingAccountFromBillingAccountLocationInsightTypeName(
            fakePath
          );
        assert.strictEqual(result, 'billingAccountValue');
        assert(
          (
            client.pathTemplates.billingAccountLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBillingAccountLocationInsightTypeName', () => {
        const result =
          client.matchLocationFromBillingAccountLocationInsightTypeName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.billingAccountLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightTypeFromBillingAccountLocationInsightTypeName', () => {
        const result =
          client.matchInsightTypeFromBillingAccountLocationInsightTypeName(
            fakePath
          );
        assert.strictEqual(result, 'insightTypeValue');
        assert(
          (
            client.pathTemplates.billingAccountLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('billingAccountLocationInsightTypeInsight', () => {
      const fakePath =
        '/rendered/path/billingAccountLocationInsightTypeInsight';
      const expectedParameters = {
        billing_account: 'billingAccountValue',
        location: 'locationValue',
        insight_type: 'insightTypeValue',
        insight: 'insightValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.billingAccountLocationInsightTypeInsightPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.billingAccountLocationInsightTypeInsightPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('billingAccountLocationInsightTypeInsightPath', () => {
        const result = client.billingAccountLocationInsightTypeInsightPath(
          'billingAccountValue',
          'locationValue',
          'insightTypeValue',
          'insightValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .billingAccountLocationInsightTypeInsightPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchBillingAccountFromBillingAccountLocationInsightTypeInsightName', () => {
        const result =
          client.matchBillingAccountFromBillingAccountLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'billingAccountValue');
        assert(
          (
            client.pathTemplates
              .billingAccountLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBillingAccountLocationInsightTypeInsightName', () => {
        const result =
          client.matchLocationFromBillingAccountLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .billingAccountLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightTypeFromBillingAccountLocationInsightTypeInsightName', () => {
        const result =
          client.matchInsightTypeFromBillingAccountLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'insightTypeValue');
        assert(
          (
            client.pathTemplates
              .billingAccountLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightFromBillingAccountLocationInsightTypeInsightName', () => {
        const result =
          client.matchInsightFromBillingAccountLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'insightValue');
        assert(
          (
            client.pathTemplates
              .billingAccountLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('billingAccountLocationRecommender', () => {
      const fakePath = '/rendered/path/billingAccountLocationRecommender';
      const expectedParameters = {
        billing_account: 'billingAccountValue',
        location: 'locationValue',
        recommender: 'recommenderValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.billingAccountLocationRecommenderPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.billingAccountLocationRecommenderPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('billingAccountLocationRecommenderPath', () => {
        const result = client.billingAccountLocationRecommenderPath(
          'billingAccountValue',
          'locationValue',
          'recommenderValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.billingAccountLocationRecommenderPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchBillingAccountFromBillingAccountLocationRecommenderName', () => {
        const result =
          client.matchBillingAccountFromBillingAccountLocationRecommenderName(
            fakePath
          );
        assert.strictEqual(result, 'billingAccountValue');
        assert(
          (
            client.pathTemplates.billingAccountLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBillingAccountLocationRecommenderName', () => {
        const result =
          client.matchLocationFromBillingAccountLocationRecommenderName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.billingAccountLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommenderFromBillingAccountLocationRecommenderName', () => {
        const result =
          client.matchRecommenderFromBillingAccountLocationRecommenderName(
            fakePath
          );
        assert.strictEqual(result, 'recommenderValue');
        assert(
          (
            client.pathTemplates.billingAccountLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('billingAccountLocationRecommenderRecommendation', () => {
      const fakePath =
        '/rendered/path/billingAccountLocationRecommenderRecommendation';
      const expectedParameters = {
        billing_account: 'billingAccountValue',
        location: 'locationValue',
        recommender: 'recommenderValue',
        recommendation: 'recommendationValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.billingAccountLocationRecommenderRecommendationPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.billingAccountLocationRecommenderRecommendationPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('billingAccountLocationRecommenderRecommendationPath', () => {
        const result =
          client.billingAccountLocationRecommenderRecommendationPath(
            'billingAccountValue',
            'locationValue',
            'recommenderValue',
            'recommendationValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .billingAccountLocationRecommenderRecommendationPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchBillingAccountFromBillingAccountLocationRecommenderRecommendationName', () => {
        const result =
          client.matchBillingAccountFromBillingAccountLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'billingAccountValue');
        assert(
          (
            client.pathTemplates
              .billingAccountLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBillingAccountLocationRecommenderRecommendationName', () => {
        const result =
          client.matchLocationFromBillingAccountLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .billingAccountLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommenderFromBillingAccountLocationRecommenderRecommendationName', () => {
        const result =
          client.matchRecommenderFromBillingAccountLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'recommenderValue');
        assert(
          (
            client.pathTemplates
              .billingAccountLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommendationFromBillingAccountLocationRecommenderRecommendationName', () => {
        const result =
          client.matchRecommendationFromBillingAccountLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'recommendationValue');
        assert(
          (
            client.pathTemplates
              .billingAccountLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderLocationInsightType', () => {
      const fakePath = '/rendered/path/folderLocationInsightType';
      const expectedParameters = {
        folder: 'folderValue',
        location: 'locationValue',
        insight_type: 'insightTypeValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderLocationInsightTypePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderLocationInsightTypePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderLocationInsightTypePath', () => {
        const result = client.folderLocationInsightTypePath(
          'folderValue',
          'locationValue',
          'insightTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderLocationInsightTypePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderLocationInsightTypeName', () => {
        const result =
          client.matchFolderFromFolderLocationInsightTypeName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates.folderLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFolderLocationInsightTypeName', () => {
        const result =
          client.matchLocationFromFolderLocationInsightTypeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.folderLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightTypeFromFolderLocationInsightTypeName', () => {
        const result =
          client.matchInsightTypeFromFolderLocationInsightTypeName(fakePath);
        assert.strictEqual(result, 'insightTypeValue');
        assert(
          (
            client.pathTemplates.folderLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderLocationInsightTypeInsight', () => {
      const fakePath = '/rendered/path/folderLocationInsightTypeInsight';
      const expectedParameters = {
        folder: 'folderValue',
        location: 'locationValue',
        insight_type: 'insightTypeValue',
        insight: 'insightValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderLocationInsightTypeInsightPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.folderLocationInsightTypeInsightPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('folderLocationInsightTypeInsightPath', () => {
        const result = client.folderLocationInsightTypeInsightPath(
          'folderValue',
          'locationValue',
          'insightTypeValue',
          'insightValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderLocationInsightTypeInsightPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderLocationInsightTypeInsightName', () => {
        const result =
          client.matchFolderFromFolderLocationInsightTypeInsightName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates.folderLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFolderLocationInsightTypeInsightName', () => {
        const result =
          client.matchLocationFromFolderLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.folderLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightTypeFromFolderLocationInsightTypeInsightName', () => {
        const result =
          client.matchInsightTypeFromFolderLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'insightTypeValue');
        assert(
          (
            client.pathTemplates.folderLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightFromFolderLocationInsightTypeInsightName', () => {
        const result =
          client.matchInsightFromFolderLocationInsightTypeInsightName(fakePath);
        assert.strictEqual(result, 'insightValue');
        assert(
          (
            client.pathTemplates.folderLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderLocationRecommender', () => {
      const fakePath = '/rendered/path/folderLocationRecommender';
      const expectedParameters = {
        folder: 'folderValue',
        location: 'locationValue',
        recommender: 'recommenderValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderLocationRecommenderPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderLocationRecommenderPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderLocationRecommenderPath', () => {
        const result = client.folderLocationRecommenderPath(
          'folderValue',
          'locationValue',
          'recommenderValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderLocationRecommenderPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderLocationRecommenderName', () => {
        const result =
          client.matchFolderFromFolderLocationRecommenderName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates.folderLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFolderLocationRecommenderName', () => {
        const result =
          client.matchLocationFromFolderLocationRecommenderName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.folderLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommenderFromFolderLocationRecommenderName', () => {
        const result =
          client.matchRecommenderFromFolderLocationRecommenderName(fakePath);
        assert.strictEqual(result, 'recommenderValue');
        assert(
          (
            client.pathTemplates.folderLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderLocationRecommenderRecommendation', () => {
      const fakePath = '/rendered/path/folderLocationRecommenderRecommendation';
      const expectedParameters = {
        folder: 'folderValue',
        location: 'locationValue',
        recommender: 'recommenderValue',
        recommendation: 'recommendationValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderLocationRecommenderRecommendationPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.folderLocationRecommenderRecommendationPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('folderLocationRecommenderRecommendationPath', () => {
        const result = client.folderLocationRecommenderRecommendationPath(
          'folderValue',
          'locationValue',
          'recommenderValue',
          'recommendationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .folderLocationRecommenderRecommendationPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderLocationRecommenderRecommendationName', () => {
        const result =
          client.matchFolderFromFolderLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'folderValue');
        assert(
          (
            client.pathTemplates
              .folderLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFolderLocationRecommenderRecommendationName', () => {
        const result =
          client.matchLocationFromFolderLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .folderLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommenderFromFolderLocationRecommenderRecommendationName', () => {
        const result =
          client.matchRecommenderFromFolderLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'recommenderValue');
        assert(
          (
            client.pathTemplates
              .folderLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommendationFromFolderLocationRecommenderRecommendationName', () => {
        const result =
          client.matchRecommendationFromFolderLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'recommendationValue');
        assert(
          (
            client.pathTemplates
              .folderLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationLocationInsightType', () => {
      const fakePath = '/rendered/path/organizationLocationInsightType';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        insight_type: 'insightTypeValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationLocationInsightTypePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationLocationInsightTypePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationLocationInsightTypePath', () => {
        const result = client.organizationLocationInsightTypePath(
          'organizationValue',
          'locationValue',
          'insightTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationLocationInsightTypePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationLocationInsightTypeName', () => {
        const result =
          client.matchOrganizationFromOrganizationLocationInsightTypeName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOrganizationLocationInsightTypeName', () => {
        const result =
          client.matchLocationFromOrganizationLocationInsightTypeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.organizationLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightTypeFromOrganizationLocationInsightTypeName', () => {
        const result =
          client.matchInsightTypeFromOrganizationLocationInsightTypeName(
            fakePath
          );
        assert.strictEqual(result, 'insightTypeValue');
        assert(
          (
            client.pathTemplates.organizationLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationLocationInsightTypeInsight', () => {
      const fakePath = '/rendered/path/organizationLocationInsightTypeInsight';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        insight_type: 'insightTypeValue',
        insight: 'insightValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationLocationInsightTypeInsightPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationLocationInsightTypeInsightPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationLocationInsightTypeInsightPath', () => {
        const result = client.organizationLocationInsightTypeInsightPath(
          'organizationValue',
          'locationValue',
          'insightTypeValue',
          'insightValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .organizationLocationInsightTypeInsightPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationLocationInsightTypeInsightName', () => {
        const result =
          client.matchOrganizationFromOrganizationLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOrganizationLocationInsightTypeInsightName', () => {
        const result =
          client.matchLocationFromOrganizationLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightTypeFromOrganizationLocationInsightTypeInsightName', () => {
        const result =
          client.matchInsightTypeFromOrganizationLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'insightTypeValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightFromOrganizationLocationInsightTypeInsightName', () => {
        const result =
          client.matchInsightFromOrganizationLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'insightValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationLocationRecommender', () => {
      const fakePath = '/rendered/path/organizationLocationRecommender';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        recommender: 'recommenderValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationLocationRecommenderPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationLocationRecommenderPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationLocationRecommenderPath', () => {
        const result = client.organizationLocationRecommenderPath(
          'organizationValue',
          'locationValue',
          'recommenderValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationLocationRecommenderPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationLocationRecommenderName', () => {
        const result =
          client.matchOrganizationFromOrganizationLocationRecommenderName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOrganizationLocationRecommenderName', () => {
        const result =
          client.matchLocationFromOrganizationLocationRecommenderName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.organizationLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommenderFromOrganizationLocationRecommenderName', () => {
        const result =
          client.matchRecommenderFromOrganizationLocationRecommenderName(
            fakePath
          );
        assert.strictEqual(result, 'recommenderValue');
        assert(
          (
            client.pathTemplates.organizationLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationLocationRecommenderRecommendation', () => {
      const fakePath =
        '/rendered/path/organizationLocationRecommenderRecommendation';
      const expectedParameters = {
        organization: 'organizationValue',
        location: 'locationValue',
        recommender: 'recommenderValue',
        recommendation: 'recommendationValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationLocationRecommenderRecommendationPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.organizationLocationRecommenderRecommendationPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('organizationLocationRecommenderRecommendationPath', () => {
        const result = client.organizationLocationRecommenderRecommendationPath(
          'organizationValue',
          'locationValue',
          'recommenderValue',
          'recommendationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .organizationLocationRecommenderRecommendationPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationLocationRecommenderRecommendationName', () => {
        const result =
          client.matchOrganizationFromOrganizationLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromOrganizationLocationRecommenderRecommendationName', () => {
        const result =
          client.matchLocationFromOrganizationLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommenderFromOrganizationLocationRecommenderRecommendationName', () => {
        const result =
          client.matchRecommenderFromOrganizationLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'recommenderValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommendationFromOrganizationLocationRecommenderRecommendationName', () => {
        const result =
          client.matchRecommendationFromOrganizationLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'recommendationValue');
        assert(
          (
            client.pathTemplates
              .organizationLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationInsightType', () => {
      const fakePath = '/rendered/path/projectLocationInsightType';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        insight_type: 'insightTypeValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationInsightTypePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectLocationInsightTypePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectLocationInsightTypePath', () => {
        const result = client.projectLocationInsightTypePath(
          'projectValue',
          'locationValue',
          'insightTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationInsightTypePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationInsightTypeName', () => {
        const result =
          client.matchProjectFromProjectLocationInsightTypeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationInsightTypeName', () => {
        const result =
          client.matchLocationFromProjectLocationInsightTypeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightTypeFromProjectLocationInsightTypeName', () => {
        const result =
          client.matchInsightTypeFromProjectLocationInsightTypeName(fakePath);
        assert.strictEqual(result, 'insightTypeValue');
        assert(
          (
            client.pathTemplates.projectLocationInsightTypePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationInsightTypeInsight', () => {
      const fakePath = '/rendered/path/projectLocationInsightTypeInsight';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        insight_type: 'insightTypeValue',
        insight: 'insightValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationInsightTypeInsightPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationInsightTypeInsightPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationInsightTypeInsightPath', () => {
        const result = client.projectLocationInsightTypeInsightPath(
          'projectValue',
          'locationValue',
          'insightTypeValue',
          'insightValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationInsightTypeInsightPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationInsightTypeInsightName', () => {
        const result =
          client.matchProjectFromProjectLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationInsightTypeInsightName', () => {
        const result =
          client.matchLocationFromProjectLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightTypeFromProjectLocationInsightTypeInsightName', () => {
        const result =
          client.matchInsightTypeFromProjectLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'insightTypeValue');
        assert(
          (
            client.pathTemplates.projectLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchInsightFromProjectLocationInsightTypeInsightName', () => {
        const result =
          client.matchInsightFromProjectLocationInsightTypeInsightName(
            fakePath
          );
        assert.strictEqual(result, 'insightValue');
        assert(
          (
            client.pathTemplates.projectLocationInsightTypeInsightPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationRecommender', () => {
      const fakePath = '/rendered/path/projectLocationRecommender';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        recommender: 'recommenderValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationRecommenderPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectLocationRecommenderPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectLocationRecommenderPath', () => {
        const result = client.projectLocationRecommenderPath(
          'projectValue',
          'locationValue',
          'recommenderValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationRecommenderPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationRecommenderName', () => {
        const result =
          client.matchProjectFromProjectLocationRecommenderName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationRecommenderName', () => {
        const result =
          client.matchLocationFromProjectLocationRecommenderName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommenderFromProjectLocationRecommenderName', () => {
        const result =
          client.matchRecommenderFromProjectLocationRecommenderName(fakePath);
        assert.strictEqual(result, 'recommenderValue');
        assert(
          (
            client.pathTemplates.projectLocationRecommenderPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationRecommenderRecommendation', () => {
      const fakePath =
        '/rendered/path/projectLocationRecommenderRecommendation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        recommender: 'recommenderValue',
        recommendation: 'recommendationValue',
      };
      const client = new recommenderModule.v1.RecommenderClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationRecommenderRecommendationPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationRecommenderRecommendationPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationRecommenderRecommendationPath', () => {
        const result = client.projectLocationRecommenderRecommendationPath(
          'projectValue',
          'locationValue',
          'recommenderValue',
          'recommendationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationRecommenderRecommendationPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationRecommenderRecommendationName', () => {
        const result =
          client.matchProjectFromProjectLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationRecommenderRecommendationName', () => {
        const result =
          client.matchLocationFromProjectLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommenderFromProjectLocationRecommenderRecommendationName', () => {
        const result =
          client.matchRecommenderFromProjectLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'recommenderValue');
        assert(
          (
            client.pathTemplates
              .projectLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecommendationFromProjectLocationRecommenderRecommendationName', () => {
        const result =
          client.matchRecommendationFromProjectLocationRecommenderRecommendationName(
            fakePath
          );
        assert.strictEqual(result, 'recommendationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationRecommenderRecommendationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
