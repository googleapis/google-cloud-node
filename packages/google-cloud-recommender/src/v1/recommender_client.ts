// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
/**
 * Client JSON configuration object, loaded from
 * `src/v1/recommender_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './recommender_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Provides insights and recommendations for cloud customers for various
 *  categories like performance optimization, cost savings, reliability, feature
 *  discovery, etc. Insights and recommendations are generated automatically
 *  based on analysis of user resources, configuration and monitoring metrics.
 * @class
 * @memberof v1
 */
export class RecommenderClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  recommenderStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of RecommenderClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof RecommenderClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      billingAccountLocationInsightTypePathTemplate:
        new this._gaxModule.PathTemplate(
          'billingAccounts/{billing_account}/locations/{location}/insightTypes/{insight_type}'
        ),
      billingAccountLocationInsightTypeInsightPathTemplate:
        new this._gaxModule.PathTemplate(
          'billingAccounts/{billing_account}/locations/{location}/insightTypes/{insight_type}/insights/{insight}'
        ),
      billingAccountLocationRecommenderPathTemplate:
        new this._gaxModule.PathTemplate(
          'billingAccounts/{billing_account}/locations/{location}/recommenders/{recommender}'
        ),
      billingAccountLocationRecommenderRecommendationPathTemplate:
        new this._gaxModule.PathTemplate(
          'billingAccounts/{billing_account}/locations/{location}/recommenders/{recommender}/recommendations/{recommendation}'
        ),
      folderLocationInsightTypePathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/insightTypes/{insight_type}'
      ),
      folderLocationInsightTypeInsightPathTemplate:
        new this._gaxModule.PathTemplate(
          'folders/{folder}/locations/{location}/insightTypes/{insight_type}/insights/{insight}'
        ),
      folderLocationRecommenderPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/recommenders/{recommender}'
      ),
      folderLocationRecommenderRecommendationPathTemplate:
        new this._gaxModule.PathTemplate(
          'folders/{folder}/locations/{location}/recommenders/{recommender}/recommendations/{recommendation}'
        ),
      organizationLocationInsightTypePathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/locations/{location}/insightTypes/{insight_type}'
        ),
      organizationLocationInsightTypeInsightPathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/locations/{location}/insightTypes/{insight_type}/insights/{insight}'
        ),
      organizationLocationRecommenderPathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/locations/{location}/recommenders/{recommender}'
        ),
      organizationLocationRecommenderRecommendationPathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/locations/{location}/recommenders/{recommender}/recommendations/{recommendation}'
        ),
      projectLocationInsightTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/insightTypes/{insight_type}'
      ),
      projectLocationInsightTypeInsightPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/insightTypes/{insight_type}/insights/{insight}'
        ),
      projectLocationRecommenderPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/recommenders/{recommender}'
      ),
      projectLocationRecommenderRecommendationPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/recommenders/{recommender}/recommendations/{recommendation}'
        ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listInsights: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'insights'
      ),
      listRecommendations: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'recommendations'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.recommender.v1.Recommender',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.recommenderStub) {
      return this.recommenderStub;
    }

    // Put together the "service stub" for
    // google.cloud.recommender.v1.Recommender.
    this.recommenderStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.recommender.v1.Recommender'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.recommender.v1.Recommender,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const recommenderStubMethods = [
      'listInsights',
      'getInsight',
      'markInsightAccepted',
      'listRecommendations',
      'getRecommendation',
      'markRecommendationClaimed',
      'markRecommendationSucceeded',
      'markRecommendationFailed',
    ];
    for (const methodName of recommenderStubMethods) {
      const callPromise = this.recommenderStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.recommenderStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'recommender.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'recommender.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getInsight(
    request: protos.google.cloud.recommender.v1.IGetInsightRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IInsight,
      protos.google.cloud.recommender.v1.IGetInsightRequest | undefined,
      {} | undefined
    ]
  >;
  getInsight(
    request: protos.google.cloud.recommender.v1.IGetInsightRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.recommender.v1.IInsight,
      protos.google.cloud.recommender.v1.IGetInsightRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getInsight(
    request: protos.google.cloud.recommender.v1.IGetInsightRequest,
    callback: Callback<
      protos.google.cloud.recommender.v1.IInsight,
      protos.google.cloud.recommender.v1.IGetInsightRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets the requested insight. Requires the recommender.*.get IAM permission
   * for the specified insight type.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the insight.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Insight]{@link google.cloud.recommender.v1.Insight}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.getInsight(request);
   */
  getInsight(
    request: protos.google.cloud.recommender.v1.IGetInsightRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.recommender.v1.IInsight,
          | protos.google.cloud.recommender.v1.IGetInsightRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.recommender.v1.IInsight,
      protos.google.cloud.recommender.v1.IGetInsightRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IInsight,
      protos.google.cloud.recommender.v1.IGetInsightRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getInsight(request, options, callback);
  }
  markInsightAccepted(
    request: protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IInsight,
      (
        | protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  markInsightAccepted(
    request: protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.recommender.v1.IInsight,
      | protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  markInsightAccepted(
    request: protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest,
    callback: Callback<
      protos.google.cloud.recommender.v1.IInsight,
      | protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Marks the Insight State as Accepted. Users can use this method to
   * indicate to the Recommender API that they have applied some action based
   * on the insight. This stops the insight content from being updated.
   *
   * MarkInsightAccepted can be applied to insights in ACTIVE state. Requires
   * the recommender.*.update IAM permission for the specified insight.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the insight.
   * @param {number[]} [request.stateMetadata]
   *   Optional. State properties user wish to include with this state.  Full replace of the
   *   current state_metadata.
   * @param {string} request.etag
   *   Required. Fingerprint of the Insight. Provides optimistic locking.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Insight]{@link google.cloud.recommender.v1.Insight}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.markInsightAccepted(request);
   */
  markInsightAccepted(
    request: protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.recommender.v1.IInsight,
          | protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.recommender.v1.IInsight,
      | protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IInsight,
      (
        | protos.google.cloud.recommender.v1.IMarkInsightAcceptedRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.markInsightAccepted(request, options, callback);
  }
  getRecommendation(
    request: protos.google.cloud.recommender.v1.IGetRecommendationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IRecommendation,
      protos.google.cloud.recommender.v1.IGetRecommendationRequest | undefined,
      {} | undefined
    ]
  >;
  getRecommendation(
    request: protos.google.cloud.recommender.v1.IGetRecommendationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IGetRecommendationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRecommendation(
    request: protos.google.cloud.recommender.v1.IGetRecommendationRequest,
    callback: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IGetRecommendationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets the requested recommendation. Requires the recommender.*.get
   * IAM permission for the specified recommender.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the recommendation.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Recommendation]{@link google.cloud.recommender.v1.Recommendation}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.getRecommendation(request);
   */
  getRecommendation(
    request: protos.google.cloud.recommender.v1.IGetRecommendationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.recommender.v1.IRecommendation,
          | protos.google.cloud.recommender.v1.IGetRecommendationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IGetRecommendationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IRecommendation,
      protos.google.cloud.recommender.v1.IGetRecommendationRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getRecommendation(request, options, callback);
  }
  markRecommendationClaimed(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IRecommendation,
      (
        | protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  markRecommendationClaimed(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  markRecommendationClaimed(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest,
    callback: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Marks the Recommendation State as Claimed. Users can use this method to
   * indicate to the Recommender API that they are starting to apply the
   * recommendation themselves. This stops the recommendation content from being
   * updated. Associated insights are frozen and placed in the ACCEPTED state.
   *
   * MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
   * SUCCEEDED, FAILED, or ACTIVE state.
   *
   * Requires the recommender.*.update IAM permission for the specified
   * recommender.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the recommendation.
   * @param {number[]} request.stateMetadata
   *   State properties to include with this state. Overwrites any existing
   *   `state_metadata`.
   *   Keys must match the regex /^{@link a-z0-9_.-|a-z0-9}{0,62}$/.
   *   Values must match the regex /^[a-zA-Z0-9_./-]{0,255}$/.
   * @param {string} request.etag
   *   Required. Fingerprint of the Recommendation. Provides optimistic locking.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Recommendation]{@link google.cloud.recommender.v1.Recommendation}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.markRecommendationClaimed(request);
   */
  markRecommendationClaimed(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.recommender.v1.IRecommendation,
          | protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IRecommendation,
      (
        | protos.google.cloud.recommender.v1.IMarkRecommendationClaimedRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.markRecommendationClaimed(
      request,
      options,
      callback
    );
  }
  markRecommendationSucceeded(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IRecommendation,
      (
        | protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  markRecommendationSucceeded(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  markRecommendationSucceeded(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest,
    callback: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Marks the Recommendation State as Succeeded. Users can use this method to
   * indicate to the Recommender API that they have applied the recommendation
   * themselves, and the operation was successful. This stops the recommendation
   * content from being updated. Associated insights are frozen and placed in
   * the ACCEPTED state.
   *
   * MarkRecommendationSucceeded can be applied to recommendations in ACTIVE,
   * CLAIMED, SUCCEEDED, or FAILED state.
   *
   * Requires the recommender.*.update IAM permission for the specified
   * recommender.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the recommendation.
   * @param {number[]} request.stateMetadata
   *   State properties to include with this state. Overwrites any existing
   *   `state_metadata`.
   *   Keys must match the regex /^{@link a-z0-9_.-|a-z0-9}{0,62}$/.
   *   Values must match the regex /^[a-zA-Z0-9_./-]{0,255}$/.
   * @param {string} request.etag
   *   Required. Fingerprint of the Recommendation. Provides optimistic locking.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Recommendation]{@link google.cloud.recommender.v1.Recommendation}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.markRecommendationSucceeded(request);
   */
  markRecommendationSucceeded(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.recommender.v1.IRecommendation,
          | protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IRecommendation,
      (
        | protos.google.cloud.recommender.v1.IMarkRecommendationSucceededRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.markRecommendationSucceeded(
      request,
      options,
      callback
    );
  }
  markRecommendationFailed(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IRecommendation,
      (
        | protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  markRecommendationFailed(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  markRecommendationFailed(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest,
    callback: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Marks the Recommendation State as Failed. Users can use this method to
   * indicate to the Recommender API that they have applied the recommendation
   * themselves, and the operation failed. This stops the recommendation content
   * from being updated. Associated insights are frozen and placed in the
   * ACCEPTED state.
   *
   * MarkRecommendationFailed can be applied to recommendations in ACTIVE,
   * CLAIMED, SUCCEEDED, or FAILED state.
   *
   * Requires the recommender.*.update IAM permission for the specified
   * recommender.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the recommendation.
   * @param {number[]} request.stateMetadata
   *   State properties to include with this state. Overwrites any existing
   *   `state_metadata`.
   *   Keys must match the regex /^{@link a-z0-9_.-|a-z0-9}{0,62}$/.
   *   Values must match the regex /^[a-zA-Z0-9_./-]{0,255}$/.
   * @param {string} request.etag
   *   Required. Fingerprint of the Recommendation. Provides optimistic locking.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Recommendation]{@link google.cloud.recommender.v1.Recommendation}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * const [response] = await client.markRecommendationFailed(request);
   */
  markRecommendationFailed(
    request: protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.recommender.v1.IRecommendation,
          | protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.recommender.v1.IRecommendation,
      | protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IRecommendation,
      (
        | protos.google.cloud.recommender.v1.IMarkRecommendationFailedRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.markRecommendationFailed(
      request,
      options,
      callback
    );
  }

  listInsights(
    request: protos.google.cloud.recommender.v1.IListInsightsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IInsight[],
      protos.google.cloud.recommender.v1.IListInsightsRequest | null,
      protos.google.cloud.recommender.v1.IListInsightsResponse
    ]
  >;
  listInsights(
    request: protos.google.cloud.recommender.v1.IListInsightsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.recommender.v1.IListInsightsRequest,
      | protos.google.cloud.recommender.v1.IListInsightsResponse
      | null
      | undefined,
      protos.google.cloud.recommender.v1.IInsight
    >
  ): void;
  listInsights(
    request: protos.google.cloud.recommender.v1.IListInsightsRequest,
    callback: PaginationCallback<
      protos.google.cloud.recommender.v1.IListInsightsRequest,
      | protos.google.cloud.recommender.v1.IListInsightsResponse
      | null
      | undefined,
      protos.google.cloud.recommender.v1.IInsight
    >
  ): void;
  /**
   * Lists insights for a Cloud project. Requires the recommender.*.list IAM
   * permission for the specified insight type.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The container resource on which to execute the request.
   *   Acceptable formats:
   *
   *   1.
   *   "projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]",
   *
   *   LOCATION here refers to GCP Locations:
   *   https://cloud.google.com/about/locations/
   *   INSIGHT_TYPE_ID refers to supported insight types:
   *   https://cloud.google.com/recommender/docs/insights/insight-types.)
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of results to return from this request.  Non-positive
   *   values are ignored. If not specified, the server will determine the number
   *   of results to return.
   * @param {string} [request.pageToken]
   *   Optional. If present, retrieves the next batch of results from the preceding call to
   *   this method. `page_token` must be the value of `next_page_token` from the
   *   previous response. The values of other method parameters must be identical
   *   to those in the previous call.
   * @param {string} [request.filter]
   *   Optional. Filter expression to restrict the insights returned. Supported
   *   filter fields: state
   *   Eg: `state:"DISMISSED" or state:"ACTIVE"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Insight]{@link google.cloud.recommender.v1.Insight}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listInsightsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listInsights(
    request: protos.google.cloud.recommender.v1.IListInsightsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.recommender.v1.IListInsightsRequest,
          | protos.google.cloud.recommender.v1.IListInsightsResponse
          | null
          | undefined,
          protos.google.cloud.recommender.v1.IInsight
        >,
    callback?: PaginationCallback<
      protos.google.cloud.recommender.v1.IListInsightsRequest,
      | protos.google.cloud.recommender.v1.IListInsightsResponse
      | null
      | undefined,
      protos.google.cloud.recommender.v1.IInsight
    >
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IInsight[],
      protos.google.cloud.recommender.v1.IListInsightsRequest | null,
      protos.google.cloud.recommender.v1.IListInsightsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.listInsights(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The container resource on which to execute the request.
   *   Acceptable formats:
   *
   *   1.
   *   "projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]",
   *
   *   LOCATION here refers to GCP Locations:
   *   https://cloud.google.com/about/locations/
   *   INSIGHT_TYPE_ID refers to supported insight types:
   *   https://cloud.google.com/recommender/docs/insights/insight-types.)
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of results to return from this request.  Non-positive
   *   values are ignored. If not specified, the server will determine the number
   *   of results to return.
   * @param {string} [request.pageToken]
   *   Optional. If present, retrieves the next batch of results from the preceding call to
   *   this method. `page_token` must be the value of `next_page_token` from the
   *   previous response. The values of other method parameters must be identical
   *   to those in the previous call.
   * @param {string} [request.filter]
   *   Optional. Filter expression to restrict the insights returned. Supported
   *   filter fields: state
   *   Eg: `state:"DISMISSED" or state:"ACTIVE"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Insight]{@link google.cloud.recommender.v1.Insight} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listInsightsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listInsightsStream(
    request?: protos.google.cloud.recommender.v1.IListInsightsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listInsights.createStream(
      this.innerApiCalls.listInsights as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listInsights`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The container resource on which to execute the request.
   *   Acceptable formats:
   *
   *   1.
   *   "projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]",
   *
   *   LOCATION here refers to GCP Locations:
   *   https://cloud.google.com/about/locations/
   *   INSIGHT_TYPE_ID refers to supported insight types:
   *   https://cloud.google.com/recommender/docs/insights/insight-types.)
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of results to return from this request.  Non-positive
   *   values are ignored. If not specified, the server will determine the number
   *   of results to return.
   * @param {string} [request.pageToken]
   *   Optional. If present, retrieves the next batch of results from the preceding call to
   *   this method. `page_token` must be the value of `next_page_token` from the
   *   previous response. The values of other method parameters must be identical
   *   to those in the previous call.
   * @param {string} [request.filter]
   *   Optional. Filter expression to restrict the insights returned. Supported
   *   filter fields: state
   *   Eg: `state:"DISMISSED" or state:"ACTIVE"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Insight]{@link google.cloud.recommender.v1.Insight}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * const iterable = client.listInsightsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   */
  listInsightsAsync(
    request?: protos.google.cloud.recommender.v1.IListInsightsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.recommender.v1.IInsight> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listInsights.asyncIterate(
      this.innerApiCalls['listInsights'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.recommender.v1.IInsight>;
  }
  listRecommendations(
    request: protos.google.cloud.recommender.v1.IListRecommendationsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IRecommendation[],
      protos.google.cloud.recommender.v1.IListRecommendationsRequest | null,
      protos.google.cloud.recommender.v1.IListRecommendationsResponse
    ]
  >;
  listRecommendations(
    request: protos.google.cloud.recommender.v1.IListRecommendationsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.recommender.v1.IListRecommendationsRequest,
      | protos.google.cloud.recommender.v1.IListRecommendationsResponse
      | null
      | undefined,
      protos.google.cloud.recommender.v1.IRecommendation
    >
  ): void;
  listRecommendations(
    request: protos.google.cloud.recommender.v1.IListRecommendationsRequest,
    callback: PaginationCallback<
      protos.google.cloud.recommender.v1.IListRecommendationsRequest,
      | protos.google.cloud.recommender.v1.IListRecommendationsResponse
      | null
      | undefined,
      protos.google.cloud.recommender.v1.IRecommendation
    >
  ): void;
  /**
   * Lists recommendations for a Cloud project. Requires the recommender.*.list
   * IAM permission for the specified recommender.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The container resource on which to execute the request.
   *   Acceptable formats:
   *
   *   1.
   *   "projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]",
   *
   *   LOCATION here refers to GCP Locations:
   *   https://cloud.google.com/about/locations/
   *   RECOMMENDER_ID refers to supported recommenders:
   *   https://cloud.google.com/recommender/docs/recommenders.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of results to return from this request.  Non-positive
   *   values are ignored. If not specified, the server will determine the number
   *   of results to return.
   * @param {string} [request.pageToken]
   *   Optional. If present, retrieves the next batch of results from the preceding call to
   *   this method. `page_token` must be the value of `next_page_token` from the
   *   previous response. The values of other method parameters must be identical
   *   to those in the previous call.
   * @param {string} request.filter
   *   Filter expression to restrict the recommendations returned. Supported
   *   filter fields: state_info.state
   *   Eg: `state_info.state:"DISMISSED" or state_info.state:"FAILED"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Recommendation]{@link google.cloud.recommender.v1.Recommendation}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRecommendationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRecommendations(
    request: protos.google.cloud.recommender.v1.IListRecommendationsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.recommender.v1.IListRecommendationsRequest,
          | protos.google.cloud.recommender.v1.IListRecommendationsResponse
          | null
          | undefined,
          protos.google.cloud.recommender.v1.IRecommendation
        >,
    callback?: PaginationCallback<
      protos.google.cloud.recommender.v1.IListRecommendationsRequest,
      | protos.google.cloud.recommender.v1.IListRecommendationsResponse
      | null
      | undefined,
      protos.google.cloud.recommender.v1.IRecommendation
    >
  ): Promise<
    [
      protos.google.cloud.recommender.v1.IRecommendation[],
      protos.google.cloud.recommender.v1.IListRecommendationsRequest | null,
      protos.google.cloud.recommender.v1.IListRecommendationsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.listRecommendations(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The container resource on which to execute the request.
   *   Acceptable formats:
   *
   *   1.
   *   "projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]",
   *
   *   LOCATION here refers to GCP Locations:
   *   https://cloud.google.com/about/locations/
   *   RECOMMENDER_ID refers to supported recommenders:
   *   https://cloud.google.com/recommender/docs/recommenders.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of results to return from this request.  Non-positive
   *   values are ignored. If not specified, the server will determine the number
   *   of results to return.
   * @param {string} [request.pageToken]
   *   Optional. If present, retrieves the next batch of results from the preceding call to
   *   this method. `page_token` must be the value of `next_page_token` from the
   *   previous response. The values of other method parameters must be identical
   *   to those in the previous call.
   * @param {string} request.filter
   *   Filter expression to restrict the recommendations returned. Supported
   *   filter fields: state_info.state
   *   Eg: `state_info.state:"DISMISSED" or state_info.state:"FAILED"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Recommendation]{@link google.cloud.recommender.v1.Recommendation} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRecommendationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRecommendationsStream(
    request?: protos.google.cloud.recommender.v1.IListRecommendationsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listRecommendations.createStream(
      this.innerApiCalls.listRecommendations as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRecommendations`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The container resource on which to execute the request.
   *   Acceptable formats:
   *
   *   1.
   *   "projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]",
   *
   *   LOCATION here refers to GCP Locations:
   *   https://cloud.google.com/about/locations/
   *   RECOMMENDER_ID refers to supported recommenders:
   *   https://cloud.google.com/recommender/docs/recommenders.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of results to return from this request.  Non-positive
   *   values are ignored. If not specified, the server will determine the number
   *   of results to return.
   * @param {string} [request.pageToken]
   *   Optional. If present, retrieves the next batch of results from the preceding call to
   *   this method. `page_token` must be the value of `next_page_token` from the
   *   previous response. The values of other method parameters must be identical
   *   to those in the previous call.
   * @param {string} request.filter
   *   Filter expression to restrict the recommendations returned. Supported
   *   filter fields: state_info.state
   *   Eg: `state_info.state:"DISMISSED" or state_info.state:"FAILED"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Recommendation]{@link google.cloud.recommender.v1.Recommendation}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * const iterable = client.listRecommendationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   */
  listRecommendationsAsync(
    request?: protos.google.cloud.recommender.v1.IListRecommendationsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.recommender.v1.IRecommendation> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listRecommendations.asyncIterate(
      this.innerApiCalls['listRecommendations'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.recommender.v1.IRecommendation>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified billingAccountLocationInsightType resource name string.
   *
   * @param {string} billing_account
   * @param {string} location
   * @param {string} insight_type
   * @returns {string} Resource name string.
   */
  billingAccountLocationInsightTypePath(
    billingAccount: string,
    location: string,
    insightType: string
  ) {
    return this.pathTemplates.billingAccountLocationInsightTypePathTemplate.render(
      {
        billing_account: billingAccount,
        location: location,
        insight_type: insightType,
      }
    );
  }

  /**
   * Parse the billing_account from BillingAccountLocationInsightType resource.
   *
   * @param {string} billingAccountLocationInsightTypeName
   *   A fully-qualified path representing billing_account_location_insight_type resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLocationInsightTypeName(
    billingAccountLocationInsightTypeName: string
  ) {
    return this.pathTemplates.billingAccountLocationInsightTypePathTemplate.match(
      billingAccountLocationInsightTypeName
    ).billing_account;
  }

  /**
   * Parse the location from BillingAccountLocationInsightType resource.
   *
   * @param {string} billingAccountLocationInsightTypeName
   *   A fully-qualified path representing billing_account_location_insight_type resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBillingAccountLocationInsightTypeName(
    billingAccountLocationInsightTypeName: string
  ) {
    return this.pathTemplates.billingAccountLocationInsightTypePathTemplate.match(
      billingAccountLocationInsightTypeName
    ).location;
  }

  /**
   * Parse the insight_type from BillingAccountLocationInsightType resource.
   *
   * @param {string} billingAccountLocationInsightTypeName
   *   A fully-qualified path representing billing_account_location_insight_type resource.
   * @returns {string} A string representing the insight_type.
   */
  matchInsightTypeFromBillingAccountLocationInsightTypeName(
    billingAccountLocationInsightTypeName: string
  ) {
    return this.pathTemplates.billingAccountLocationInsightTypePathTemplate.match(
      billingAccountLocationInsightTypeName
    ).insight_type;
  }

  /**
   * Return a fully-qualified billingAccountLocationInsightTypeInsight resource name string.
   *
   * @param {string} billing_account
   * @param {string} location
   * @param {string} insight_type
   * @param {string} insight
   * @returns {string} Resource name string.
   */
  billingAccountLocationInsightTypeInsightPath(
    billingAccount: string,
    location: string,
    insightType: string,
    insight: string
  ) {
    return this.pathTemplates.billingAccountLocationInsightTypeInsightPathTemplate.render(
      {
        billing_account: billingAccount,
        location: location,
        insight_type: insightType,
        insight: insight,
      }
    );
  }

  /**
   * Parse the billing_account from BillingAccountLocationInsightTypeInsight resource.
   *
   * @param {string} billingAccountLocationInsightTypeInsightName
   *   A fully-qualified path representing billing_account_location_insight_type_insight resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLocationInsightTypeInsightName(
    billingAccountLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.billingAccountLocationInsightTypeInsightPathTemplate.match(
      billingAccountLocationInsightTypeInsightName
    ).billing_account;
  }

  /**
   * Parse the location from BillingAccountLocationInsightTypeInsight resource.
   *
   * @param {string} billingAccountLocationInsightTypeInsightName
   *   A fully-qualified path representing billing_account_location_insight_type_insight resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBillingAccountLocationInsightTypeInsightName(
    billingAccountLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.billingAccountLocationInsightTypeInsightPathTemplate.match(
      billingAccountLocationInsightTypeInsightName
    ).location;
  }

  /**
   * Parse the insight_type from BillingAccountLocationInsightTypeInsight resource.
   *
   * @param {string} billingAccountLocationInsightTypeInsightName
   *   A fully-qualified path representing billing_account_location_insight_type_insight resource.
   * @returns {string} A string representing the insight_type.
   */
  matchInsightTypeFromBillingAccountLocationInsightTypeInsightName(
    billingAccountLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.billingAccountLocationInsightTypeInsightPathTemplate.match(
      billingAccountLocationInsightTypeInsightName
    ).insight_type;
  }

  /**
   * Parse the insight from BillingAccountLocationInsightTypeInsight resource.
   *
   * @param {string} billingAccountLocationInsightTypeInsightName
   *   A fully-qualified path representing billing_account_location_insight_type_insight resource.
   * @returns {string} A string representing the insight.
   */
  matchInsightFromBillingAccountLocationInsightTypeInsightName(
    billingAccountLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.billingAccountLocationInsightTypeInsightPathTemplate.match(
      billingAccountLocationInsightTypeInsightName
    ).insight;
  }

  /**
   * Return a fully-qualified billingAccountLocationRecommender resource name string.
   *
   * @param {string} billing_account
   * @param {string} location
   * @param {string} recommender
   * @returns {string} Resource name string.
   */
  billingAccountLocationRecommenderPath(
    billingAccount: string,
    location: string,
    recommender: string
  ) {
    return this.pathTemplates.billingAccountLocationRecommenderPathTemplate.render(
      {
        billing_account: billingAccount,
        location: location,
        recommender: recommender,
      }
    );
  }

  /**
   * Parse the billing_account from BillingAccountLocationRecommender resource.
   *
   * @param {string} billingAccountLocationRecommenderName
   *   A fully-qualified path representing billing_account_location_recommender resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLocationRecommenderName(
    billingAccountLocationRecommenderName: string
  ) {
    return this.pathTemplates.billingAccountLocationRecommenderPathTemplate.match(
      billingAccountLocationRecommenderName
    ).billing_account;
  }

  /**
   * Parse the location from BillingAccountLocationRecommender resource.
   *
   * @param {string} billingAccountLocationRecommenderName
   *   A fully-qualified path representing billing_account_location_recommender resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBillingAccountLocationRecommenderName(
    billingAccountLocationRecommenderName: string
  ) {
    return this.pathTemplates.billingAccountLocationRecommenderPathTemplate.match(
      billingAccountLocationRecommenderName
    ).location;
  }

  /**
   * Parse the recommender from BillingAccountLocationRecommender resource.
   *
   * @param {string} billingAccountLocationRecommenderName
   *   A fully-qualified path representing billing_account_location_recommender resource.
   * @returns {string} A string representing the recommender.
   */
  matchRecommenderFromBillingAccountLocationRecommenderName(
    billingAccountLocationRecommenderName: string
  ) {
    return this.pathTemplates.billingAccountLocationRecommenderPathTemplate.match(
      billingAccountLocationRecommenderName
    ).recommender;
  }

  /**
   * Return a fully-qualified billingAccountLocationRecommenderRecommendation resource name string.
   *
   * @param {string} billing_account
   * @param {string} location
   * @param {string} recommender
   * @param {string} recommendation
   * @returns {string} Resource name string.
   */
  billingAccountLocationRecommenderRecommendationPath(
    billingAccount: string,
    location: string,
    recommender: string,
    recommendation: string
  ) {
    return this.pathTemplates.billingAccountLocationRecommenderRecommendationPathTemplate.render(
      {
        billing_account: billingAccount,
        location: location,
        recommender: recommender,
        recommendation: recommendation,
      }
    );
  }

  /**
   * Parse the billing_account from BillingAccountLocationRecommenderRecommendation resource.
   *
   * @param {string} billingAccountLocationRecommenderRecommendationName
   *   A fully-qualified path representing billing_account_location_recommender_recommendation resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLocationRecommenderRecommendationName(
    billingAccountLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.billingAccountLocationRecommenderRecommendationPathTemplate.match(
      billingAccountLocationRecommenderRecommendationName
    ).billing_account;
  }

  /**
   * Parse the location from BillingAccountLocationRecommenderRecommendation resource.
   *
   * @param {string} billingAccountLocationRecommenderRecommendationName
   *   A fully-qualified path representing billing_account_location_recommender_recommendation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBillingAccountLocationRecommenderRecommendationName(
    billingAccountLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.billingAccountLocationRecommenderRecommendationPathTemplate.match(
      billingAccountLocationRecommenderRecommendationName
    ).location;
  }

  /**
   * Parse the recommender from BillingAccountLocationRecommenderRecommendation resource.
   *
   * @param {string} billingAccountLocationRecommenderRecommendationName
   *   A fully-qualified path representing billing_account_location_recommender_recommendation resource.
   * @returns {string} A string representing the recommender.
   */
  matchRecommenderFromBillingAccountLocationRecommenderRecommendationName(
    billingAccountLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.billingAccountLocationRecommenderRecommendationPathTemplate.match(
      billingAccountLocationRecommenderRecommendationName
    ).recommender;
  }

  /**
   * Parse the recommendation from BillingAccountLocationRecommenderRecommendation resource.
   *
   * @param {string} billingAccountLocationRecommenderRecommendationName
   *   A fully-qualified path representing billing_account_location_recommender_recommendation resource.
   * @returns {string} A string representing the recommendation.
   */
  matchRecommendationFromBillingAccountLocationRecommenderRecommendationName(
    billingAccountLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.billingAccountLocationRecommenderRecommendationPathTemplate.match(
      billingAccountLocationRecommenderRecommendationName
    ).recommendation;
  }

  /**
   * Return a fully-qualified folderLocationInsightType resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} insight_type
   * @returns {string} Resource name string.
   */
  folderLocationInsightTypePath(
    folder: string,
    location: string,
    insightType: string
  ) {
    return this.pathTemplates.folderLocationInsightTypePathTemplate.render({
      folder: folder,
      location: location,
      insight_type: insightType,
    });
  }

  /**
   * Parse the folder from FolderLocationInsightType resource.
   *
   * @param {string} folderLocationInsightTypeName
   *   A fully-qualified path representing folder_location_insight_type resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationInsightTypeName(
    folderLocationInsightTypeName: string
  ) {
    return this.pathTemplates.folderLocationInsightTypePathTemplate.match(
      folderLocationInsightTypeName
    ).folder;
  }

  /**
   * Parse the location from FolderLocationInsightType resource.
   *
   * @param {string} folderLocationInsightTypeName
   *   A fully-qualified path representing folder_location_insight_type resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationInsightTypeName(
    folderLocationInsightTypeName: string
  ) {
    return this.pathTemplates.folderLocationInsightTypePathTemplate.match(
      folderLocationInsightTypeName
    ).location;
  }

  /**
   * Parse the insight_type from FolderLocationInsightType resource.
   *
   * @param {string} folderLocationInsightTypeName
   *   A fully-qualified path representing folder_location_insight_type resource.
   * @returns {string} A string representing the insight_type.
   */
  matchInsightTypeFromFolderLocationInsightTypeName(
    folderLocationInsightTypeName: string
  ) {
    return this.pathTemplates.folderLocationInsightTypePathTemplate.match(
      folderLocationInsightTypeName
    ).insight_type;
  }

  /**
   * Return a fully-qualified folderLocationInsightTypeInsight resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} insight_type
   * @param {string} insight
   * @returns {string} Resource name string.
   */
  folderLocationInsightTypeInsightPath(
    folder: string,
    location: string,
    insightType: string,
    insight: string
  ) {
    return this.pathTemplates.folderLocationInsightTypeInsightPathTemplate.render(
      {
        folder: folder,
        location: location,
        insight_type: insightType,
        insight: insight,
      }
    );
  }

  /**
   * Parse the folder from FolderLocationInsightTypeInsight resource.
   *
   * @param {string} folderLocationInsightTypeInsightName
   *   A fully-qualified path representing folder_location_insight_type_insight resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationInsightTypeInsightName(
    folderLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.folderLocationInsightTypeInsightPathTemplate.match(
      folderLocationInsightTypeInsightName
    ).folder;
  }

  /**
   * Parse the location from FolderLocationInsightTypeInsight resource.
   *
   * @param {string} folderLocationInsightTypeInsightName
   *   A fully-qualified path representing folder_location_insight_type_insight resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationInsightTypeInsightName(
    folderLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.folderLocationInsightTypeInsightPathTemplate.match(
      folderLocationInsightTypeInsightName
    ).location;
  }

  /**
   * Parse the insight_type from FolderLocationInsightTypeInsight resource.
   *
   * @param {string} folderLocationInsightTypeInsightName
   *   A fully-qualified path representing folder_location_insight_type_insight resource.
   * @returns {string} A string representing the insight_type.
   */
  matchInsightTypeFromFolderLocationInsightTypeInsightName(
    folderLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.folderLocationInsightTypeInsightPathTemplate.match(
      folderLocationInsightTypeInsightName
    ).insight_type;
  }

  /**
   * Parse the insight from FolderLocationInsightTypeInsight resource.
   *
   * @param {string} folderLocationInsightTypeInsightName
   *   A fully-qualified path representing folder_location_insight_type_insight resource.
   * @returns {string} A string representing the insight.
   */
  matchInsightFromFolderLocationInsightTypeInsightName(
    folderLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.folderLocationInsightTypeInsightPathTemplate.match(
      folderLocationInsightTypeInsightName
    ).insight;
  }

  /**
   * Return a fully-qualified folderLocationRecommender resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} recommender
   * @returns {string} Resource name string.
   */
  folderLocationRecommenderPath(
    folder: string,
    location: string,
    recommender: string
  ) {
    return this.pathTemplates.folderLocationRecommenderPathTemplate.render({
      folder: folder,
      location: location,
      recommender: recommender,
    });
  }

  /**
   * Parse the folder from FolderLocationRecommender resource.
   *
   * @param {string} folderLocationRecommenderName
   *   A fully-qualified path representing folder_location_recommender resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationRecommenderName(
    folderLocationRecommenderName: string
  ) {
    return this.pathTemplates.folderLocationRecommenderPathTemplate.match(
      folderLocationRecommenderName
    ).folder;
  }

  /**
   * Parse the location from FolderLocationRecommender resource.
   *
   * @param {string} folderLocationRecommenderName
   *   A fully-qualified path representing folder_location_recommender resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationRecommenderName(
    folderLocationRecommenderName: string
  ) {
    return this.pathTemplates.folderLocationRecommenderPathTemplate.match(
      folderLocationRecommenderName
    ).location;
  }

  /**
   * Parse the recommender from FolderLocationRecommender resource.
   *
   * @param {string} folderLocationRecommenderName
   *   A fully-qualified path representing folder_location_recommender resource.
   * @returns {string} A string representing the recommender.
   */
  matchRecommenderFromFolderLocationRecommenderName(
    folderLocationRecommenderName: string
  ) {
    return this.pathTemplates.folderLocationRecommenderPathTemplate.match(
      folderLocationRecommenderName
    ).recommender;
  }

  /**
   * Return a fully-qualified folderLocationRecommenderRecommendation resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} recommender
   * @param {string} recommendation
   * @returns {string} Resource name string.
   */
  folderLocationRecommenderRecommendationPath(
    folder: string,
    location: string,
    recommender: string,
    recommendation: string
  ) {
    return this.pathTemplates.folderLocationRecommenderRecommendationPathTemplate.render(
      {
        folder: folder,
        location: location,
        recommender: recommender,
        recommendation: recommendation,
      }
    );
  }

  /**
   * Parse the folder from FolderLocationRecommenderRecommendation resource.
   *
   * @param {string} folderLocationRecommenderRecommendationName
   *   A fully-qualified path representing folder_location_recommender_recommendation resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationRecommenderRecommendationName(
    folderLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.folderLocationRecommenderRecommendationPathTemplate.match(
      folderLocationRecommenderRecommendationName
    ).folder;
  }

  /**
   * Parse the location from FolderLocationRecommenderRecommendation resource.
   *
   * @param {string} folderLocationRecommenderRecommendationName
   *   A fully-qualified path representing folder_location_recommender_recommendation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationRecommenderRecommendationName(
    folderLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.folderLocationRecommenderRecommendationPathTemplate.match(
      folderLocationRecommenderRecommendationName
    ).location;
  }

  /**
   * Parse the recommender from FolderLocationRecommenderRecommendation resource.
   *
   * @param {string} folderLocationRecommenderRecommendationName
   *   A fully-qualified path representing folder_location_recommender_recommendation resource.
   * @returns {string} A string representing the recommender.
   */
  matchRecommenderFromFolderLocationRecommenderRecommendationName(
    folderLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.folderLocationRecommenderRecommendationPathTemplate.match(
      folderLocationRecommenderRecommendationName
    ).recommender;
  }

  /**
   * Parse the recommendation from FolderLocationRecommenderRecommendation resource.
   *
   * @param {string} folderLocationRecommenderRecommendationName
   *   A fully-qualified path representing folder_location_recommender_recommendation resource.
   * @returns {string} A string representing the recommendation.
   */
  matchRecommendationFromFolderLocationRecommenderRecommendationName(
    folderLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.folderLocationRecommenderRecommendationPathTemplate.match(
      folderLocationRecommenderRecommendationName
    ).recommendation;
  }

  /**
   * Return a fully-qualified organizationLocationInsightType resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} insight_type
   * @returns {string} Resource name string.
   */
  organizationLocationInsightTypePath(
    organization: string,
    location: string,
    insightType: string
  ) {
    return this.pathTemplates.organizationLocationInsightTypePathTemplate.render(
      {
        organization: organization,
        location: location,
        insight_type: insightType,
      }
    );
  }

  /**
   * Parse the organization from OrganizationLocationInsightType resource.
   *
   * @param {string} organizationLocationInsightTypeName
   *   A fully-qualified path representing organization_location_insight_type resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationInsightTypeName(
    organizationLocationInsightTypeName: string
  ) {
    return this.pathTemplates.organizationLocationInsightTypePathTemplate.match(
      organizationLocationInsightTypeName
    ).organization;
  }

  /**
   * Parse the location from OrganizationLocationInsightType resource.
   *
   * @param {string} organizationLocationInsightTypeName
   *   A fully-qualified path representing organization_location_insight_type resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationInsightTypeName(
    organizationLocationInsightTypeName: string
  ) {
    return this.pathTemplates.organizationLocationInsightTypePathTemplate.match(
      organizationLocationInsightTypeName
    ).location;
  }

  /**
   * Parse the insight_type from OrganizationLocationInsightType resource.
   *
   * @param {string} organizationLocationInsightTypeName
   *   A fully-qualified path representing organization_location_insight_type resource.
   * @returns {string} A string representing the insight_type.
   */
  matchInsightTypeFromOrganizationLocationInsightTypeName(
    organizationLocationInsightTypeName: string
  ) {
    return this.pathTemplates.organizationLocationInsightTypePathTemplate.match(
      organizationLocationInsightTypeName
    ).insight_type;
  }

  /**
   * Return a fully-qualified organizationLocationInsightTypeInsight resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} insight_type
   * @param {string} insight
   * @returns {string} Resource name string.
   */
  organizationLocationInsightTypeInsightPath(
    organization: string,
    location: string,
    insightType: string,
    insight: string
  ) {
    return this.pathTemplates.organizationLocationInsightTypeInsightPathTemplate.render(
      {
        organization: organization,
        location: location,
        insight_type: insightType,
        insight: insight,
      }
    );
  }

  /**
   * Parse the organization from OrganizationLocationInsightTypeInsight resource.
   *
   * @param {string} organizationLocationInsightTypeInsightName
   *   A fully-qualified path representing organization_location_insight_type_insight resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationInsightTypeInsightName(
    organizationLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.organizationLocationInsightTypeInsightPathTemplate.match(
      organizationLocationInsightTypeInsightName
    ).organization;
  }

  /**
   * Parse the location from OrganizationLocationInsightTypeInsight resource.
   *
   * @param {string} organizationLocationInsightTypeInsightName
   *   A fully-qualified path representing organization_location_insight_type_insight resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationInsightTypeInsightName(
    organizationLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.organizationLocationInsightTypeInsightPathTemplate.match(
      organizationLocationInsightTypeInsightName
    ).location;
  }

  /**
   * Parse the insight_type from OrganizationLocationInsightTypeInsight resource.
   *
   * @param {string} organizationLocationInsightTypeInsightName
   *   A fully-qualified path representing organization_location_insight_type_insight resource.
   * @returns {string} A string representing the insight_type.
   */
  matchInsightTypeFromOrganizationLocationInsightTypeInsightName(
    organizationLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.organizationLocationInsightTypeInsightPathTemplate.match(
      organizationLocationInsightTypeInsightName
    ).insight_type;
  }

  /**
   * Parse the insight from OrganizationLocationInsightTypeInsight resource.
   *
   * @param {string} organizationLocationInsightTypeInsightName
   *   A fully-qualified path representing organization_location_insight_type_insight resource.
   * @returns {string} A string representing the insight.
   */
  matchInsightFromOrganizationLocationInsightTypeInsightName(
    organizationLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.organizationLocationInsightTypeInsightPathTemplate.match(
      organizationLocationInsightTypeInsightName
    ).insight;
  }

  /**
   * Return a fully-qualified organizationLocationRecommender resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} recommender
   * @returns {string} Resource name string.
   */
  organizationLocationRecommenderPath(
    organization: string,
    location: string,
    recommender: string
  ) {
    return this.pathTemplates.organizationLocationRecommenderPathTemplate.render(
      {
        organization: organization,
        location: location,
        recommender: recommender,
      }
    );
  }

  /**
   * Parse the organization from OrganizationLocationRecommender resource.
   *
   * @param {string} organizationLocationRecommenderName
   *   A fully-qualified path representing organization_location_recommender resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationRecommenderName(
    organizationLocationRecommenderName: string
  ) {
    return this.pathTemplates.organizationLocationRecommenderPathTemplate.match(
      organizationLocationRecommenderName
    ).organization;
  }

  /**
   * Parse the location from OrganizationLocationRecommender resource.
   *
   * @param {string} organizationLocationRecommenderName
   *   A fully-qualified path representing organization_location_recommender resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationRecommenderName(
    organizationLocationRecommenderName: string
  ) {
    return this.pathTemplates.organizationLocationRecommenderPathTemplate.match(
      organizationLocationRecommenderName
    ).location;
  }

  /**
   * Parse the recommender from OrganizationLocationRecommender resource.
   *
   * @param {string} organizationLocationRecommenderName
   *   A fully-qualified path representing organization_location_recommender resource.
   * @returns {string} A string representing the recommender.
   */
  matchRecommenderFromOrganizationLocationRecommenderName(
    organizationLocationRecommenderName: string
  ) {
    return this.pathTemplates.organizationLocationRecommenderPathTemplate.match(
      organizationLocationRecommenderName
    ).recommender;
  }

  /**
   * Return a fully-qualified organizationLocationRecommenderRecommendation resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} recommender
   * @param {string} recommendation
   * @returns {string} Resource name string.
   */
  organizationLocationRecommenderRecommendationPath(
    organization: string,
    location: string,
    recommender: string,
    recommendation: string
  ) {
    return this.pathTemplates.organizationLocationRecommenderRecommendationPathTemplate.render(
      {
        organization: organization,
        location: location,
        recommender: recommender,
        recommendation: recommendation,
      }
    );
  }

  /**
   * Parse the organization from OrganizationLocationRecommenderRecommendation resource.
   *
   * @param {string} organizationLocationRecommenderRecommendationName
   *   A fully-qualified path representing organization_location_recommender_recommendation resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationRecommenderRecommendationName(
    organizationLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.organizationLocationRecommenderRecommendationPathTemplate.match(
      organizationLocationRecommenderRecommendationName
    ).organization;
  }

  /**
   * Parse the location from OrganizationLocationRecommenderRecommendation resource.
   *
   * @param {string} organizationLocationRecommenderRecommendationName
   *   A fully-qualified path representing organization_location_recommender_recommendation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationRecommenderRecommendationName(
    organizationLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.organizationLocationRecommenderRecommendationPathTemplate.match(
      organizationLocationRecommenderRecommendationName
    ).location;
  }

  /**
   * Parse the recommender from OrganizationLocationRecommenderRecommendation resource.
   *
   * @param {string} organizationLocationRecommenderRecommendationName
   *   A fully-qualified path representing organization_location_recommender_recommendation resource.
   * @returns {string} A string representing the recommender.
   */
  matchRecommenderFromOrganizationLocationRecommenderRecommendationName(
    organizationLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.organizationLocationRecommenderRecommendationPathTemplate.match(
      organizationLocationRecommenderRecommendationName
    ).recommender;
  }

  /**
   * Parse the recommendation from OrganizationLocationRecommenderRecommendation resource.
   *
   * @param {string} organizationLocationRecommenderRecommendationName
   *   A fully-qualified path representing organization_location_recommender_recommendation resource.
   * @returns {string} A string representing the recommendation.
   */
  matchRecommendationFromOrganizationLocationRecommenderRecommendationName(
    organizationLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.organizationLocationRecommenderRecommendationPathTemplate.match(
      organizationLocationRecommenderRecommendationName
    ).recommendation;
  }

  /**
   * Return a fully-qualified projectLocationInsightType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} insight_type
   * @returns {string} Resource name string.
   */
  projectLocationInsightTypePath(
    project: string,
    location: string,
    insightType: string
  ) {
    return this.pathTemplates.projectLocationInsightTypePathTemplate.render({
      project: project,
      location: location,
      insight_type: insightType,
    });
  }

  /**
   * Parse the project from ProjectLocationInsightType resource.
   *
   * @param {string} projectLocationInsightTypeName
   *   A fully-qualified path representing project_location_insight_type resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationInsightTypeName(
    projectLocationInsightTypeName: string
  ) {
    return this.pathTemplates.projectLocationInsightTypePathTemplate.match(
      projectLocationInsightTypeName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationInsightType resource.
   *
   * @param {string} projectLocationInsightTypeName
   *   A fully-qualified path representing project_location_insight_type resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationInsightTypeName(
    projectLocationInsightTypeName: string
  ) {
    return this.pathTemplates.projectLocationInsightTypePathTemplate.match(
      projectLocationInsightTypeName
    ).location;
  }

  /**
   * Parse the insight_type from ProjectLocationInsightType resource.
   *
   * @param {string} projectLocationInsightTypeName
   *   A fully-qualified path representing project_location_insight_type resource.
   * @returns {string} A string representing the insight_type.
   */
  matchInsightTypeFromProjectLocationInsightTypeName(
    projectLocationInsightTypeName: string
  ) {
    return this.pathTemplates.projectLocationInsightTypePathTemplate.match(
      projectLocationInsightTypeName
    ).insight_type;
  }

  /**
   * Return a fully-qualified projectLocationInsightTypeInsight resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} insight_type
   * @param {string} insight
   * @returns {string} Resource name string.
   */
  projectLocationInsightTypeInsightPath(
    project: string,
    location: string,
    insightType: string,
    insight: string
  ) {
    return this.pathTemplates.projectLocationInsightTypeInsightPathTemplate.render(
      {
        project: project,
        location: location,
        insight_type: insightType,
        insight: insight,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationInsightTypeInsight resource.
   *
   * @param {string} projectLocationInsightTypeInsightName
   *   A fully-qualified path representing project_location_insight_type_insight resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationInsightTypeInsightName(
    projectLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.projectLocationInsightTypeInsightPathTemplate.match(
      projectLocationInsightTypeInsightName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationInsightTypeInsight resource.
   *
   * @param {string} projectLocationInsightTypeInsightName
   *   A fully-qualified path representing project_location_insight_type_insight resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationInsightTypeInsightName(
    projectLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.projectLocationInsightTypeInsightPathTemplate.match(
      projectLocationInsightTypeInsightName
    ).location;
  }

  /**
   * Parse the insight_type from ProjectLocationInsightTypeInsight resource.
   *
   * @param {string} projectLocationInsightTypeInsightName
   *   A fully-qualified path representing project_location_insight_type_insight resource.
   * @returns {string} A string representing the insight_type.
   */
  matchInsightTypeFromProjectLocationInsightTypeInsightName(
    projectLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.projectLocationInsightTypeInsightPathTemplate.match(
      projectLocationInsightTypeInsightName
    ).insight_type;
  }

  /**
   * Parse the insight from ProjectLocationInsightTypeInsight resource.
   *
   * @param {string} projectLocationInsightTypeInsightName
   *   A fully-qualified path representing project_location_insight_type_insight resource.
   * @returns {string} A string representing the insight.
   */
  matchInsightFromProjectLocationInsightTypeInsightName(
    projectLocationInsightTypeInsightName: string
  ) {
    return this.pathTemplates.projectLocationInsightTypeInsightPathTemplate.match(
      projectLocationInsightTypeInsightName
    ).insight;
  }

  /**
   * Return a fully-qualified projectLocationRecommender resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} recommender
   * @returns {string} Resource name string.
   */
  projectLocationRecommenderPath(
    project: string,
    location: string,
    recommender: string
  ) {
    return this.pathTemplates.projectLocationRecommenderPathTemplate.render({
      project: project,
      location: location,
      recommender: recommender,
    });
  }

  /**
   * Parse the project from ProjectLocationRecommender resource.
   *
   * @param {string} projectLocationRecommenderName
   *   A fully-qualified path representing project_location_recommender resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationRecommenderName(
    projectLocationRecommenderName: string
  ) {
    return this.pathTemplates.projectLocationRecommenderPathTemplate.match(
      projectLocationRecommenderName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationRecommender resource.
   *
   * @param {string} projectLocationRecommenderName
   *   A fully-qualified path representing project_location_recommender resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationRecommenderName(
    projectLocationRecommenderName: string
  ) {
    return this.pathTemplates.projectLocationRecommenderPathTemplate.match(
      projectLocationRecommenderName
    ).location;
  }

  /**
   * Parse the recommender from ProjectLocationRecommender resource.
   *
   * @param {string} projectLocationRecommenderName
   *   A fully-qualified path representing project_location_recommender resource.
   * @returns {string} A string representing the recommender.
   */
  matchRecommenderFromProjectLocationRecommenderName(
    projectLocationRecommenderName: string
  ) {
    return this.pathTemplates.projectLocationRecommenderPathTemplate.match(
      projectLocationRecommenderName
    ).recommender;
  }

  /**
   * Return a fully-qualified projectLocationRecommenderRecommendation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} recommender
   * @param {string} recommendation
   * @returns {string} Resource name string.
   */
  projectLocationRecommenderRecommendationPath(
    project: string,
    location: string,
    recommender: string,
    recommendation: string
  ) {
    return this.pathTemplates.projectLocationRecommenderRecommendationPathTemplate.render(
      {
        project: project,
        location: location,
        recommender: recommender,
        recommendation: recommendation,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationRecommenderRecommendation resource.
   *
   * @param {string} projectLocationRecommenderRecommendationName
   *   A fully-qualified path representing project_location_recommender_recommendation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationRecommenderRecommendationName(
    projectLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.projectLocationRecommenderRecommendationPathTemplate.match(
      projectLocationRecommenderRecommendationName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationRecommenderRecommendation resource.
   *
   * @param {string} projectLocationRecommenderRecommendationName
   *   A fully-qualified path representing project_location_recommender_recommendation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationRecommenderRecommendationName(
    projectLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.projectLocationRecommenderRecommendationPathTemplate.match(
      projectLocationRecommenderRecommendationName
    ).location;
  }

  /**
   * Parse the recommender from ProjectLocationRecommenderRecommendation resource.
   *
   * @param {string} projectLocationRecommenderRecommendationName
   *   A fully-qualified path representing project_location_recommender_recommendation resource.
   * @returns {string} A string representing the recommender.
   */
  matchRecommenderFromProjectLocationRecommenderRecommendationName(
    projectLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.projectLocationRecommenderRecommendationPathTemplate.match(
      projectLocationRecommenderRecommendationName
    ).recommender;
  }

  /**
   * Parse the recommendation from ProjectLocationRecommenderRecommendation resource.
   *
   * @param {string} projectLocationRecommenderRecommendationName
   *   A fully-qualified path representing project_location_recommender_recommendation resource.
   * @returns {string} A string representing the recommendation.
   */
  matchRecommendationFromProjectLocationRecommenderRecommendationName(
    projectLocationRecommenderRecommendationName: string
  ) {
    return this.pathTemplates.projectLocationRecommenderRecommendationPathTemplate.match(
      projectLocationRecommenderRecommendationName
    ).recommendation;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.recommenderStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
